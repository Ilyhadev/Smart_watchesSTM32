
Mini-node Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b94  08003bbc  08003bbc  00004bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005750  08005750  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005750  08005750  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005750  08005750  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005750  08005750  00006750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005754  08005754  00006754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005758  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  2000005c  080057b4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  080057b4  0000772c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082ce  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a29  00000000  00000000  0000f353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00010d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000678  00000000  00000000  00011618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001831b  00000000  00000000  00011c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b422  00000000  00000000  00029fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d73  00000000  00000000  000353cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000269c  00000000  00000000  000b9184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000bb820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ba4 	.word	0x08003ba4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08003ba4 	.word	0x08003ba4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <HAL_Init+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <HAL_Init+0x28>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f92b 	bl	8000b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f002 fed6 	bl	80036f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f935 	bl	8000be6 <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f90b 	bl	8000bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	@ (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004
 80009b4:	20000000 	.word	0x20000000

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_IncTick+0x1c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_IncTick+0x20>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a03      	ldr	r2, [pc, #12]	@ (80009d8 <HAL_IncTick+0x20>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	20000004 	.word	0x20000004
 80009d8:	20000078 	.word	0x20000078

080009dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b02      	ldr	r3, [pc, #8]	@ (80009ec <HAL_GetTick+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	20000078 	.word	0x20000078

080009f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff fff0 	bl	80009dc <HAL_GetTick>
 80009fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d005      	beq.n	8000a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_Delay+0x44>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a16:	bf00      	nop
 8000a18:	f7ff ffe0 	bl	80009dc <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8f7      	bhi.n	8000a18 <HAL_Delay+0x28>
  {
  }
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000004 	.word	0x20000004

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	@ (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	@ (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	@ 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b64:	d301      	bcc.n	8000b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00f      	b.n	8000b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <SysTick_Config+0x40>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b72:	210f      	movs	r1, #15
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f7ff ff90 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <SysTick_Config+0x40>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b82:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <SysTick_Config+0x40>)
 8000b84:	2207      	movs	r2, #7
 8000b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	e000e010 	.word	0xe000e010

08000b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ff49 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
 8000bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc0:	f7ff ff5e 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	6978      	ldr	r0, [r7, #20]
 8000bcc:	f7ff ff90 	bl	8000af0 <NVIC_EncodePriority>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff5f 	bl	8000a9c <__NVIC_SetPriority>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffb0 	bl	8000b54 <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b08b      	sub	sp, #44	@ 0x2c
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e169      	b.n	8000ee8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c14:	2201      	movs	r2, #1
 8000c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	f040 8158 	bne.w	8000ee2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	4a9a      	ldr	r2, [pc, #616]	@ (8000ea0 <HAL_GPIO_Init+0x2a0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d05e      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c3c:	4a98      	ldr	r2, [pc, #608]	@ (8000ea0 <HAL_GPIO_Init+0x2a0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d875      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c42:	4a98      	ldr	r2, [pc, #608]	@ (8000ea4 <HAL_GPIO_Init+0x2a4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d058      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c48:	4a96      	ldr	r2, [pc, #600]	@ (8000ea4 <HAL_GPIO_Init+0x2a4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d86f      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c4e:	4a96      	ldr	r2, [pc, #600]	@ (8000ea8 <HAL_GPIO_Init+0x2a8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d052      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c54:	4a94      	ldr	r2, [pc, #592]	@ (8000ea8 <HAL_GPIO_Init+0x2a8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d869      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c5a:	4a94      	ldr	r2, [pc, #592]	@ (8000eac <HAL_GPIO_Init+0x2ac>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d04c      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c60:	4a92      	ldr	r2, [pc, #584]	@ (8000eac <HAL_GPIO_Init+0x2ac>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d863      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c66:	4a92      	ldr	r2, [pc, #584]	@ (8000eb0 <HAL_GPIO_Init+0x2b0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d046      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c6c:	4a90      	ldr	r2, [pc, #576]	@ (8000eb0 <HAL_GPIO_Init+0x2b0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d85d      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d82a      	bhi.n	8000ccc <HAL_GPIO_Init+0xcc>
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d859      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c80 <HAL_GPIO_Init+0x80>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000cfb 	.word	0x08000cfb
 8000c84:	08000cd5 	.word	0x08000cd5
 8000c88:	08000ce7 	.word	0x08000ce7
 8000c8c:	08000d29 	.word	0x08000d29
 8000c90:	08000d2f 	.word	0x08000d2f
 8000c94:	08000d2f 	.word	0x08000d2f
 8000c98:	08000d2f 	.word	0x08000d2f
 8000c9c:	08000d2f 	.word	0x08000d2f
 8000ca0:	08000d2f 	.word	0x08000d2f
 8000ca4:	08000d2f 	.word	0x08000d2f
 8000ca8:	08000d2f 	.word	0x08000d2f
 8000cac:	08000d2f 	.word	0x08000d2f
 8000cb0:	08000d2f 	.word	0x08000d2f
 8000cb4:	08000d2f 	.word	0x08000d2f
 8000cb8:	08000d2f 	.word	0x08000d2f
 8000cbc:	08000d2f 	.word	0x08000d2f
 8000cc0:	08000d2f 	.word	0x08000d2f
 8000cc4:	08000cdd 	.word	0x08000cdd
 8000cc8:	08000cf1 	.word	0x08000cf1
 8000ccc:	4a79      	ldr	r2, [pc, #484]	@ (8000eb4 <HAL_GPIO_Init+0x2b4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d013      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cd2:	e02c      	b.n	8000d2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	623b      	str	r3, [r7, #32]
          break;
 8000cda:	e029      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e024      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	3308      	adds	r3, #8
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e01f      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	330c      	adds	r3, #12
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e01a      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d02:	2304      	movs	r3, #4
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e013      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d105      	bne.n	8000d1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	611a      	str	r2, [r3, #16]
          break;
 8000d1a:	e009      	b.n	8000d30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	615a      	str	r2, [r3, #20]
          break;
 8000d26:	e003      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
          break;
 8000d2c:	e000      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          break;
 8000d2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2bff      	cmp	r3, #255	@ 0xff
 8000d34:	d801      	bhi.n	8000d3a <HAL_GPIO_Init+0x13a>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	e001      	b.n	8000d3e <HAL_GPIO_Init+0x13e>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	2bff      	cmp	r3, #255	@ 0xff
 8000d44:	d802      	bhi.n	8000d4c <HAL_GPIO_Init+0x14c>
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	e002      	b.n	8000d52 <HAL_GPIO_Init+0x152>
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4e:	3b08      	subs	r3, #8
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	210f      	movs	r1, #15
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	401a      	ands	r2, r3
 8000d64:	6a39      	ldr	r1, [r7, #32]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80b1 	beq.w	8000ee2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d80:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb8 <HAL_GPIO_Init+0x2b8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb8 <HAL_GPIO_Init+0x2b8>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb8 <HAL_GPIO_Init+0x2b8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d98:	4a48      	ldr	r2, [pc, #288]	@ (8000ebc <HAL_GPIO_Init+0x2bc>)
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	3302      	adds	r3, #2
 8000da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a40      	ldr	r2, [pc, #256]	@ (8000ec0 <HAL_GPIO_Init+0x2c0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d013      	beq.n	8000dec <HAL_GPIO_Init+0x1ec>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ec4 <HAL_GPIO_Init+0x2c4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d00d      	beq.n	8000de8 <HAL_GPIO_Init+0x1e8>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a3e      	ldr	r2, [pc, #248]	@ (8000ec8 <HAL_GPIO_Init+0x2c8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d007      	beq.n	8000de4 <HAL_GPIO_Init+0x1e4>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ecc <HAL_GPIO_Init+0x2cc>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d101      	bne.n	8000de0 <HAL_GPIO_Init+0x1e0>
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e006      	b.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000de0:	2304      	movs	r3, #4
 8000de2:	e004      	b.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e002      	b.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000dec:	2300      	movs	r3, #0
 8000dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000df0:	f002 0203 	and.w	r2, r2, #3
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	4093      	lsls	r3, r2
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfe:	492f      	ldr	r1, [pc, #188]	@ (8000ebc <HAL_GPIO_Init+0x2bc>)
 8000e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e18:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	492c      	ldr	r1, [pc, #176]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4928      	ldr	r1, [pc, #160]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e40:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	4922      	ldr	r1, [pc, #136]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	491e      	ldr	r1, [pc, #120]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e68:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	4918      	ldr	r1, [pc, #96]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4914      	ldr	r1, [pc, #80]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d021      	beq.n	8000ed4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	490e      	ldr	r1, [pc, #56]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
 8000e9c:	e021      	b.n	8000ee2 <HAL_GPIO_Init+0x2e2>
 8000e9e:	bf00      	nop
 8000ea0:	10320000 	.word	0x10320000
 8000ea4:	10310000 	.word	0x10310000
 8000ea8:	10220000 	.word	0x10220000
 8000eac:	10210000 	.word	0x10210000
 8000eb0:	10120000 	.word	0x10120000
 8000eb4:	10110000 	.word	0x10110000
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	40011000 	.word	0x40011000
 8000ecc:	40011400 	.word	0x40011400
 8000ed0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <HAL_GPIO_Init+0x304>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4909      	ldr	r1, [pc, #36]	@ (8000f04 <HAL_GPIO_Init+0x304>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f47f ae8e 	bne.w	8000c14 <HAL_GPIO_Init+0x14>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	372c      	adds	r7, #44	@ 0x2c
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40010400 	.word	0x40010400

08000f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e12b      	b.n	8001172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d106      	bne.n	8000f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f002 fc14 	bl	800375c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2224      	movs	r2, #36	@ 0x24
 8000f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f6c:	f001 fd5a 	bl	8002a24 <HAL_RCC_GetPCLK1Freq>
 8000f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a81      	ldr	r2, [pc, #516]	@ (800117c <HAL_I2C_Init+0x274>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d807      	bhi.n	8000f8c <HAL_I2C_Init+0x84>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4a80      	ldr	r2, [pc, #512]	@ (8001180 <HAL_I2C_Init+0x278>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	bf94      	ite	ls
 8000f84:	2301      	movls	r3, #1
 8000f86:	2300      	movhi	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	e006      	b.n	8000f9a <HAL_I2C_Init+0x92>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8001184 <HAL_I2C_Init+0x27c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	bf94      	ite	ls
 8000f94:	2301      	movls	r3, #1
 8000f96:	2300      	movhi	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e0e7      	b.n	8001172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4a78      	ldr	r2, [pc, #480]	@ (8001188 <HAL_I2C_Init+0x280>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	0c9b      	lsrs	r3, r3, #18
 8000fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800117c <HAL_I2C_Init+0x274>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d802      	bhi.n	8000fdc <HAL_I2C_Init+0xd4>
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	e009      	b.n	8000ff0 <HAL_I2C_Init+0xe8>
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	4a69      	ldr	r2, [pc, #420]	@ (800118c <HAL_I2C_Init+0x284>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	099b      	lsrs	r3, r3, #6
 8000fee:	3301      	adds	r3, #1
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001002:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	495c      	ldr	r1, [pc, #368]	@ (800117c <HAL_I2C_Init+0x274>)
 800100c:	428b      	cmp	r3, r1
 800100e:	d819      	bhi.n	8001044 <HAL_I2C_Init+0x13c>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1e59      	subs	r1, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fbb1 f3f3 	udiv	r3, r1, r3
 800101e:	1c59      	adds	r1, r3, #1
 8001020:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001024:	400b      	ands	r3, r1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00a      	beq.n	8001040 <HAL_I2C_Init+0x138>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1e59      	subs	r1, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fbb1 f3f3 	udiv	r3, r1, r3
 8001038:	3301      	adds	r3, #1
 800103a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103e:	e051      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 8001040:	2304      	movs	r3, #4
 8001042:	e04f      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d111      	bne.n	8001070 <HAL_I2C_Init+0x168>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	1e58      	subs	r0, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6859      	ldr	r1, [r3, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	440b      	add	r3, r1
 800105a:	fbb0 f3f3 	udiv	r3, r0, r3
 800105e:	3301      	adds	r3, #1
 8001060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	e012      	b.n	8001096 <HAL_I2C_Init+0x18e>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1e58      	subs	r0, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6859      	ldr	r1, [r3, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	0099      	lsls	r1, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	fbb0 f3f3 	udiv	r3, r0, r3
 8001086:	3301      	adds	r3, #1
 8001088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf0c      	ite	eq
 8001090:	2301      	moveq	r3, #1
 8001092:	2300      	movne	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_I2C_Init+0x196>
 800109a:	2301      	movs	r3, #1
 800109c:	e022      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10e      	bne.n	80010c4 <HAL_I2C_Init+0x1bc>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1e58      	subs	r0, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6859      	ldr	r1, [r3, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	440b      	add	r3, r1
 80010b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010b8:	3301      	adds	r3, #1
 80010ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010c2:	e00f      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1e58      	subs	r0, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6859      	ldr	r1, [r3, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	0099      	lsls	r1, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	6809      	ldr	r1, [r1, #0]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69da      	ldr	r2, [r3, #28]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001112:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6911      	ldr	r1, [r2, #16]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68d2      	ldr	r2, [r2, #12]
 800111e:	4311      	orrs	r1, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	430b      	orrs	r3, r1
 8001126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2220      	movs	r2, #32
 800115e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	000186a0 	.word	0x000186a0
 8001180:	001e847f 	.word	0x001e847f
 8001184:	003d08ff 	.word	0x003d08ff
 8001188:	431bde83 	.word	0x431bde83
 800118c:	10624dd3 	.word	0x10624dd3

08001190 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	461a      	mov	r2, r3
 800119c:	460b      	mov	r3, r1
 800119e:	817b      	strh	r3, [r7, #10]
 80011a0:	4613      	mov	r3, r2
 80011a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fc1a 	bl	80009dc <HAL_GetTick>
 80011a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b20      	cmp	r3, #32
 80011b4:	f040 80e0 	bne.w	8001378 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2319      	movs	r3, #25
 80011be:	2201      	movs	r2, #1
 80011c0:	4970      	ldr	r1, [pc, #448]	@ (8001384 <HAL_I2C_Master_Transmit+0x1f4>)
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 fe2e 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80011ce:	2302      	movs	r3, #2
 80011d0:	e0d3      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_I2C_Master_Transmit+0x50>
 80011dc:	2302      	movs	r3, #2
 80011de:	e0cc      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d007      	beq.n	8001206 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0201 	orr.w	r2, r2, #1
 8001204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2221      	movs	r2, #33	@ 0x21
 800121a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2210      	movs	r2, #16
 8001222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	893a      	ldrh	r2, [r7, #8]
 8001236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800123c:	b29a      	uxth	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4a50      	ldr	r2, [pc, #320]	@ (8001388 <HAL_I2C_Master_Transmit+0x1f8>)
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001248:	8979      	ldrh	r1, [r7, #10]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	6a3a      	ldr	r2, [r7, #32]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 fc02 	bl	8001a58 <I2C_MasterRequestWrite>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e08d      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001274:	e066      	b.n	8001344 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	6a39      	ldr	r1, [r7, #32]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 feec 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00d      	beq.n	80012a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	2b04      	cmp	r3, #4
 800128c:	d107      	bne.n	800129e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800129c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06b      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3b01      	subs	r3, #1
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ca:	3b01      	subs	r3, #1
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d11b      	bne.n	8001318 <HAL_I2C_Master_Transmit+0x188>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d017      	beq.n	8001318 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	6a39      	ldr	r1, [r7, #32]
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f000 fee3 	bl	80020e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00d      	beq.n	8001344 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	2b04      	cmp	r3, #4
 800132e:	d107      	bne.n	8001340 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800133e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e01a      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001348:	2b00      	cmp	r3, #0
 800134a:	d194      	bne.n	8001276 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800135a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2220      	movs	r2, #32
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001378:	2302      	movs	r3, #2
  }
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	00100002 	.word	0x00100002
 8001388:	ffff0000 	.word	0xffff0000

0800138c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	@ 0x30
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	461a      	mov	r2, r3
 8001398:	460b      	mov	r3, r1
 800139a:	817b      	strh	r3, [r7, #10]
 800139c:	4613      	mov	r3, r2
 800139e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff fb1a 	bl	80009dc <HAL_GetTick>
 80013a8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b20      	cmp	r3, #32
 80013b4:	f040 824b 	bne.w	800184e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2319      	movs	r3, #25
 80013be:	2201      	movs	r2, #1
 80013c0:	497f      	ldr	r1, [pc, #508]	@ (80015c0 <HAL_I2C_Master_Receive+0x234>)
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 fd2e 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80013ce:	2302      	movs	r3, #2
 80013d0:	e23e      	b.n	8001850 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_I2C_Master_Receive+0x54>
 80013dc:	2302      	movs	r3, #2
 80013de:	e237      	b.n	8001850 <HAL_I2C_Master_Receive+0x4c4>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d007      	beq.n	8001406 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001414:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2222      	movs	r2, #34	@ 0x22
 800141a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2210      	movs	r2, #16
 8001422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	893a      	ldrh	r2, [r7, #8]
 8001436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800143c:	b29a      	uxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a5f      	ldr	r2, [pc, #380]	@ (80015c4 <HAL_I2C_Master_Receive+0x238>)
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001448:	8979      	ldrh	r1, [r7, #10]
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fb84 	bl	8001b5c <I2C_MasterRequestRead>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e1f8      	b.n	8001850 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001462:	2b00      	cmp	r3, #0
 8001464:	d113      	bne.n	800148e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e1cc      	b.n	8001828 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001492:	2b01      	cmp	r3, #1
 8001494:	d11e      	bne.n	80014d4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014a4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a6:	b672      	cpsid	i
}
 80014a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014d0:	b662      	cpsie	i
}
 80014d2:	e035      	b.n	8001540 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d11e      	bne.n	800151a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001514:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001516:	b662      	cpsie	i
}
 8001518:	e012      	b.n	8001540 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001540:	e172      	b.n	8001828 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001546:	2b03      	cmp	r3, #3
 8001548:	f200 811f 	bhi.w	800178a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001550:	2b01      	cmp	r3, #1
 8001552:	d123      	bne.n	800159c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001556:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fe0d 	bl	8002178 <I2C_WaitOnRXNEFlagUntilTimeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e173      	b.n	8001850 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001584:	3b01      	subs	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001590:	b29b      	uxth	r3, r3
 8001592:	3b01      	subs	r3, #1
 8001594:	b29a      	uxth	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800159a:	e145      	b.n	8001828 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d152      	bne.n	800164a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015aa:	2200      	movs	r2, #0
 80015ac:	4906      	ldr	r1, [pc, #24]	@ (80015c8 <HAL_I2C_Master_Receive+0x23c>)
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fc38 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e148      	b.n	8001850 <HAL_I2C_Master_Receive+0x4c4>
 80015be:	bf00      	nop
 80015c0:	00100002 	.word	0x00100002
 80015c4:	ffff0000 	.word	0xffff0000
 80015c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001608:	b29b      	uxth	r3, r3
 800160a:	3b01      	subs	r3, #1
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001612:	b662      	cpsie	i
}
 8001614:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800163e:	b29b      	uxth	r3, r3
 8001640:	3b01      	subs	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001648:	e0ee      	b.n	8001828 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001650:	2200      	movs	r2, #0
 8001652:	4981      	ldr	r1, [pc, #516]	@ (8001858 <HAL_I2C_Master_Receive+0x4cc>)
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fbe5 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0f5      	b.n	8001850 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001672:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001694:	3b01      	subs	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80016aa:	4b6c      	ldr	r3, [pc, #432]	@ (800185c <HAL_I2C_Master_Receive+0x4d0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	08db      	lsrs	r3, r3, #3
 80016b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001860 <HAL_I2C_Master_Receive+0x4d4>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0a1a      	lsrs	r2, r3, #8
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	00da      	lsls	r2, r3, #3
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d118      	bne.n	8001702 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2220      	movs	r2, #32
 80016da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f043 0220 	orr.w	r2, r3, #32
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80016f2:	b662      	cpsie	i
}
 80016f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0a6      	b.n	8001850 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b04      	cmp	r3, #4
 800170e:	d1d9      	bne.n	80016c4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800171e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001752:	b662      	cpsie	i
}
 8001754:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001788:	e04e      	b.n	8001828 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800178a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800178c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fcf2 	bl	8002178 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e058      	b.n	8001850 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d124      	bne.n	8001828 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017f4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	f47f ae88 	bne.w	8001542 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2220      	movs	r2, #32
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800184e:	2302      	movs	r3, #2
  }
}
 8001850:	4618      	mov	r0, r3
 8001852:	3728      	adds	r7, #40	@ 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	00010004 	.word	0x00010004
 800185c:	20000008 	.word	0x20000008
 8001860:	14f8b589 	.word	0x14f8b589

08001864 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4603      	mov	r3, r0
 8001874:	817b      	strh	r3, [r7, #10]
 8001876:	460b      	mov	r3, r1
 8001878:	813b      	strh	r3, [r7, #8]
 800187a:	4613      	mov	r3, r2
 800187c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800187e:	f7ff f8ad 	bl	80009dc <HAL_GetTick>
 8001882:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b20      	cmp	r3, #32
 800188e:	f040 80d9 	bne.w	8001a44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2319      	movs	r3, #25
 8001898:	2201      	movs	r2, #1
 800189a:	496d      	ldr	r1, [pc, #436]	@ (8001a50 <HAL_I2C_Mem_Write+0x1ec>)
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 fac1 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
 80018aa:	e0cc      	b.n	8001a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_I2C_Mem_Write+0x56>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e0c5      	b.n	8001a46 <HAL_I2C_Mem_Write+0x1e2>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d007      	beq.n	80018e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2221      	movs	r2, #33	@ 0x21
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2240      	movs	r2, #64	@ 0x40
 80018fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a3a      	ldr	r2, [r7, #32]
 800190a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001910:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a4d      	ldr	r2, [pc, #308]	@ (8001a54 <HAL_I2C_Mem_Write+0x1f0>)
 8001920:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001922:	88f8      	ldrh	r0, [r7, #6]
 8001924:	893a      	ldrh	r2, [r7, #8]
 8001926:	8979      	ldrh	r1, [r7, #10]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4603      	mov	r3, r0
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f9e0 	bl	8001cf8 <I2C_RequestMemoryWrite>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d052      	beq.n	80019e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e081      	b.n	8001a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 fb86 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00d      	beq.n	800196e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	2b04      	cmp	r3, #4
 8001958:	d107      	bne.n	800196a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e06b      	b.n	8001a46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d11b      	bne.n	80019e4 <HAL_I2C_Mem_Write+0x180>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d017      	beq.n	80019e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1aa      	bne.n	8001942 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fb79 	bl	80020e8 <I2C_WaitOnBTFFlagUntilTimeout>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00d      	beq.n	8001a18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d107      	bne.n	8001a14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e016      	b.n	8001a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e000      	b.n	8001a46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a44:	2302      	movs	r3, #2
  }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	00100002 	.word	0x00100002
 8001a54:	ffff0000 	.word	0xffff0000

08001a58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	460b      	mov	r3, r1
 8001a66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d006      	beq.n	8001a82 <I2C_MasterRequestWrite+0x2a>
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d003      	beq.n	8001a82 <I2C_MasterRequestWrite+0x2a>
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a80:	d108      	bne.n	8001a94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e00b      	b.n	8001aac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a98:	2b12      	cmp	r3, #18
 8001a9a:	d107      	bne.n	8001aac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001aaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9b3 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00d      	beq.n	8001ae0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad2:	d103      	bne.n	8001adc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ada:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e035      	b.n	8001b4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ae8:	d108      	bne.n	8001afc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aea:	897b      	ldrh	r3, [r7, #10]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	e01b      	b.n	8001b34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001afc:	897b      	ldrh	r3, [r7, #10]
 8001afe:	11db      	asrs	r3, r3, #7
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f003 0306 	and.w	r3, r3, #6
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f063 030f 	orn	r3, r3, #15
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <I2C_MasterRequestWrite+0xfc>)
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f9fc 	bl	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e010      	b.n	8001b4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b2a:	897b      	ldrh	r3, [r7, #10]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4907      	ldr	r1, [pc, #28]	@ (8001b58 <I2C_MasterRequestWrite+0x100>)
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f9ec 	bl	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	00010008 	.word	0x00010008
 8001b58:	00010002 	.word	0x00010002

08001b5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d006      	beq.n	8001b96 <I2C_MasterRequestRead+0x3a>
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d003      	beq.n	8001b96 <I2C_MasterRequestRead+0x3a>
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b94:	d108      	bne.n	8001ba8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e00b      	b.n	8001bc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	2b11      	cmp	r3, #17
 8001bae:	d107      	bne.n	8001bc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f929 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00d      	beq.n	8001bf4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001be6:	d103      	bne.n	8001bf0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e079      	b.n	8001ce8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bfc:	d108      	bne.n	8001c10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001bfe:	897b      	ldrh	r3, [r7, #10]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	e05f      	b.n	8001cd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c10:	897b      	ldrh	r3, [r7, #10]
 8001c12:	11db      	asrs	r3, r3, #7
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 0306 	and.w	r3, r3, #6
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f063 030f 	orn	r3, r3, #15
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4930      	ldr	r1, [pc, #192]	@ (8001cf0 <I2C_MasterRequestRead+0x194>)
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f972 	bl	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e054      	b.n	8001ce8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c3e:	897b      	ldrh	r3, [r7, #10]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4929      	ldr	r1, [pc, #164]	@ (8001cf4 <I2C_MasterRequestRead+0x198>)
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f962 	bl	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e044      	b.n	8001ce8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 f8c7 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00d      	beq.n	8001cb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001caa:	d103      	bne.n	8001cb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e017      	b.n	8001ce8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	11db      	asrs	r3, r3, #7
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f003 0306 	and.w	r3, r3, #6
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f063 030e 	orn	r3, r3, #14
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4907      	ldr	r1, [pc, #28]	@ (8001cf4 <I2C_MasterRequestRead+0x198>)
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f91e 	bl	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	00010008 	.word	0x00010008
 8001cf4:	00010002 	.word	0x00010002

08001cf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	4608      	mov	r0, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	817b      	strh	r3, [r7, #10]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	813b      	strh	r3, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f878 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00d      	beq.n	8001d56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d48:	d103      	bne.n	8001d52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e05f      	b.n	8001e16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d56:	897b      	ldrh	r3, [r7, #10]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	6a3a      	ldr	r2, [r7, #32]
 8001d6a:	492d      	ldr	r1, [pc, #180]	@ (8001e20 <I2C_RequestMemoryWrite+0x128>)
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f8d3 	bl	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e04c      	b.n	8001e16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d94:	6a39      	ldr	r1, [r7, #32]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f95e 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00d      	beq.n	8001dbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d107      	bne.n	8001dba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e02b      	b.n	8001e16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	611a      	str	r2, [r3, #16]
 8001dce:	e021      	b.n	8001e14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001dd0:	893b      	ldrh	r3, [r7, #8]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de0:	6a39      	ldr	r1, [r7, #32]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f938 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d107      	bne.n	8001e06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e005      	b.n	8001e16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e0a:	893b      	ldrh	r3, [r7, #8]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	00010002 	.word	0x00010002

08001e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e34:	e048      	b.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d044      	beq.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3e:	f7fe fdcd 	bl	80009dc <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d302      	bcc.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d139      	bne.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0c1b      	lsrs	r3, r3, #16
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10d      	bne.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	43da      	mvns	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	e00c      	b.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4013      	ands	r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d116      	bne.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f043 0220 	orr.w	r2, r3, #32
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e023      	b.n	8001f10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	0c1b      	lsrs	r3, r3, #16
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d10d      	bne.n	8001eee <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4013      	ands	r3, r2
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	e00c      	b.n	8001f08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d093      	beq.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f26:	e071      	b.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f36:	d123      	bne.n	8001f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	f043 0204 	orr.w	r2, r3, #4
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e067      	b.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d041      	beq.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f88:	f7fe fd28 	bl	80009dc <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d302      	bcc.n	8001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d136      	bne.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10c      	bne.n	8001fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf14      	ite	ne
 8001fba:	2301      	movne	r3, #1
 8001fbc:	2300      	moveq	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	e00b      	b.n	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e021      	b.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10c      	bne.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e00b      	b.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4013      	ands	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf14      	ite	ne
 8002042:	2301      	movne	r3, #1
 8002044:	2300      	moveq	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f af6d 	bne.w	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002064:	e034      	b.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f8e3 	bl	8002232 <I2C_IsAcknowledgeFailed>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e034      	b.n	80020e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d028      	beq.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7fe fcad 	bl	80009dc <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d11d      	bne.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209e:	2b80      	cmp	r3, #128	@ 0x80
 80020a0:	d016      	beq.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e007      	b.n	80020e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020da:	2b80      	cmp	r3, #128	@ 0x80
 80020dc:	d1c3      	bne.n	8002066 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020f4:	e034      	b.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f89b 	bl	8002232 <I2C_IsAcknowledgeFailed>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e034      	b.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d028      	beq.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7fe fc65 	bl	80009dc <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	429a      	cmp	r2, r3
 800211c:	d302      	bcc.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d11d      	bne.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b04      	cmp	r3, #4
 8002130:	d016      	beq.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e007      	b.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d1c3      	bne.n	80020f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002184:	e049      	b.n	800221a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b10      	cmp	r3, #16
 8002192:	d119      	bne.n	80021c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0210 	mvn.w	r2, #16
 800219c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e030      	b.n	800222a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c8:	f7fe fc08 	bl	80009dc <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d302      	bcc.n	80021de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11d      	bne.n	800221a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e8:	2b40      	cmp	r3, #64	@ 0x40
 80021ea:	d016      	beq.n	800221a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f043 0220 	orr.w	r2, r3, #32
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e007      	b.n	800222a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002224:	2b40      	cmp	r3, #64	@ 0x40
 8002226:	d1ae      	bne.n	8002186 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002248:	d11b      	bne.n	8002282 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002252:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f043 0204 	orr.w	r2, r3, #4
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
	...

08002290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e272      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8087 	beq.w	80023be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022b0:	4b92      	ldr	r3, [pc, #584]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d00c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022bc:	4b8f      	ldr	r3, [pc, #572]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d112      	bne.n	80022ee <HAL_RCC_OscConfig+0x5e>
 80022c8:	4b8c      	ldr	r3, [pc, #560]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d4:	d10b      	bne.n	80022ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d6:	4b89      	ldr	r3, [pc, #548]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d06c      	beq.n	80023bc <HAL_RCC_OscConfig+0x12c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d168      	bne.n	80023bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e24c      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x76>
 80022f8:	4b80      	ldr	r3, [pc, #512]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a7f      	ldr	r2, [pc, #508]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	e02e      	b.n	8002364 <HAL_RCC_OscConfig+0xd4>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x98>
 800230e:	4b7b      	ldr	r3, [pc, #492]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a7a      	ldr	r2, [pc, #488]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b78      	ldr	r3, [pc, #480]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a77      	ldr	r2, [pc, #476]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002320:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e01d      	b.n	8002364 <HAL_RCC_OscConfig+0xd4>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0xbc>
 8002332:	4b72      	ldr	r3, [pc, #456]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a71      	ldr	r2, [pc, #452]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b6f      	ldr	r3, [pc, #444]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6e      	ldr	r2, [pc, #440]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0xd4>
 800234c:	4b6b      	ldr	r3, [pc, #428]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6a      	ldr	r2, [pc, #424]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b68      	ldr	r3, [pc, #416]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a67      	ldr	r2, [pc, #412]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 800235e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002362:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fb36 	bl	80009dc <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe fb32 	bl	80009dc <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	@ 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e200      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b5d      	ldr	r3, [pc, #372]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0xe4>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fb22 	bl	80009dc <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239c:	f7fe fb1e 	bl	80009dc <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	@ 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1ec      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	4b53      	ldr	r3, [pc, #332]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x10c>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d063      	beq.n	8002492 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ca:	4b4c      	ldr	r3, [pc, #304]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023d6:	4b49      	ldr	r3, [pc, #292]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d11c      	bne.n	800241c <HAL_RCC_OscConfig+0x18c>
 80023e2:	4b46      	ldr	r3, [pc, #280]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d116      	bne.n	800241c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	4b43      	ldr	r3, [pc, #268]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_RCC_OscConfig+0x176>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d001      	beq.n	8002406 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e1c0      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4939      	ldr	r1, [pc, #228]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	e03a      	b.n	8002492 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002424:	4b36      	ldr	r3, [pc, #216]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe fad7 	bl	80009dc <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002432:	f7fe fad3 	bl	80009dc <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1a1      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002450:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4927      	ldr	r1, [pc, #156]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
 8002464:	e015      	b.n	8002492 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002466:	4b26      	ldr	r3, [pc, #152]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe fab6 	bl	80009dc <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002474:	f7fe fab2 	bl	80009dc <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e180      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d03a      	beq.n	8002514 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d019      	beq.n	80024da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a6:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <HAL_RCC_OscConfig+0x274>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fa96 	bl	80009dc <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe fa92 	bl	80009dc <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e160      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <HAL_RCC_OscConfig+0x26c>)
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f000 faba 	bl	8002a4c <RCC_Delay>
 80024d8:	e01c      	b.n	8002514 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_RCC_OscConfig+0x274>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7fe fa7c 	bl	80009dc <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e6:	e00f      	b.n	8002508 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe fa78 	bl	80009dc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d908      	bls.n	8002508 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e146      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	42420000 	.word	0x42420000
 8002504:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4b92      	ldr	r3, [pc, #584]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e9      	bne.n	80024e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a6 	beq.w	800266e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b8b      	ldr	r3, [pc, #556]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10d      	bne.n	800254e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b88      	ldr	r3, [pc, #544]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a87      	ldr	r2, [pc, #540]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253c:	61d3      	str	r3, [r2, #28]
 800253e:	4b85      	ldr	r3, [pc, #532]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254e:	4b82      	ldr	r3, [pc, #520]	@ (8002758 <HAL_RCC_OscConfig+0x4c8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255a:	4b7f      	ldr	r3, [pc, #508]	@ (8002758 <HAL_RCC_OscConfig+0x4c8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7e      	ldr	r2, [pc, #504]	@ (8002758 <HAL_RCC_OscConfig+0x4c8>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002566:	f7fe fa39 	bl	80009dc <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256e:	f7fe fa35 	bl	80009dc <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b64      	cmp	r3, #100	@ 0x64
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e103      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	4b75      	ldr	r3, [pc, #468]	@ (8002758 <HAL_RCC_OscConfig+0x4c8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x312>
 8002594:	4b6f      	ldr	r3, [pc, #444]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a6e      	ldr	r2, [pc, #440]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	e02d      	b.n	80025fe <HAL_RCC_OscConfig+0x36e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x334>
 80025aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a69      	ldr	r2, [pc, #420]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	6213      	str	r3, [r2, #32]
 80025b6:	4b67      	ldr	r3, [pc, #412]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4a66      	ldr	r2, [pc, #408]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	6213      	str	r3, [r2, #32]
 80025c2:	e01c      	b.n	80025fe <HAL_RCC_OscConfig+0x36e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d10c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x356>
 80025cc:	4b61      	ldr	r3, [pc, #388]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a60      	ldr	r2, [pc, #384]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	6213      	str	r3, [r2, #32]
 80025d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	e00b      	b.n	80025fe <HAL_RCC_OscConfig+0x36e>
 80025e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6213      	str	r3, [r2, #32]
 80025f2:	4b58      	ldr	r3, [pc, #352]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a57      	ldr	r2, [pc, #348]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d015      	beq.n	8002632 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7fe f9e9 	bl	80009dc <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe f9e5 	bl	80009dc <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0b1      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002624:	4b4b      	ldr	r3, [pc, #300]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0ee      	beq.n	800260e <HAL_RCC_OscConfig+0x37e>
 8002630:	e014      	b.n	800265c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7fe f9d3 	bl	80009dc <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f7fe f9cf 	bl	80009dc <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e09b      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002650:	4b40      	ldr	r3, [pc, #256]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1ee      	bne.n	800263a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800265c:	7dfb      	ldrb	r3, [r7, #23]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d105      	bne.n	800266e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002662:	4b3c      	ldr	r3, [pc, #240]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a3b      	ldr	r2, [pc, #236]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8087 	beq.w	8002786 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002678:	4b36      	ldr	r3, [pc, #216]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d061      	beq.n	8002748 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d146      	bne.n	800271a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268c:	4b33      	ldr	r3, [pc, #204]	@ (800275c <HAL_RCC_OscConfig+0x4cc>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe f9a3 	bl	80009dc <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269a:	f7fe f99f 	bl	80009dc <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e06d      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ac:	4b29      	ldr	r3, [pc, #164]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f0      	bne.n	800269a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c0:	d108      	bne.n	80026d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026c2:	4b24      	ldr	r3, [pc, #144]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	4921      	ldr	r1, [pc, #132]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a19      	ldr	r1, [r3, #32]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	430b      	orrs	r3, r1
 80026e6:	491b      	ldr	r1, [pc, #108]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ec:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <HAL_RCC_OscConfig+0x4cc>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe f973 	bl	80009dc <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe f96f 	bl	80009dc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e03d      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800270c:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x46a>
 8002718:	e035      	b.n	8002786 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <HAL_RCC_OscConfig+0x4cc>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe f95c 	bl	80009dc <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe f958 	bl	80009dc <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e026      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x498>
 8002746:	e01e      	b.n	8002786 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e019      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
 8002754:	40021000 	.word	0x40021000
 8002758:	40007000 	.word	0x40007000
 800275c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_RCC_OscConfig+0x500>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	429a      	cmp	r2, r3
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000

08002794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0d0      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d910      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b67      	ldr	r3, [pc, #412]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4965      	ldr	r1, [pc, #404]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b63      	ldr	r3, [pc, #396]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b8      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f0:	4b59      	ldr	r3, [pc, #356]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a58      	ldr	r2, [pc, #352]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002808:	4b53      	ldr	r3, [pc, #332]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a52      	ldr	r2, [pc, #328]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002812:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b50      	ldr	r3, [pc, #320]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	494d      	ldr	r1, [pc, #308]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d040      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b47      	ldr	r3, [pc, #284]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d115      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e07f      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b41      	ldr	r3, [pc, #260]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e073      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3d      	ldr	r3, [pc, #244]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06b      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b39      	ldr	r3, [pc, #228]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4936      	ldr	r1, [pc, #216]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe f8aa 	bl	80009dc <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe f8a6 	bl	80009dc <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e053      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d210      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4922      	ldr	r1, [pc, #136]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e032      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4916      	ldr	r1, [pc, #88]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800290e:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	490e      	ldr	r1, [pc, #56]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002922:	f000 f821 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490a      	ldr	r1, [pc, #40]	@ (800295c <HAL_RCC_ClockConfig+0x1c8>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	fa22 f303 	lsr.w	r3, r2, r3
 800293a:	4a09      	ldr	r2, [pc, #36]	@ (8002960 <HAL_RCC_ClockConfig+0x1cc>)
 800293c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800293e:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <HAL_RCC_ClockConfig+0x1d0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe f808 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000
 8002958:	40021000 	.word	0x40021000
 800295c:	08005738 	.word	0x08005738
 8002960:	20000008 	.word	0x20000008
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002982:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d002      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x30>
 8002992:	2b08      	cmp	r3, #8
 8002994:	d003      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x36>
 8002996:	e027      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x98>)
 800299a:	613b      	str	r3, [r7, #16]
      break;
 800299c:	e027      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	0c9b      	lsrs	r3, r3, #18
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	4a17      	ldr	r2, [pc, #92]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x94>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	0c5b      	lsrs	r3, r3, #17
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	4a11      	ldr	r2, [pc, #68]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ca:	fb03 f202 	mul.w	r2, r3, r2
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e004      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a0c      	ldr	r2, [pc, #48]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xa4>)
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	613b      	str	r3, [r7, #16]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ea:	613b      	str	r3, [r7, #16]
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	693b      	ldr	r3, [r7, #16]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	007a1200 	.word	0x007a1200
 8002a04:	08003bf8 	.word	0x08003bf8
 8002a08:	08003c08 	.word	0x08003c08
 8002a0c:	003d0900 	.word	0x003d0900

08002a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a14:	4b02      	ldr	r3, [pc, #8]	@ (8002a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000008 	.word	0x20000008

08002a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a28:	f7ff fff2 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4903      	ldr	r1, [pc, #12]	@ (8002a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08005748 	.word	0x08005748

08002a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a54:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <RCC_Delay+0x34>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <RCC_Delay+0x38>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0a5b      	lsrs	r3, r3, #9
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a68:	bf00      	nop
  }
  while (Delay --);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	60fa      	str	r2, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f9      	bne.n	8002a68 <RCC_Delay+0x1c>
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	20000008 	.word	0x20000008
 8002a84:	10624dd3 	.word	0x10624dd3

08002a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a8e:	f7fd ff4d 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a92:	f000 f89f 	bl	8002bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a96:	f000 f911 	bl	8002cbc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002a9a:	f000 f8e1 	bl	8002c60 <MX_I2C1_Init>
  ssd1306_Init();
 8002a9e:	f000 fc29 	bl	80032f4 <ssd1306_Init>
  /* USER CODE BEGIN 2 */
  // Initialize MAX30102
    max30102_init(&max30102, &hi2c1);
 8002aa2:	4944      	ldr	r1, [pc, #272]	@ (8002bb4 <main+0x12c>)
 8002aa4:	4844      	ldr	r0, [pc, #272]	@ (8002bb8 <main+0x130>)
 8002aa6:	f000 f947 	bl	8002d38 <max30102_init>
    max30102_reset(&max30102);
 8002aaa:	4843      	ldr	r0, [pc, #268]	@ (8002bb8 <main+0x130>)
 8002aac:	f000 f9bb 	bl	8002e26 <max30102_reset>
    HAL_Delay(100);
 8002ab0:	2064      	movs	r0, #100	@ 0x64
 8002ab2:	f7fd ff9d 	bl	80009f0 <HAL_Delay>

    max30102_clear_fifo(&max30102);
 8002ab6:	4840      	ldr	r0, [pc, #256]	@ (8002bb8 <main+0x130>)
 8002ab8:	f000 fb4a 	bl	8003150 <max30102_clear_fifo>
    max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8002abc:	2307      	movs	r3, #7
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2103      	movs	r1, #3
 8002ac2:	483d      	ldr	r0, [pc, #244]	@ (8002bb8 <main+0x130>)
 8002ac4:	f000 fb08 	bl	80030d8 <max30102_set_fifo_config>

    // Optimized sensor settings for heart rate detection
    max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8002ac8:	2101      	movs	r1, #1
 8002aca:	483b      	ldr	r0, [pc, #236]	@ (8002bb8 <main+0x130>)
 8002acc:	f000 fa6a 	bl	8002fa4 <max30102_set_led_pulse_width>
    max30102_set_adc_resolution(&max30102, max30102_adc_4096);
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4839      	ldr	r0, [pc, #228]	@ (8002bb8 <main+0x130>)
 8002ad4:	f000 fa89 	bl	8002fea <max30102_set_adc_resolution>
    max30102_set_sampling_rate(&max30102, max30102_sr_100); // Lower sampling rate for HR
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4837      	ldr	r0, [pc, #220]	@ (8002bb8 <main+0x130>)
 8002adc:	f000 fa3d 	bl	8002f5a <max30102_set_sampling_rate>
    max30102_set_led_current_1(&max30102, 12.5); // Higher LED current for better signal
 8002ae0:	4936      	ldr	r1, [pc, #216]	@ (8002bbc <main+0x134>)
 8002ae2:	4835      	ldr	r0, [pc, #212]	@ (8002bb8 <main+0x130>)
 8002ae4:	f000 faa8 	bl	8003038 <max30102_set_led_current_1>
    max30102_set_led_current_2(&max30102, 12.5);
 8002ae8:	4934      	ldr	r1, [pc, #208]	@ (8002bbc <main+0x134>)
 8002aea:	4833      	ldr	r0, [pc, #204]	@ (8002bb8 <main+0x130>)
 8002aec:	f000 facc 	bl	8003088 <max30102_set_led_current_2>

    // Enter SpO2 mode (uses both RED and IR LEDs)
    max30102_set_mode(&max30102, max30102_spo2);
 8002af0:	2103      	movs	r1, #3
 8002af2:	4831      	ldr	r0, [pc, #196]	@ (8002bb8 <main+0x130>)
 8002af4:	f000 fa0b 	bl	8002f0e <max30102_set_mode>
    max30102_set_a_full(&max30102, 1);
 8002af8:	2101      	movs	r1, #1
 8002afa:	482f      	ldr	r0, [pc, #188]	@ (8002bb8 <main+0x130>)
 8002afc:	f000 f9a4 	bl	8002e48 <max30102_set_a_full>

  uint8_t en_reg[2] = {0};
 8002b00:	2300      	movs	r3, #0
 8002b02:	803b      	strh	r3, [r7, #0]
  max30102_read(&max30102, 0x00, en_reg, 1);
 8002b04:	463a      	mov	r2, r7
 8002b06:	2301      	movs	r3, #1
 8002b08:	2100      	movs	r1, #0
 8002b0a:	482b      	ldr	r0, [pc, #172]	@ (8002bb8 <main+0x130>)
 8002b0c:	f000 f966 	bl	8002ddc <max30102_read>

  ssd1306_SetCursor(0, 0);
 8002b10:	2100      	movs	r1, #0
 8002b12:	2000      	movs	r0, #0
 8002b14:	f000 fda6 	bl	8003664 <ssd1306_SetCursor>
  ssd1306_WriteString("Россия12", Font_14x15, 1);
 8002b18:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <main+0x138>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	9200      	str	r2, [sp, #0]
 8002b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b20:	4828      	ldr	r0, [pc, #160]	@ (8002bc4 <main+0x13c>)
 8002b22:	f000 fd79 	bl	8003618 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 0);
 8002b26:	2100      	movs	r1, #0
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f000 fd9b 	bl	8003664 <ssd1306_SetCursor>
  ssd1306_UpdateScreen();
 8002b2e:	f000 fc63 	bl	80033f8 <ssd1306_UpdateScreen>
  /*HAL_Delay(100);
  ssd1306_WriteString("               ", Font_14x15, 1);*/

  //ssd1306_WriteString("1234", Font_14x15, 1);
  ssd1306_UpdateScreen();
 8002b32:	f000 fc61 	bl	80033f8 <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 8002b36:	200a      	movs	r0, #10
 8002b38:	f7fd ff5a 	bl	80009f0 <HAL_Delay>
	  max30102_read_fifo(&max30102);
 8002b3c:	481e      	ldr	r0, [pc, #120]	@ (8002bb8 <main+0x130>)
 8002b3e:	f000 fb26 	bl	800318e <max30102_read_fifo>

	  /*uint8_t hr = max30102._ir_samples[0];
	  char stringHr[8] ={0, 0, 0, 0, 0, 0, 0, 0};
	  itoa(hr, stringHr, 10);*/
	  ssd1306_SetCursor(0, 45);
 8002b42:	212d      	movs	r1, #45	@ 0x2d
 8002b44:	2000      	movs	r0, #0
 8002b46:	f000 fd8d 	bl	8003664 <ssd1306_SetCursor>
	  uint32_t irValue = max30102._ir_samples[0];
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <main+0x130>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	607b      	str	r3, [r7, #4]
	  if (irValue>50000){
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d907      	bls.n	8002b6a <main+0xe2>
		  ssd1306_WriteString("Finger :)         ", Font_14x15, 1);
 8002b5a:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <main+0x138>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	9200      	str	r2, [sp, #0]
 8002b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b62:	4819      	ldr	r0, [pc, #100]	@ (8002bc8 <main+0x140>)
 8002b64:	f000 fd58 	bl	8003618 <ssd1306_WriteString>
 8002b68:	e006      	b.n	8002b78 <main+0xf0>
	  } else {
		  ssd1306_WriteString("No Finger :(", Font_14x15, 1);
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <main+0x138>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	9200      	str	r2, [sp, #0]
 8002b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b72:	4816      	ldr	r0, [pc, #88]	@ (8002bcc <main+0x144>)
 8002b74:	f000 fd50 	bl	8003618 <ssd1306_WriteString>
	  }
	  ssd1306_UpdateScreen();
 8002b78:	f000 fc3e 	bl	80033f8 <ssd1306_UpdateScreen>

	  if (max30102_has_interrupt(&max30102))
 8002b7c:	480e      	ldr	r0, [pc, #56]	@ (8002bb8 <main+0x130>)
 8002b7e:	f000 f98c 	bl	8002e9a <max30102_has_interrupt>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <main+0x106>
	      {
	        max30102_interrupt_handler(&max30102);
 8002b88:	480b      	ldr	r0, [pc, #44]	@ (8002bb8 <main+0x130>)
 8002b8a:	f000 f992 	bl	8002eb2 <max30102_interrupt_handler>
	      }
	  HAL_Delay(1000);
 8002b8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b92:	f7fd ff2d 	bl	80009f0 <HAL_Delay>
	  ssd1306_SetCursor(0, 45);
 8002b96:	212d      	movs	r1, #45	@ 0x2d
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f000 fd63 	bl	8003664 <ssd1306_SetCursor>
	  ssd1306_WriteString("        ", Font_14x15, 1);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <main+0x138>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	9200      	str	r2, [sp, #0]
 8002ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba6:	480a      	ldr	r0, [pc, #40]	@ (8002bd0 <main+0x148>)
 8002ba8:	f000 fd36 	bl	8003618 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8002bac:	f000 fc24 	bl	80033f8 <ssd1306_UpdateScreen>
  {
 8002bb0:	e7c1      	b.n	8002b36 <main+0xae>
 8002bb2:	bf00      	nop
 8002bb4:	2000007c 	.word	0x2000007c
 8002bb8:	200000d0 	.word	0x200000d0
 8002bbc:	41480000 	.word	0x41480000
 8002bc0:	0800572c 	.word	0x0800572c
 8002bc4:	08003bbc 	.word	0x08003bbc
 8002bc8:	08003bc8 	.word	0x08003bc8
 8002bcc:	08003bdc 	.word	0x08003bdc
 8002bd0:	08003bec 	.word	0x08003bec

08002bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b090      	sub	sp, #64	@ 0x40
 8002bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bda:	f107 0318 	add.w	r3, r7, #24
 8002bde:	2228      	movs	r2, #40	@ 0x28
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 ff44 	bl	8003a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	60da      	str	r2, [r3, #12]
 8002bf4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c04:	2301      	movs	r3, #1
 8002c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c12:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c18:	f107 0318 	add.w	r3, r7, #24
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fb37 	bl	8002290 <HAL_RCC_OscConfig>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002c28:	f000 f876 	bl	8002d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c30:	2302      	movs	r3, #2
 8002c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	2102      	movs	r1, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fda4 	bl	8002794 <HAL_RCC_ClockConfig>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002c52:	f000 f861 	bl	8002d18 <Error_Handler>
  }
}
 8002c56:	bf00      	nop
 8002c58:	3740      	adds	r7, #64	@ 0x40
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c66:	4a13      	ldr	r2, [pc, #76]	@ (8002cb4 <MX_I2C1_Init+0x54>)
 8002c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c6c:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <MX_I2C1_Init+0x58>)
 8002c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c90:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c9c:	4804      	ldr	r0, [pc, #16]	@ (8002cb0 <MX_I2C1_Init+0x50>)
 8002c9e:	f7fe f933 	bl	8000f08 <HAL_I2C_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ca8:	f000 f836 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	2000007c 	.word	0x2000007c
 8002cb4:	40005400 	.word	0x40005400
 8002cb8:	00061a80 	.word	0x00061a80

08002cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cc2:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <MX_GPIO_Init+0x58>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4a13      	ldr	r2, [pc, #76]	@ (8002d14 <MX_GPIO_Init+0x58>)
 8002cc8:	f043 0320 	orr.w	r3, r3, #32
 8002ccc:	6193      	str	r3, [r2, #24]
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <MX_GPIO_Init+0x58>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <MX_GPIO_Init+0x58>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <MX_GPIO_Init+0x58>)
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6193      	str	r3, [r2, #24]
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <MX_GPIO_Init+0x58>)
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <MX_GPIO_Init+0x58>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	4a07      	ldr	r2, [pc, #28]	@ (8002d14 <MX_GPIO_Init+0x58>)
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	6193      	str	r3, [r2, #24]
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <MX_GPIO_Init+0x58>)
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	40021000 	.word	0x40021000

08002d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d1c:	b672      	cpsid	i
}
 8002d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <Error_Handler+0x8>

08002d24 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fe89 	bl	8003a70 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3384      	adds	r3, #132	@ 0x84
 8002d62:	2280      	movs	r2, #128	@ 0x80
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fe82 	bl	8003a70 <memset>
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	460b      	mov	r3, r1
 8002d82:	72fb      	strb	r3, [r7, #11]
 8002d84:	4613      	mov	r3, r2
 8002d86:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8002d88:	893b      	ldrh	r3, [r7, #8]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fdb1 	bl	80038f4 <malloc>
 8002d92:	4603      	mov	r3, r0
 8002d94:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	7afa      	ldrb	r2, [r7, #11]
 8002d9a:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <max30102_write+0x42>
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3301      	adds	r3, #1
 8002dac:	893a      	ldrh	r2, [r7, #8]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fea1 	bl	8003af8 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	893b      	ldrh	r3, [r7, #8]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dc4:	9200      	str	r2, [sp, #0]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	21ae      	movs	r1, #174	@ 0xae
 8002dca:	f7fe f9e1 	bl	8001190 <HAL_I2C_Master_Transmit>
    free(payload);
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f000 fd98 	bl	8003904 <free>
}
 8002dd4:	bf00      	nop
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	461a      	mov	r2, r3
 8002de8:	460b      	mov	r3, r1
 8002dea:	72fb      	strb	r3, [r7, #11]
 8002dec:	4613      	mov	r3, r2
 8002dee:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	f107 0217 	add.w	r2, r7, #23
 8002dfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2301      	movs	r3, #1
 8002e04:	21ae      	movs	r1, #174	@ 0xae
 8002e06:	f7fe f9c3 	bl	8001190 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	893b      	ldrh	r3, [r7, #8]
 8002e10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e14:	9200      	str	r2, [sp, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	21ae      	movs	r1, #174	@ 0xae
 8002e1a:	f7fe fab7 	bl	800138c <HAL_I2C_Master_Receive>
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8002e2e:	2340      	movs	r3, #64	@ 0x40
 8002e30:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8002e32:	f107 020f 	add.w	r2, r7, #15
 8002e36:	2301      	movs	r3, #1
 8002e38:	2109      	movs	r1, #9
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ff9a 	bl	8002d74 <max30102_write>
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8002e58:	f107 020f 	add.w	r2, r7, #15
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	2102      	movs	r1, #2
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffbb 	bl	8002ddc <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8002e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e74:	01db      	lsls	r3, r3, #7
 8002e76:	b25a      	sxtb	r2, r3
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8002e84:	f107 020f 	add.w	r2, r7, #15
 8002e88:	2301      	movs	r3, #1
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff71 	bl	8002d74 <max30102_write>
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8002eba:	2300      	movs	r3, #0
 8002ebc:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8002ebe:	f107 020c 	add.w	r2, r7, #12
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff88 	bl	8002ddc <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8002ecc:	7b3b      	ldrb	r3, [r7, #12]
 8002ece:	09db      	lsrs	r3, r3, #7
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f957 	bl	800318e <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 8002ee0:	7b7b      	ldrb	r3, [r7, #13]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8002eee:	f107 020a 	add.w	r2, r7, #10
 8002ef2:	f107 030b 	add.w	r3, r7, #11
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f9ad 	bl	8003258 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8002f1a:	f107 020f 	add.w	r2, r7, #15
 8002f1e:	2301      	movs	r3, #1
 8002f20:	2109      	movs	r1, #9
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ff5a 	bl	8002ddc <max30102_read>
    config = (config & 0xf8) | mode;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	f023 0307 	bic.w	r3, r3, #7
 8002f30:	b25a      	sxtb	r2, r3
 8002f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8002f3e:	f107 020f 	add.w	r2, r7, #15
 8002f42:	2301      	movs	r3, #1
 8002f44:	2109      	movs	r1, #9
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ff14 	bl	8002d74 <max30102_write>
    max30102_clear_fifo(obj);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f8ff 	bl	8003150 <max30102_clear_fifo>
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002f66:	f107 020f 	add.w	r2, r7, #15
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	210a      	movs	r1, #10
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff34 	bl	8002ddc <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002f8e:	f107 020f 	add.w	r2, r7, #15
 8002f92:	2301      	movs	r3, #1
 8002f94:	210a      	movs	r1, #10
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff feec 	bl	8002d74 <max30102_write>
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002fb0:	f107 020f 	add.w	r2, r7, #15
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	210a      	movs	r1, #10
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff0f 	bl	8002ddc <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002fc6:	b25a      	sxtb	r2, r3
 8002fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002fd4:	f107 020f 	add.w	r2, r7, #15
 8002fd8:	2301      	movs	r3, #1
 8002fda:	210a      	movs	r1, #10
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff fec9 	bl	8002d74 <max30102_write>
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002ff6:	f107 020f 	add.w	r2, r7, #15
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	210a      	movs	r1, #10
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff feec 	bl	8002ddc <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	b25b      	sxtb	r3, r3
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	b25a      	sxtb	r2, r3
 800300e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003012:	015b      	lsls	r3, r3, #5
 8003014:	b25b      	sxtb	r3, r3
 8003016:	4313      	orrs	r3, r2
 8003018:	b25b      	sxtb	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800301e:	f107 020f 	add.w	r2, r7, #15
 8003022:	2301      	movs	r3, #1
 8003024:	210a      	movs	r1, #10
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fea4 	bl	8002d74 <max30102_write>
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	0000      	movs	r0, r0
	...

08003038 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003042:	6838      	ldr	r0, [r7, #0]
 8003044:	f7fd f9e8 	bl	8000418 <__aeabi_f2d>
 8003048:	a30d      	add	r3, pc, #52	@ (adr r3, 8003080 <max30102_set_led_current_1+0x48>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fb65 	bl	800071c <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f7fd fc47 	bl	80008ec <__aeabi_d2uiz>
 800305e:	4603      	mov	r3, r0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8003064:	f107 020f 	add.w	r2, r7, #15
 8003068:	2301      	movs	r3, #1
 800306a:	210c      	movs	r1, #12
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff fe81 	bl	8002d74 <max30102_write>
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w
 8003080:	9999999a 	.word	0x9999999a
 8003084:	3fc99999 	.word	0x3fc99999

08003088 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003092:	6838      	ldr	r0, [r7, #0]
 8003094:	f7fd f9c0 	bl	8000418 <__aeabi_f2d>
 8003098:	a30d      	add	r3, pc, #52	@ (adr r3, 80030d0 <max30102_set_led_current_2+0x48>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd fb3d 	bl	800071c <__aeabi_ddiv>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fd fc1f 	bl	80008ec <__aeabi_d2uiz>
 80030ae:	4603      	mov	r3, r0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 80030b4:	f107 020f 	add.w	r2, r7, #15
 80030b8:	2301      	movs	r3, #1
 80030ba:	210d      	movs	r1, #13
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff fe59 	bl	8002d74 <max30102_write>
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	f3af 8000 	nop.w
 80030d0:	9999999a 	.word	0x9999999a
 80030d4:	3fc99999 	.word	0x3fc99999

080030d8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	70fb      	strb	r3, [r7, #3]
 80030ea:	460b      	mov	r3, r1
 80030ec:	70bb      	strb	r3, [r7, #2]
 80030ee:	4613      	mov	r3, r2
 80030f0:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 80030f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fa:	015b      	lsls	r3, r3, #5
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	b25b      	sxtb	r3, r3
 8003102:	4313      	orrs	r3, r2
 8003104:	b25b      	sxtb	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 800310a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	b25b      	sxtb	r3, r3
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	b25a      	sxtb	r2, r3
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	4313      	orrs	r3, r2
 800311e:	b25b      	sxtb	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8003124:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	b25a      	sxtb	r2, r3
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	b25b      	sxtb	r3, r3
 8003132:	4313      	orrs	r3, r2
 8003134:	b25b      	sxtb	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800313a:	f107 020f 	add.w	r2, r7, #15
 800313e:	2301      	movs	r3, #1
 8003140:	2108      	movs	r1, #8
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fe16 	bl	8002d74 <max30102_write>
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 800315c:	f107 020f 	add.w	r2, r7, #15
 8003160:	2303      	movs	r3, #3
 8003162:	2104      	movs	r1, #4
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fe05 	bl	8002d74 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 800316a:	f107 020f 	add.w	r2, r7, #15
 800316e:	2303      	movs	r3, #3
 8003170:	2106      	movs	r1, #6
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fdfe 	bl	8002d74 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8003178:	f107 020f 	add.w	r2, r7, #15
 800317c:	2303      	movs	r3, #3
 800317e:	2105      	movs	r1, #5
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fdf7 	bl	8002d74 <max30102_write>
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b088      	sub	sp, #32
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	74fb      	strb	r3, [r7, #19]
 800319a:	2300      	movs	r3, #0
 800319c:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800319e:	f107 0213 	add.w	r2, r7, #19
 80031a2:	2301      	movs	r3, #1
 80031a4:	2104      	movs	r1, #4
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff fe18 	bl	8002ddc <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 80031ac:	f107 0212 	add.w	r2, r7, #18
 80031b0:	2301      	movs	r3, #1
 80031b2:	2106      	movs	r1, #6
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff fe11 	bl	8002ddc <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 80031ba:	7cfa      	ldrb	r2, [r7, #19]
 80031bc:	7cbb      	ldrb	r3, [r7, #18]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 80031c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	dc03      	bgt.n	80031d4 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 80031cc:	7ffb      	ldrb	r3, [r7, #31]
 80031ce:	3320      	adds	r3, #32
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	77bb      	strb	r3, [r7, #30]
 80031d8:	e033      	b.n	8003242 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 80031da:	f107 020c 	add.w	r2, r7, #12
 80031de:	2306      	movs	r3, #6
 80031e0:	2107      	movs	r1, #7
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fdfa 	bl	8002ddc <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 80031e8:	7b3b      	ldrb	r3, [r7, #12]
 80031ea:	041a      	lsls	r2, r3, #16
 80031ec:	7b7b      	ldrb	r3, [r7, #13]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	4313      	orrs	r3, r2
 80031f2:	7bba      	ldrb	r2, [r7, #14]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80031fa:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	041a      	lsls	r2, r3, #16
 8003200:	7c3b      	ldrb	r3, [r7, #16]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	4313      	orrs	r3, r2
 8003206:	7c7a      	ldrb	r2, [r7, #17]
 8003208:	4313      	orrs	r3, r2
 800320a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800320e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8003210:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800321e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	3320      	adds	r3, #32
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	69b8      	ldr	r0, [r7, #24]
 8003232:	f7ff fd77 	bl	8002d24 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8003236:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	3301      	adds	r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	77bb      	strb	r3, [r7, #30]
 8003242:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8003246:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800324a:	429a      	cmp	r2, r3
 800324c:	dbc5      	blt.n	80031da <max30102_read_fifo+0x4c>
    }
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8003264:	2301      	movs	r3, #1
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	211f      	movs	r1, #31
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff fdb6 	bl	8002ddc <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8003270:	2301      	movs	r3, #1
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	2120      	movs	r1, #32
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f7ff fdb0 	bl	8002ddc <max30102_read>
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af04      	add	r7, sp, #16
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800329a:	f04f 33ff 	mov.w	r3, #4294967295
 800329e:	9302      	str	r3, [sp, #8]
 80032a0:	2301      	movs	r3, #1
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	2301      	movs	r3, #1
 80032aa:	2200      	movs	r2, #0
 80032ac:	2178      	movs	r1, #120	@ 0x78
 80032ae:	4803      	ldr	r0, [pc, #12]	@ (80032bc <ssd1306_WriteCommand+0x2c>)
 80032b0:	f7fe fad8 	bl	8001864 <HAL_I2C_Mem_Write>
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	2000007c 	.word	0x2000007c

080032c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af04      	add	r7, sp, #16
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f04f 32ff 	mov.w	r2, #4294967295
 80032d2:	9202      	str	r2, [sp, #8]
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2301      	movs	r3, #1
 80032dc:	2240      	movs	r2, #64	@ 0x40
 80032de:	2178      	movs	r1, #120	@ 0x78
 80032e0:	4803      	ldr	r0, [pc, #12]	@ (80032f0 <ssd1306_WriteData+0x30>)
 80032e2:	f7fe fabf 	bl	8001864 <HAL_I2C_Mem_Write>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	2000007c 	.word	0x2000007c

080032f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80032f8:	f7ff ffc4 	bl	8003284 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80032fc:	2064      	movs	r0, #100	@ 0x64
 80032fe:	f7fd fb77 	bl	80009f0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003302:	2000      	movs	r0, #0
 8003304:	f000 f9da 	bl	80036bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003308:	2020      	movs	r0, #32
 800330a:	f7ff ffc1 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800330e:	2000      	movs	r0, #0
 8003310:	f7ff ffbe 	bl	8003290 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003314:	20b0      	movs	r0, #176	@ 0xb0
 8003316:	f7ff ffbb 	bl	8003290 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800331a:	20c8      	movs	r0, #200	@ 0xc8
 800331c:	f7ff ffb8 	bl	8003290 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003320:	2000      	movs	r0, #0
 8003322:	f7ff ffb5 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003326:	2010      	movs	r0, #16
 8003328:	f7ff ffb2 	bl	8003290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800332c:	2040      	movs	r0, #64	@ 0x40
 800332e:	f7ff ffaf 	bl	8003290 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003332:	20ff      	movs	r0, #255	@ 0xff
 8003334:	f000 f9ae 	bl	8003694 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003338:	20a1      	movs	r0, #161	@ 0xa1
 800333a:	f7ff ffa9 	bl	8003290 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800333e:	20a6      	movs	r0, #166	@ 0xa6
 8003340:	f7ff ffa6 	bl	8003290 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003344:	20a8      	movs	r0, #168	@ 0xa8
 8003346:	f7ff ffa3 	bl	8003290 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800334a:	203f      	movs	r0, #63	@ 0x3f
 800334c:	f7ff ffa0 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003350:	20a4      	movs	r0, #164	@ 0xa4
 8003352:	f7ff ff9d 	bl	8003290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003356:	20d3      	movs	r0, #211	@ 0xd3
 8003358:	f7ff ff9a 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800335c:	2000      	movs	r0, #0
 800335e:	f7ff ff97 	bl	8003290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003362:	20d5      	movs	r0, #213	@ 0xd5
 8003364:	f7ff ff94 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003368:	20f0      	movs	r0, #240	@ 0xf0
 800336a:	f7ff ff91 	bl	8003290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800336e:	20d9      	movs	r0, #217	@ 0xd9
 8003370:	f7ff ff8e 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003374:	2022      	movs	r0, #34	@ 0x22
 8003376:	f7ff ff8b 	bl	8003290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800337a:	20da      	movs	r0, #218	@ 0xda
 800337c:	f7ff ff88 	bl	8003290 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003380:	2012      	movs	r0, #18
 8003382:	f7ff ff85 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003386:	20db      	movs	r0, #219	@ 0xdb
 8003388:	f7ff ff82 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800338c:	2020      	movs	r0, #32
 800338e:	f7ff ff7f 	bl	8003290 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003392:	208d      	movs	r0, #141	@ 0x8d
 8003394:	f7ff ff7c 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003398:	2014      	movs	r0, #20
 800339a:	f7ff ff79 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800339e:	2001      	movs	r0, #1
 80033a0:	f000 f98c 	bl	80036bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80033a4:	2000      	movs	r0, #0
 80033a6:	f000 f80f 	bl	80033c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80033aa:	f000 f825 	bl	80033f8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80033ae:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <ssd1306_Init+0xd0>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <ssd1306_Init+0xd0>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80033ba:	4b02      	ldr	r3, [pc, #8]	@ (80033c4 <ssd1306_Init+0xd0>)
 80033bc:	2201      	movs	r2, #1
 80033be:	711a      	strb	r2, [r3, #4]
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	200005d8 	.word	0x200005d8

080033c8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <ssd1306_Fill+0x14>
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <ssd1306_Fill+0x16>
 80033dc:	23ff      	movs	r3, #255	@ 0xff
 80033de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033e2:	4619      	mov	r1, r3
 80033e4:	4803      	ldr	r0, [pc, #12]	@ (80033f4 <ssd1306_Fill+0x2c>)
 80033e6:	f000 fb43 	bl	8003a70 <memset>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200001d8 	.word	0x200001d8

080033f8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80033fe:	2300      	movs	r3, #0
 8003400:	71fb      	strb	r3, [r7, #7]
 8003402:	e016      	b.n	8003432 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	3b50      	subs	r3, #80	@ 0x50
 8003408:	b2db      	uxtb	r3, r3
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff40 	bl	8003290 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003410:	2000      	movs	r0, #0
 8003412:	f7ff ff3d 	bl	8003290 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003416:	2010      	movs	r0, #16
 8003418:	f7ff ff3a 	bl	8003290 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	01db      	lsls	r3, r3, #7
 8003420:	4a08      	ldr	r2, [pc, #32]	@ (8003444 <ssd1306_UpdateScreen+0x4c>)
 8003422:	4413      	add	r3, r2
 8003424:	2180      	movs	r1, #128	@ 0x80
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff4a 	bl	80032c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	3301      	adds	r3, #1
 8003430:	71fb      	strb	r3, [r7, #7]
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	2b07      	cmp	r3, #7
 8003436:	d9e5      	bls.n	8003404 <ssd1306_UpdateScreen+0xc>
    }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200001d8 	.word	0x200001d8

08003448 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
 8003452:	460b      	mov	r3, r1
 8003454:	71bb      	strb	r3, [r7, #6]
 8003456:	4613      	mov	r3, r2
 8003458:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	db3d      	blt.n	80034de <ssd1306_DrawPixel+0x96>
 8003462:	79bb      	ldrb	r3, [r7, #6]
 8003464:	2b3f      	cmp	r3, #63	@ 0x3f
 8003466:	d83a      	bhi.n	80034de <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003468:	797b      	ldrb	r3, [r7, #5]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d11a      	bne.n	80034a4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800346e:	79fa      	ldrb	r2, [r7, #7]
 8003470:	79bb      	ldrb	r3, [r7, #6]
 8003472:	08db      	lsrs	r3, r3, #3
 8003474:	b2d8      	uxtb	r0, r3
 8003476:	4603      	mov	r3, r0
 8003478:	01db      	lsls	r3, r3, #7
 800347a:	4413      	add	r3, r2
 800347c:	4a1a      	ldr	r2, [pc, #104]	@ (80034e8 <ssd1306_DrawPixel+0xa0>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	b25a      	sxtb	r2, r3
 8003482:	79bb      	ldrb	r3, [r7, #6]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	b25b      	sxtb	r3, r3
 8003490:	4313      	orrs	r3, r2
 8003492:	b259      	sxtb	r1, r3
 8003494:	79fa      	ldrb	r2, [r7, #7]
 8003496:	4603      	mov	r3, r0
 8003498:	01db      	lsls	r3, r3, #7
 800349a:	4413      	add	r3, r2
 800349c:	b2c9      	uxtb	r1, r1
 800349e:	4a12      	ldr	r2, [pc, #72]	@ (80034e8 <ssd1306_DrawPixel+0xa0>)
 80034a0:	54d1      	strb	r1, [r2, r3]
 80034a2:	e01d      	b.n	80034e0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80034a4:	79fa      	ldrb	r2, [r7, #7]
 80034a6:	79bb      	ldrb	r3, [r7, #6]
 80034a8:	08db      	lsrs	r3, r3, #3
 80034aa:	b2d8      	uxtb	r0, r3
 80034ac:	4603      	mov	r3, r0
 80034ae:	01db      	lsls	r3, r3, #7
 80034b0:	4413      	add	r3, r2
 80034b2:	4a0d      	ldr	r2, [pc, #52]	@ (80034e8 <ssd1306_DrawPixel+0xa0>)
 80034b4:	5cd3      	ldrb	r3, [r2, r3]
 80034b6:	b25a      	sxtb	r2, r3
 80034b8:	79bb      	ldrb	r3, [r7, #6]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	4013      	ands	r3, r2
 80034cc:	b259      	sxtb	r1, r3
 80034ce:	79fa      	ldrb	r2, [r7, #7]
 80034d0:	4603      	mov	r3, r0
 80034d2:	01db      	lsls	r3, r3, #7
 80034d4:	4413      	add	r3, r2
 80034d6:	b2c9      	uxtb	r1, r1
 80034d8:	4a03      	ldr	r2, [pc, #12]	@ (80034e8 <ssd1306_DrawPixel+0xa0>)
 80034da:	54d1      	strb	r1, [r2, r3]
 80034dc:	e000      	b.n	80034e0 <ssd1306_DrawPixel+0x98>
        return;
 80034de:	bf00      	nop
    }
}
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	200001d8 	.word	0x200001d8

080034ec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b089      	sub	sp, #36	@ 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4604      	mov	r4, r0
 80034f4:	4638      	mov	r0, r7
 80034f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80034fa:	4623      	mov	r3, r4
 80034fc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80034fe:	4b45      	ldr	r3, [pc, #276]	@ (8003614 <ssd1306_WriteChar+0x128>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	783b      	ldrb	r3, [r7, #0]
 8003506:	4413      	add	r3, r2
 8003508:	2b80      	cmp	r3, #128	@ 0x80
 800350a:	dc06      	bgt.n	800351a <ssd1306_WriteChar+0x2e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800350c:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <ssd1306_WriteChar+0x128>)
 800350e:	885b      	ldrh	r3, [r3, #2]
 8003510:	461a      	mov	r2, r3
 8003512:	787b      	ldrb	r3, [r7, #1]
 8003514:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003516:	2b40      	cmp	r3, #64	@ 0x40
 8003518:	dd01      	ble.n	800351e <ssd1306_WriteChar+0x32>
    {
        // Not enough space on current line
        return 0;
 800351a:	2300      	movs	r3, #0
 800351c:	e075      	b.n	800360a <ssd1306_WriteChar+0x11e>
    }
    
    uint8_t sh = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
    if(Font.width > 16)
 8003522:	783b      	ldrb	r3, [r7, #0]
 8003524:	2b10      	cmp	r3, #16
 8003526:	d901      	bls.n	800352c <ssd1306_WriteChar+0x40>
    	sh = 1;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	e055      	b.n	80035de <ssd1306_WriteChar+0xf2>
    	uint16_t idx = (ch - 32) * Font.height + i;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	3b20      	subs	r3, #32
 8003536:	b29b      	uxth	r3, r3
 8003538:	787a      	ldrb	r2, [r7, #1]
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	b29a      	uxth	r2, r3
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	b29b      	uxth	r3, r3
 8003544:	4413      	add	r3, r2
 8003546:	82bb      	strh	r3, [r7, #20]
        b = Font.data[idx<<sh];
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	8ab9      	ldrh	r1, [r7, #20]
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	613b      	str	r3, [r7, #16]
        for(j = 0; j < Font.width; j++) {
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e036      	b.n	80035ce <ssd1306_WriteChar+0xe2>
            if((b << j) & 0x8000)  {
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <ssd1306_WriteChar+0xac>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003570:	4b28      	ldr	r3, [pc, #160]	@ (8003614 <ssd1306_WriteChar+0x128>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	4413      	add	r3, r2
 800357c:	b2d8      	uxtb	r0, r3
 800357e:	4b25      	ldr	r3, [pc, #148]	@ (8003614 <ssd1306_WriteChar+0x128>)
 8003580:	885b      	ldrh	r3, [r3, #2]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4413      	add	r3, r2
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003590:	4619      	mov	r1, r3
 8003592:	f7ff ff59 	bl	8003448 <ssd1306_DrawPixel>
 8003596:	e017      	b.n	80035c8 <ssd1306_WriteChar+0xdc>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003598:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <ssd1306_WriteChar+0x128>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	b2d8      	uxtb	r0, r3
 80035a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <ssd1306_WriteChar+0x128>)
 80035a8:	885b      	ldrh	r3, [r3, #2]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	b2d9      	uxtb	r1, r3
 80035b4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	f7ff ff40 	bl	8003448 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	3301      	adds	r3, #1
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	783b      	ldrb	r3, [r7, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d3c3      	bcc.n	8003560 <ssd1306_WriteChar+0x74>
    for(i = 0; i < Font.height; i++) {
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	787b      	ldrb	r3, [r7, #1]
 80035e0:	461a      	mov	r2, r3
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d3a4      	bcc.n	8003532 <ssd1306_WriteChar+0x46>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <ssd1306_WriteChar+0x128>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	2a00      	cmp	r2, #0
 80035f0:	d005      	beq.n	80035fe <ssd1306_WriteChar+0x112>
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	3a20      	subs	r2, #32
 80035f8:	440a      	add	r2, r1
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	e000      	b.n	8003600 <ssd1306_WriteChar+0x114>
 80035fe:	783a      	ldrb	r2, [r7, #0]
 8003600:	4413      	add	r3, r2
 8003602:	b29a      	uxth	r2, r3
 8003604:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <ssd1306_WriteChar+0x128>)
 8003606:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3724      	adds	r7, #36	@ 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd90      	pop	{r4, r7, pc}
 8003612:	bf00      	nop
 8003614:	200005d8 	.word	0x200005d8

08003618 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	4638      	mov	r0, r7
 8003622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003626:	e013      	b.n	8003650 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	7818      	ldrb	r0, [r3, #0]
 800362c:	7e3b      	ldrb	r3, [r7, #24]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	463b      	mov	r3, r7
 8003632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003634:	f7ff ff5a 	bl	80034ec <ssd1306_WriteChar>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d002      	beq.n	800364a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	e008      	b.n	800365c <ssd1306_WriteString+0x44>
        }
        str++;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3301      	adds	r3, #1
 800364e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e7      	bne.n	8003628 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	781b      	ldrb	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	460a      	mov	r2, r1
 800366e:	71fb      	strb	r3, [r7, #7]
 8003670:	4613      	mov	r3, r2
 8003672:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	b29a      	uxth	r2, r3
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <ssd1306_SetCursor+0x2c>)
 800367a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800367c:	79bb      	ldrb	r3, [r7, #6]
 800367e:	b29a      	uxth	r2, r3
 8003680:	4b03      	ldr	r3, [pc, #12]	@ (8003690 <ssd1306_SetCursor+0x2c>)
 8003682:	805a      	strh	r2, [r3, #2]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	200005d8 	.word	0x200005d8

08003694 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800369e:	2381      	movs	r3, #129	@ 0x81
 80036a0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fdf3 	bl	8003290 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fdef 	bl	8003290 <ssd1306_WriteCommand>
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80036cc:	23af      	movs	r3, #175	@ 0xaf
 80036ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80036d0:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <ssd1306_SetDisplayOn+0x38>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	715a      	strb	r2, [r3, #5]
 80036d6:	e004      	b.n	80036e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80036d8:	23ae      	movs	r3, #174	@ 0xae
 80036da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <ssd1306_SetDisplayOn+0x38>)
 80036de:	2200      	movs	r2, #0
 80036e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fdd3 	bl	8003290 <ssd1306_WriteCommand>
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200005d8 	.word	0x200005d8

080036f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036fe:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <HAL_MspInit+0x5c>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <HAL_MspInit+0x5c>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6193      	str	r3, [r2, #24]
 800370a:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <HAL_MspInit+0x5c>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <HAL_MspInit+0x5c>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4a0e      	ldr	r2, [pc, #56]	@ (8003754 <HAL_MspInit+0x5c>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003720:	61d3      	str	r3, [r2, #28]
 8003722:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <HAL_MspInit+0x5c>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800372e:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_MspInit+0x60>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	4a04      	ldr	r2, [pc, #16]	@ (8003758 <HAL_MspInit+0x60>)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	40021000 	.word	0x40021000
 8003758:	40010000 	.word	0x40010000

0800375c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 0310 	add.w	r3, r7, #16
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a15      	ldr	r2, [pc, #84]	@ (80037cc <HAL_I2C_MspInit+0x70>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d123      	bne.n	80037c4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377c:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <HAL_I2C_MspInit+0x74>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	4a13      	ldr	r2, [pc, #76]	@ (80037d0 <HAL_I2C_MspInit+0x74>)
 8003782:	f043 0308 	orr.w	r3, r3, #8
 8003786:	6193      	str	r3, [r2, #24]
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <HAL_I2C_MspInit+0x74>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003794:	23c0      	movs	r3, #192	@ 0xc0
 8003796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003798:	2312      	movs	r3, #18
 800379a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800379c:	2303      	movs	r3, #3
 800379e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a0:	f107 0310 	add.w	r3, r7, #16
 80037a4:	4619      	mov	r1, r3
 80037a6:	480b      	ldr	r0, [pc, #44]	@ (80037d4 <HAL_I2C_MspInit+0x78>)
 80037a8:	f7fd fa2a 	bl	8000c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037ac:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <HAL_I2C_MspInit+0x74>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4a07      	ldr	r2, [pc, #28]	@ (80037d0 <HAL_I2C_MspInit+0x74>)
 80037b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037b6:	61d3      	str	r3, [r2, #28]
 80037b8:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <HAL_I2C_MspInit+0x74>)
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80037c4:	bf00      	nop
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40005400 	.word	0x40005400
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010c00 	.word	0x40010c00

080037d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <NMI_Handler+0x4>

080037e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037e4:	bf00      	nop
 80037e6:	e7fd      	b.n	80037e4 <HardFault_Handler+0x4>

080037e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <MemManage_Handler+0x4>

080037f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <BusFault_Handler+0x4>

080037f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <UsageFault_Handler+0x4>

08003800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003828:	f7fd f8c6 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}

08003830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003838:	4a14      	ldr	r2, [pc, #80]	@ (800388c <_sbrk+0x5c>)
 800383a:	4b15      	ldr	r3, [pc, #84]	@ (8003890 <_sbrk+0x60>)
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003844:	4b13      	ldr	r3, [pc, #76]	@ (8003894 <_sbrk+0x64>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800384c:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <_sbrk+0x64>)
 800384e:	4a12      	ldr	r2, [pc, #72]	@ (8003898 <_sbrk+0x68>)
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <_sbrk+0x64>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d207      	bcs.n	8003870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003860:	f000 f91e 	bl	8003aa0 <__errno>
 8003864:	4603      	mov	r3, r0
 8003866:	220c      	movs	r2, #12
 8003868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	e009      	b.n	8003884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <_sbrk+0x64>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003876:	4b07      	ldr	r3, [pc, #28]	@ (8003894 <_sbrk+0x64>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	4a05      	ldr	r2, [pc, #20]	@ (8003894 <_sbrk+0x64>)
 8003880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003882:	68fb      	ldr	r3, [r7, #12]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20005000 	.word	0x20005000
 8003890:	00000400 	.word	0x00000400
 8003894:	200005e0 	.word	0x200005e0
 8003898:	20000730 	.word	0x20000730

0800389c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038a8:	f7ff fff8 	bl	800389c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038ac:	480b      	ldr	r0, [pc, #44]	@ (80038dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80038ae:	490c      	ldr	r1, [pc, #48]	@ (80038e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80038b0:	4a0c      	ldr	r2, [pc, #48]	@ (80038e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80038b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038b4:	e002      	b.n	80038bc <LoopCopyDataInit>

080038b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ba:	3304      	adds	r3, #4

080038bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038c0:	d3f9      	bcc.n	80038b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038c2:	4a09      	ldr	r2, [pc, #36]	@ (80038e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80038c4:	4c09      	ldr	r4, [pc, #36]	@ (80038ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c8:	e001      	b.n	80038ce <LoopFillZerobss>

080038ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038cc:	3204      	adds	r2, #4

080038ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038d0:	d3fb      	bcc.n	80038ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038d2:	f000 f8eb 	bl	8003aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038d6:	f7ff f8d7 	bl	8002a88 <main>
  bx lr
 80038da:	4770      	bx	lr
  ldr r0, =_sdata
 80038dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80038e4:	08005758 	.word	0x08005758
  ldr r2, =_sbss
 80038e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80038ec:	2000072c 	.word	0x2000072c

080038f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038f0:	e7fe      	b.n	80038f0 <ADC1_2_IRQHandler>
	...

080038f4 <malloc>:
 80038f4:	4b02      	ldr	r3, [pc, #8]	@ (8003900 <malloc+0xc>)
 80038f6:	4601      	mov	r1, r0
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	f000 b82d 	b.w	8003958 <_malloc_r>
 80038fe:	bf00      	nop
 8003900:	2000000c 	.word	0x2000000c

08003904 <free>:
 8003904:	4b02      	ldr	r3, [pc, #8]	@ (8003910 <free+0xc>)
 8003906:	4601      	mov	r1, r0
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f000 b903 	b.w	8003b14 <_free_r>
 800390e:	bf00      	nop
 8003910:	2000000c 	.word	0x2000000c

08003914 <sbrk_aligned>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4e0f      	ldr	r6, [pc, #60]	@ (8003954 <sbrk_aligned+0x40>)
 8003918:	460c      	mov	r4, r1
 800391a:	6831      	ldr	r1, [r6, #0]
 800391c:	4605      	mov	r5, r0
 800391e:	b911      	cbnz	r1, 8003926 <sbrk_aligned+0x12>
 8003920:	f000 f8ae 	bl	8003a80 <_sbrk_r>
 8003924:	6030      	str	r0, [r6, #0]
 8003926:	4621      	mov	r1, r4
 8003928:	4628      	mov	r0, r5
 800392a:	f000 f8a9 	bl	8003a80 <_sbrk_r>
 800392e:	1c43      	adds	r3, r0, #1
 8003930:	d103      	bne.n	800393a <sbrk_aligned+0x26>
 8003932:	f04f 34ff 	mov.w	r4, #4294967295
 8003936:	4620      	mov	r0, r4
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	1cc4      	adds	r4, r0, #3
 800393c:	f024 0403 	bic.w	r4, r4, #3
 8003940:	42a0      	cmp	r0, r4
 8003942:	d0f8      	beq.n	8003936 <sbrk_aligned+0x22>
 8003944:	1a21      	subs	r1, r4, r0
 8003946:	4628      	mov	r0, r5
 8003948:	f000 f89a 	bl	8003a80 <_sbrk_r>
 800394c:	3001      	adds	r0, #1
 800394e:	d1f2      	bne.n	8003936 <sbrk_aligned+0x22>
 8003950:	e7ef      	b.n	8003932 <sbrk_aligned+0x1e>
 8003952:	bf00      	nop
 8003954:	200005e4 	.word	0x200005e4

08003958 <_malloc_r>:
 8003958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800395c:	1ccd      	adds	r5, r1, #3
 800395e:	f025 0503 	bic.w	r5, r5, #3
 8003962:	3508      	adds	r5, #8
 8003964:	2d0c      	cmp	r5, #12
 8003966:	bf38      	it	cc
 8003968:	250c      	movcc	r5, #12
 800396a:	2d00      	cmp	r5, #0
 800396c:	4606      	mov	r6, r0
 800396e:	db01      	blt.n	8003974 <_malloc_r+0x1c>
 8003970:	42a9      	cmp	r1, r5
 8003972:	d904      	bls.n	800397e <_malloc_r+0x26>
 8003974:	230c      	movs	r3, #12
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	2000      	movs	r0, #0
 800397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a54 <_malloc_r+0xfc>
 8003982:	f000 f869 	bl	8003a58 <__malloc_lock>
 8003986:	f8d8 3000 	ldr.w	r3, [r8]
 800398a:	461c      	mov	r4, r3
 800398c:	bb44      	cbnz	r4, 80039e0 <_malloc_r+0x88>
 800398e:	4629      	mov	r1, r5
 8003990:	4630      	mov	r0, r6
 8003992:	f7ff ffbf 	bl	8003914 <sbrk_aligned>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	4604      	mov	r4, r0
 800399a:	d158      	bne.n	8003a4e <_malloc_r+0xf6>
 800399c:	f8d8 4000 	ldr.w	r4, [r8]
 80039a0:	4627      	mov	r7, r4
 80039a2:	2f00      	cmp	r7, #0
 80039a4:	d143      	bne.n	8003a2e <_malloc_r+0xd6>
 80039a6:	2c00      	cmp	r4, #0
 80039a8:	d04b      	beq.n	8003a42 <_malloc_r+0xea>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	4639      	mov	r1, r7
 80039ae:	4630      	mov	r0, r6
 80039b0:	eb04 0903 	add.w	r9, r4, r3
 80039b4:	f000 f864 	bl	8003a80 <_sbrk_r>
 80039b8:	4581      	cmp	r9, r0
 80039ba:	d142      	bne.n	8003a42 <_malloc_r+0xea>
 80039bc:	6821      	ldr	r1, [r4, #0]
 80039be:	4630      	mov	r0, r6
 80039c0:	1a6d      	subs	r5, r5, r1
 80039c2:	4629      	mov	r1, r5
 80039c4:	f7ff ffa6 	bl	8003914 <sbrk_aligned>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d03a      	beq.n	8003a42 <_malloc_r+0xea>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	442b      	add	r3, r5
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	f8d8 3000 	ldr.w	r3, [r8]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	bb62      	cbnz	r2, 8003a34 <_malloc_r+0xdc>
 80039da:	f8c8 7000 	str.w	r7, [r8]
 80039de:	e00f      	b.n	8003a00 <_malloc_r+0xa8>
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	1b52      	subs	r2, r2, r5
 80039e4:	d420      	bmi.n	8003a28 <_malloc_r+0xd0>
 80039e6:	2a0b      	cmp	r2, #11
 80039e8:	d917      	bls.n	8003a1a <_malloc_r+0xc2>
 80039ea:	1961      	adds	r1, r4, r5
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	6025      	str	r5, [r4, #0]
 80039f0:	bf18      	it	ne
 80039f2:	6059      	strne	r1, [r3, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	bf08      	it	eq
 80039f8:	f8c8 1000 	streq.w	r1, [r8]
 80039fc:	5162      	str	r2, [r4, r5]
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 f82f 	bl	8003a64 <__malloc_unlock>
 8003a06:	f104 000b 	add.w	r0, r4, #11
 8003a0a:	1d23      	adds	r3, r4, #4
 8003a0c:	f020 0007 	bic.w	r0, r0, #7
 8003a10:	1ac2      	subs	r2, r0, r3
 8003a12:	bf1c      	itt	ne
 8003a14:	1a1b      	subne	r3, r3, r0
 8003a16:	50a3      	strne	r3, [r4, r2]
 8003a18:	e7af      	b.n	800397a <_malloc_r+0x22>
 8003a1a:	6862      	ldr	r2, [r4, #4]
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	bf0c      	ite	eq
 8003a20:	f8c8 2000 	streq.w	r2, [r8]
 8003a24:	605a      	strne	r2, [r3, #4]
 8003a26:	e7eb      	b.n	8003a00 <_malloc_r+0xa8>
 8003a28:	4623      	mov	r3, r4
 8003a2a:	6864      	ldr	r4, [r4, #4]
 8003a2c:	e7ae      	b.n	800398c <_malloc_r+0x34>
 8003a2e:	463c      	mov	r4, r7
 8003a30:	687f      	ldr	r7, [r7, #4]
 8003a32:	e7b6      	b.n	80039a2 <_malloc_r+0x4a>
 8003a34:	461a      	mov	r2, r3
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d1fb      	bne.n	8003a34 <_malloc_r+0xdc>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6053      	str	r3, [r2, #4]
 8003a40:	e7de      	b.n	8003a00 <_malloc_r+0xa8>
 8003a42:	230c      	movs	r3, #12
 8003a44:	4630      	mov	r0, r6
 8003a46:	6033      	str	r3, [r6, #0]
 8003a48:	f000 f80c 	bl	8003a64 <__malloc_unlock>
 8003a4c:	e794      	b.n	8003978 <_malloc_r+0x20>
 8003a4e:	6005      	str	r5, [r0, #0]
 8003a50:	e7d6      	b.n	8003a00 <_malloc_r+0xa8>
 8003a52:	bf00      	nop
 8003a54:	200005e8 	.word	0x200005e8

08003a58 <__malloc_lock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	@ (8003a60 <__malloc_lock+0x8>)
 8003a5a:	f000 b84b 	b.w	8003af4 <__retarget_lock_acquire_recursive>
 8003a5e:	bf00      	nop
 8003a60:	20000728 	.word	0x20000728

08003a64 <__malloc_unlock>:
 8003a64:	4801      	ldr	r0, [pc, #4]	@ (8003a6c <__malloc_unlock+0x8>)
 8003a66:	f000 b846 	b.w	8003af6 <__retarget_lock_release_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	20000728 	.word	0x20000728

08003a70 <memset>:
 8003a70:	4603      	mov	r3, r0
 8003a72:	4402      	add	r2, r0
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d100      	bne.n	8003a7a <memset+0xa>
 8003a78:	4770      	bx	lr
 8003a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7e:	e7f9      	b.n	8003a74 <memset+0x4>

08003a80 <_sbrk_r>:
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	2300      	movs	r3, #0
 8003a84:	4d05      	ldr	r5, [pc, #20]	@ (8003a9c <_sbrk_r+0x1c>)
 8003a86:	4604      	mov	r4, r0
 8003a88:	4608      	mov	r0, r1
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	f7ff fed0 	bl	8003830 <_sbrk>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_sbrk_r+0x1a>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_sbrk_r+0x1a>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	20000724 	.word	0x20000724

08003aa0 <__errno>:
 8003aa0:	4b01      	ldr	r3, [pc, #4]	@ (8003aa8 <__errno+0x8>)
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	2000000c 	.word	0x2000000c

08003aac <__libc_init_array>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	2600      	movs	r6, #0
 8003ab0:	4d0c      	ldr	r5, [pc, #48]	@ (8003ae4 <__libc_init_array+0x38>)
 8003ab2:	4c0d      	ldr	r4, [pc, #52]	@ (8003ae8 <__libc_init_array+0x3c>)
 8003ab4:	1b64      	subs	r4, r4, r5
 8003ab6:	10a4      	asrs	r4, r4, #2
 8003ab8:	42a6      	cmp	r6, r4
 8003aba:	d109      	bne.n	8003ad0 <__libc_init_array+0x24>
 8003abc:	f000 f872 	bl	8003ba4 <_init>
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	4d0a      	ldr	r5, [pc, #40]	@ (8003aec <__libc_init_array+0x40>)
 8003ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8003af0 <__libc_init_array+0x44>)
 8003ac6:	1b64      	subs	r4, r4, r5
 8003ac8:	10a4      	asrs	r4, r4, #2
 8003aca:	42a6      	cmp	r6, r4
 8003acc:	d105      	bne.n	8003ada <__libc_init_array+0x2e>
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad4:	4798      	blx	r3
 8003ad6:	3601      	adds	r6, #1
 8003ad8:	e7ee      	b.n	8003ab8 <__libc_init_array+0xc>
 8003ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ade:	4798      	blx	r3
 8003ae0:	3601      	adds	r6, #1
 8003ae2:	e7f2      	b.n	8003aca <__libc_init_array+0x1e>
 8003ae4:	08005750 	.word	0x08005750
 8003ae8:	08005750 	.word	0x08005750
 8003aec:	08005750 	.word	0x08005750
 8003af0:	08005754 	.word	0x08005754

08003af4 <__retarget_lock_acquire_recursive>:
 8003af4:	4770      	bx	lr

08003af6 <__retarget_lock_release_recursive>:
 8003af6:	4770      	bx	lr

08003af8 <memcpy>:
 8003af8:	440a      	add	r2, r1
 8003afa:	4291      	cmp	r1, r2
 8003afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b00:	d100      	bne.n	8003b04 <memcpy+0xc>
 8003b02:	4770      	bx	lr
 8003b04:	b510      	push	{r4, lr}
 8003b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b0a:	4291      	cmp	r1, r2
 8003b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b10:	d1f9      	bne.n	8003b06 <memcpy+0xe>
 8003b12:	bd10      	pop	{r4, pc}

08003b14 <_free_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	4605      	mov	r5, r0
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	d040      	beq.n	8003b9e <_free_r+0x8a>
 8003b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b20:	1f0c      	subs	r4, r1, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	bfb8      	it	lt
 8003b26:	18e4      	addlt	r4, r4, r3
 8003b28:	f7ff ff96 	bl	8003a58 <__malloc_lock>
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba0 <_free_r+0x8c>)
 8003b2e:	6813      	ldr	r3, [r2, #0]
 8003b30:	b933      	cbnz	r3, 8003b40 <_free_r+0x2c>
 8003b32:	6063      	str	r3, [r4, #4]
 8003b34:	6014      	str	r4, [r2, #0]
 8003b36:	4628      	mov	r0, r5
 8003b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b3c:	f7ff bf92 	b.w	8003a64 <__malloc_unlock>
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	d908      	bls.n	8003b56 <_free_r+0x42>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	1821      	adds	r1, r4, r0
 8003b48:	428b      	cmp	r3, r1
 8003b4a:	bf01      	itttt	eq
 8003b4c:	6819      	ldreq	r1, [r3, #0]
 8003b4e:	685b      	ldreq	r3, [r3, #4]
 8003b50:	1809      	addeq	r1, r1, r0
 8003b52:	6021      	streq	r1, [r4, #0]
 8003b54:	e7ed      	b.n	8003b32 <_free_r+0x1e>
 8003b56:	461a      	mov	r2, r3
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	b10b      	cbz	r3, 8003b60 <_free_r+0x4c>
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	d9fa      	bls.n	8003b56 <_free_r+0x42>
 8003b60:	6811      	ldr	r1, [r2, #0]
 8003b62:	1850      	adds	r0, r2, r1
 8003b64:	42a0      	cmp	r0, r4
 8003b66:	d10b      	bne.n	8003b80 <_free_r+0x6c>
 8003b68:	6820      	ldr	r0, [r4, #0]
 8003b6a:	4401      	add	r1, r0
 8003b6c:	1850      	adds	r0, r2, r1
 8003b6e:	4283      	cmp	r3, r0
 8003b70:	6011      	str	r1, [r2, #0]
 8003b72:	d1e0      	bne.n	8003b36 <_free_r+0x22>
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4408      	add	r0, r1
 8003b7a:	6010      	str	r0, [r2, #0]
 8003b7c:	6053      	str	r3, [r2, #4]
 8003b7e:	e7da      	b.n	8003b36 <_free_r+0x22>
 8003b80:	d902      	bls.n	8003b88 <_free_r+0x74>
 8003b82:	230c      	movs	r3, #12
 8003b84:	602b      	str	r3, [r5, #0]
 8003b86:	e7d6      	b.n	8003b36 <_free_r+0x22>
 8003b88:	6820      	ldr	r0, [r4, #0]
 8003b8a:	1821      	adds	r1, r4, r0
 8003b8c:	428b      	cmp	r3, r1
 8003b8e:	bf01      	itttt	eq
 8003b90:	6819      	ldreq	r1, [r3, #0]
 8003b92:	685b      	ldreq	r3, [r3, #4]
 8003b94:	1809      	addeq	r1, r1, r0
 8003b96:	6021      	streq	r1, [r4, #0]
 8003b98:	6063      	str	r3, [r4, #4]
 8003b9a:	6054      	str	r4, [r2, #4]
 8003b9c:	e7cb      	b.n	8003b36 <_free_r+0x22>
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	200005e8 	.word	0x200005e8

08003ba4 <_init>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr

08003bb0 <_fini>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr
