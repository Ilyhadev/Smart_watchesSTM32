
Mini-node Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007518  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b4c  08007628  08007628  00008628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008174  08008174  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008174  08008174  00009174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800817c  0800817c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800817c  0800817c  0000917c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008180  08008180  00009180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008184  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200001d4  08008358  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  08008358  0000a8a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f9f  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c27  00000000  00000000  0001319c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00014dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070b  00000000  00000000  00015728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019302  00000000  00000000  00015e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c00b  00000000  00000000  0002f135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087971  00000000  00000000  0003b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2ab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c8  00000000  00000000  000c2af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c63bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007610 	.word	0x08007610

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007610 	.word	0x08007610

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_uldivmod>:
 8001110:	b953      	cbnz	r3, 8001128 <__aeabi_uldivmod+0x18>
 8001112:	b94a      	cbnz	r2, 8001128 <__aeabi_uldivmod+0x18>
 8001114:	2900      	cmp	r1, #0
 8001116:	bf08      	it	eq
 8001118:	2800      	cmpeq	r0, #0
 800111a:	bf1c      	itt	ne
 800111c:	f04f 31ff 	movne.w	r1, #4294967295
 8001120:	f04f 30ff 	movne.w	r0, #4294967295
 8001124:	f000 b98c 	b.w	8001440 <__aeabi_idiv0>
 8001128:	f1ad 0c08 	sub.w	ip, sp, #8
 800112c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001130:	f000 f806 	bl	8001140 <__udivmoddi4>
 8001134:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800113c:	b004      	add	sp, #16
 800113e:	4770      	bx	lr

08001140 <__udivmoddi4>:
 8001140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001144:	9d08      	ldr	r5, [sp, #32]
 8001146:	468e      	mov	lr, r1
 8001148:	4604      	mov	r4, r0
 800114a:	4688      	mov	r8, r1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d14a      	bne.n	80011e6 <__udivmoddi4+0xa6>
 8001150:	428a      	cmp	r2, r1
 8001152:	4617      	mov	r7, r2
 8001154:	d962      	bls.n	800121c <__udivmoddi4+0xdc>
 8001156:	fab2 f682 	clz	r6, r2
 800115a:	b14e      	cbz	r6, 8001170 <__udivmoddi4+0x30>
 800115c:	f1c6 0320 	rsb	r3, r6, #32
 8001160:	fa01 f806 	lsl.w	r8, r1, r6
 8001164:	fa20 f303 	lsr.w	r3, r0, r3
 8001168:	40b7      	lsls	r7, r6
 800116a:	ea43 0808 	orr.w	r8, r3, r8
 800116e:	40b4      	lsls	r4, r6
 8001170:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001174:	fbb8 f1fe 	udiv	r1, r8, lr
 8001178:	fa1f fc87 	uxth.w	ip, r7
 800117c:	fb0e 8811 	mls	r8, lr, r1, r8
 8001180:	fb01 f20c 	mul.w	r2, r1, ip
 8001184:	0c23      	lsrs	r3, r4, #16
 8001186:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800118a:	429a      	cmp	r2, r3
 800118c:	d909      	bls.n	80011a2 <__udivmoddi4+0x62>
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	f101 30ff 	add.w	r0, r1, #4294967295
 8001194:	f080 80eb 	bcs.w	800136e <__udivmoddi4+0x22e>
 8001198:	429a      	cmp	r2, r3
 800119a:	f240 80e8 	bls.w	800136e <__udivmoddi4+0x22e>
 800119e:	3902      	subs	r1, #2
 80011a0:	443b      	add	r3, r7
 80011a2:	1a9a      	subs	r2, r3, r2
 80011a4:	fbb2 f0fe 	udiv	r0, r2, lr
 80011a8:	fb0e 2210 	mls	r2, lr, r0, r2
 80011ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80011b0:	b2a3      	uxth	r3, r4
 80011b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011b6:	459c      	cmp	ip, r3
 80011b8:	d909      	bls.n	80011ce <__udivmoddi4+0x8e>
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80011c0:	f080 80d7 	bcs.w	8001372 <__udivmoddi4+0x232>
 80011c4:	459c      	cmp	ip, r3
 80011c6:	f240 80d4 	bls.w	8001372 <__udivmoddi4+0x232>
 80011ca:	443b      	add	r3, r7
 80011cc:	3802      	subs	r0, #2
 80011ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80011d2:	2100      	movs	r1, #0
 80011d4:	eba3 030c 	sub.w	r3, r3, ip
 80011d8:	b11d      	cbz	r5, 80011e2 <__udivmoddi4+0xa2>
 80011da:	2200      	movs	r2, #0
 80011dc:	40f3      	lsrs	r3, r6
 80011de:	e9c5 3200 	strd	r3, r2, [r5]
 80011e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e6:	428b      	cmp	r3, r1
 80011e8:	d905      	bls.n	80011f6 <__udivmoddi4+0xb6>
 80011ea:	b10d      	cbz	r5, 80011f0 <__udivmoddi4+0xb0>
 80011ec:	e9c5 0100 	strd	r0, r1, [r5]
 80011f0:	2100      	movs	r1, #0
 80011f2:	4608      	mov	r0, r1
 80011f4:	e7f5      	b.n	80011e2 <__udivmoddi4+0xa2>
 80011f6:	fab3 f183 	clz	r1, r3
 80011fa:	2900      	cmp	r1, #0
 80011fc:	d146      	bne.n	800128c <__udivmoddi4+0x14c>
 80011fe:	4573      	cmp	r3, lr
 8001200:	d302      	bcc.n	8001208 <__udivmoddi4+0xc8>
 8001202:	4282      	cmp	r2, r0
 8001204:	f200 8108 	bhi.w	8001418 <__udivmoddi4+0x2d8>
 8001208:	1a84      	subs	r4, r0, r2
 800120a:	eb6e 0203 	sbc.w	r2, lr, r3
 800120e:	2001      	movs	r0, #1
 8001210:	4690      	mov	r8, r2
 8001212:	2d00      	cmp	r5, #0
 8001214:	d0e5      	beq.n	80011e2 <__udivmoddi4+0xa2>
 8001216:	e9c5 4800 	strd	r4, r8, [r5]
 800121a:	e7e2      	b.n	80011e2 <__udivmoddi4+0xa2>
 800121c:	2a00      	cmp	r2, #0
 800121e:	f000 8091 	beq.w	8001344 <__udivmoddi4+0x204>
 8001222:	fab2 f682 	clz	r6, r2
 8001226:	2e00      	cmp	r6, #0
 8001228:	f040 80a5 	bne.w	8001376 <__udivmoddi4+0x236>
 800122c:	1a8a      	subs	r2, r1, r2
 800122e:	2101      	movs	r1, #1
 8001230:	0c03      	lsrs	r3, r0, #16
 8001232:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001236:	b280      	uxth	r0, r0
 8001238:	b2bc      	uxth	r4, r7
 800123a:	fbb2 fcfe 	udiv	ip, r2, lr
 800123e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001246:	fb04 f20c 	mul.w	r2, r4, ip
 800124a:	429a      	cmp	r2, r3
 800124c:	d907      	bls.n	800125e <__udivmoddi4+0x11e>
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001254:	d202      	bcs.n	800125c <__udivmoddi4+0x11c>
 8001256:	429a      	cmp	r2, r3
 8001258:	f200 80e3 	bhi.w	8001422 <__udivmoddi4+0x2e2>
 800125c:	46c4      	mov	ip, r8
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	fbb3 f2fe 	udiv	r2, r3, lr
 8001264:	fb0e 3312 	mls	r3, lr, r2, r3
 8001268:	fb02 f404 	mul.w	r4, r2, r4
 800126c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001270:	429c      	cmp	r4, r3
 8001272:	d907      	bls.n	8001284 <__udivmoddi4+0x144>
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	f102 30ff 	add.w	r0, r2, #4294967295
 800127a:	d202      	bcs.n	8001282 <__udivmoddi4+0x142>
 800127c:	429c      	cmp	r4, r3
 800127e:	f200 80cd 	bhi.w	800141c <__udivmoddi4+0x2dc>
 8001282:	4602      	mov	r2, r0
 8001284:	1b1b      	subs	r3, r3, r4
 8001286:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800128a:	e7a5      	b.n	80011d8 <__udivmoddi4+0x98>
 800128c:	f1c1 0620 	rsb	r6, r1, #32
 8001290:	408b      	lsls	r3, r1
 8001292:	fa22 f706 	lsr.w	r7, r2, r6
 8001296:	431f      	orrs	r7, r3
 8001298:	fa2e fa06 	lsr.w	sl, lr, r6
 800129c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80012a0:	fbba f8f9 	udiv	r8, sl, r9
 80012a4:	fa0e fe01 	lsl.w	lr, lr, r1
 80012a8:	fa20 f306 	lsr.w	r3, r0, r6
 80012ac:	fb09 aa18 	mls	sl, r9, r8, sl
 80012b0:	fa1f fc87 	uxth.w	ip, r7
 80012b4:	ea43 030e 	orr.w	r3, r3, lr
 80012b8:	fa00 fe01 	lsl.w	lr, r0, r1
 80012bc:	fb08 f00c 	mul.w	r0, r8, ip
 80012c0:	0c1c      	lsrs	r4, r3, #16
 80012c2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012c6:	42a0      	cmp	r0, r4
 80012c8:	fa02 f201 	lsl.w	r2, r2, r1
 80012cc:	d90a      	bls.n	80012e4 <__udivmoddi4+0x1a4>
 80012ce:	193c      	adds	r4, r7, r4
 80012d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80012d4:	f080 809e 	bcs.w	8001414 <__udivmoddi4+0x2d4>
 80012d8:	42a0      	cmp	r0, r4
 80012da:	f240 809b 	bls.w	8001414 <__udivmoddi4+0x2d4>
 80012de:	f1a8 0802 	sub.w	r8, r8, #2
 80012e2:	443c      	add	r4, r7
 80012e4:	1a24      	subs	r4, r4, r0
 80012e6:	b298      	uxth	r0, r3
 80012e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80012ec:	fb09 4413 	mls	r4, r9, r3, r4
 80012f0:	fb03 fc0c 	mul.w	ip, r3, ip
 80012f4:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80012f8:	45a4      	cmp	ip, r4
 80012fa:	d909      	bls.n	8001310 <__udivmoddi4+0x1d0>
 80012fc:	193c      	adds	r4, r7, r4
 80012fe:	f103 30ff 	add.w	r0, r3, #4294967295
 8001302:	f080 8085 	bcs.w	8001410 <__udivmoddi4+0x2d0>
 8001306:	45a4      	cmp	ip, r4
 8001308:	f240 8082 	bls.w	8001410 <__udivmoddi4+0x2d0>
 800130c:	3b02      	subs	r3, #2
 800130e:	443c      	add	r4, r7
 8001310:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001314:	eba4 040c 	sub.w	r4, r4, ip
 8001318:	fba0 8c02 	umull	r8, ip, r0, r2
 800131c:	4564      	cmp	r4, ip
 800131e:	4643      	mov	r3, r8
 8001320:	46e1      	mov	r9, ip
 8001322:	d364      	bcc.n	80013ee <__udivmoddi4+0x2ae>
 8001324:	d061      	beq.n	80013ea <__udivmoddi4+0x2aa>
 8001326:	b15d      	cbz	r5, 8001340 <__udivmoddi4+0x200>
 8001328:	ebbe 0203 	subs.w	r2, lr, r3
 800132c:	eb64 0409 	sbc.w	r4, r4, r9
 8001330:	fa04 f606 	lsl.w	r6, r4, r6
 8001334:	fa22 f301 	lsr.w	r3, r2, r1
 8001338:	431e      	orrs	r6, r3
 800133a:	40cc      	lsrs	r4, r1
 800133c:	e9c5 6400 	strd	r6, r4, [r5]
 8001340:	2100      	movs	r1, #0
 8001342:	e74e      	b.n	80011e2 <__udivmoddi4+0xa2>
 8001344:	fbb1 fcf2 	udiv	ip, r1, r2
 8001348:	0c01      	lsrs	r1, r0, #16
 800134a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800134e:	b280      	uxth	r0, r0
 8001350:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001354:	463b      	mov	r3, r7
 8001356:	fbb1 f1f7 	udiv	r1, r1, r7
 800135a:	4638      	mov	r0, r7
 800135c:	463c      	mov	r4, r7
 800135e:	46b8      	mov	r8, r7
 8001360:	46be      	mov	lr, r7
 8001362:	2620      	movs	r6, #32
 8001364:	eba2 0208 	sub.w	r2, r2, r8
 8001368:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800136c:	e765      	b.n	800123a <__udivmoddi4+0xfa>
 800136e:	4601      	mov	r1, r0
 8001370:	e717      	b.n	80011a2 <__udivmoddi4+0x62>
 8001372:	4610      	mov	r0, r2
 8001374:	e72b      	b.n	80011ce <__udivmoddi4+0x8e>
 8001376:	f1c6 0120 	rsb	r1, r6, #32
 800137a:	fa2e fc01 	lsr.w	ip, lr, r1
 800137e:	40b7      	lsls	r7, r6
 8001380:	fa0e fe06 	lsl.w	lr, lr, r6
 8001384:	fa20 f101 	lsr.w	r1, r0, r1
 8001388:	ea41 010e 	orr.w	r1, r1, lr
 800138c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001390:	fbbc f8fe 	udiv	r8, ip, lr
 8001394:	b2bc      	uxth	r4, r7
 8001396:	fb0e cc18 	mls	ip, lr, r8, ip
 800139a:	fb08 f904 	mul.w	r9, r8, r4
 800139e:	0c0a      	lsrs	r2, r1, #16
 80013a0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80013a4:	40b0      	lsls	r0, r6
 80013a6:	4591      	cmp	r9, r2
 80013a8:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80013ac:	b280      	uxth	r0, r0
 80013ae:	d93e      	bls.n	800142e <__udivmoddi4+0x2ee>
 80013b0:	18ba      	adds	r2, r7, r2
 80013b2:	f108 3cff 	add.w	ip, r8, #4294967295
 80013b6:	d201      	bcs.n	80013bc <__udivmoddi4+0x27c>
 80013b8:	4591      	cmp	r9, r2
 80013ba:	d81f      	bhi.n	80013fc <__udivmoddi4+0x2bc>
 80013bc:	eba2 0209 	sub.w	r2, r2, r9
 80013c0:	fbb2 f9fe 	udiv	r9, r2, lr
 80013c4:	fb09 f804 	mul.w	r8, r9, r4
 80013c8:	fb0e 2a19 	mls	sl, lr, r9, r2
 80013cc:	b28a      	uxth	r2, r1
 80013ce:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80013d2:	4542      	cmp	r2, r8
 80013d4:	d229      	bcs.n	800142a <__udivmoddi4+0x2ea>
 80013d6:	18ba      	adds	r2, r7, r2
 80013d8:	f109 31ff 	add.w	r1, r9, #4294967295
 80013dc:	d2c2      	bcs.n	8001364 <__udivmoddi4+0x224>
 80013de:	4542      	cmp	r2, r8
 80013e0:	d2c0      	bcs.n	8001364 <__udivmoddi4+0x224>
 80013e2:	f1a9 0102 	sub.w	r1, r9, #2
 80013e6:	443a      	add	r2, r7
 80013e8:	e7bc      	b.n	8001364 <__udivmoddi4+0x224>
 80013ea:	45c6      	cmp	lr, r8
 80013ec:	d29b      	bcs.n	8001326 <__udivmoddi4+0x1e6>
 80013ee:	ebb8 0302 	subs.w	r3, r8, r2
 80013f2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80013f6:	3801      	subs	r0, #1
 80013f8:	46e1      	mov	r9, ip
 80013fa:	e794      	b.n	8001326 <__udivmoddi4+0x1e6>
 80013fc:	eba7 0909 	sub.w	r9, r7, r9
 8001400:	444a      	add	r2, r9
 8001402:	fbb2 f9fe 	udiv	r9, r2, lr
 8001406:	f1a8 0c02 	sub.w	ip, r8, #2
 800140a:	fb09 f804 	mul.w	r8, r9, r4
 800140e:	e7db      	b.n	80013c8 <__udivmoddi4+0x288>
 8001410:	4603      	mov	r3, r0
 8001412:	e77d      	b.n	8001310 <__udivmoddi4+0x1d0>
 8001414:	46d0      	mov	r8, sl
 8001416:	e765      	b.n	80012e4 <__udivmoddi4+0x1a4>
 8001418:	4608      	mov	r0, r1
 800141a:	e6fa      	b.n	8001212 <__udivmoddi4+0xd2>
 800141c:	443b      	add	r3, r7
 800141e:	3a02      	subs	r2, #2
 8001420:	e730      	b.n	8001284 <__udivmoddi4+0x144>
 8001422:	f1ac 0c02 	sub.w	ip, ip, #2
 8001426:	443b      	add	r3, r7
 8001428:	e719      	b.n	800125e <__udivmoddi4+0x11e>
 800142a:	4649      	mov	r1, r9
 800142c:	e79a      	b.n	8001364 <__udivmoddi4+0x224>
 800142e:	eba2 0209 	sub.w	r2, r2, r9
 8001432:	fbb2 f9fe 	udiv	r9, r2, lr
 8001436:	46c4      	mov	ip, r8
 8001438:	fb09 f804 	mul.w	r8, r9, r4
 800143c:	e7c4      	b.n	80013c8 <__udivmoddi4+0x288>
 800143e:	bf00      	nop

08001440 <__aeabi_idiv0>:
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <HAL_Init+0x28>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	@ (800146c <HAL_Init+0x28>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f92b 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	200f      	movs	r0, #15
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f003 f8d8 	bl	8004614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40022000 	.word	0x40022000

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f935 	bl	80016fe <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f90b 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000004 	.word	0x20000004
 80014cc:	20000000 	.word	0x20000000

080014d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_IncTick+0x1c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <HAL_IncTick+0x20>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a03      	ldr	r2, [pc, #12]	@ (80014f0 <HAL_IncTick+0x20>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000004 	.word	0x20000004
 80014f0:	200001f0 	.word	0x200001f0

080014f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b02      	ldr	r3, [pc, #8]	@ (8001504 <HAL_GetTick+0x10>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	200001f0 	.word	0x200001f0

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff fff0 	bl	80014f4 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffe0 	bl	80014f4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000004 	.word	0x20000004

08001550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800157c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001582:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	60d3      	str	r3, [r2, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	@ (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	@ (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	@ 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f7ff ff90 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff49 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff5e 	bl	8001598 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff90 	bl	8001608 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5f 	bl	80015b4 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffb0 	bl	800166c <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b08b      	sub	sp, #44	@ 0x2c
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	e169      	b.n	8001a00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800172c:	2201      	movs	r2, #1
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 8158 	bne.w	80019fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a9a      	ldr	r2, [pc, #616]	@ (80019b8 <HAL_GPIO_Init+0x2a0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d05e      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001754:	4a98      	ldr	r2, [pc, #608]	@ (80019b8 <HAL_GPIO_Init+0x2a0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d875      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800175a:	4a98      	ldr	r2, [pc, #608]	@ (80019bc <HAL_GPIO_Init+0x2a4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d058      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001760:	4a96      	ldr	r2, [pc, #600]	@ (80019bc <HAL_GPIO_Init+0x2a4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d86f      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001766:	4a96      	ldr	r2, [pc, #600]	@ (80019c0 <HAL_GPIO_Init+0x2a8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d052      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 800176c:	4a94      	ldr	r2, [pc, #592]	@ (80019c0 <HAL_GPIO_Init+0x2a8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d869      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001772:	4a94      	ldr	r2, [pc, #592]	@ (80019c4 <HAL_GPIO_Init+0x2ac>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d04c      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001778:	4a92      	ldr	r2, [pc, #584]	@ (80019c4 <HAL_GPIO_Init+0x2ac>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d863      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800177e:	4a92      	ldr	r2, [pc, #584]	@ (80019c8 <HAL_GPIO_Init+0x2b0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d046      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001784:	4a90      	ldr	r2, [pc, #576]	@ (80019c8 <HAL_GPIO_Init+0x2b0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d85d      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800178a:	2b12      	cmp	r3, #18
 800178c:	d82a      	bhi.n	80017e4 <HAL_GPIO_Init+0xcc>
 800178e:	2b12      	cmp	r3, #18
 8001790:	d859      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001792:	a201      	add	r2, pc, #4	@ (adr r2, 8001798 <HAL_GPIO_Init+0x80>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	08001813 	.word	0x08001813
 800179c:	080017ed 	.word	0x080017ed
 80017a0:	080017ff 	.word	0x080017ff
 80017a4:	08001841 	.word	0x08001841
 80017a8:	08001847 	.word	0x08001847
 80017ac:	08001847 	.word	0x08001847
 80017b0:	08001847 	.word	0x08001847
 80017b4:	08001847 	.word	0x08001847
 80017b8:	08001847 	.word	0x08001847
 80017bc:	08001847 	.word	0x08001847
 80017c0:	08001847 	.word	0x08001847
 80017c4:	08001847 	.word	0x08001847
 80017c8:	08001847 	.word	0x08001847
 80017cc:	08001847 	.word	0x08001847
 80017d0:	08001847 	.word	0x08001847
 80017d4:	08001847 	.word	0x08001847
 80017d8:	08001847 	.word	0x08001847
 80017dc:	080017f5 	.word	0x080017f5
 80017e0:	08001809 	.word	0x08001809
 80017e4:	4a79      	ldr	r2, [pc, #484]	@ (80019cc <HAL_GPIO_Init+0x2b4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ea:	e02c      	b.n	8001846 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e029      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	3304      	adds	r3, #4
 80017fa:	623b      	str	r3, [r7, #32]
          break;
 80017fc:	e024      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	3308      	adds	r3, #8
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e01f      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	330c      	adds	r3, #12
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e01a      	b.n	8001848 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800181a:	2304      	movs	r3, #4
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e013      	b.n	8001848 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001828:	2308      	movs	r3, #8
 800182a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	611a      	str	r2, [r3, #16]
          break;
 8001832:	e009      	b.n	8001848 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001834:	2308      	movs	r3, #8
 8001836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	615a      	str	r2, [r3, #20]
          break;
 800183e:	e003      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x130>
          break;
 8001846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2bff      	cmp	r3, #255	@ 0xff
 800184c:	d801      	bhi.n	8001852 <HAL_GPIO_Init+0x13a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	e001      	b.n	8001856 <HAL_GPIO_Init+0x13e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2bff      	cmp	r3, #255	@ 0xff
 800185c:	d802      	bhi.n	8001864 <HAL_GPIO_Init+0x14c>
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x152>
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	3b08      	subs	r3, #8
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	210f      	movs	r1, #15
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	6a39      	ldr	r1, [r7, #32]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	431a      	orrs	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80b1 	beq.w	80019fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001898:	4b4d      	ldr	r3, [pc, #308]	@ (80019d0 <HAL_GPIO_Init+0x2b8>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a4c      	ldr	r2, [pc, #304]	@ (80019d0 <HAL_GPIO_Init+0x2b8>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <HAL_GPIO_Init+0x2b8>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b0:	4a48      	ldr	r2, [pc, #288]	@ (80019d4 <HAL_GPIO_Init+0x2bc>)
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a40      	ldr	r2, [pc, #256]	@ (80019d8 <HAL_GPIO_Init+0x2c0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_GPIO_Init+0x1ec>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a3f      	ldr	r2, [pc, #252]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_Init+0x1e8>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3e      	ldr	r2, [pc, #248]	@ (80019e0 <HAL_GPIO_Init+0x2c8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x1e4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a3d      	ldr	r2, [pc, #244]	@ (80019e4 <HAL_GPIO_Init+0x2cc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_Init+0x1e0>
 80018f4:	2303      	movs	r3, #3
 80018f6:	e006      	b.n	8001906 <HAL_GPIO_Init+0x1ee>
 80018f8:	2304      	movs	r3, #4
 80018fa:	e004      	b.n	8001906 <HAL_GPIO_Init+0x1ee>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e002      	b.n	8001906 <HAL_GPIO_Init+0x1ee>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_GPIO_Init+0x1ee>
 8001904:	2300      	movs	r3, #0
 8001906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001908:	f002 0203 	and.w	r2, r2, #3
 800190c:	0092      	lsls	r2, r2, #2
 800190e:	4093      	lsls	r3, r2
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001916:	492f      	ldr	r1, [pc, #188]	@ (80019d4 <HAL_GPIO_Init+0x2bc>)
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001930:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	492c      	ldr	r1, [pc, #176]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800193e:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	43db      	mvns	r3, r3
 8001946:	4928      	ldr	r1, [pc, #160]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001948:	4013      	ands	r3, r2
 800194a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001958:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	4922      	ldr	r1, [pc, #136]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	60cb      	str	r3, [r1, #12]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001966:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	491e      	ldr	r1, [pc, #120]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001970:	4013      	ands	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4918      	ldr	r1, [pc, #96]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	4914      	ldr	r1, [pc, #80]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d021      	beq.n	80019ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a8:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	490e      	ldr	r1, [pc, #56]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
 80019b4:	e021      	b.n	80019fa <HAL_GPIO_Init+0x2e2>
 80019b6:	bf00      	nop
 80019b8:	10320000 	.word	0x10320000
 80019bc:	10310000 	.word	0x10310000
 80019c0:	10220000 	.word	0x10220000
 80019c4:	10210000 	.word	0x10210000
 80019c8:	10120000 	.word	0x10120000
 80019cc:	10110000 	.word	0x10110000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40010000 	.word	0x40010000
 80019d8:	40010800 	.word	0x40010800
 80019dc:	40010c00 	.word	0x40010c00
 80019e0:	40011000 	.word	0x40011000
 80019e4:	40011400 	.word	0x40011400
 80019e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_GPIO_Init+0x304>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	4909      	ldr	r1, [pc, #36]	@ (8001a1c <HAL_GPIO_Init+0x304>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	3301      	adds	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f ae8e 	bne.w	800172c <HAL_GPIO_Init+0x14>
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	372c      	adds	r7, #44	@ 0x2c
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e12b      	b.n	8001c8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f002 fe16 	bl	8004678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2224      	movs	r2, #36	@ 0x24
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a84:	f001 fd5a 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8001a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a81      	ldr	r2, [pc, #516]	@ (8001c94 <HAL_I2C_Init+0x274>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d807      	bhi.n	8001aa4 <HAL_I2C_Init+0x84>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a80      	ldr	r2, [pc, #512]	@ (8001c98 <HAL_I2C_Init+0x278>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	bf94      	ite	ls
 8001a9c:	2301      	movls	r3, #1
 8001a9e:	2300      	movhi	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e006      	b.n	8001ab2 <HAL_I2C_Init+0x92>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a7d      	ldr	r2, [pc, #500]	@ (8001c9c <HAL_I2C_Init+0x27c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0e7      	b.n	8001c8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4a78      	ldr	r2, [pc, #480]	@ (8001ca0 <HAL_I2C_Init+0x280>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0c9b      	lsrs	r3, r3, #18
 8001ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c94 <HAL_I2C_Init+0x274>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d802      	bhi.n	8001af4 <HAL_I2C_Init+0xd4>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3301      	adds	r3, #1
 8001af2:	e009      	b.n	8001b08 <HAL_I2C_Init+0xe8>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a69      	ldr	r2, [pc, #420]	@ (8001ca4 <HAL_I2C_Init+0x284>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	3301      	adds	r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	495c      	ldr	r1, [pc, #368]	@ (8001c94 <HAL_I2C_Init+0x274>)
 8001b24:	428b      	cmp	r3, r1
 8001b26:	d819      	bhi.n	8001b5c <HAL_I2C_Init+0x13c>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e59      	subs	r1, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b36:	1c59      	adds	r1, r3, #1
 8001b38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00a      	beq.n	8001b58 <HAL_I2C_Init+0x138>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1e59      	subs	r1, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b56:	e051      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e04f      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d111      	bne.n	8001b88 <HAL_I2C_Init+0x168>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	440b      	add	r3, r1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	e012      	b.n	8001bae <HAL_I2C_Init+0x18e>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e58      	subs	r0, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	0099      	lsls	r1, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x196>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e022      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10e      	bne.n	8001bdc <HAL_I2C_Init+0x1bc>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1e58      	subs	r0, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6859      	ldr	r1, [r3, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	440b      	add	r3, r1
 8001bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bda:	e00f      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	0099      	lsls	r1, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	6809      	ldr	r1, [r1, #0]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6911      	ldr	r1, [r2, #16]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68d2      	ldr	r2, [r2, #12]
 8001c36:	4311      	orrs	r1, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	000186a0 	.word	0x000186a0
 8001c98:	001e847f 	.word	0x001e847f
 8001c9c:	003d08ff 	.word	0x003d08ff
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	10624dd3 	.word	0x10624dd3

08001ca8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	817b      	strh	r3, [r7, #10]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff fc1a 	bl	80014f4 <HAL_GetTick>
 8001cc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	f040 80e0 	bne.w	8001e90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2319      	movs	r3, #25
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4970      	ldr	r1, [pc, #448]	@ (8001e9c <HAL_I2C_Master_Transmit+0x1f4>)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fe2e 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0d3      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x50>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e0cc      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d007      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2221      	movs	r2, #33	@ 0x21
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	893a      	ldrh	r2, [r7, #8]
 8001d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ea0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d60:	8979      	ldrh	r1, [r7, #10]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fc02 	bl	8002570 <I2C_MasterRequestWrite>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e08d      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d8c:	e066      	b.n	8001e5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 feec 	bl	8002b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d107      	bne.n	8001db6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e06b      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d11b      	bne.n	8001e30 <HAL_I2C_Master_Transmit+0x188>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d017      	beq.n	8001e30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	6a39      	ldr	r1, [r7, #32]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fee3 	bl	8002c00 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d107      	bne.n	8001e58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e01a      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d194      	bne.n	8001d8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	00100002 	.word	0x00100002
 8001ea0:	ffff0000 	.word	0xffff0000

08001ea4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	817b      	strh	r3, [r7, #10]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff fb1a 	bl	80014f4 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	f040 824b 	bne.w	8002366 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2319      	movs	r3, #25
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	497f      	ldr	r1, [pc, #508]	@ (80020d8 <HAL_I2C_Master_Receive+0x234>)
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fd2e 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e23e      	b.n	8002368 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2C_Master_Receive+0x54>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e237      	b.n	8002368 <HAL_I2C_Master_Receive+0x4c4>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d007      	beq.n	8001f1e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2222      	movs	r2, #34	@ 0x22
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	893a      	ldrh	r2, [r7, #8]
 8001f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a5f      	ldr	r2, [pc, #380]	@ (80020dc <HAL_I2C_Master_Receive+0x238>)
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f60:	8979      	ldrh	r1, [r7, #10]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fb84 	bl	8002674 <I2C_MasterRequestRead>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1f8      	b.n	8002368 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d113      	bne.n	8001fa6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e1cc      	b.n	8002340 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d11e      	bne.n	8001fec <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fbc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbe:	b672      	cpsid	i
}
 8001fc0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fe8:	b662      	cpsie	i
}
 8001fea:	e035      	b.n	8002058 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d11e      	bne.n	8002032 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002002:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800202c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800202e:	b662      	cpsie	i
}
 8002030:	e012      	b.n	8002058 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002058:	e172      	b.n	8002340 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205e:	2b03      	cmp	r3, #3
 8002060:	f200 811f 	bhi.w	80022a2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	2b01      	cmp	r3, #1
 800206a:	d123      	bne.n	80020b4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fe0d 	bl	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e173      	b.n	8002368 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020b2:	e145      	b.n	8002340 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d152      	bne.n	8002162 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c2:	2200      	movs	r2, #0
 80020c4:	4906      	ldr	r1, [pc, #24]	@ (80020e0 <HAL_I2C_Master_Receive+0x23c>)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 fc38 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e148      	b.n	8002368 <HAL_I2C_Master_Receive+0x4c4>
 80020d6:	bf00      	nop
 80020d8:	00100002 	.word	0x00100002
 80020dc:	ffff0000 	.word	0xffff0000
 80020e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80020e4:	b672      	cpsid	i
}
 80020e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800212a:	b662      	cpsie	i
}
 800212c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002160:	e0ee      	b.n	8002340 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002168:	2200      	movs	r2, #0
 800216a:	4981      	ldr	r1, [pc, #516]	@ (8002370 <HAL_I2C_Master_Receive+0x4cc>)
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fbe5 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0f5      	b.n	8002368 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800218a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
}
 800218e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80021c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002374 <HAL_I2C_Master_Receive+0x4d0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	08db      	lsrs	r3, r3, #3
 80021c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002378 <HAL_I2C_Master_Receive+0x4d4>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0a1a      	lsrs	r2, r3, #8
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00da      	lsls	r2, r3, #3
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	3b01      	subs	r3, #1
 80021e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d118      	bne.n	800221a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800220a:	b662      	cpsie	i
}
 800220c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0a6      	b.n	8002368 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b04      	cmp	r3, #4
 8002226:	d1d9      	bne.n	80021dc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800226a:	b662      	cpsie	i
}
 800226c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022a0:	e04e      	b.n	8002340 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fcf2 	bl	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e058      	b.n	8002368 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d124      	bne.n	8002340 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d107      	bne.n	800230e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800230c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	f47f ae88 	bne.w	800205a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e000      	b.n	8002368 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002366:	2302      	movs	r3, #2
  }
}
 8002368:	4618      	mov	r0, r3
 800236a:	3728      	adds	r7, #40	@ 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	00010004 	.word	0x00010004
 8002374:	20000008 	.word	0x20000008
 8002378:	14f8b589 	.word	0x14f8b589

0800237c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	817b      	strh	r3, [r7, #10]
 800238e:	460b      	mov	r3, r1
 8002390:	813b      	strh	r3, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002396:	f7ff f8ad 	bl	80014f4 <HAL_GetTick>
 800239a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	f040 80d9 	bne.w	800255c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2319      	movs	r3, #25
 80023b0:	2201      	movs	r2, #1
 80023b2:	496d      	ldr	r1, [pc, #436]	@ (8002568 <HAL_I2C_Mem_Write+0x1ec>)
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fac1 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0cc      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_I2C_Mem_Write+0x56>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0c5      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d007      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002406:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2221      	movs	r2, #33	@ 0x21
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2240      	movs	r2, #64	@ 0x40
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a3a      	ldr	r2, [r7, #32]
 8002422:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a4d      	ldr	r2, [pc, #308]	@ (800256c <HAL_I2C_Mem_Write+0x1f0>)
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800243a:	88f8      	ldrh	r0, [r7, #6]
 800243c:	893a      	ldrh	r2, [r7, #8]
 800243e:	8979      	ldrh	r1, [r7, #10]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	4603      	mov	r3, r0
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f9e0 	bl	8002810 <I2C_RequestMemoryWrite>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d052      	beq.n	80024fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e081      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fb86 	bl	8002b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00d      	beq.n	8002486 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	2b04      	cmp	r3, #4
 8002470:	d107      	bne.n	8002482 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002480:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06b      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d11b      	bne.n	80024fc <HAL_I2C_Mem_Write+0x180>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d017      	beq.n	80024fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1aa      	bne.n	800245a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fb79 	bl	8002c00 <I2C_WaitOnBTFFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00d      	beq.n	8002530 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	2b04      	cmp	r3, #4
 800251a:	d107      	bne.n	800252c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e016      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	00100002 	.word	0x00100002
 800256c:	ffff0000 	.word	0xffff0000

08002570 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	460b      	mov	r3, r1
 800257e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d006      	beq.n	800259a <I2C_MasterRequestWrite+0x2a>
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d003      	beq.n	800259a <I2C_MasterRequestWrite+0x2a>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002598:	d108      	bne.n	80025ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00b      	b.n	80025c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	2b12      	cmp	r3, #18
 80025b2:	d107      	bne.n	80025c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f9b3 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00d      	beq.n	80025f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025ea:	d103      	bne.n	80025f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e035      	b.n	8002664 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002600:	d108      	bne.n	8002614 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	e01b      	b.n	800264c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002614:	897b      	ldrh	r3, [r7, #10]
 8002616:	11db      	asrs	r3, r3, #7
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f003 0306 	and.w	r3, r3, #6
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f063 030f 	orn	r3, r3, #15
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	490e      	ldr	r1, [pc, #56]	@ (800266c <I2C_MasterRequestWrite+0xfc>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f9fc 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e010      	b.n	8002664 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4907      	ldr	r1, [pc, #28]	@ (8002670 <I2C_MasterRequestWrite+0x100>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f9ec 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	00010008 	.word	0x00010008
 8002670:	00010002 	.word	0x00010002

08002674 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	460b      	mov	r3, r1
 8002682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002698:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d006      	beq.n	80026ae <I2C_MasterRequestRead+0x3a>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d003      	beq.n	80026ae <I2C_MasterRequestRead+0x3a>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026ac:	d108      	bne.n	80026c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e00b      	b.n	80026d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	2b11      	cmp	r3, #17
 80026c6:	d107      	bne.n	80026d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f929 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026fe:	d103      	bne.n	8002708 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e079      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002714:	d108      	bne.n	8002728 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002716:	897b      	ldrh	r3, [r7, #10]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	e05f      	b.n	80027e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002728:	897b      	ldrh	r3, [r7, #10]
 800272a:	11db      	asrs	r3, r3, #7
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0306 	and.w	r3, r3, #6
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f063 030f 	orn	r3, r3, #15
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4930      	ldr	r1, [pc, #192]	@ (8002808 <I2C_MasterRequestRead+0x194>)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f972 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e054      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4929      	ldr	r1, [pc, #164]	@ (800280c <I2C_MasterRequestRead+0x198>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f962 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e044      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800279a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f8c7 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027c2:	d103      	bne.n	80027cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e017      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80027d0:	897b      	ldrh	r3, [r7, #10]
 80027d2:	11db      	asrs	r3, r3, #7
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0306 	and.w	r3, r3, #6
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f063 030e 	orn	r3, r3, #14
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4907      	ldr	r1, [pc, #28]	@ (800280c <I2C_MasterRequestRead+0x198>)
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f91e 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	00010008 	.word	0x00010008
 800280c:	00010002 	.word	0x00010002

08002810 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002838:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	2200      	movs	r2, #0
 8002842:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f878 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002860:	d103      	bne.n	800286a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002868:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e05f      	b.n	800292e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800287c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	492d      	ldr	r1, [pc, #180]	@ (8002938 <I2C_RequestMemoryWrite+0x128>)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f8d3 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e04c      	b.n	800292e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ac:	6a39      	ldr	r1, [r7, #32]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f95e 	bl	8002b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d107      	bne.n	80028d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e02b      	b.n	800292e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028dc:	893b      	ldrh	r3, [r7, #8]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e021      	b.n	800292c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028e8:	893b      	ldrh	r3, [r7, #8]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f938 	bl	8002b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	2b04      	cmp	r3, #4
 800290c:	d107      	bne.n	800291e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e005      	b.n	800292e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002922:	893b      	ldrh	r3, [r7, #8]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	00010002 	.word	0x00010002

0800293c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294c:	e048      	b.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d044      	beq.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe fdcd 	bl	80014f4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d139      	bne.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d10d      	bne.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	43da      	mvns	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4013      	ands	r3, r2
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	e00c      	b.n	80029ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	43da      	mvns	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4013      	ands	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d116      	bne.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e023      	b.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	0c1b      	lsrs	r3, r3, #16
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d10d      	bne.n	8002a06 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	43da      	mvns	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4013      	ands	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	e00c      	b.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4013      	ands	r3, r2
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d093      	beq.n	800294e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a3e:	e071      	b.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4e:	d123      	bne.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f043 0204 	orr.w	r2, r3, #4
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e067      	b.n	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d041      	beq.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7fe fd28 	bl	80014f4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d136      	bne.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d10c      	bne.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e00b      	b.n	8002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e021      	b.n	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10c      	bne.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	43da      	mvns	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e00b      	b.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f47f af6d 	bne.w	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b7c:	e034      	b.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f8e3 	bl	8002d4a <I2C_IsAcknowledgeFailed>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e034      	b.n	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d028      	beq.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7fe fcad 	bl	80014f4 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11d      	bne.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb6:	2b80      	cmp	r3, #128	@ 0x80
 8002bb8:	d016      	beq.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e007      	b.n	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b80      	cmp	r3, #128	@ 0x80
 8002bf4:	d1c3      	bne.n	8002b7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c0c:	e034      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f89b 	bl	8002d4a <I2C_IsAcknowledgeFailed>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e034      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d028      	beq.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7fe fc65 	bl	80014f4 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d11d      	bne.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d016      	beq.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d1c3      	bne.n	8002c0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c9c:	e049      	b.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d119      	bne.n	8002ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0210 	mvn.w	r2, #16
 8002cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e030      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7fe fc08 	bl	80014f4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11d      	bne.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d00:	2b40      	cmp	r3, #64	@ 0x40
 8002d02:	d016      	beq.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e007      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	2b40      	cmp	r3, #64	@ 0x40
 8002d3e:	d1ae      	bne.n	8002c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d60:	d11b      	bne.n	8002d9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f043 0204 	orr.w	r2, r3, #4
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e272      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8087 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dc8:	4b92      	ldr	r3, [pc, #584]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d00c      	beq.n	8002dee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dd4:	4b8f      	ldr	r3, [pc, #572]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d112      	bne.n	8002e06 <HAL_RCC_OscConfig+0x5e>
 8002de0:	4b8c      	ldr	r3, [pc, #560]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dec:	d10b      	bne.n	8002e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dee:	4b89      	ldr	r3, [pc, #548]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d06c      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x12c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d168      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e24c      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x76>
 8002e10:	4b80      	ldr	r3, [pc, #512]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a7f      	ldr	r2, [pc, #508]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	e02e      	b.n	8002e7c <HAL_RCC_OscConfig+0xd4>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x98>
 8002e26:	4b7b      	ldr	r3, [pc, #492]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7a      	ldr	r2, [pc, #488]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b78      	ldr	r3, [pc, #480]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a77      	ldr	r2, [pc, #476]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e01d      	b.n	8002e7c <HAL_RCC_OscConfig+0xd4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0xbc>
 8002e4a:	4b72      	ldr	r3, [pc, #456]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a71      	ldr	r2, [pc, #452]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b6f      	ldr	r3, [pc, #444]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0xd4>
 8002e64:	4b6b      	ldr	r3, [pc, #428]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6a      	ldr	r2, [pc, #424]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b68      	ldr	r3, [pc, #416]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a67      	ldr	r2, [pc, #412]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe fb36 	bl	80014f4 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fb32 	bl	80014f4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e200      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0xe4>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fb22 	bl	80014f4 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fb1e 	bl	80014f4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	@ 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1ec      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	4b53      	ldr	r3, [pc, #332]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x10c>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d063      	beq.n	8002faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eee:	4b49      	ldr	r3, [pc, #292]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x18c>
 8002efa:	4b46      	ldr	r3, [pc, #280]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	4b43      	ldr	r3, [pc, #268]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_RCC_OscConfig+0x176>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1c0      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4939      	ldr	r1, [pc, #228]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	e03a      	b.n	8002faa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b36      	ldr	r3, [pc, #216]	@ (8003018 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fe fad7 	bl	80014f4 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7fe fad3 	bl	80014f4 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e1a1      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	4b2a      	ldr	r3, [pc, #168]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4927      	ldr	r1, [pc, #156]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
 8002f7c:	e015      	b.n	8002faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7e:	4b26      	ldr	r3, [pc, #152]	@ (8003018 <HAL_RCC_OscConfig+0x270>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fab6 	bl	80014f4 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fab2 	bl	80014f4 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e180      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d03a      	beq.n	800302c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d019      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbe:	4b17      	ldr	r3, [pc, #92]	@ (800301c <HAL_RCC_OscConfig+0x274>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fa96 	bl	80014f4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fa92 	bl	80014f4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e160      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fea:	2001      	movs	r0, #1
 8002fec:	f000 faba 	bl	8003564 <RCC_Delay>
 8002ff0:	e01c      	b.n	800302c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_RCC_OscConfig+0x274>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fa7c 	bl	80014f4 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffe:	e00f      	b.n	8003020 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003000:	f7fe fa78 	bl	80014f4 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d908      	bls.n	8003020 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e146      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	42420000 	.word	0x42420000
 800301c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	4b92      	ldr	r3, [pc, #584]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e9      	bne.n	8003000 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a6 	beq.w	8003186 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303e:	4b8b      	ldr	r3, [pc, #556]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10d      	bne.n	8003066 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b88      	ldr	r3, [pc, #544]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4a87      	ldr	r2, [pc, #540]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003054:	61d3      	str	r3, [r2, #28]
 8003056:	4b85      	ldr	r3, [pc, #532]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b82      	ldr	r3, [pc, #520]	@ (8003270 <HAL_RCC_OscConfig+0x4c8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b7f      	ldr	r3, [pc, #508]	@ (8003270 <HAL_RCC_OscConfig+0x4c8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a7e      	ldr	r2, [pc, #504]	@ (8003270 <HAL_RCC_OscConfig+0x4c8>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe fa39 	bl	80014f4 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fe fa35 	bl	80014f4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b64      	cmp	r3, #100	@ 0x64
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e103      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b75      	ldr	r3, [pc, #468]	@ (8003270 <HAL_RCC_OscConfig+0x4c8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x312>
 80030ac:	4b6f      	ldr	r3, [pc, #444]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4a6e      	ldr	r2, [pc, #440]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6213      	str	r3, [r2, #32]
 80030b8:	e02d      	b.n	8003116 <HAL_RCC_OscConfig+0x36e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x334>
 80030c2:	4b6a      	ldr	r3, [pc, #424]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4a69      	ldr	r2, [pc, #420]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	6213      	str	r3, [r2, #32]
 80030ce:	4b67      	ldr	r3, [pc, #412]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4a66      	ldr	r2, [pc, #408]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	6213      	str	r3, [r2, #32]
 80030da:	e01c      	b.n	8003116 <HAL_RCC_OscConfig+0x36e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d10c      	bne.n	80030fe <HAL_RCC_OscConfig+0x356>
 80030e4:	4b61      	ldr	r3, [pc, #388]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4a60      	ldr	r2, [pc, #384]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	6213      	str	r3, [r2, #32]
 80030f0:	4b5e      	ldr	r3, [pc, #376]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4a5d      	ldr	r2, [pc, #372]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6213      	str	r3, [r2, #32]
 80030fc:	e00b      	b.n	8003116 <HAL_RCC_OscConfig+0x36e>
 80030fe:	4b5b      	ldr	r3, [pc, #364]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4a5a      	ldr	r2, [pc, #360]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	6213      	str	r3, [r2, #32]
 800310a:	4b58      	ldr	r3, [pc, #352]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a57      	ldr	r2, [pc, #348]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d015      	beq.n	800314a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7fe f9e9 	bl	80014f4 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fe f9e5 	bl	80014f4 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0b1      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313c:	4b4b      	ldr	r3, [pc, #300]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ee      	beq.n	8003126 <HAL_RCC_OscConfig+0x37e>
 8003148:	e014      	b.n	8003174 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fe f9d3 	bl	80014f4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe f9cf 	bl	80014f4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e09b      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003168:	4b40      	ldr	r3, [pc, #256]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ee      	bne.n	8003152 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d105      	bne.n	8003186 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b3c      	ldr	r3, [pc, #240]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4a3b      	ldr	r2, [pc, #236]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003184:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8087 	beq.w	800329e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003190:	4b36      	ldr	r3, [pc, #216]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b08      	cmp	r3, #8
 800319a:	d061      	beq.n	8003260 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d146      	bne.n	8003232 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a4:	4b33      	ldr	r3, [pc, #204]	@ (8003274 <HAL_RCC_OscConfig+0x4cc>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7fe f9a3 	bl	80014f4 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fe f99f 	bl	80014f4 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e06d      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c4:	4b29      	ldr	r3, [pc, #164]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d8:	d108      	bne.n	80031ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031da:	4b24      	ldr	r3, [pc, #144]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	4921      	ldr	r1, [pc, #132]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ec:	4b1f      	ldr	r3, [pc, #124]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a19      	ldr	r1, [r3, #32]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	430b      	orrs	r3, r1
 80031fe:	491b      	ldr	r1, [pc, #108]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003204:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <HAL_RCC_OscConfig+0x4cc>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe f973 	bl	80014f4 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe f96f 	bl	80014f4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e03d      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003224:	4b11      	ldr	r3, [pc, #68]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x46a>
 8003230:	e035      	b.n	800329e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <HAL_RCC_OscConfig+0x4cc>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fe f95c 	bl	80014f4 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe f958 	bl	80014f4 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e026      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003252:	4b06      	ldr	r3, [pc, #24]	@ (800326c <HAL_RCC_OscConfig+0x4c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x498>
 800325e:	e01e      	b.n	800329e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d107      	bne.n	8003278 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e019      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
 8003274:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_RCC_OscConfig+0x500>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	429a      	cmp	r2, r3
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d001      	beq.n	800329e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0d0      	b.n	8003462 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b6a      	ldr	r3, [pc, #424]	@ (800346c <HAL_RCC_ClockConfig+0x1c0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d910      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b67      	ldr	r3, [pc, #412]	@ (800346c <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 0207 	bic.w	r2, r3, #7
 80032d6:	4965      	ldr	r1, [pc, #404]	@ (800346c <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b63      	ldr	r3, [pc, #396]	@ (800346c <HAL_RCC_ClockConfig+0x1c0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0b8      	b.n	8003462 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003308:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4a58      	ldr	r2, [pc, #352]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003312:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a52      	ldr	r2, [pc, #328]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800332a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b50      	ldr	r3, [pc, #320]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	494d      	ldr	r1, [pc, #308]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d040      	beq.n	80033cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d115      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e07f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e073      	b.n	8003462 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	4b3d      	ldr	r3, [pc, #244]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06b      	b.n	8003462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338a:	4b39      	ldr	r3, [pc, #228]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f023 0203 	bic.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4936      	ldr	r1, [pc, #216]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800339c:	f7fe f8aa 	bl	80014f4 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a4:	f7fe f8a6 	bl	80014f4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e053      	b.n	8003462 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 020c 	and.w	r2, r3, #12
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d1eb      	bne.n	80033a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b27      	ldr	r3, [pc, #156]	@ (800346c <HAL_RCC_ClockConfig+0x1c0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d210      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 0207 	bic.w	r2, r3, #7
 80033e2:	4922      	ldr	r1, [pc, #136]	@ (800346c <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e032      	b.n	8003462 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4916      	ldr	r1, [pc, #88]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	490e      	ldr	r1, [pc, #56]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800343a:	f000 f821 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	490a      	ldr	r1, [pc, #40]	@ (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_RCC_ClockConfig+0x1cc>)
 8003454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_RCC_ClockConfig+0x1d0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe f808 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40022000 	.word	0x40022000
 8003470:	40021000 	.word	0x40021000
 8003474:	08007de4 	.word	0x08007de4
 8003478:	20000008 	.word	0x20000008
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800349a:	4b1e      	ldr	r3, [pc, #120]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x94>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x30>
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0x36>
 80034ae:	e027      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034b0:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x98>)
 80034b2:	613b      	str	r3, [r7, #16]
      break;
 80034b4:	e027      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	0c9b      	lsrs	r3, r3, #18
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	4a17      	ldr	r2, [pc, #92]	@ (800351c <HAL_RCC_GetSysClockFreq+0x9c>)
 80034c0:	5cd3      	ldrb	r3, [r2, r3]
 80034c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d010      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ce:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x94>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	0c5b      	lsrs	r3, r3, #17
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	4a11      	ldr	r2, [pc, #68]	@ (8003520 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x98>)
 80034e2:	fb03 f202 	mul.w	r2, r3, r2
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e004      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003524 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034f4:	fb02 f303 	mul.w	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	613b      	str	r3, [r7, #16]
      break;
 80034fe:	e002      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003500:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x98>)
 8003502:	613b      	str	r3, [r7, #16]
      break;
 8003504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003506:	693b      	ldr	r3, [r7, #16]
}
 8003508:	4618      	mov	r0, r3
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	007a1200 	.word	0x007a1200
 800351c:	08007658 	.word	0x08007658
 8003520:	08007668 	.word	0x08007668
 8003524:	003d0900 	.word	0x003d0900

08003528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800352c:	4b02      	ldr	r3, [pc, #8]	@ (8003538 <HAL_RCC_GetHCLKFreq+0x10>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	20000008 	.word	0x20000008

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003540:	f7ff fff2 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	@ (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	08007df4 	.word	0x08007df4

08003564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <RCC_Delay+0x34>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0a      	ldr	r2, [pc, #40]	@ (800359c <RCC_Delay+0x38>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0a5b      	lsrs	r3, r3, #9
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003580:	bf00      	nop
  }
  while (Delay --);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1e5a      	subs	r2, r3, #1
 8003586:	60fa      	str	r2, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f9      	bne.n	8003580 <RCC_Delay+0x1c>
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20000008 	.word	0x20000008
 800359c:	10624dd3 	.word	0x10624dd3

080035a0 <apply_moving_average>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Enhanced filtering with moving average
uint32_t apply_moving_average(uint32_t new_sample, uint32_t *filter_buffer, int *filter_index) {
 80035a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035a4:	b088      	sub	sp, #32
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
    filter_buffer[*filter_index] = new_sample;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	4413      	add	r3, r2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]
    *filter_index = (*filter_index + 1) % FILTER_SIZE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	1c59      	adds	r1, r3, #1
 80035c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <apply_moving_average+0x98>)
 80035c4:	fb83 2301 	smull	r2, r3, r3, r1
 80035c8:	105a      	asrs	r2, r3, #1
 80035ca:	17cb      	asrs	r3, r1, #31
 80035cc:	1ad2      	subs	r2, r2, r3
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	1aca      	subs	r2, r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]

    uint64_t sum = 0;
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for(int i = 0; i < FILTER_SIZE; i++) {
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e012      	b.n	8003612 <apply_moving_average+0x72>
        sum += filter_buffer[i];
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	4413      	add	r3, r2
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	461c      	mov	r4, r3
 80035fa:	4615      	mov	r5, r2
 80035fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003600:	eb12 0804 	adds.w	r8, r2, r4
 8003604:	eb43 0905 	adc.w	r9, r3, r5
 8003608:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(int i = 0; i < FILTER_SIZE; i++) {
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3301      	adds	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b04      	cmp	r3, #4
 8003616:	dde9      	ble.n	80035ec <apply_moving_average+0x4c>
    }
    return sum / FILTER_SIZE;
 8003618:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800361c:	f04f 0205 	mov.w	r2, #5
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	f7fd fd74 	bl	8001110 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003638:	66666667 	.word	0x66666667

0800363c <calculate_bpm_average>:

// Function to calculate BPM average
float calculate_bpm_average(float *bpm_array, int count) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
    if (count == 0) return 0.0;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <calculate_bpm_average+0x16>
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e020      	b.n	8003694 <calculate_bpm_average+0x58>

    float sum = 0.0;
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < count; i++) {
 8003658:	2300      	movs	r3, #0
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	e00d      	b.n	800367a <calculate_bpm_average+0x3e>
        sum += bpm_array[i];
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4619      	mov	r1, r3
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7fd fa82 	bl	8000b74 <__addsf3>
 8003670:	4603      	mov	r3, r0
 8003672:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < count; i++) {
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	3301      	adds	r3, #1
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	dbed      	blt.n	800365e <calculate_bpm_average+0x22>
    }
    return sum / count;
 8003682:	6838      	ldr	r0, [r7, #0]
 8003684:	f7fd fb2a 	bl	8000cdc <__aeabi_i2f>
 8003688:	4603      	mov	r3, r0
 800368a:	4619      	mov	r1, r3
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7fd fc2d 	bl	8000eec <__aeabi_fdiv>
 8003692:	4603      	mov	r3, r0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	0000      	movs	r0, r0
	...

080036a0 <main>:
/**
* @brief The application entry point.
* @retval int
*/
int main(void)
{
 80036a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036a4:	f5ad 7d1e 	sub.w	sp, sp, #632	@ 0x278
 80036a8:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80036aa:	f7fd fecb 	bl	8001444 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80036ae:	f000 fa33 	bl	8003b18 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80036b2:	f000 faa5 	bl	8003c00 <MX_GPIO_Init>
    MX_I2C1_Init();
 80036b6:	f000 fa75 	bl	8003ba4 <MX_I2C1_Init>

    /* USER CODE BEGIN 2 */
    // Initialize MAX30102 and SSD1306
    ssd1306_Init();
 80036ba:	f000 fda9 	bl	8004210 <ssd1306_Init>
    max30102_init(&max30102, &hi2c1);
 80036be:	49c4      	ldr	r1, [pc, #784]	@ (80039d0 <main+0x330>)
 80036c0:	48c4      	ldr	r0, [pc, #784]	@ (80039d4 <main+0x334>)
 80036c2:	f000 fadb 	bl	8003c7c <max30102_init>
    max30102_reset(&max30102);
 80036c6:	48c3      	ldr	r0, [pc, #780]	@ (80039d4 <main+0x334>)
 80036c8:	f000 fb4f 	bl	8003d6a <max30102_reset>
    HAL_Delay(100); // Allow reset to complete
 80036cc:	2064      	movs	r0, #100	@ 0x64
 80036ce:	f7fd ff1b 	bl	8001508 <HAL_Delay>
    max30102_clear_fifo(&max30102);
 80036d2:	48c0      	ldr	r0, [pc, #768]	@ (80039d4 <main+0x334>)
 80036d4:	f000 fcdc 	bl	8004090 <max30102_clear_fifo>

    // FIFO configuration
    max30102_set_fifo_config(&max30102, max30102_smp_ave_4, 1, 15);
 80036d8:	230f      	movs	r3, #15
 80036da:	2201      	movs	r2, #1
 80036dc:	2102      	movs	r1, #2
 80036de:	48bd      	ldr	r0, [pc, #756]	@ (80039d4 <main+0x334>)
 80036e0:	f000 fc9a 	bl	8004018 <max30102_set_fifo_config>

    // Sensor settings
    max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80036e4:	2101      	movs	r1, #1
 80036e6:	48bb      	ldr	r0, [pc, #748]	@ (80039d4 <main+0x334>)
 80036e8:	f000 fbf0 	bl	8003ecc <max30102_set_led_pulse_width>
    max30102_set_adc_resolution(&max30102, max30102_adc_4096);
 80036ec:	2101      	movs	r1, #1
 80036ee:	48b9      	ldr	r0, [pc, #740]	@ (80039d4 <main+0x334>)
 80036f0:	f000 fc0f 	bl	8003f12 <max30102_set_adc_resolution>
    max30102_set_sampling_rate(&max30102, max30102_sr_100);
 80036f4:	2101      	movs	r1, #1
 80036f6:	48b7      	ldr	r0, [pc, #732]	@ (80039d4 <main+0x334>)
 80036f8:	f000 fbc3 	bl	8003e82 <max30102_set_sampling_rate>

    // LED current settings
    max30102_set_led_current_1(&max30102, 10.0);
 80036fc:	49b6      	ldr	r1, [pc, #728]	@ (80039d8 <main+0x338>)
 80036fe:	48b5      	ldr	r0, [pc, #724]	@ (80039d4 <main+0x334>)
 8003700:	f000 fc2e 	bl	8003f60 <max30102_set_led_current_1>
    max30102_set_led_current_2(&max30102, 10.0);
 8003704:	49b4      	ldr	r1, [pc, #720]	@ (80039d8 <main+0x338>)
 8003706:	48b3      	ldr	r0, [pc, #716]	@ (80039d4 <main+0x334>)
 8003708:	f000 fc5e 	bl	8003fc8 <max30102_set_led_current_2>

    // Enter SpO2 mode
    max30102_set_mode(&max30102, max30102_spo2);
 800370c:	2103      	movs	r1, #3
 800370e:	48b1      	ldr	r0, [pc, #708]	@ (80039d4 <main+0x334>)
 8003710:	f000 fb91 	bl	8003e36 <max30102_set_mode>
    max30102_set_a_full(&max30102, 1);
 8003714:	2101      	movs	r1, #1
 8003716:	48af      	ldr	r0, [pc, #700]	@ (80039d4 <main+0x334>)
 8003718:	f000 fb38 	bl	8003d8c <max30102_set_a_full>
    max30102_set_ppg_rdy(&max30102, 1);
 800371c:	2101      	movs	r1, #1
 800371e:	48ad      	ldr	r0, [pc, #692]	@ (80039d4 <main+0x334>)
 8003720:	f000 fb5d 	bl	8003dde <max30102_set_ppg_rdy>

    // Wait for sensor to start
    HAL_Delay(1000);
 8003724:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003728:	f7fd feee 	bl	8001508 <HAL_Delay>

    // Signal processing variables
    uint32_t ir_buffer[BUFFER_SIZE] = {0};
 800372c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003730:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003734:	4618      	mov	r0, r3
 8003736:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800373a:	461a      	mov	r2, r3
 800373c:	2100      	movs	r1, #0
 800373e:	f001 ff46 	bl	80055ce <memset>
    int buffer_index = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
    uint32_t filtered_buffer[FILTER_SIZE] = {0};
 8003748:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800374c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003750:	461a      	mov	r2, r3
 8003752:	2300      	movs	r3, #0
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	6053      	str	r3, [r2, #4]
 8003758:	6093      	str	r3, [r2, #8]
 800375a:	60d3      	str	r3, [r2, #12]
 800375c:	6113      	str	r3, [r2, #16]
    int filter_index = 0;
 800375e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003762:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

    // Peak detection variables
    uint32_t last_peak_time = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
    float current_bpm = 0;
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
    int32_t prev_signal = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
    int32_t prev_prev_signal = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    bool peak_found = false;
 8003784:	2300      	movs	r3, #0
 8003786:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b

    // BPM averaging variables
    float bpm_array[BPM_AVERAGE_SIZE];
    int bpm_counter = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    float average_bpm = 0.0;
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    bool array_filled = false;
 8003798:	2300      	movs	r3, #0
 800379a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

    // Initialize BPM array
    for (int i = 0; i < BPM_AVERAGE_SIZE; i++) {
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 80037a4:	e00e      	b.n	80037c4 <main+0x124>
        bpm_array[i] = 0.0;
 80037a6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80037aa:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80037ae:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < BPM_AVERAGE_SIZE; i++) {
 80037ba:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80037be:	3301      	adds	r3, #1
 80037c0:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 80037c4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	ddec      	ble.n	80037a6 <main+0x106>
    }

    // Startup counter to fill buffer
    uint32_t startup_samples = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Read FIFO
        max30102_read_fifo(&max30102);
 80037d2:	4880      	ldr	r0, [pc, #512]	@ (80039d4 <main+0x334>)
 80037d4:	f000 fc7b 	bl	80040ce <max30102_read_fifo>
        uint32_t ir_value = max30102._ir_samples[0];
 80037d8:	4b7e      	ldr	r3, [pc, #504]	@ (80039d4 <main+0x334>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

        // Apply moving average filter
        uint32_t filtered_value = apply_moving_average(ir_value, filtered_buffer, &filter_index);
 80037e0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80037e4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80037e8:	4619      	mov	r1, r3
 80037ea:	f8d7 0230 	ldr.w	r0, [r7, #560]	@ 0x230
 80037ee:	f7ff fed7 	bl	80035a0 <apply_moving_average>
 80037f2:	f8c7 022c 	str.w	r0, [r7, #556]	@ 0x22c

        // Store in circular buffer for baseline calculation
        ir_buffer[buffer_index++] = filtered_value;
 80037f6:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8003800:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8003804:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8003808:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 800380c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (buffer_index >= BUFFER_SIZE) buffer_index = 0;
 8003810:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8003814:	2b63      	cmp	r3, #99	@ 0x63
 8003816:	dd02      	ble.n	800381e <main+0x17e>
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c

        // Skip processing until buffer is filled
        if (startup_samples < BUFFER_SIZE) {
 800381e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003822:	2b63      	cmp	r3, #99	@ 0x63
 8003824:	d808      	bhi.n	8003838 <main+0x198>
            startup_samples++;
 8003826:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800382a:	3301      	adds	r3, #1
 800382c:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
            HAL_Delay(10);
 8003830:	200a      	movs	r0, #10
 8003832:	f7fd fe69 	bl	8001508 <HAL_Delay>
 8003836:	e7cc      	b.n	80037d2 <main+0x132>
            continue;
        }

        // Calculate baseline as average
        uint64_t sum = 0;
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
        for (int i = 0; i < BUFFER_SIZE; i++) {
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800384a:	e017      	b.n	800387c <main+0x1dc>
            sum += ir_buffer[i];
 800384c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003850:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003854:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	2200      	movs	r2, #0
 800385e:	461c      	mov	r4, r3
 8003860:	4615      	mov	r5, r2
 8003862:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8003866:	eb12 0804 	adds.w	r8, r2, r4
 800386a:	eb43 0905 	adc.w	r9, r3, r5
 800386e:	e9c7 898e 	strd	r8, r9, [r7, #568]	@ 0x238
        for (int i = 0; i < BUFFER_SIZE; i++) {
 8003872:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003876:	3301      	adds	r3, #1
 8003878:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800387c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003880:	2b63      	cmp	r3, #99	@ 0x63
 8003882:	dde3      	ble.n	800384c <main+0x1ac>
        }
        uint32_t baseline = sum / BUFFER_SIZE;
 8003884:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 8003888:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	f7fd fc3e 	bl	8001110 <__aeabi_uldivmod>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4613      	mov	r3, r2
 800389a:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228

        // AC component (signal minus baseline)
        int32_t ir_ac = (int32_t)filtered_value - (int32_t)baseline;
 800389e:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80038a2:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

        uint32_t current_time = HAL_GetTick();
 80038ac:	f7fd fe22 	bl	80014f4 <HAL_GetTick>
 80038b0:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220

        // 3-point peak detection
        if (ir_ac > prev_signal && prev_signal > prev_prev_signal &&
 80038b4:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 80038b8:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80038bc:	429a      	cmp	r2, r3
 80038be:	f340 8091 	ble.w	80039e4 <main+0x344>
 80038c2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80038c6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	f340 808a 	ble.w	80039e4 <main+0x344>
 80038d0:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80038d4:	2b1e      	cmp	r3, #30
 80038d6:	f340 8085 	ble.w	80039e4 <main+0x344>
            ir_ac > SIGNAL_THRESHOLD && !peak_found) {
 80038da:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 80038de:	f083 0301 	eor.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d07d      	beq.n	80039e4 <main+0x344>

            // Peak detected at previous point
            if (current_time - last_peak_time > MIN_PEAK_DISTANCE) {
 80038e8:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80038ec:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80038f4:	d97f      	bls.n	80039f6 <main+0x356>

                // Calculate BPM
                if (last_peak_time > 0) {
 80038f6:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d05a      	beq.n	80039b4 <main+0x314>
                    uint32_t interval = current_time - last_peak_time;
 80038fe:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8003902:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
                    current_bpm = 60000.0 / interval;
 800390c:	f8d7 021c 	ldr.w	r0, [r7, #540]	@ 0x21c
 8003910:	f7fc fd68 	bl	80003e4 <__aeabi_ui2d>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	a12b      	add	r1, pc, #172	@ (adr r1, 80039c8 <main+0x328>)
 800391a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800391e:	f7fc ff05 	bl	800072c <__aeabi_ddiv>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	f7fd f8cd 	bl	8000ac8 <__aeabi_d2f>
 800392e:	4603      	mov	r3, r0
 8003930:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

                    // Validate BPM range (40-200 BPM)
                    if (current_bpm >= 40 && current_bpm <= 200) {
 8003934:	4929      	ldr	r1, [pc, #164]	@ (80039dc <main+0x33c>)
 8003936:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 800393a:	f7fd fbd5 	bl	80010e8 <__aeabi_fcmpge>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d037      	beq.n	80039b4 <main+0x314>
 8003944:	4926      	ldr	r1, [pc, #152]	@ (80039e0 <main+0x340>)
 8003946:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 800394a:	f7fd fbc3 	bl	80010d4 <__aeabi_fcmple>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02f      	beq.n	80039b4 <main+0x314>

                        // Add to BPM array for averaging
                        bpm_array[bpm_counter] = current_bpm;
 8003954:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003958:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800395c:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8003960:	f8d7 1264 	ldr.w	r1, [r7, #612]	@ 0x264
 8003964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        bpm_counter++;
 8003968:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800396c:	3301      	adds	r3, #1
 800396e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

                        // Check if array is full
                        if (bpm_counter >= BPM_AVERAGE_SIZE) {
 8003972:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003976:	2b09      	cmp	r3, #9
 8003978:	dd05      	ble.n	8003986 <main+0x2e6>
                            bpm_counter = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
                            array_filled = true;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
                        }

                        // Calculate average BPM
                        int count_for_average = array_filled ? BPM_AVERAGE_SIZE : bpm_counter;
 8003986:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <main+0x2f2>
 800398e:	230a      	movs	r3, #10
 8003990:	e001      	b.n	8003996 <main+0x2f6>
 8003992:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003996:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
                        if (count_for_average > 0) {
 800399a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800399e:	2b00      	cmp	r3, #0
 80039a0:	dd08      	ble.n	80039b4 <main+0x314>
                            average_bpm = calculate_bpm_average(bpm_array, count_for_average);
 80039a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80039a6:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fe46 	bl	800363c <calculate_bpm_average>
 80039b0:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
                        }
                    }
                }
                last_peak_time = current_time;
 80039b4:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80039b8:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
                peak_found = true;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
            if (current_time - last_peak_time > MIN_PEAK_DISTANCE) {
 80039c2:	e018      	b.n	80039f6 <main+0x356>
 80039c4:	f3af 8000 	nop.w
 80039c8:	00000000 	.word	0x00000000
 80039cc:	40ed4c00 	.word	0x40ed4c00
 80039d0:	200001f4 	.word	0x200001f4
 80039d4:	20000248 	.word	0x20000248
 80039d8:	41200000 	.word	0x41200000
 80039dc:	42200000 	.word	0x42200000
 80039e0:	43480000 	.word	0x43480000
            }
        } else if (ir_ac < prev_signal) {
 80039e4:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 80039e8:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80039ec:	429a      	cmp	r2, r3
 80039ee:	da02      	bge.n	80039f6 <main+0x356>
            peak_found = false;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
        }

        // Update signal history
        prev_prev_signal = prev_signal;
 80039f6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80039fa:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        prev_signal = ir_ac;
 80039fe:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8003a02:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260

        // Display on OLED
        ssd1306_Fill(0); // Clear screen
 8003a06:	2000      	movs	r0, #0
 8003a08:	f000 fc6c 	bl	80042e4 <ssd1306_Fill>

        // Display current signal
        char signal_str[32];
        snprintf(signal_str, sizeof(signal_str), "Signal: %ld", ir_ac);
 8003a0c:	1d38      	adds	r0, r7, #4
 8003a0e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8003a12:	4a3c      	ldr	r2, [pc, #240]	@ (8003b04 <main+0x464>)
 8003a14:	2120      	movs	r1, #32
 8003a16:	f001 fd61 	bl	80054dc <sniprintf>
        ssd1306_SetCursor(0, 0);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f000 fdaf 	bl	8004580 <ssd1306_SetCursor>
        ssd1306_WriteString(signal_str, Font_7x10, White);
 8003a22:	4b39      	ldr	r3, [pc, #228]	@ (8003b08 <main+0x468>)
 8003a24:	1d38      	adds	r0, r7, #4
 8003a26:	2201      	movs	r2, #1
 8003a28:	9200      	str	r2, [sp, #0]
 8003a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a2c:	f000 fd82 	bl	8004534 <ssd1306_WriteString>

        // Display current BPM
        if (current_bpm > 0) {
 8003a30:	f04f 0100 	mov.w	r1, #0
 8003a34:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 8003a38:	f7fd fb60 	bl	80010fc <__aeabi_fcmpgt>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d019      	beq.n	8003a76 <main+0x3d6>
            char bpm_str[32];
            snprintf(bpm_str, sizeof(bpm_str), "BPM: %.0f", current_bpm);
 8003a42:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 8003a46:	f7fc fcef 	bl	8000428 <__aeabi_f2d>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a52:	e9cd 2300 	strd	r2, r3, [sp]
 8003a56:	4a2d      	ldr	r2, [pc, #180]	@ (8003b0c <main+0x46c>)
 8003a58:	2120      	movs	r1, #32
 8003a5a:	f001 fd3f 	bl	80054dc <sniprintf>
            ssd1306_SetCursor(0, 15);
 8003a5e:	210f      	movs	r1, #15
 8003a60:	2000      	movs	r0, #0
 8003a62:	f000 fd8d 	bl	8004580 <ssd1306_SetCursor>
            ssd1306_WriteString(bpm_str, Font_7x10, White);
 8003a66:	4b28      	ldr	r3, [pc, #160]	@ (8003b08 <main+0x468>)
 8003a68:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	9200      	str	r2, [sp, #0]
 8003a70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a72:	f000 fd5f 	bl	8004534 <ssd1306_WriteString>
        }

        // Display average BPM
        if (average_bpm > 0) {
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003a7e:	f7fd fb3d 	bl	80010fc <__aeabi_fcmpgt>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d019      	beq.n	8003abc <main+0x41c>
            char avg_bpm_str[32];
            snprintf(avg_bpm_str, sizeof(avg_bpm_str), "Avg: %.1f", average_bpm);
 8003a88:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003a8c:	f7fc fccc 	bl	8000428 <__aeabi_f2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a98:	e9cd 2300 	strd	r2, r3, [sp]
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <main+0x470>)
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	f001 fd1c 	bl	80054dc <sniprintf>
            ssd1306_SetCursor(0, 30);
 8003aa4:	211e      	movs	r1, #30
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f000 fd6a 	bl	8004580 <ssd1306_SetCursor>
            ssd1306_WriteString(avg_bpm_str, Font_7x10, White);
 8003aac:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <main+0x468>)
 8003aae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	9200      	str	r2, [sp, #0]
 8003ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab8:	f000 fd3c 	bl	8004534 <ssd1306_WriteString>
        }

        // Display sample count for averaging
        char count_str[32];
        int display_count = array_filled ? BPM_AVERAGE_SIZE : bpm_counter;
 8003abc:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <main+0x428>
 8003ac4:	230a      	movs	r3, #10
 8003ac6:	e001      	b.n	8003acc <main+0x42c>
 8003ac8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003acc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
        snprintf(count_str, sizeof(count_str), "Samples: %d", display_count);
 8003ad0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003ad4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8003b14 <main+0x474>)
 8003ada:	2120      	movs	r1, #32
 8003adc:	f001 fcfe 	bl	80054dc <sniprintf>
        ssd1306_SetCursor(0, 45);
 8003ae0:	212d      	movs	r1, #45	@ 0x2d
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f000 fd4c 	bl	8004580 <ssd1306_SetCursor>
        ssd1306_WriteString(count_str, Font_7x10, White);
 8003ae8:	4b07      	ldr	r3, [pc, #28]	@ (8003b08 <main+0x468>)
 8003aea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003aee:	2201      	movs	r2, #1
 8003af0:	9200      	str	r2, [sp, #0]
 8003af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af4:	f000 fd1e 	bl	8004534 <ssd1306_WriteString>

        ssd1306_UpdateScreen();
 8003af8:	f000 fc0c 	bl	8004314 <ssd1306_UpdateScreen>
        HAL_Delay(10);
 8003afc:	200a      	movs	r0, #10
 8003afe:	f7fd fd03 	bl	8001508 <HAL_Delay>
    {
 8003b02:	e666      	b.n	80037d2 <main+0x132>
 8003b04:	08007628 	.word	0x08007628
 8003b08:	08007dd8 	.word	0x08007dd8
 8003b0c:	08007634 	.word	0x08007634
 8003b10:	08007640 	.word	0x08007640
 8003b14:	0800764c 	.word	0x0800764c

08003b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b090      	sub	sp, #64	@ 0x40
 8003b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b1e:	f107 0318 	add.w	r3, r7, #24
 8003b22:	2228      	movs	r2, #40	@ 0x28
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fd51 	bl	80055ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitStruct structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b56:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b5c:	f107 0318 	add.w	r3, r7, #24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff f921 	bl	8002da8 <HAL_RCC_OscConfig>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003b6c:	f000 f876 	bl	8003c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b70:	230f      	movs	r3, #15
 8003b72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b74:	2302      	movs	r3, #2
 8003b76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	2102      	movs	r1, #2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fb8e 	bl	80032ac <HAL_RCC_ClockConfig>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003b96:	f000 f861 	bl	8003c5c <Error_Handler>
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3740      	adds	r7, #64	@ 0x40
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ba8:	4b12      	ldr	r3, [pc, #72]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003baa:	4a13      	ldr	r2, [pc, #76]	@ (8003bf8 <MX_I2C1_Init+0x54>)
 8003bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003bae:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003bb0:	4a12      	ldr	r2, [pc, #72]	@ (8003bfc <MX_I2C1_Init+0x58>)
 8003bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003bc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003bc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003bce:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bd4:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bda:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003be0:	4804      	ldr	r0, [pc, #16]	@ (8003bf4 <MX_I2C1_Init+0x50>)
 8003be2:	f7fd ff1d 	bl	8001a20 <HAL_I2C_Init>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003bec:	f000 f836 	bl	8003c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200001f4 	.word	0x200001f4
 8003bf8:	40005400 	.word	0x40005400
 8003bfc:	00061a80 	.word	0x00061a80

08003c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c06:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <MX_GPIO_Init+0x58>)
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <MX_GPIO_Init+0x58>)
 8003c0c:	f043 0320 	orr.w	r3, r3, #32
 8003c10:	6193      	str	r3, [r2, #24]
 8003c12:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <MX_GPIO_Init+0x58>)
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <MX_GPIO_Init+0x58>)
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	4a0d      	ldr	r2, [pc, #52]	@ (8003c58 <MX_GPIO_Init+0x58>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	6193      	str	r3, [r2, #24]
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <MX_GPIO_Init+0x58>)
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c36:	4b08      	ldr	r3, [pc, #32]	@ (8003c58 <MX_GPIO_Init+0x58>)
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	4a07      	ldr	r2, [pc, #28]	@ (8003c58 <MX_GPIO_Init+0x58>)
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	6193      	str	r3, [r2, #24]
 8003c42:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <MX_GPIO_Init+0x58>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	40021000 	.word	0x40021000

08003c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c60:	b672      	cpsid	i
}
 8003c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <Error_Handler+0x8>

08003c68 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	2280      	movs	r2, #128	@ 0x80
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fc96 	bl	80055ce <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3384      	adds	r3, #132	@ 0x84
 8003ca6:	2280      	movs	r2, #128	@ 0x80
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fc8f 	bl	80055ce <memset>
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	72fb      	strb	r3, [r7, #11]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8003ccc:	893b      	ldrh	r3, [r7, #8]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fe29 	bl	8004928 <malloc>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	7afa      	ldrb	r2, [r7, #11]
 8003cde:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <max30102_write+0x42>
 8003ce6:	893b      	ldrh	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d006      	beq.n	8003cfa <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	893a      	ldrh	r2, [r7, #8]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 fd08 	bl	800570a <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	893b      	ldrh	r3, [r7, #8]
 8003d00:	3301      	adds	r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d08:	9200      	str	r2, [sp, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	21ae      	movs	r1, #174	@ 0xae
 8003d0e:	f7fd ffcb 	bl	8001ca8 <HAL_I2C_Master_Transmit>
    free(payload);
 8003d12:	6978      	ldr	r0, [r7, #20]
 8003d14:	f000 fe10 	bl	8004938 <free>
}
 8003d18:	bf00      	nop
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	72fb      	strb	r3, [r7, #11]
 8003d30:	4613      	mov	r3, r2
 8003d32:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8003d34:	7afb      	ldrb	r3, [r7, #11]
 8003d36:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	f107 0217 	add.w	r2, r7, #23
 8003d40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	2301      	movs	r3, #1
 8003d48:	21ae      	movs	r1, #174	@ 0xae
 8003d4a:	f7fd ffad 	bl	8001ca8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	893b      	ldrh	r3, [r7, #8]
 8003d54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d58:	9200      	str	r2, [sp, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	21ae      	movs	r1, #174	@ 0xae
 8003d5e:	f7fe f8a1 	bl	8001ea4 <HAL_I2C_Master_Receive>
}
 8003d62:	bf00      	nop
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8003d72:	2340      	movs	r3, #64	@ 0x40
 8003d74:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8003d76:	f107 020f 	add.w	r2, r7, #15
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	2109      	movs	r1, #9
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ff9a 	bl	8003cb8 <max30102_write>
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003d9c:	f107 020f 	add.w	r2, r7, #15
 8003da0:	2301      	movs	r3, #1
 8003da2:	2102      	movs	r1, #2
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ffbb 	bl	8003d20 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8003db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003db8:	01db      	lsls	r3, r3, #7
 8003dba:	b25a      	sxtb	r2, r3
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	b25b      	sxtb	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003dc8:	f107 020f 	add.w	r2, r7, #15
 8003dcc:	2301      	movs	r3, #1
 8003dce:	2102      	movs	r1, #2
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff71 	bl	8003cb8 <max30102_write>
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <max30102_set_ppg_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_ppg_rdy(max30102_t *obj, uint8_t enable)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003dee:	f107 020f 	add.w	r2, r7, #15
 8003df2:	2301      	movs	r3, #1
 8003df4:	2102      	movs	r1, #2
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ff92 	bl	8003d20 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_PPG_RDY);
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_PPG_RDY);
 8003e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e0a:	019b      	lsls	r3, r3, #6
 8003e0c:	b25b      	sxtb	r3, r3
 8003e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e12:	b25a      	sxtb	r2, r3
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	b25b      	sxtb	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003e20:	f107 020f 	add.w	r2, r7, #15
 8003e24:	2301      	movs	r3, #1
 8003e26:	2102      	movs	r1, #2
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff45 	bl	8003cb8 <max30102_write>
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003e42:	f107 020f 	add.w	r2, r7, #15
 8003e46:	2301      	movs	r3, #1
 8003e48:	2109      	movs	r1, #9
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ff68 	bl	8003d20 <max30102_read>
    config = (config & 0xf8) | mode;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	f023 0307 	bic.w	r3, r3, #7
 8003e58:	b25a      	sxtb	r2, r3
 8003e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003e66:	f107 020f 	add.w	r2, r7, #15
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	2109      	movs	r1, #9
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff22 	bl	8003cb8 <max30102_write>
    max30102_clear_fifo(obj);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f90b 	bl	8004090 <max30102_clear_fifo>
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003e8e:	f107 020f 	add.w	r2, r7, #15
 8003e92:	2301      	movs	r3, #1
 8003e94:	210a      	movs	r1, #10
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ff42 	bl	8003d20 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 8003ea4:	b25a      	sxtb	r2, r3
 8003ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003eb6:	f107 020f 	add.w	r2, r7, #15
 8003eba:	2301      	movs	r3, #1
 8003ebc:	210a      	movs	r1, #10
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fefa 	bl	8003cb8 <max30102_write>
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003ed8:	f107 020f 	add.w	r2, r7, #15
 8003edc:	2301      	movs	r3, #1
 8003ede:	210a      	movs	r1, #10
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ff1d 	bl	8003d20 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003eee:	b25a      	sxtb	r2, r3
 8003ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003efc:	f107 020f 	add.w	r2, r7, #15
 8003f00:	2301      	movs	r3, #1
 8003f02:	210a      	movs	r1, #10
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fed7 	bl	8003cb8 <max30102_write>
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003f1e:	f107 020f 	add.w	r2, r7, #15
 8003f22:	2301      	movs	r3, #1
 8003f24:	210a      	movs	r1, #10
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fefa 	bl	8003d20 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	b25b      	sxtb	r3, r3
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	b25a      	sxtb	r2, r3
 8003f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f3a:	015b      	lsls	r3, r3, #5
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	b25b      	sxtb	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003f46:	f107 020f 	add.w	r2, r7, #15
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	210a      	movs	r1, #10
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff feb2 	bl	8003cb8 <max30102_write>
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	0000      	movs	r0, r0
	...

08003f60 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
	if (ma<51){
 8003f6a:	4915      	ldr	r1, [pc, #84]	@ (8003fc0 <max30102_set_led_current_1+0x60>)
 8003f6c:	6838      	ldr	r0, [r7, #0]
 8003f6e:	f7fd f8a7 	bl	80010c0 <__aeabi_fcmplt>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d100      	bne.n	8003f7a <max30102_set_led_current_1+0x1a>
		uint8_t pa = ma / 0.2;
		max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
	}
}
 8003f78:	e017      	b.n	8003faa <max30102_set_led_current_1+0x4a>
		uint8_t pa = ma / 0.2;
 8003f7a:	6838      	ldr	r0, [r7, #0]
 8003f7c:	f7fc fa54 	bl	8000428 <__aeabi_f2d>
 8003f80:	a30d      	add	r3, pc, #52	@ (adr r3, 8003fb8 <max30102_set_led_current_1+0x58>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f7fc fbd1 	bl	800072c <__aeabi_ddiv>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	f7fc fd79 	bl	8000a88 <__aeabi_d2uiz>
 8003f96:	4603      	mov	r3, r0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	73fb      	strb	r3, [r7, #15]
		max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8003f9c:	f107 020f 	add.w	r2, r7, #15
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	210c      	movs	r1, #12
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff fe87 	bl	8003cb8 <max30102_write>
}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	f3af 8000 	nop.w
 8003fb8:	9999999a 	.word	0x9999999a
 8003fbc:	3fc99999 	.word	0x3fc99999
 8003fc0:	424c0000 	.word	0x424c0000
 8003fc4:	00000000 	.word	0x00000000

08003fc8 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003fd2:	6838      	ldr	r0, [r7, #0]
 8003fd4:	f7fc fa28 	bl	8000428 <__aeabi_f2d>
 8003fd8:	a30d      	add	r3, pc, #52	@ (adr r3, 8004010 <max30102_set_led_current_2+0x48>)
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f7fc fba5 	bl	800072c <__aeabi_ddiv>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f7fc fd4d 	bl	8000a88 <__aeabi_d2uiz>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8003ff4:	f107 020f 	add.w	r2, r7, #15
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	210d      	movs	r1, #13
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff fe5b 	bl	8003cb8 <max30102_write>
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	f3af 8000 	nop.w
 8004010:	9999999a 	.word	0x9999999a
 8004014:	3fc99999 	.word	0x3fc99999

08004018 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	461a      	mov	r2, r3
 8004026:	4603      	mov	r3, r0
 8004028:	70fb      	strb	r3, [r7, #3]
 800402a:	460b      	mov	r3, r1
 800402c:	70bb      	strb	r3, [r7, #2]
 800402e:	4613      	mov	r3, r2
 8004030:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8004036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800403a:	015b      	lsls	r3, r3, #5
 800403c:	b25a      	sxtb	r2, r3
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	b25b      	sxtb	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b25b      	sxtb	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 800404a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	b25b      	sxtb	r3, r3
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	b25a      	sxtb	r2, r3
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	b25b      	sxtb	r3, r3
 800405c:	4313      	orrs	r3, r2
 800405e:	b25b      	sxtb	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8004064:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	b25a      	sxtb	r2, r3
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	b25b      	sxtb	r3, r3
 8004072:	4313      	orrs	r3, r2
 8004074:	b25b      	sxtb	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800407a:	f107 020f 	add.w	r2, r7, #15
 800407e:	2301      	movs	r3, #1
 8004080:	2108      	movs	r1, #8
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fe18 	bl	8003cb8 <max30102_write>
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8004098:	2300      	movs	r3, #0
 800409a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 800409c:	f107 020f 	add.w	r2, r7, #15
 80040a0:	2303      	movs	r3, #3
 80040a2:	2104      	movs	r1, #4
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fe07 	bl	8003cb8 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 80040aa:	f107 020f 	add.w	r2, r7, #15
 80040ae:	2303      	movs	r3, #3
 80040b0:	2106      	movs	r1, #6
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff fe00 	bl	8003cb8 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 80040b8:	f107 020f 	add.w	r2, r7, #15
 80040bc:	2303      	movs	r3, #3
 80040be:	2105      	movs	r1, #5
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fdf9 	bl	8003cb8 <max30102_write>
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b088      	sub	sp, #32
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	74fb      	strb	r3, [r7, #19]
 80040da:	2300      	movs	r3, #0
 80040dc:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 80040de:	f107 0213 	add.w	r2, r7, #19
 80040e2:	2301      	movs	r3, #1
 80040e4:	2104      	movs	r1, #4
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff fe1a 	bl	8003d20 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 80040ec:	f107 0212 	add.w	r2, r7, #18
 80040f0:	2301      	movs	r3, #1
 80040f2:	2106      	movs	r1, #6
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fe13 	bl	8003d20 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 80040fa:	7cfa      	ldrb	r2, [r7, #19]
 80040fc:	7cbb      	ldrb	r3, [r7, #18]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8004104:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004108:	2b00      	cmp	r3, #0
 800410a:	dc03      	bgt.n	8004114 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 800410c:	7ffb      	ldrb	r3, [r7, #31]
 800410e:	3320      	adds	r3, #32
 8004110:	b2db      	uxtb	r3, r3
 8004112:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8004114:	2300      	movs	r3, #0
 8004116:	77bb      	strb	r3, [r7, #30]
 8004118:	e033      	b.n	8004182 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800411a:	f107 020c 	add.w	r2, r7, #12
 800411e:	2306      	movs	r3, #6
 8004120:	2107      	movs	r1, #7
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fdfc 	bl	8003d20 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8004128:	7b3b      	ldrb	r3, [r7, #12]
 800412a:	041a      	lsls	r2, r3, #16
 800412c:	7b7b      	ldrb	r3, [r7, #13]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	4313      	orrs	r3, r2
 8004132:	7bba      	ldrb	r2, [r7, #14]
 8004134:	4313      	orrs	r3, r2
 8004136:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800413a:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	041a      	lsls	r2, r3, #16
 8004140:	7c3b      	ldrb	r3, [r7, #16]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	4313      	orrs	r3, r2
 8004146:	7c7a      	ldrb	r2, [r7, #17]
 8004148:	4313      	orrs	r3, r2
 800414a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800414e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8004150:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800415e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	3320      	adds	r3, #32
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800416e:	6979      	ldr	r1, [r7, #20]
 8004170:	69b8      	ldr	r0, [r7, #24]
 8004172:	f7ff fd79 	bl	8003c68 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8004176:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3301      	adds	r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	77bb      	strb	r3, [r7, #30]
 8004182:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004186:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800418a:	429a      	cmp	r2, r3
 800418c:	dbc5      	blt.n	800411a <max30102_read_fifo+0x4c>
    }
    obj->_sample_count = num_samples;
 800418e:	7ffa      	ldrb	r2, [r7, #31]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
}
 8004196:	bf00      	nop
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
	...

080041ac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af04      	add	r7, sp, #16
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	2301      	movs	r3, #1
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	1dfb      	adds	r3, r7, #7
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2301      	movs	r3, #1
 80041c6:	2200      	movs	r2, #0
 80041c8:	2178      	movs	r1, #120	@ 0x78
 80041ca:	4803      	ldr	r0, [pc, #12]	@ (80041d8 <ssd1306_WriteCommand+0x2c>)
 80041cc:	f7fe f8d6 	bl	800237c <HAL_I2C_Mem_Write>
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	200001f4 	.word	0x200001f4

080041dc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af04      	add	r7, sp, #16
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	9202      	str	r2, [sp, #8]
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2301      	movs	r3, #1
 80041f8:	2240      	movs	r2, #64	@ 0x40
 80041fa:	2178      	movs	r1, #120	@ 0x78
 80041fc:	4803      	ldr	r0, [pc, #12]	@ (800420c <ssd1306_WriteData+0x30>)
 80041fe:	f7fe f8bd 	bl	800237c <HAL_I2C_Mem_Write>
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200001f4 	.word	0x200001f4

08004210 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004214:	f7ff ffc3 	bl	800419e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004218:	2064      	movs	r0, #100	@ 0x64
 800421a:	f7fd f975 	bl	8001508 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800421e:	2000      	movs	r0, #0
 8004220:	f000 f9da 	bl	80045d8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004224:	2020      	movs	r0, #32
 8004226:	f7ff ffc1 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800422a:	2000      	movs	r0, #0
 800422c:	f7ff ffbe 	bl	80041ac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004230:	20b0      	movs	r0, #176	@ 0xb0
 8004232:	f7ff ffbb 	bl	80041ac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004236:	20c8      	movs	r0, #200	@ 0xc8
 8004238:	f7ff ffb8 	bl	80041ac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800423c:	2000      	movs	r0, #0
 800423e:	f7ff ffb5 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004242:	2010      	movs	r0, #16
 8004244:	f7ff ffb2 	bl	80041ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004248:	2040      	movs	r0, #64	@ 0x40
 800424a:	f7ff ffaf 	bl	80041ac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800424e:	20ff      	movs	r0, #255	@ 0xff
 8004250:	f000 f9ae 	bl	80045b0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004254:	20a1      	movs	r0, #161	@ 0xa1
 8004256:	f7ff ffa9 	bl	80041ac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800425a:	20a6      	movs	r0, #166	@ 0xa6
 800425c:	f7ff ffa6 	bl	80041ac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004260:	20a8      	movs	r0, #168	@ 0xa8
 8004262:	f7ff ffa3 	bl	80041ac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004266:	203f      	movs	r0, #63	@ 0x3f
 8004268:	f7ff ffa0 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800426c:	20a4      	movs	r0, #164	@ 0xa4
 800426e:	f7ff ff9d 	bl	80041ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004272:	20d3      	movs	r0, #211	@ 0xd3
 8004274:	f7ff ff9a 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004278:	2000      	movs	r0, #0
 800427a:	f7ff ff97 	bl	80041ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800427e:	20d5      	movs	r0, #213	@ 0xd5
 8004280:	f7ff ff94 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004284:	20f0      	movs	r0, #240	@ 0xf0
 8004286:	f7ff ff91 	bl	80041ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800428a:	20d9      	movs	r0, #217	@ 0xd9
 800428c:	f7ff ff8e 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004290:	2022      	movs	r0, #34	@ 0x22
 8004292:	f7ff ff8b 	bl	80041ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004296:	20da      	movs	r0, #218	@ 0xda
 8004298:	f7ff ff88 	bl	80041ac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800429c:	2012      	movs	r0, #18
 800429e:	f7ff ff85 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80042a2:	20db      	movs	r0, #219	@ 0xdb
 80042a4:	f7ff ff82 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80042a8:	2020      	movs	r0, #32
 80042aa:	f7ff ff7f 	bl	80041ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80042ae:	208d      	movs	r0, #141	@ 0x8d
 80042b0:	f7ff ff7c 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80042b4:	2014      	movs	r0, #20
 80042b6:	f7ff ff79 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80042ba:	2001      	movs	r0, #1
 80042bc:	f000 f98c 	bl	80045d8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80042c0:	2000      	movs	r0, #0
 80042c2:	f000 f80f 	bl	80042e4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80042c6:	f000 f825 	bl	8004314 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80042ca:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <ssd1306_Init+0xd0>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80042d0:	4b03      	ldr	r3, [pc, #12]	@ (80042e0 <ssd1306_Init+0xd0>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80042d6:	4b02      	ldr	r3, [pc, #8]	@ (80042e0 <ssd1306_Init+0xd0>)
 80042d8:	2201      	movs	r2, #1
 80042da:	711a      	strb	r2, [r3, #4]
}
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000750 	.word	0x20000750

080042e4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <ssd1306_Fill+0x14>
 80042f4:	2300      	movs	r3, #0
 80042f6:	e000      	b.n	80042fa <ssd1306_Fill+0x16>
 80042f8:	23ff      	movs	r3, #255	@ 0xff
 80042fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042fe:	4619      	mov	r1, r3
 8004300:	4803      	ldr	r0, [pc, #12]	@ (8004310 <ssd1306_Fill+0x2c>)
 8004302:	f001 f964 	bl	80055ce <memset>
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000350 	.word	0x20000350

08004314 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800431a:	2300      	movs	r3, #0
 800431c:	71fb      	strb	r3, [r7, #7]
 800431e:	e016      	b.n	800434e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	3b50      	subs	r3, #80	@ 0x50
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ff40 	bl	80041ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800432c:	2000      	movs	r0, #0
 800432e:	f7ff ff3d 	bl	80041ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004332:	2010      	movs	r0, #16
 8004334:	f7ff ff3a 	bl	80041ac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	01db      	lsls	r3, r3, #7
 800433c:	4a08      	ldr	r2, [pc, #32]	@ (8004360 <ssd1306_UpdateScreen+0x4c>)
 800433e:	4413      	add	r3, r2
 8004340:	2180      	movs	r1, #128	@ 0x80
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff ff4a 	bl	80041dc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	3301      	adds	r3, #1
 800434c:	71fb      	strb	r3, [r7, #7]
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	2b07      	cmp	r3, #7
 8004352:	d9e5      	bls.n	8004320 <ssd1306_UpdateScreen+0xc>
    }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000350 	.word	0x20000350

08004364 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
 800436e:	460b      	mov	r3, r1
 8004370:	71bb      	strb	r3, [r7, #6]
 8004372:	4613      	mov	r3, r2
 8004374:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	2b00      	cmp	r3, #0
 800437c:	db3d      	blt.n	80043fa <ssd1306_DrawPixel+0x96>
 800437e:	79bb      	ldrb	r3, [r7, #6]
 8004380:	2b3f      	cmp	r3, #63	@ 0x3f
 8004382:	d83a      	bhi.n	80043fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004384:	797b      	ldrb	r3, [r7, #5]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d11a      	bne.n	80043c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800438a:	79fa      	ldrb	r2, [r7, #7]
 800438c:	79bb      	ldrb	r3, [r7, #6]
 800438e:	08db      	lsrs	r3, r3, #3
 8004390:	b2d8      	uxtb	r0, r3
 8004392:	4603      	mov	r3, r0
 8004394:	01db      	lsls	r3, r3, #7
 8004396:	4413      	add	r3, r2
 8004398:	4a1a      	ldr	r2, [pc, #104]	@ (8004404 <ssd1306_DrawPixel+0xa0>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	b25a      	sxtb	r2, r3
 800439e:	79bb      	ldrb	r3, [r7, #6]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	2101      	movs	r1, #1
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	b25b      	sxtb	r3, r3
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b259      	sxtb	r1, r3
 80043b0:	79fa      	ldrb	r2, [r7, #7]
 80043b2:	4603      	mov	r3, r0
 80043b4:	01db      	lsls	r3, r3, #7
 80043b6:	4413      	add	r3, r2
 80043b8:	b2c9      	uxtb	r1, r1
 80043ba:	4a12      	ldr	r2, [pc, #72]	@ (8004404 <ssd1306_DrawPixel+0xa0>)
 80043bc:	54d1      	strb	r1, [r2, r3]
 80043be:	e01d      	b.n	80043fc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80043c0:	79fa      	ldrb	r2, [r7, #7]
 80043c2:	79bb      	ldrb	r3, [r7, #6]
 80043c4:	08db      	lsrs	r3, r3, #3
 80043c6:	b2d8      	uxtb	r0, r3
 80043c8:	4603      	mov	r3, r0
 80043ca:	01db      	lsls	r3, r3, #7
 80043cc:	4413      	add	r3, r2
 80043ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004404 <ssd1306_DrawPixel+0xa0>)
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	b25a      	sxtb	r2, r3
 80043d4:	79bb      	ldrb	r3, [r7, #6]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	2101      	movs	r1, #1
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	b25b      	sxtb	r3, r3
 80043e6:	4013      	ands	r3, r2
 80043e8:	b259      	sxtb	r1, r3
 80043ea:	79fa      	ldrb	r2, [r7, #7]
 80043ec:	4603      	mov	r3, r0
 80043ee:	01db      	lsls	r3, r3, #7
 80043f0:	4413      	add	r3, r2
 80043f2:	b2c9      	uxtb	r1, r1
 80043f4:	4a03      	ldr	r2, [pc, #12]	@ (8004404 <ssd1306_DrawPixel+0xa0>)
 80043f6:	54d1      	strb	r1, [r2, r3]
 80043f8:	e000      	b.n	80043fc <ssd1306_DrawPixel+0x98>
        return;
 80043fa:	bf00      	nop
    }
}
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	20000350 	.word	0x20000350

08004408 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b089      	sub	sp, #36	@ 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	4604      	mov	r4, r0
 8004410:	4638      	mov	r0, r7
 8004412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004416:	4623      	mov	r3, r4
 8004418:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800441a:	4b45      	ldr	r3, [pc, #276]	@ (8004530 <ssd1306_WriteChar+0x128>)
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	783b      	ldrb	r3, [r7, #0]
 8004422:	4413      	add	r3, r2
 8004424:	2b80      	cmp	r3, #128	@ 0x80
 8004426:	dc06      	bgt.n	8004436 <ssd1306_WriteChar+0x2e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004428:	4b41      	ldr	r3, [pc, #260]	@ (8004530 <ssd1306_WriteChar+0x128>)
 800442a:	885b      	ldrh	r3, [r3, #2]
 800442c:	461a      	mov	r2, r3
 800442e:	787b      	ldrb	r3, [r7, #1]
 8004430:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004432:	2b40      	cmp	r3, #64	@ 0x40
 8004434:	dd01      	ble.n	800443a <ssd1306_WriteChar+0x32>
    {
        // Not enough space on current line
        return 0;
 8004436:	2300      	movs	r3, #0
 8004438:	e075      	b.n	8004526 <ssd1306_WriteChar+0x11e>
    }
    
    uint8_t sh = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
    if(Font.width > 16)
 800443e:	783b      	ldrb	r3, [r7, #0]
 8004440:	2b10      	cmp	r3, #16
 8004442:	d901      	bls.n	8004448 <ssd1306_WriteChar+0x40>
    	sh = 1;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	e055      	b.n	80044fa <ssd1306_WriteChar+0xf2>
    	uint16_t idx = (ch - 32) * Font.height + i;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	3b20      	subs	r3, #32
 8004452:	b29b      	uxth	r3, r3
 8004454:	787a      	ldrb	r2, [r7, #1]
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	b29a      	uxth	r2, r3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	b29b      	uxth	r3, r3
 8004460:	4413      	add	r3, r2
 8004462:	82bb      	strh	r3, [r7, #20]
        b = Font.data[idx<<sh];
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	8ab9      	ldrh	r1, [r7, #20]
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	613b      	str	r3, [r7, #16]
        for(j = 0; j < Font.width; j++) {
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e036      	b.n	80044ea <ssd1306_WriteChar+0xe2>
            if((b << j) & 0x8000)  {
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d013      	beq.n	80044b4 <ssd1306_WriteChar+0xac>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800448c:	4b28      	ldr	r3, [pc, #160]	@ (8004530 <ssd1306_WriteChar+0x128>)
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4413      	add	r3, r2
 8004498:	b2d8      	uxtb	r0, r3
 800449a:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <ssd1306_WriteChar+0x128>)
 800449c:	885b      	ldrh	r3, [r3, #2]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80044ac:	4619      	mov	r1, r3
 80044ae:	f7ff ff59 	bl	8004364 <ssd1306_DrawPixel>
 80044b2:	e017      	b.n	80044e4 <ssd1306_WriteChar+0xdc>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80044b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004530 <ssd1306_WriteChar+0x128>)
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4413      	add	r3, r2
 80044c0:	b2d8      	uxtb	r0, r3
 80044c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <ssd1306_WriteChar+0x128>)
 80044c4:	885b      	ldrh	r3, [r3, #2]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	b2d9      	uxtb	r1, r3
 80044d0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	f7ff ff40 	bl	8004364 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	3301      	adds	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	783b      	ldrb	r3, [r7, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d3c3      	bcc.n	800447c <ssd1306_WriteChar+0x74>
    for(i = 0; i < Font.height; i++) {
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	3301      	adds	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	787b      	ldrb	r3, [r7, #1]
 80044fc:	461a      	mov	r2, r3
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	4293      	cmp	r3, r2
 8004502:	d3a4      	bcc.n	800444e <ssd1306_WriteChar+0x46>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8004504:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <ssd1306_WriteChar+0x128>)
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	2a00      	cmp	r2, #0
 800450c:	d005      	beq.n	800451a <ssd1306_WriteChar+0x112>
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	7bfa      	ldrb	r2, [r7, #15]
 8004512:	3a20      	subs	r2, #32
 8004514:	440a      	add	r2, r1
 8004516:	7812      	ldrb	r2, [r2, #0]
 8004518:	e000      	b.n	800451c <ssd1306_WriteChar+0x114>
 800451a:	783a      	ldrb	r2, [r7, #0]
 800451c:	4413      	add	r3, r2
 800451e:	b29a      	uxth	r2, r3
 8004520:	4b03      	ldr	r3, [pc, #12]	@ (8004530 <ssd1306_WriteChar+0x128>)
 8004522:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3724      	adds	r7, #36	@ 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd90      	pop	{r4, r7, pc}
 800452e:	bf00      	nop
 8004530:	20000750 	.word	0x20000750

08004534 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	4638      	mov	r0, r7
 800453e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004542:	e013      	b.n	800456c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	7818      	ldrb	r0, [r3, #0]
 8004548:	7e3b      	ldrb	r3, [r7, #24]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	463b      	mov	r3, r7
 800454e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004550:	f7ff ff5a 	bl	8004408 <ssd1306_WriteChar>
 8004554:	4603      	mov	r3, r0
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d002      	beq.n	8004566 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	e008      	b.n	8004578 <ssd1306_WriteString+0x44>
        }
        str++;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3301      	adds	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e7      	bne.n	8004544 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	781b      	ldrb	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	460a      	mov	r2, r1
 800458a:	71fb      	strb	r3, [r7, #7]
 800458c:	4613      	mov	r3, r2
 800458e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	b29a      	uxth	r2, r3
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <ssd1306_SetCursor+0x2c>)
 8004596:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004598:	79bb      	ldrb	r3, [r7, #6]
 800459a:	b29a      	uxth	r2, r3
 800459c:	4b03      	ldr	r3, [pc, #12]	@ (80045ac <ssd1306_SetCursor+0x2c>)
 800459e:	805a      	strh	r2, [r3, #2]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000750 	.word	0x20000750

080045b0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80045ba:	2381      	movs	r3, #129	@ 0x81
 80045bc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fdf3 	bl	80041ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fdef 	bl	80041ac <ssd1306_WriteCommand>
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80045e8:	23af      	movs	r3, #175	@ 0xaf
 80045ea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80045ec:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <ssd1306_SetDisplayOn+0x38>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	715a      	strb	r2, [r3, #5]
 80045f2:	e004      	b.n	80045fe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80045f4:	23ae      	movs	r3, #174	@ 0xae
 80045f6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <ssd1306_SetDisplayOn+0x38>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fdd3 	bl	80041ac <ssd1306_WriteCommand>
}
 8004606:	bf00      	nop
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000750 	.word	0x20000750

08004614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800461a:	4b15      	ldr	r3, [pc, #84]	@ (8004670 <HAL_MspInit+0x5c>)
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	4a14      	ldr	r2, [pc, #80]	@ (8004670 <HAL_MspInit+0x5c>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6193      	str	r3, [r2, #24]
 8004626:	4b12      	ldr	r3, [pc, #72]	@ (8004670 <HAL_MspInit+0x5c>)
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	4b0f      	ldr	r3, [pc, #60]	@ (8004670 <HAL_MspInit+0x5c>)
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4a0e      	ldr	r2, [pc, #56]	@ (8004670 <HAL_MspInit+0x5c>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800463c:	61d3      	str	r3, [r2, #28]
 800463e:	4b0c      	ldr	r3, [pc, #48]	@ (8004670 <HAL_MspInit+0x5c>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800464a:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <HAL_MspInit+0x60>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	4a04      	ldr	r2, [pc, #16]	@ (8004674 <HAL_MspInit+0x60>)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr
 8004670:	40021000 	.word	0x40021000
 8004674:	40010000 	.word	0x40010000

08004678 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	f107 0310 	add.w	r3, r7, #16
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a15      	ldr	r2, [pc, #84]	@ (80046e8 <HAL_I2C_MspInit+0x70>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d123      	bne.n	80046e0 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004698:	4b14      	ldr	r3, [pc, #80]	@ (80046ec <HAL_I2C_MspInit+0x74>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	4a13      	ldr	r2, [pc, #76]	@ (80046ec <HAL_I2C_MspInit+0x74>)
 800469e:	f043 0308 	orr.w	r3, r3, #8
 80046a2:	6193      	str	r3, [r2, #24]
 80046a4:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <HAL_I2C_MspInit+0x74>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046b0:	23c0      	movs	r3, #192	@ 0xc0
 80046b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046b4:	2312      	movs	r3, #18
 80046b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046b8:	2303      	movs	r3, #3
 80046ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	4619      	mov	r1, r3
 80046c2:	480b      	ldr	r0, [pc, #44]	@ (80046f0 <HAL_I2C_MspInit+0x78>)
 80046c4:	f7fd f828 	bl	8001718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046c8:	4b08      	ldr	r3, [pc, #32]	@ (80046ec <HAL_I2C_MspInit+0x74>)
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	4a07      	ldr	r2, [pc, #28]	@ (80046ec <HAL_I2C_MspInit+0x74>)
 80046ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046d2:	61d3      	str	r3, [r2, #28]
 80046d4:	4b05      	ldr	r3, [pc, #20]	@ (80046ec <HAL_I2C_MspInit+0x74>)
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80046e0:	bf00      	nop
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40005400 	.word	0x40005400
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40010c00 	.word	0x40010c00

080046f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <NMI_Handler+0x4>

080046fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004700:	bf00      	nop
 8004702:	e7fd      	b.n	8004700 <HardFault_Handler+0x4>

08004704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <MemManage_Handler+0x4>

0800470c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <BusFault_Handler+0x4>

08004714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <UsageFault_Handler+0x4>

0800471c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800472c:	bf00      	nop
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr

08004734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004738:	bf00      	nop
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004744:	f7fc fec4 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004748:	bf00      	nop
 800474a:	bd80      	pop	{r7, pc}

0800474c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return 1;
 8004750:	2301      	movs	r3, #1
}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <_kill>:

int _kill(int pid, int sig)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004764:	f000 ff96 	bl	8005694 <__errno>
 8004768:	4603      	mov	r3, r0
 800476a:	2216      	movs	r2, #22
 800476c:	601a      	str	r2, [r3, #0]
  return -1;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <_exit>:

void _exit (int status)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004782:	f04f 31ff 	mov.w	r1, #4294967295
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ffe7 	bl	800475a <_kill>
  while (1) {}    /* Make sure we hang here */
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <_exit+0x12>

08004790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	e00a      	b.n	80047b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047a2:	f3af 8000 	nop.w
 80047a6:	4601      	mov	r1, r0
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	60ba      	str	r2, [r7, #8]
 80047ae:	b2ca      	uxtb	r2, r1
 80047b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	3301      	adds	r3, #1
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	dbf0      	blt.n	80047a2 <_read+0x12>
  }

  return len;
 80047c0:	687b      	ldr	r3, [r7, #4]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e009      	b.n	80047f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	60ba      	str	r2, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	3301      	adds	r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	dbf1      	blt.n	80047dc <_write+0x12>
  }
  return len;
 80047f8:	687b      	ldr	r3, [r7, #4]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <_close>:

int _close(int file)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800480a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004828:	605a      	str	r2, [r3, #4]
  return 0;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <_isatty>:

int _isatty(int file)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800483e:	2301      	movs	r3, #1
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr

0800484a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr
	...

08004864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800486c:	4a14      	ldr	r2, [pc, #80]	@ (80048c0 <_sbrk+0x5c>)
 800486e:	4b15      	ldr	r3, [pc, #84]	@ (80048c4 <_sbrk+0x60>)
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004878:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <_sbrk+0x64>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <_sbrk+0x64>)
 8004882:	4a12      	ldr	r2, [pc, #72]	@ (80048cc <_sbrk+0x68>)
 8004884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004886:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <_sbrk+0x64>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	429a      	cmp	r2, r3
 8004892:	d207      	bcs.n	80048a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004894:	f000 fefe 	bl	8005694 <__errno>
 8004898:	4603      	mov	r3, r0
 800489a:	220c      	movs	r2, #12
 800489c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	e009      	b.n	80048b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048a4:	4b08      	ldr	r3, [pc, #32]	@ (80048c8 <_sbrk+0x64>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048aa:	4b07      	ldr	r3, [pc, #28]	@ (80048c8 <_sbrk+0x64>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	4a05      	ldr	r2, [pc, #20]	@ (80048c8 <_sbrk+0x64>)
 80048b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20005000 	.word	0x20005000
 80048c4:	00000400 	.word	0x00000400
 80048c8:	20000758 	.word	0x20000758
 80048cc:	200008a8 	.word	0x200008a8

080048d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <Reset_Handler>:
 80048dc:	f7ff fff8 	bl	80048d0 <SystemInit>
 80048e0:	480b      	ldr	r0, [pc, #44]	@ (8004910 <LoopFillZerobss+0xe>)
 80048e2:	490c      	ldr	r1, [pc, #48]	@ (8004914 <LoopFillZerobss+0x12>)
 80048e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004918 <LoopFillZerobss+0x16>)
 80048e6:	2300      	movs	r3, #0
 80048e8:	e002      	b.n	80048f0 <LoopCopyDataInit>

080048ea <CopyDataInit>:
 80048ea:	58d4      	ldr	r4, [r2, r3]
 80048ec:	50c4      	str	r4, [r0, r3]
 80048ee:	3304      	adds	r3, #4

080048f0 <LoopCopyDataInit>:
 80048f0:	18c4      	adds	r4, r0, r3
 80048f2:	428c      	cmp	r4, r1
 80048f4:	d3f9      	bcc.n	80048ea <CopyDataInit>
 80048f6:	4a09      	ldr	r2, [pc, #36]	@ (800491c <LoopFillZerobss+0x1a>)
 80048f8:	4c09      	ldr	r4, [pc, #36]	@ (8004920 <LoopFillZerobss+0x1e>)
 80048fa:	2300      	movs	r3, #0
 80048fc:	e001      	b.n	8004902 <LoopFillZerobss>

080048fe <FillZerobss>:
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	3204      	adds	r2, #4

08004902 <LoopFillZerobss>:
 8004902:	42a2      	cmp	r2, r4
 8004904:	d3fb      	bcc.n	80048fe <FillZerobss>
 8004906:	f000 fecb 	bl	80056a0 <__libc_init_array>
 800490a:	f7fe fec9 	bl	80036a0 <main>
 800490e:	4770      	bx	lr
 8004910:	20000000 	.word	0x20000000
 8004914:	200001d4 	.word	0x200001d4
 8004918:	08008184 	.word	0x08008184
 800491c:	200001d4 	.word	0x200001d4
 8004920:	200008a8 	.word	0x200008a8

08004924 <ADC1_2_IRQHandler>:
 8004924:	e7fe      	b.n	8004924 <ADC1_2_IRQHandler>
	...

08004928 <malloc>:
 8004928:	4b02      	ldr	r3, [pc, #8]	@ (8004934 <malloc+0xc>)
 800492a:	4601      	mov	r1, r0
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	f000 b82d 	b.w	800498c <_malloc_r>
 8004932:	bf00      	nop
 8004934:	20000018 	.word	0x20000018

08004938 <free>:
 8004938:	4b02      	ldr	r3, [pc, #8]	@ (8004944 <free+0xc>)
 800493a:	4601      	mov	r1, r0
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	f001 bd4f 	b.w	80063e0 <_free_r>
 8004942:	bf00      	nop
 8004944:	20000018 	.word	0x20000018

08004948 <sbrk_aligned>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4e0f      	ldr	r6, [pc, #60]	@ (8004988 <sbrk_aligned+0x40>)
 800494c:	460c      	mov	r4, r1
 800494e:	6831      	ldr	r1, [r6, #0]
 8004950:	4605      	mov	r5, r0
 8004952:	b911      	cbnz	r1, 800495a <sbrk_aligned+0x12>
 8004954:	f000 fe7c 	bl	8005650 <_sbrk_r>
 8004958:	6030      	str	r0, [r6, #0]
 800495a:	4621      	mov	r1, r4
 800495c:	4628      	mov	r0, r5
 800495e:	f000 fe77 	bl	8005650 <_sbrk_r>
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	d103      	bne.n	800496e <sbrk_aligned+0x26>
 8004966:	f04f 34ff 	mov.w	r4, #4294967295
 800496a:	4620      	mov	r0, r4
 800496c:	bd70      	pop	{r4, r5, r6, pc}
 800496e:	1cc4      	adds	r4, r0, #3
 8004970:	f024 0403 	bic.w	r4, r4, #3
 8004974:	42a0      	cmp	r0, r4
 8004976:	d0f8      	beq.n	800496a <sbrk_aligned+0x22>
 8004978:	1a21      	subs	r1, r4, r0
 800497a:	4628      	mov	r0, r5
 800497c:	f000 fe68 	bl	8005650 <_sbrk_r>
 8004980:	3001      	adds	r0, #1
 8004982:	d1f2      	bne.n	800496a <sbrk_aligned+0x22>
 8004984:	e7ef      	b.n	8004966 <sbrk_aligned+0x1e>
 8004986:	bf00      	nop
 8004988:	2000075c 	.word	0x2000075c

0800498c <_malloc_r>:
 800498c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004990:	1ccd      	adds	r5, r1, #3
 8004992:	f025 0503 	bic.w	r5, r5, #3
 8004996:	3508      	adds	r5, #8
 8004998:	2d0c      	cmp	r5, #12
 800499a:	bf38      	it	cc
 800499c:	250c      	movcc	r5, #12
 800499e:	2d00      	cmp	r5, #0
 80049a0:	4606      	mov	r6, r0
 80049a2:	db01      	blt.n	80049a8 <_malloc_r+0x1c>
 80049a4:	42a9      	cmp	r1, r5
 80049a6:	d904      	bls.n	80049b2 <_malloc_r+0x26>
 80049a8:	230c      	movs	r3, #12
 80049aa:	6033      	str	r3, [r6, #0]
 80049ac:	2000      	movs	r0, #0
 80049ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a88 <_malloc_r+0xfc>
 80049b6:	f000 f869 	bl	8004a8c <__malloc_lock>
 80049ba:	f8d8 3000 	ldr.w	r3, [r8]
 80049be:	461c      	mov	r4, r3
 80049c0:	bb44      	cbnz	r4, 8004a14 <_malloc_r+0x88>
 80049c2:	4629      	mov	r1, r5
 80049c4:	4630      	mov	r0, r6
 80049c6:	f7ff ffbf 	bl	8004948 <sbrk_aligned>
 80049ca:	1c43      	adds	r3, r0, #1
 80049cc:	4604      	mov	r4, r0
 80049ce:	d158      	bne.n	8004a82 <_malloc_r+0xf6>
 80049d0:	f8d8 4000 	ldr.w	r4, [r8]
 80049d4:	4627      	mov	r7, r4
 80049d6:	2f00      	cmp	r7, #0
 80049d8:	d143      	bne.n	8004a62 <_malloc_r+0xd6>
 80049da:	2c00      	cmp	r4, #0
 80049dc:	d04b      	beq.n	8004a76 <_malloc_r+0xea>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	4639      	mov	r1, r7
 80049e2:	4630      	mov	r0, r6
 80049e4:	eb04 0903 	add.w	r9, r4, r3
 80049e8:	f000 fe32 	bl	8005650 <_sbrk_r>
 80049ec:	4581      	cmp	r9, r0
 80049ee:	d142      	bne.n	8004a76 <_malloc_r+0xea>
 80049f0:	6821      	ldr	r1, [r4, #0]
 80049f2:	4630      	mov	r0, r6
 80049f4:	1a6d      	subs	r5, r5, r1
 80049f6:	4629      	mov	r1, r5
 80049f8:	f7ff ffa6 	bl	8004948 <sbrk_aligned>
 80049fc:	3001      	adds	r0, #1
 80049fe:	d03a      	beq.n	8004a76 <_malloc_r+0xea>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	442b      	add	r3, r5
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	f8d8 3000 	ldr.w	r3, [r8]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	bb62      	cbnz	r2, 8004a68 <_malloc_r+0xdc>
 8004a0e:	f8c8 7000 	str.w	r7, [r8]
 8004a12:	e00f      	b.n	8004a34 <_malloc_r+0xa8>
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	1b52      	subs	r2, r2, r5
 8004a18:	d420      	bmi.n	8004a5c <_malloc_r+0xd0>
 8004a1a:	2a0b      	cmp	r2, #11
 8004a1c:	d917      	bls.n	8004a4e <_malloc_r+0xc2>
 8004a1e:	1961      	adds	r1, r4, r5
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	6025      	str	r5, [r4, #0]
 8004a24:	bf18      	it	ne
 8004a26:	6059      	strne	r1, [r3, #4]
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	bf08      	it	eq
 8004a2c:	f8c8 1000 	streq.w	r1, [r8]
 8004a30:	5162      	str	r2, [r4, r5]
 8004a32:	604b      	str	r3, [r1, #4]
 8004a34:	4630      	mov	r0, r6
 8004a36:	f000 f82f 	bl	8004a98 <__malloc_unlock>
 8004a3a:	f104 000b 	add.w	r0, r4, #11
 8004a3e:	1d23      	adds	r3, r4, #4
 8004a40:	f020 0007 	bic.w	r0, r0, #7
 8004a44:	1ac2      	subs	r2, r0, r3
 8004a46:	bf1c      	itt	ne
 8004a48:	1a1b      	subne	r3, r3, r0
 8004a4a:	50a3      	strne	r3, [r4, r2]
 8004a4c:	e7af      	b.n	80049ae <_malloc_r+0x22>
 8004a4e:	6862      	ldr	r2, [r4, #4]
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	bf0c      	ite	eq
 8004a54:	f8c8 2000 	streq.w	r2, [r8]
 8004a58:	605a      	strne	r2, [r3, #4]
 8004a5a:	e7eb      	b.n	8004a34 <_malloc_r+0xa8>
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	6864      	ldr	r4, [r4, #4]
 8004a60:	e7ae      	b.n	80049c0 <_malloc_r+0x34>
 8004a62:	463c      	mov	r4, r7
 8004a64:	687f      	ldr	r7, [r7, #4]
 8004a66:	e7b6      	b.n	80049d6 <_malloc_r+0x4a>
 8004a68:	461a      	mov	r2, r3
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	42a3      	cmp	r3, r4
 8004a6e:	d1fb      	bne.n	8004a68 <_malloc_r+0xdc>
 8004a70:	2300      	movs	r3, #0
 8004a72:	6053      	str	r3, [r2, #4]
 8004a74:	e7de      	b.n	8004a34 <_malloc_r+0xa8>
 8004a76:	230c      	movs	r3, #12
 8004a78:	4630      	mov	r0, r6
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f000 f80c 	bl	8004a98 <__malloc_unlock>
 8004a80:	e794      	b.n	80049ac <_malloc_r+0x20>
 8004a82:	6005      	str	r5, [r0, #0]
 8004a84:	e7d6      	b.n	8004a34 <_malloc_r+0xa8>
 8004a86:	bf00      	nop
 8004a88:	20000760 	.word	0x20000760

08004a8c <__malloc_lock>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	@ (8004a94 <__malloc_lock+0x8>)
 8004a8e:	f000 be2c 	b.w	80056ea <__retarget_lock_acquire_recursive>
 8004a92:	bf00      	nop
 8004a94:	200008a4 	.word	0x200008a4

08004a98 <__malloc_unlock>:
 8004a98:	4801      	ldr	r0, [pc, #4]	@ (8004aa0 <__malloc_unlock+0x8>)
 8004a9a:	f000 be27 	b.w	80056ec <__retarget_lock_release_recursive>
 8004a9e:	bf00      	nop
 8004aa0:	200008a4 	.word	0x200008a4

08004aa4 <__cvt>:
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aaa:	461d      	mov	r5, r3
 8004aac:	bfbb      	ittet	lt
 8004aae:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004ab2:	461d      	movlt	r5, r3
 8004ab4:	2300      	movge	r3, #0
 8004ab6:	232d      	movlt	r3, #45	@ 0x2d
 8004ab8:	b088      	sub	sp, #32
 8004aba:	4614      	mov	r4, r2
 8004abc:	bfb8      	it	lt
 8004abe:	4614      	movlt	r4, r2
 8004ac0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004ac2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004ac4:	7013      	strb	r3, [r2, #0]
 8004ac6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ac8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004acc:	f023 0820 	bic.w	r8, r3, #32
 8004ad0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ad4:	d005      	beq.n	8004ae2 <__cvt+0x3e>
 8004ad6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ada:	d100      	bne.n	8004ade <__cvt+0x3a>
 8004adc:	3601      	adds	r6, #1
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e000      	b.n	8004ae4 <__cvt+0x40>
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	aa07      	add	r2, sp, #28
 8004ae6:	9204      	str	r2, [sp, #16]
 8004ae8:	aa06      	add	r2, sp, #24
 8004aea:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004aee:	e9cd 3600 	strd	r3, r6, [sp]
 8004af2:	4622      	mov	r2, r4
 8004af4:	462b      	mov	r3, r5
 8004af6:	f000 fe9f 	bl	8005838 <_dtoa_r>
 8004afa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004afe:	4607      	mov	r7, r0
 8004b00:	d119      	bne.n	8004b36 <__cvt+0x92>
 8004b02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004b04:	07db      	lsls	r3, r3, #31
 8004b06:	d50e      	bpl.n	8004b26 <__cvt+0x82>
 8004b08:	eb00 0906 	add.w	r9, r0, r6
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2300      	movs	r3, #0
 8004b10:	4620      	mov	r0, r4
 8004b12:	4629      	mov	r1, r5
 8004b14:	f7fb ff48 	bl	80009a8 <__aeabi_dcmpeq>
 8004b18:	b108      	cbz	r0, 8004b1e <__cvt+0x7a>
 8004b1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b1e:	2230      	movs	r2, #48	@ 0x30
 8004b20:	9b07      	ldr	r3, [sp, #28]
 8004b22:	454b      	cmp	r3, r9
 8004b24:	d31e      	bcc.n	8004b64 <__cvt+0xc0>
 8004b26:	4638      	mov	r0, r7
 8004b28:	9b07      	ldr	r3, [sp, #28]
 8004b2a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004b2c:	1bdb      	subs	r3, r3, r7
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	b008      	add	sp, #32
 8004b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b3a:	eb00 0906 	add.w	r9, r0, r6
 8004b3e:	d1e5      	bne.n	8004b0c <__cvt+0x68>
 8004b40:	7803      	ldrb	r3, [r0, #0]
 8004b42:	2b30      	cmp	r3, #48	@ 0x30
 8004b44:	d10a      	bne.n	8004b5c <__cvt+0xb8>
 8004b46:	2200      	movs	r2, #0
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	f7fb ff2b 	bl	80009a8 <__aeabi_dcmpeq>
 8004b52:	b918      	cbnz	r0, 8004b5c <__cvt+0xb8>
 8004b54:	f1c6 0601 	rsb	r6, r6, #1
 8004b58:	f8ca 6000 	str.w	r6, [sl]
 8004b5c:	f8da 3000 	ldr.w	r3, [sl]
 8004b60:	4499      	add	r9, r3
 8004b62:	e7d3      	b.n	8004b0c <__cvt+0x68>
 8004b64:	1c59      	adds	r1, r3, #1
 8004b66:	9107      	str	r1, [sp, #28]
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e7d9      	b.n	8004b20 <__cvt+0x7c>

08004b6c <__exponent>:
 8004b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b6e:	2900      	cmp	r1, #0
 8004b70:	bfb6      	itet	lt
 8004b72:	232d      	movlt	r3, #45	@ 0x2d
 8004b74:	232b      	movge	r3, #43	@ 0x2b
 8004b76:	4249      	neglt	r1, r1
 8004b78:	2909      	cmp	r1, #9
 8004b7a:	7002      	strb	r2, [r0, #0]
 8004b7c:	7043      	strb	r3, [r0, #1]
 8004b7e:	dd29      	ble.n	8004bd4 <__exponent+0x68>
 8004b80:	f10d 0307 	add.w	r3, sp, #7
 8004b84:	461d      	mov	r5, r3
 8004b86:	270a      	movs	r7, #10
 8004b88:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	fb07 1416 	mls	r4, r7, r6, r1
 8004b92:	3430      	adds	r4, #48	@ 0x30
 8004b94:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b98:	460c      	mov	r4, r1
 8004b9a:	2c63      	cmp	r4, #99	@ 0x63
 8004b9c:	4631      	mov	r1, r6
 8004b9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ba2:	dcf1      	bgt.n	8004b88 <__exponent+0x1c>
 8004ba4:	3130      	adds	r1, #48	@ 0x30
 8004ba6:	1e94      	subs	r4, r2, #2
 8004ba8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bac:	4623      	mov	r3, r4
 8004bae:	1c41      	adds	r1, r0, #1
 8004bb0:	42ab      	cmp	r3, r5
 8004bb2:	d30a      	bcc.n	8004bca <__exponent+0x5e>
 8004bb4:	f10d 0309 	add.w	r3, sp, #9
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	42ac      	cmp	r4, r5
 8004bbc:	bf88      	it	hi
 8004bbe:	2300      	movhi	r3, #0
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	4403      	add	r3, r0
 8004bc4:	1a18      	subs	r0, r3, r0
 8004bc6:	b003      	add	sp, #12
 8004bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bca:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004bce:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004bd2:	e7ed      	b.n	8004bb0 <__exponent+0x44>
 8004bd4:	2330      	movs	r3, #48	@ 0x30
 8004bd6:	3130      	adds	r1, #48	@ 0x30
 8004bd8:	7083      	strb	r3, [r0, #2]
 8004bda:	70c1      	strb	r1, [r0, #3]
 8004bdc:	1d03      	adds	r3, r0, #4
 8004bde:	e7f1      	b.n	8004bc4 <__exponent+0x58>

08004be0 <_printf_float>:
 8004be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	b091      	sub	sp, #68	@ 0x44
 8004be6:	460c      	mov	r4, r1
 8004be8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004bec:	4616      	mov	r6, r2
 8004bee:	461f      	mov	r7, r3
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	f000 fcf5 	bl	80055e0 <_localeconv_r>
 8004bf6:	6803      	ldr	r3, [r0, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	9308      	str	r3, [sp, #32]
 8004bfc:	f7fb faa8 	bl	8000150 <strlen>
 8004c00:	2300      	movs	r3, #0
 8004c02:	930e      	str	r3, [sp, #56]	@ 0x38
 8004c04:	f8d8 3000 	ldr.w	r3, [r8]
 8004c08:	9009      	str	r0, [sp, #36]	@ 0x24
 8004c0a:	3307      	adds	r3, #7
 8004c0c:	f023 0307 	bic.w	r3, r3, #7
 8004c10:	f103 0208 	add.w	r2, r3, #8
 8004c14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c18:	f8d4 b000 	ldr.w	fp, [r4]
 8004c1c:	f8c8 2000 	str.w	r2, [r8]
 8004c20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c2a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c3a:	4b9c      	ldr	r3, [pc, #624]	@ (8004eac <_printf_float+0x2cc>)
 8004c3c:	f7fb fee6 	bl	8000a0c <__aeabi_dcmpun>
 8004c40:	bb70      	cbnz	r0, 8004ca0 <_printf_float+0xc0>
 8004c42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c46:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4a:	4b98      	ldr	r3, [pc, #608]	@ (8004eac <_printf_float+0x2cc>)
 8004c4c:	f7fb fec0 	bl	80009d0 <__aeabi_dcmple>
 8004c50:	bb30      	cbnz	r0, 8004ca0 <_printf_float+0xc0>
 8004c52:	2200      	movs	r2, #0
 8004c54:	2300      	movs	r3, #0
 8004c56:	4640      	mov	r0, r8
 8004c58:	4649      	mov	r1, r9
 8004c5a:	f7fb feaf 	bl	80009bc <__aeabi_dcmplt>
 8004c5e:	b110      	cbz	r0, 8004c66 <_printf_float+0x86>
 8004c60:	232d      	movs	r3, #45	@ 0x2d
 8004c62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c66:	4a92      	ldr	r2, [pc, #584]	@ (8004eb0 <_printf_float+0x2d0>)
 8004c68:	4b92      	ldr	r3, [pc, #584]	@ (8004eb4 <_printf_float+0x2d4>)
 8004c6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c6e:	bf8c      	ite	hi
 8004c70:	4690      	movhi	r8, r2
 8004c72:	4698      	movls	r8, r3
 8004c74:	2303      	movs	r3, #3
 8004c76:	f04f 0900 	mov.w	r9, #0
 8004c7a:	6123      	str	r3, [r4, #16]
 8004c7c:	f02b 0304 	bic.w	r3, fp, #4
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	4633      	mov	r3, r6
 8004c84:	4621      	mov	r1, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	9700      	str	r7, [sp, #0]
 8004c8a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004c8c:	f000 f9d4 	bl	8005038 <_printf_common>
 8004c90:	3001      	adds	r0, #1
 8004c92:	f040 8090 	bne.w	8004db6 <_printf_float+0x1d6>
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9a:	b011      	add	sp, #68	@ 0x44
 8004c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	f7fb feb0 	bl	8000a0c <__aeabi_dcmpun>
 8004cac:	b148      	cbz	r0, 8004cc2 <_printf_float+0xe2>
 8004cae:	464b      	mov	r3, r9
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bfb8      	it	lt
 8004cb4:	232d      	movlt	r3, #45	@ 0x2d
 8004cb6:	4a80      	ldr	r2, [pc, #512]	@ (8004eb8 <_printf_float+0x2d8>)
 8004cb8:	bfb8      	it	lt
 8004cba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004ebc <_printf_float+0x2dc>)
 8004cc0:	e7d3      	b.n	8004c6a <_printf_float+0x8a>
 8004cc2:	6863      	ldr	r3, [r4, #4]
 8004cc4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	d13f      	bne.n	8004d4c <_printf_float+0x16c>
 8004ccc:	2306      	movs	r3, #6
 8004cce:	6063      	str	r3, [r4, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	9206      	str	r2, [sp, #24]
 8004cda:	aa0e      	add	r2, sp, #56	@ 0x38
 8004cdc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ce0:	aa0d      	add	r2, sp, #52	@ 0x34
 8004ce2:	9203      	str	r2, [sp, #12]
 8004ce4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004ce8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004cec:	6863      	ldr	r3, [r4, #4]
 8004cee:	4642      	mov	r2, r8
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	910a      	str	r1, [sp, #40]	@ 0x28
 8004cf8:	f7ff fed4 	bl	8004aa4 <__cvt>
 8004cfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004cfe:	4680      	mov	r8, r0
 8004d00:	2947      	cmp	r1, #71	@ 0x47
 8004d02:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004d04:	d128      	bne.n	8004d58 <_printf_float+0x178>
 8004d06:	1cc8      	adds	r0, r1, #3
 8004d08:	db02      	blt.n	8004d10 <_printf_float+0x130>
 8004d0a:	6863      	ldr	r3, [r4, #4]
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	dd40      	ble.n	8004d92 <_printf_float+0x1b2>
 8004d10:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d14:	fa5f fa8a 	uxtb.w	sl, sl
 8004d18:	4652      	mov	r2, sl
 8004d1a:	3901      	subs	r1, #1
 8004d1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d20:	910d      	str	r1, [sp, #52]	@ 0x34
 8004d22:	f7ff ff23 	bl	8004b6c <__exponent>
 8004d26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d28:	4681      	mov	r9, r0
 8004d2a:	1813      	adds	r3, r2, r0
 8004d2c:	2a01      	cmp	r2, #1
 8004d2e:	6123      	str	r3, [r4, #16]
 8004d30:	dc02      	bgt.n	8004d38 <_printf_float+0x158>
 8004d32:	6822      	ldr	r2, [r4, #0]
 8004d34:	07d2      	lsls	r2, r2, #31
 8004d36:	d501      	bpl.n	8004d3c <_printf_float+0x15c>
 8004d38:	3301      	adds	r3, #1
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d09e      	beq.n	8004c82 <_printf_float+0xa2>
 8004d44:	232d      	movs	r3, #45	@ 0x2d
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d4a:	e79a      	b.n	8004c82 <_printf_float+0xa2>
 8004d4c:	2947      	cmp	r1, #71	@ 0x47
 8004d4e:	d1bf      	bne.n	8004cd0 <_printf_float+0xf0>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1bd      	bne.n	8004cd0 <_printf_float+0xf0>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e7ba      	b.n	8004cce <_printf_float+0xee>
 8004d58:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d5c:	d9dc      	bls.n	8004d18 <_printf_float+0x138>
 8004d5e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d62:	d118      	bne.n	8004d96 <_printf_float+0x1b6>
 8004d64:	2900      	cmp	r1, #0
 8004d66:	6863      	ldr	r3, [r4, #4]
 8004d68:	dd0b      	ble.n	8004d82 <_printf_float+0x1a2>
 8004d6a:	6121      	str	r1, [r4, #16]
 8004d6c:	b913      	cbnz	r3, 8004d74 <_printf_float+0x194>
 8004d6e:	6822      	ldr	r2, [r4, #0]
 8004d70:	07d0      	lsls	r0, r2, #31
 8004d72:	d502      	bpl.n	8004d7a <_printf_float+0x19a>
 8004d74:	3301      	adds	r3, #1
 8004d76:	440b      	add	r3, r1
 8004d78:	6123      	str	r3, [r4, #16]
 8004d7a:	f04f 0900 	mov.w	r9, #0
 8004d7e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d80:	e7dc      	b.n	8004d3c <_printf_float+0x15c>
 8004d82:	b913      	cbnz	r3, 8004d8a <_printf_float+0x1aa>
 8004d84:	6822      	ldr	r2, [r4, #0]
 8004d86:	07d2      	lsls	r2, r2, #31
 8004d88:	d501      	bpl.n	8004d8e <_printf_float+0x1ae>
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	e7f4      	b.n	8004d78 <_printf_float+0x198>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e7f2      	b.n	8004d78 <_printf_float+0x198>
 8004d92:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d98:	4299      	cmp	r1, r3
 8004d9a:	db05      	blt.n	8004da8 <_printf_float+0x1c8>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	6121      	str	r1, [r4, #16]
 8004da0:	07d8      	lsls	r0, r3, #31
 8004da2:	d5ea      	bpl.n	8004d7a <_printf_float+0x19a>
 8004da4:	1c4b      	adds	r3, r1, #1
 8004da6:	e7e7      	b.n	8004d78 <_printf_float+0x198>
 8004da8:	2900      	cmp	r1, #0
 8004daa:	bfcc      	ite	gt
 8004dac:	2201      	movgt	r2, #1
 8004dae:	f1c1 0202 	rsble	r2, r1, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	e7e0      	b.n	8004d78 <_printf_float+0x198>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	055a      	lsls	r2, r3, #21
 8004dba:	d407      	bmi.n	8004dcc <_printf_float+0x1ec>
 8004dbc:	6923      	ldr	r3, [r4, #16]
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	47b8      	blx	r7
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d12b      	bne.n	8004e22 <_printf_float+0x242>
 8004dca:	e764      	b.n	8004c96 <_printf_float+0xb6>
 8004dcc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004dd0:	f240 80dc 	bls.w	8004f8c <_printf_float+0x3ac>
 8004dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f7fb fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d033      	beq.n	8004e4c <_printf_float+0x26c>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	4a35      	ldr	r2, [pc, #212]	@ (8004ec0 <_printf_float+0x2e0>)
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	f43f af51 	beq.w	8004c96 <_printf_float+0xb6>
 8004df4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004df8:	4543      	cmp	r3, r8
 8004dfa:	db02      	blt.n	8004e02 <_printf_float+0x222>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	07d8      	lsls	r0, r3, #31
 8004e00:	d50f      	bpl.n	8004e22 <_printf_float+0x242>
 8004e02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e06:	4631      	mov	r1, r6
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b8      	blx	r7
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	f43f af42 	beq.w	8004c96 <_printf_float+0xb6>
 8004e12:	f04f 0900 	mov.w	r9, #0
 8004e16:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e1a:	f104 0a1a 	add.w	sl, r4, #26
 8004e1e:	45c8      	cmp	r8, r9
 8004e20:	dc09      	bgt.n	8004e36 <_printf_float+0x256>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	079b      	lsls	r3, r3, #30
 8004e26:	f100 8102 	bmi.w	800502e <_printf_float+0x44e>
 8004e2a:	68e0      	ldr	r0, [r4, #12]
 8004e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e2e:	4298      	cmp	r0, r3
 8004e30:	bfb8      	it	lt
 8004e32:	4618      	movlt	r0, r3
 8004e34:	e731      	b.n	8004c9a <_printf_float+0xba>
 8004e36:	2301      	movs	r3, #1
 8004e38:	4652      	mov	r2, sl
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b8      	blx	r7
 8004e40:	3001      	adds	r0, #1
 8004e42:	f43f af28 	beq.w	8004c96 <_printf_float+0xb6>
 8004e46:	f109 0901 	add.w	r9, r9, #1
 8004e4a:	e7e8      	b.n	8004e1e <_printf_float+0x23e>
 8004e4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	dc38      	bgt.n	8004ec4 <_printf_float+0x2e4>
 8004e52:	2301      	movs	r3, #1
 8004e54:	4631      	mov	r1, r6
 8004e56:	4628      	mov	r0, r5
 8004e58:	4a19      	ldr	r2, [pc, #100]	@ (8004ec0 <_printf_float+0x2e0>)
 8004e5a:	47b8      	blx	r7
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	f43f af1a 	beq.w	8004c96 <_printf_float+0xb6>
 8004e62:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004e66:	ea59 0303 	orrs.w	r3, r9, r3
 8004e6a:	d102      	bne.n	8004e72 <_printf_float+0x292>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	07d9      	lsls	r1, r3, #31
 8004e70:	d5d7      	bpl.n	8004e22 <_printf_float+0x242>
 8004e72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f af0a 	beq.w	8004c96 <_printf_float+0xb6>
 8004e82:	f04f 0a00 	mov.w	sl, #0
 8004e86:	f104 0b1a 	add.w	fp, r4, #26
 8004e8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e8c:	425b      	negs	r3, r3
 8004e8e:	4553      	cmp	r3, sl
 8004e90:	dc01      	bgt.n	8004e96 <_printf_float+0x2b6>
 8004e92:	464b      	mov	r3, r9
 8004e94:	e793      	b.n	8004dbe <_printf_float+0x1de>
 8004e96:	2301      	movs	r3, #1
 8004e98:	465a      	mov	r2, fp
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	47b8      	blx	r7
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	f43f aef8 	beq.w	8004c96 <_printf_float+0xb6>
 8004ea6:	f10a 0a01 	add.w	sl, sl, #1
 8004eaa:	e7ee      	b.n	8004e8a <_printf_float+0x2aa>
 8004eac:	7fefffff 	.word	0x7fefffff
 8004eb0:	08007e00 	.word	0x08007e00
 8004eb4:	08007dfc 	.word	0x08007dfc
 8004eb8:	08007e08 	.word	0x08007e08
 8004ebc:	08007e04 	.word	0x08007e04
 8004ec0:	08007e0c 	.word	0x08007e0c
 8004ec4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ec6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004eca:	4553      	cmp	r3, sl
 8004ecc:	bfa8      	it	ge
 8004ece:	4653      	movge	r3, sl
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	4699      	mov	r9, r3
 8004ed4:	dc36      	bgt.n	8004f44 <_printf_float+0x364>
 8004ed6:	f04f 0b00 	mov.w	fp, #0
 8004eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ede:	f104 021a 	add.w	r2, r4, #26
 8004ee2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ee4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ee6:	eba3 0309 	sub.w	r3, r3, r9
 8004eea:	455b      	cmp	r3, fp
 8004eec:	dc31      	bgt.n	8004f52 <_printf_float+0x372>
 8004eee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ef0:	459a      	cmp	sl, r3
 8004ef2:	dc3a      	bgt.n	8004f6a <_printf_float+0x38a>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	07da      	lsls	r2, r3, #31
 8004ef8:	d437      	bmi.n	8004f6a <_printf_float+0x38a>
 8004efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004efc:	ebaa 0903 	sub.w	r9, sl, r3
 8004f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f02:	ebaa 0303 	sub.w	r3, sl, r3
 8004f06:	4599      	cmp	r9, r3
 8004f08:	bfa8      	it	ge
 8004f0a:	4699      	movge	r9, r3
 8004f0c:	f1b9 0f00 	cmp.w	r9, #0
 8004f10:	dc33      	bgt.n	8004f7a <_printf_float+0x39a>
 8004f12:	f04f 0800 	mov.w	r8, #0
 8004f16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f1a:	f104 0b1a 	add.w	fp, r4, #26
 8004f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f20:	ebaa 0303 	sub.w	r3, sl, r3
 8004f24:	eba3 0309 	sub.w	r3, r3, r9
 8004f28:	4543      	cmp	r3, r8
 8004f2a:	f77f af7a 	ble.w	8004e22 <_printf_float+0x242>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	465a      	mov	r2, fp
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f43f aeac 	beq.w	8004c96 <_printf_float+0xb6>
 8004f3e:	f108 0801 	add.w	r8, r8, #1
 8004f42:	e7ec      	b.n	8004f1e <_printf_float+0x33e>
 8004f44:	4642      	mov	r2, r8
 8004f46:	4631      	mov	r1, r6
 8004f48:	4628      	mov	r0, r5
 8004f4a:	47b8      	blx	r7
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d1c2      	bne.n	8004ed6 <_printf_float+0x2f6>
 8004f50:	e6a1      	b.n	8004c96 <_printf_float+0xb6>
 8004f52:	2301      	movs	r3, #1
 8004f54:	4631      	mov	r1, r6
 8004f56:	4628      	mov	r0, r5
 8004f58:	920a      	str	r2, [sp, #40]	@ 0x28
 8004f5a:	47b8      	blx	r7
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	f43f ae9a 	beq.w	8004c96 <_printf_float+0xb6>
 8004f62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f64:	f10b 0b01 	add.w	fp, fp, #1
 8004f68:	e7bb      	b.n	8004ee2 <_printf_float+0x302>
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	d1c0      	bne.n	8004efa <_printf_float+0x31a>
 8004f78:	e68d      	b.n	8004c96 <_printf_float+0xb6>
 8004f7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	4442      	add	r2, r8
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	d1c3      	bne.n	8004f12 <_printf_float+0x332>
 8004f8a:	e684      	b.n	8004c96 <_printf_float+0xb6>
 8004f8c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004f90:	f1ba 0f01 	cmp.w	sl, #1
 8004f94:	dc01      	bgt.n	8004f9a <_printf_float+0x3ba>
 8004f96:	07db      	lsls	r3, r3, #31
 8004f98:	d536      	bpl.n	8005008 <_printf_float+0x428>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	47b8      	blx	r7
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	f43f ae76 	beq.w	8004c96 <_printf_float+0xb6>
 8004faa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	47b8      	blx	r7
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	f43f ae6e 	beq.w	8004c96 <_printf_float+0xb6>
 8004fba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fc6:	f7fb fcef 	bl	80009a8 <__aeabi_dcmpeq>
 8004fca:	b9c0      	cbnz	r0, 8004ffe <_printf_float+0x41e>
 8004fcc:	4653      	mov	r3, sl
 8004fce:	f108 0201 	add.w	r2, r8, #1
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b8      	blx	r7
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d10c      	bne.n	8004ff6 <_printf_float+0x416>
 8004fdc:	e65b      	b.n	8004c96 <_printf_float+0xb6>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	465a      	mov	r2, fp
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b8      	blx	r7
 8004fe8:	3001      	adds	r0, #1
 8004fea:	f43f ae54 	beq.w	8004c96 <_printf_float+0xb6>
 8004fee:	f108 0801 	add.w	r8, r8, #1
 8004ff2:	45d0      	cmp	r8, sl
 8004ff4:	dbf3      	blt.n	8004fde <_printf_float+0x3fe>
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ffc:	e6e0      	b.n	8004dc0 <_printf_float+0x1e0>
 8004ffe:	f04f 0800 	mov.w	r8, #0
 8005002:	f104 0b1a 	add.w	fp, r4, #26
 8005006:	e7f4      	b.n	8004ff2 <_printf_float+0x412>
 8005008:	2301      	movs	r3, #1
 800500a:	4642      	mov	r2, r8
 800500c:	e7e1      	b.n	8004fd2 <_printf_float+0x3f2>
 800500e:	2301      	movs	r3, #1
 8005010:	464a      	mov	r2, r9
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	47b8      	blx	r7
 8005018:	3001      	adds	r0, #1
 800501a:	f43f ae3c 	beq.w	8004c96 <_printf_float+0xb6>
 800501e:	f108 0801 	add.w	r8, r8, #1
 8005022:	68e3      	ldr	r3, [r4, #12]
 8005024:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005026:	1a5b      	subs	r3, r3, r1
 8005028:	4543      	cmp	r3, r8
 800502a:	dcf0      	bgt.n	800500e <_printf_float+0x42e>
 800502c:	e6fd      	b.n	8004e2a <_printf_float+0x24a>
 800502e:	f04f 0800 	mov.w	r8, #0
 8005032:	f104 0919 	add.w	r9, r4, #25
 8005036:	e7f4      	b.n	8005022 <_printf_float+0x442>

08005038 <_printf_common>:
 8005038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800503c:	4616      	mov	r6, r2
 800503e:	4698      	mov	r8, r3
 8005040:	688a      	ldr	r2, [r1, #8]
 8005042:	690b      	ldr	r3, [r1, #16]
 8005044:	4607      	mov	r7, r0
 8005046:	4293      	cmp	r3, r2
 8005048:	bfb8      	it	lt
 800504a:	4613      	movlt	r3, r2
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005052:	460c      	mov	r4, r1
 8005054:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005058:	b10a      	cbz	r2, 800505e <_printf_common+0x26>
 800505a:	3301      	adds	r3, #1
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	0699      	lsls	r1, r3, #26
 8005062:	bf42      	ittt	mi
 8005064:	6833      	ldrmi	r3, [r6, #0]
 8005066:	3302      	addmi	r3, #2
 8005068:	6033      	strmi	r3, [r6, #0]
 800506a:	6825      	ldr	r5, [r4, #0]
 800506c:	f015 0506 	ands.w	r5, r5, #6
 8005070:	d106      	bne.n	8005080 <_printf_common+0x48>
 8005072:	f104 0a19 	add.w	sl, r4, #25
 8005076:	68e3      	ldr	r3, [r4, #12]
 8005078:	6832      	ldr	r2, [r6, #0]
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	42ab      	cmp	r3, r5
 800507e:	dc2b      	bgt.n	80050d8 <_printf_common+0xa0>
 8005080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	3b00      	subs	r3, #0
 8005088:	bf18      	it	ne
 800508a:	2301      	movne	r3, #1
 800508c:	0692      	lsls	r2, r2, #26
 800508e:	d430      	bmi.n	80050f2 <_printf_common+0xba>
 8005090:	4641      	mov	r1, r8
 8005092:	4638      	mov	r0, r7
 8005094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005098:	47c8      	blx	r9
 800509a:	3001      	adds	r0, #1
 800509c:	d023      	beq.n	80050e6 <_printf_common+0xae>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	6922      	ldr	r2, [r4, #16]
 80050a2:	f003 0306 	and.w	r3, r3, #6
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	bf14      	ite	ne
 80050aa:	2500      	movne	r5, #0
 80050ac:	6833      	ldreq	r3, [r6, #0]
 80050ae:	f04f 0600 	mov.w	r6, #0
 80050b2:	bf08      	it	eq
 80050b4:	68e5      	ldreq	r5, [r4, #12]
 80050b6:	f104 041a 	add.w	r4, r4, #26
 80050ba:	bf08      	it	eq
 80050bc:	1aed      	subeq	r5, r5, r3
 80050be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050c2:	bf08      	it	eq
 80050c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c8:	4293      	cmp	r3, r2
 80050ca:	bfc4      	itt	gt
 80050cc:	1a9b      	subgt	r3, r3, r2
 80050ce:	18ed      	addgt	r5, r5, r3
 80050d0:	42b5      	cmp	r5, r6
 80050d2:	d11a      	bne.n	800510a <_printf_common+0xd2>
 80050d4:	2000      	movs	r0, #0
 80050d6:	e008      	b.n	80050ea <_printf_common+0xb2>
 80050d8:	2301      	movs	r3, #1
 80050da:	4652      	mov	r2, sl
 80050dc:	4641      	mov	r1, r8
 80050de:	4638      	mov	r0, r7
 80050e0:	47c8      	blx	r9
 80050e2:	3001      	adds	r0, #1
 80050e4:	d103      	bne.n	80050ee <_printf_common+0xb6>
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ee:	3501      	adds	r5, #1
 80050f0:	e7c1      	b.n	8005076 <_printf_common+0x3e>
 80050f2:	2030      	movs	r0, #48	@ 0x30
 80050f4:	18e1      	adds	r1, r4, r3
 80050f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005100:	4422      	add	r2, r4
 8005102:	3302      	adds	r3, #2
 8005104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005108:	e7c2      	b.n	8005090 <_printf_common+0x58>
 800510a:	2301      	movs	r3, #1
 800510c:	4622      	mov	r2, r4
 800510e:	4641      	mov	r1, r8
 8005110:	4638      	mov	r0, r7
 8005112:	47c8      	blx	r9
 8005114:	3001      	adds	r0, #1
 8005116:	d0e6      	beq.n	80050e6 <_printf_common+0xae>
 8005118:	3601      	adds	r6, #1
 800511a:	e7d9      	b.n	80050d0 <_printf_common+0x98>

0800511c <_printf_i>:
 800511c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	7e0f      	ldrb	r7, [r1, #24]
 8005122:	4691      	mov	r9, r2
 8005124:	2f78      	cmp	r7, #120	@ 0x78
 8005126:	4680      	mov	r8, r0
 8005128:	460c      	mov	r4, r1
 800512a:	469a      	mov	sl, r3
 800512c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800512e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005132:	d807      	bhi.n	8005144 <_printf_i+0x28>
 8005134:	2f62      	cmp	r7, #98	@ 0x62
 8005136:	d80a      	bhi.n	800514e <_printf_i+0x32>
 8005138:	2f00      	cmp	r7, #0
 800513a:	f000 80d1 	beq.w	80052e0 <_printf_i+0x1c4>
 800513e:	2f58      	cmp	r7, #88	@ 0x58
 8005140:	f000 80b8 	beq.w	80052b4 <_printf_i+0x198>
 8005144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005148:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800514c:	e03a      	b.n	80051c4 <_printf_i+0xa8>
 800514e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005152:	2b15      	cmp	r3, #21
 8005154:	d8f6      	bhi.n	8005144 <_printf_i+0x28>
 8005156:	a101      	add	r1, pc, #4	@ (adr r1, 800515c <_printf_i+0x40>)
 8005158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800515c:	080051b5 	.word	0x080051b5
 8005160:	080051c9 	.word	0x080051c9
 8005164:	08005145 	.word	0x08005145
 8005168:	08005145 	.word	0x08005145
 800516c:	08005145 	.word	0x08005145
 8005170:	08005145 	.word	0x08005145
 8005174:	080051c9 	.word	0x080051c9
 8005178:	08005145 	.word	0x08005145
 800517c:	08005145 	.word	0x08005145
 8005180:	08005145 	.word	0x08005145
 8005184:	08005145 	.word	0x08005145
 8005188:	080052c7 	.word	0x080052c7
 800518c:	080051f3 	.word	0x080051f3
 8005190:	08005281 	.word	0x08005281
 8005194:	08005145 	.word	0x08005145
 8005198:	08005145 	.word	0x08005145
 800519c:	080052e9 	.word	0x080052e9
 80051a0:	08005145 	.word	0x08005145
 80051a4:	080051f3 	.word	0x080051f3
 80051a8:	08005145 	.word	0x08005145
 80051ac:	08005145 	.word	0x08005145
 80051b0:	08005289 	.word	0x08005289
 80051b4:	6833      	ldr	r3, [r6, #0]
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6032      	str	r2, [r6, #0]
 80051bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051c4:	2301      	movs	r3, #1
 80051c6:	e09c      	b.n	8005302 <_printf_i+0x1e6>
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	1d19      	adds	r1, r3, #4
 80051ce:	6031      	str	r1, [r6, #0]
 80051d0:	0606      	lsls	r6, r0, #24
 80051d2:	d501      	bpl.n	80051d8 <_printf_i+0xbc>
 80051d4:	681d      	ldr	r5, [r3, #0]
 80051d6:	e003      	b.n	80051e0 <_printf_i+0xc4>
 80051d8:	0645      	lsls	r5, r0, #25
 80051da:	d5fb      	bpl.n	80051d4 <_printf_i+0xb8>
 80051dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	da03      	bge.n	80051ec <_printf_i+0xd0>
 80051e4:	232d      	movs	r3, #45	@ 0x2d
 80051e6:	426d      	negs	r5, r5
 80051e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ec:	230a      	movs	r3, #10
 80051ee:	4858      	ldr	r0, [pc, #352]	@ (8005350 <_printf_i+0x234>)
 80051f0:	e011      	b.n	8005216 <_printf_i+0xfa>
 80051f2:	6821      	ldr	r1, [r4, #0]
 80051f4:	6833      	ldr	r3, [r6, #0]
 80051f6:	0608      	lsls	r0, r1, #24
 80051f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80051fc:	d402      	bmi.n	8005204 <_printf_i+0xe8>
 80051fe:	0649      	lsls	r1, r1, #25
 8005200:	bf48      	it	mi
 8005202:	b2ad      	uxthmi	r5, r5
 8005204:	2f6f      	cmp	r7, #111	@ 0x6f
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	bf14      	ite	ne
 800520a:	230a      	movne	r3, #10
 800520c:	2308      	moveq	r3, #8
 800520e:	4850      	ldr	r0, [pc, #320]	@ (8005350 <_printf_i+0x234>)
 8005210:	2100      	movs	r1, #0
 8005212:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005216:	6866      	ldr	r6, [r4, #4]
 8005218:	2e00      	cmp	r6, #0
 800521a:	60a6      	str	r6, [r4, #8]
 800521c:	db05      	blt.n	800522a <_printf_i+0x10e>
 800521e:	6821      	ldr	r1, [r4, #0]
 8005220:	432e      	orrs	r6, r5
 8005222:	f021 0104 	bic.w	r1, r1, #4
 8005226:	6021      	str	r1, [r4, #0]
 8005228:	d04b      	beq.n	80052c2 <_printf_i+0x1a6>
 800522a:	4616      	mov	r6, r2
 800522c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005230:	fb03 5711 	mls	r7, r3, r1, r5
 8005234:	5dc7      	ldrb	r7, [r0, r7]
 8005236:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800523a:	462f      	mov	r7, r5
 800523c:	42bb      	cmp	r3, r7
 800523e:	460d      	mov	r5, r1
 8005240:	d9f4      	bls.n	800522c <_printf_i+0x110>
 8005242:	2b08      	cmp	r3, #8
 8005244:	d10b      	bne.n	800525e <_printf_i+0x142>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	07df      	lsls	r7, r3, #31
 800524a:	d508      	bpl.n	800525e <_printf_i+0x142>
 800524c:	6923      	ldr	r3, [r4, #16]
 800524e:	6861      	ldr	r1, [r4, #4]
 8005250:	4299      	cmp	r1, r3
 8005252:	bfde      	ittt	le
 8005254:	2330      	movle	r3, #48	@ 0x30
 8005256:	f806 3c01 	strble.w	r3, [r6, #-1]
 800525a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800525e:	1b92      	subs	r2, r2, r6
 8005260:	6122      	str	r2, [r4, #16]
 8005262:	464b      	mov	r3, r9
 8005264:	4621      	mov	r1, r4
 8005266:	4640      	mov	r0, r8
 8005268:	f8cd a000 	str.w	sl, [sp]
 800526c:	aa03      	add	r2, sp, #12
 800526e:	f7ff fee3 	bl	8005038 <_printf_common>
 8005272:	3001      	adds	r0, #1
 8005274:	d14a      	bne.n	800530c <_printf_i+0x1f0>
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	b004      	add	sp, #16
 800527c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f043 0320 	orr.w	r3, r3, #32
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	2778      	movs	r7, #120	@ 0x78
 800528a:	4832      	ldr	r0, [pc, #200]	@ (8005354 <_printf_i+0x238>)
 800528c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	6831      	ldr	r1, [r6, #0]
 8005294:	061f      	lsls	r7, r3, #24
 8005296:	f851 5b04 	ldr.w	r5, [r1], #4
 800529a:	d402      	bmi.n	80052a2 <_printf_i+0x186>
 800529c:	065f      	lsls	r7, r3, #25
 800529e:	bf48      	it	mi
 80052a0:	b2ad      	uxthmi	r5, r5
 80052a2:	6031      	str	r1, [r6, #0]
 80052a4:	07d9      	lsls	r1, r3, #31
 80052a6:	bf44      	itt	mi
 80052a8:	f043 0320 	orrmi.w	r3, r3, #32
 80052ac:	6023      	strmi	r3, [r4, #0]
 80052ae:	b11d      	cbz	r5, 80052b8 <_printf_i+0x19c>
 80052b0:	2310      	movs	r3, #16
 80052b2:	e7ad      	b.n	8005210 <_printf_i+0xf4>
 80052b4:	4826      	ldr	r0, [pc, #152]	@ (8005350 <_printf_i+0x234>)
 80052b6:	e7e9      	b.n	800528c <_printf_i+0x170>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	f023 0320 	bic.w	r3, r3, #32
 80052be:	6023      	str	r3, [r4, #0]
 80052c0:	e7f6      	b.n	80052b0 <_printf_i+0x194>
 80052c2:	4616      	mov	r6, r2
 80052c4:	e7bd      	b.n	8005242 <_printf_i+0x126>
 80052c6:	6833      	ldr	r3, [r6, #0]
 80052c8:	6825      	ldr	r5, [r4, #0]
 80052ca:	1d18      	adds	r0, r3, #4
 80052cc:	6961      	ldr	r1, [r4, #20]
 80052ce:	6030      	str	r0, [r6, #0]
 80052d0:	062e      	lsls	r6, r5, #24
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	d501      	bpl.n	80052da <_printf_i+0x1be>
 80052d6:	6019      	str	r1, [r3, #0]
 80052d8:	e002      	b.n	80052e0 <_printf_i+0x1c4>
 80052da:	0668      	lsls	r0, r5, #25
 80052dc:	d5fb      	bpl.n	80052d6 <_printf_i+0x1ba>
 80052de:	8019      	strh	r1, [r3, #0]
 80052e0:	2300      	movs	r3, #0
 80052e2:	4616      	mov	r6, r2
 80052e4:	6123      	str	r3, [r4, #16]
 80052e6:	e7bc      	b.n	8005262 <_printf_i+0x146>
 80052e8:	6833      	ldr	r3, [r6, #0]
 80052ea:	2100      	movs	r1, #0
 80052ec:	1d1a      	adds	r2, r3, #4
 80052ee:	6032      	str	r2, [r6, #0]
 80052f0:	681e      	ldr	r6, [r3, #0]
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	4630      	mov	r0, r6
 80052f6:	f000 f9fa 	bl	80056ee <memchr>
 80052fa:	b108      	cbz	r0, 8005300 <_printf_i+0x1e4>
 80052fc:	1b80      	subs	r0, r0, r6
 80052fe:	6060      	str	r0, [r4, #4]
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	6123      	str	r3, [r4, #16]
 8005304:	2300      	movs	r3, #0
 8005306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800530a:	e7aa      	b.n	8005262 <_printf_i+0x146>
 800530c:	4632      	mov	r2, r6
 800530e:	4649      	mov	r1, r9
 8005310:	4640      	mov	r0, r8
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	47d0      	blx	sl
 8005316:	3001      	adds	r0, #1
 8005318:	d0ad      	beq.n	8005276 <_printf_i+0x15a>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	079b      	lsls	r3, r3, #30
 800531e:	d413      	bmi.n	8005348 <_printf_i+0x22c>
 8005320:	68e0      	ldr	r0, [r4, #12]
 8005322:	9b03      	ldr	r3, [sp, #12]
 8005324:	4298      	cmp	r0, r3
 8005326:	bfb8      	it	lt
 8005328:	4618      	movlt	r0, r3
 800532a:	e7a6      	b.n	800527a <_printf_i+0x15e>
 800532c:	2301      	movs	r3, #1
 800532e:	4632      	mov	r2, r6
 8005330:	4649      	mov	r1, r9
 8005332:	4640      	mov	r0, r8
 8005334:	47d0      	blx	sl
 8005336:	3001      	adds	r0, #1
 8005338:	d09d      	beq.n	8005276 <_printf_i+0x15a>
 800533a:	3501      	adds	r5, #1
 800533c:	68e3      	ldr	r3, [r4, #12]
 800533e:	9903      	ldr	r1, [sp, #12]
 8005340:	1a5b      	subs	r3, r3, r1
 8005342:	42ab      	cmp	r3, r5
 8005344:	dcf2      	bgt.n	800532c <_printf_i+0x210>
 8005346:	e7eb      	b.n	8005320 <_printf_i+0x204>
 8005348:	2500      	movs	r5, #0
 800534a:	f104 0619 	add.w	r6, r4, #25
 800534e:	e7f5      	b.n	800533c <_printf_i+0x220>
 8005350:	08007e0e 	.word	0x08007e0e
 8005354:	08007e1f 	.word	0x08007e1f

08005358 <std>:
 8005358:	2300      	movs	r3, #0
 800535a:	b510      	push	{r4, lr}
 800535c:	4604      	mov	r4, r0
 800535e:	e9c0 3300 	strd	r3, r3, [r0]
 8005362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005366:	6083      	str	r3, [r0, #8]
 8005368:	8181      	strh	r1, [r0, #12]
 800536a:	6643      	str	r3, [r0, #100]	@ 0x64
 800536c:	81c2      	strh	r2, [r0, #14]
 800536e:	6183      	str	r3, [r0, #24]
 8005370:	4619      	mov	r1, r3
 8005372:	2208      	movs	r2, #8
 8005374:	305c      	adds	r0, #92	@ 0x5c
 8005376:	f000 f92a 	bl	80055ce <memset>
 800537a:	4b0d      	ldr	r3, [pc, #52]	@ (80053b0 <std+0x58>)
 800537c:	6224      	str	r4, [r4, #32]
 800537e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005380:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <std+0x5c>)
 8005382:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005384:	4b0c      	ldr	r3, [pc, #48]	@ (80053b8 <std+0x60>)
 8005386:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005388:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <std+0x64>)
 800538a:	6323      	str	r3, [r4, #48]	@ 0x30
 800538c:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <std+0x68>)
 800538e:	429c      	cmp	r4, r3
 8005390:	d006      	beq.n	80053a0 <std+0x48>
 8005392:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005396:	4294      	cmp	r4, r2
 8005398:	d002      	beq.n	80053a0 <std+0x48>
 800539a:	33d0      	adds	r3, #208	@ 0xd0
 800539c:	429c      	cmp	r4, r3
 800539e:	d105      	bne.n	80053ac <std+0x54>
 80053a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a8:	f000 b99e 	b.w	80056e8 <__retarget_lock_init_recursive>
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	bf00      	nop
 80053b0:	08005549 	.word	0x08005549
 80053b4:	0800556b 	.word	0x0800556b
 80053b8:	080055a3 	.word	0x080055a3
 80053bc:	080055c7 	.word	0x080055c7
 80053c0:	20000764 	.word	0x20000764

080053c4 <stdio_exit_handler>:
 80053c4:	4a02      	ldr	r2, [pc, #8]	@ (80053d0 <stdio_exit_handler+0xc>)
 80053c6:	4903      	ldr	r1, [pc, #12]	@ (80053d4 <stdio_exit_handler+0x10>)
 80053c8:	4803      	ldr	r0, [pc, #12]	@ (80053d8 <stdio_exit_handler+0x14>)
 80053ca:	f000 b869 	b.w	80054a0 <_fwalk_sglue>
 80053ce:	bf00      	nop
 80053d0:	2000000c 	.word	0x2000000c
 80053d4:	08006f15 	.word	0x08006f15
 80053d8:	2000001c 	.word	0x2000001c

080053dc <cleanup_stdio>:
 80053dc:	6841      	ldr	r1, [r0, #4]
 80053de:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <cleanup_stdio+0x34>)
 80053e0:	b510      	push	{r4, lr}
 80053e2:	4299      	cmp	r1, r3
 80053e4:	4604      	mov	r4, r0
 80053e6:	d001      	beq.n	80053ec <cleanup_stdio+0x10>
 80053e8:	f001 fd94 	bl	8006f14 <_fflush_r>
 80053ec:	68a1      	ldr	r1, [r4, #8]
 80053ee:	4b09      	ldr	r3, [pc, #36]	@ (8005414 <cleanup_stdio+0x38>)
 80053f0:	4299      	cmp	r1, r3
 80053f2:	d002      	beq.n	80053fa <cleanup_stdio+0x1e>
 80053f4:	4620      	mov	r0, r4
 80053f6:	f001 fd8d 	bl	8006f14 <_fflush_r>
 80053fa:	68e1      	ldr	r1, [r4, #12]
 80053fc:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <cleanup_stdio+0x3c>)
 80053fe:	4299      	cmp	r1, r3
 8005400:	d004      	beq.n	800540c <cleanup_stdio+0x30>
 8005402:	4620      	mov	r0, r4
 8005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005408:	f001 bd84 	b.w	8006f14 <_fflush_r>
 800540c:	bd10      	pop	{r4, pc}
 800540e:	bf00      	nop
 8005410:	20000764 	.word	0x20000764
 8005414:	200007cc 	.word	0x200007cc
 8005418:	20000834 	.word	0x20000834

0800541c <global_stdio_init.part.0>:
 800541c:	b510      	push	{r4, lr}
 800541e:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <global_stdio_init.part.0+0x30>)
 8005420:	4c0b      	ldr	r4, [pc, #44]	@ (8005450 <global_stdio_init.part.0+0x34>)
 8005422:	4a0c      	ldr	r2, [pc, #48]	@ (8005454 <global_stdio_init.part.0+0x38>)
 8005424:	4620      	mov	r0, r4
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	2104      	movs	r1, #4
 800542a:	2200      	movs	r2, #0
 800542c:	f7ff ff94 	bl	8005358 <std>
 8005430:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005434:	2201      	movs	r2, #1
 8005436:	2109      	movs	r1, #9
 8005438:	f7ff ff8e 	bl	8005358 <std>
 800543c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005440:	2202      	movs	r2, #2
 8005442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005446:	2112      	movs	r1, #18
 8005448:	f7ff bf86 	b.w	8005358 <std>
 800544c:	2000089c 	.word	0x2000089c
 8005450:	20000764 	.word	0x20000764
 8005454:	080053c5 	.word	0x080053c5

08005458 <__sfp_lock_acquire>:
 8005458:	4801      	ldr	r0, [pc, #4]	@ (8005460 <__sfp_lock_acquire+0x8>)
 800545a:	f000 b946 	b.w	80056ea <__retarget_lock_acquire_recursive>
 800545e:	bf00      	nop
 8005460:	200008a5 	.word	0x200008a5

08005464 <__sfp_lock_release>:
 8005464:	4801      	ldr	r0, [pc, #4]	@ (800546c <__sfp_lock_release+0x8>)
 8005466:	f000 b941 	b.w	80056ec <__retarget_lock_release_recursive>
 800546a:	bf00      	nop
 800546c:	200008a5 	.word	0x200008a5

08005470 <__sinit>:
 8005470:	b510      	push	{r4, lr}
 8005472:	4604      	mov	r4, r0
 8005474:	f7ff fff0 	bl	8005458 <__sfp_lock_acquire>
 8005478:	6a23      	ldr	r3, [r4, #32]
 800547a:	b11b      	cbz	r3, 8005484 <__sinit+0x14>
 800547c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005480:	f7ff bff0 	b.w	8005464 <__sfp_lock_release>
 8005484:	4b04      	ldr	r3, [pc, #16]	@ (8005498 <__sinit+0x28>)
 8005486:	6223      	str	r3, [r4, #32]
 8005488:	4b04      	ldr	r3, [pc, #16]	@ (800549c <__sinit+0x2c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f5      	bne.n	800547c <__sinit+0xc>
 8005490:	f7ff ffc4 	bl	800541c <global_stdio_init.part.0>
 8005494:	e7f2      	b.n	800547c <__sinit+0xc>
 8005496:	bf00      	nop
 8005498:	080053dd 	.word	0x080053dd
 800549c:	2000089c 	.word	0x2000089c

080054a0 <_fwalk_sglue>:
 80054a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a4:	4607      	mov	r7, r0
 80054a6:	4688      	mov	r8, r1
 80054a8:	4614      	mov	r4, r2
 80054aa:	2600      	movs	r6, #0
 80054ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054b0:	f1b9 0901 	subs.w	r9, r9, #1
 80054b4:	d505      	bpl.n	80054c2 <_fwalk_sglue+0x22>
 80054b6:	6824      	ldr	r4, [r4, #0]
 80054b8:	2c00      	cmp	r4, #0
 80054ba:	d1f7      	bne.n	80054ac <_fwalk_sglue+0xc>
 80054bc:	4630      	mov	r0, r6
 80054be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054c2:	89ab      	ldrh	r3, [r5, #12]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d907      	bls.n	80054d8 <_fwalk_sglue+0x38>
 80054c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054cc:	3301      	adds	r3, #1
 80054ce:	d003      	beq.n	80054d8 <_fwalk_sglue+0x38>
 80054d0:	4629      	mov	r1, r5
 80054d2:	4638      	mov	r0, r7
 80054d4:	47c0      	blx	r8
 80054d6:	4306      	orrs	r6, r0
 80054d8:	3568      	adds	r5, #104	@ 0x68
 80054da:	e7e9      	b.n	80054b0 <_fwalk_sglue+0x10>

080054dc <sniprintf>:
 80054dc:	b40c      	push	{r2, r3}
 80054de:	b530      	push	{r4, r5, lr}
 80054e0:	4b18      	ldr	r3, [pc, #96]	@ (8005544 <sniprintf+0x68>)
 80054e2:	1e0c      	subs	r4, r1, #0
 80054e4:	681d      	ldr	r5, [r3, #0]
 80054e6:	b09d      	sub	sp, #116	@ 0x74
 80054e8:	da08      	bge.n	80054fc <sniprintf+0x20>
 80054ea:	238b      	movs	r3, #139	@ 0x8b
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295
 80054f0:	602b      	str	r3, [r5, #0]
 80054f2:	b01d      	add	sp, #116	@ 0x74
 80054f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054f8:	b002      	add	sp, #8
 80054fa:	4770      	bx	lr
 80054fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005500:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	931b      	str	r3, [sp, #108]	@ 0x6c
 800550a:	bf0c      	ite	eq
 800550c:	4623      	moveq	r3, r4
 800550e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005512:	9304      	str	r3, [sp, #16]
 8005514:	9307      	str	r3, [sp, #28]
 8005516:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800551a:	9002      	str	r0, [sp, #8]
 800551c:	9006      	str	r0, [sp, #24]
 800551e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005522:	4628      	mov	r0, r5
 8005524:	ab21      	add	r3, sp, #132	@ 0x84
 8005526:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005528:	a902      	add	r1, sp, #8
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	f001 fb76 	bl	8006c1c <_svfiprintf_r>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	bfbc      	itt	lt
 8005534:	238b      	movlt	r3, #139	@ 0x8b
 8005536:	602b      	strlt	r3, [r5, #0]
 8005538:	2c00      	cmp	r4, #0
 800553a:	d0da      	beq.n	80054f2 <sniprintf+0x16>
 800553c:	2200      	movs	r2, #0
 800553e:	9b02      	ldr	r3, [sp, #8]
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e7d6      	b.n	80054f2 <sniprintf+0x16>
 8005544:	20000018 	.word	0x20000018

08005548 <__sread>:
 8005548:	b510      	push	{r4, lr}
 800554a:	460c      	mov	r4, r1
 800554c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005550:	f000 f86c 	bl	800562c <_read_r>
 8005554:	2800      	cmp	r0, #0
 8005556:	bfab      	itete	ge
 8005558:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800555a:	89a3      	ldrhlt	r3, [r4, #12]
 800555c:	181b      	addge	r3, r3, r0
 800555e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005562:	bfac      	ite	ge
 8005564:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005566:	81a3      	strhlt	r3, [r4, #12]
 8005568:	bd10      	pop	{r4, pc}

0800556a <__swrite>:
 800556a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556e:	461f      	mov	r7, r3
 8005570:	898b      	ldrh	r3, [r1, #12]
 8005572:	4605      	mov	r5, r0
 8005574:	05db      	lsls	r3, r3, #23
 8005576:	460c      	mov	r4, r1
 8005578:	4616      	mov	r6, r2
 800557a:	d505      	bpl.n	8005588 <__swrite+0x1e>
 800557c:	2302      	movs	r3, #2
 800557e:	2200      	movs	r2, #0
 8005580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005584:	f000 f840 	bl	8005608 <_lseek_r>
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	4632      	mov	r2, r6
 800558c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005590:	81a3      	strh	r3, [r4, #12]
 8005592:	4628      	mov	r0, r5
 8005594:	463b      	mov	r3, r7
 8005596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800559a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800559e:	f000 b867 	b.w	8005670 <_write_r>

080055a2 <__sseek>:
 80055a2:	b510      	push	{r4, lr}
 80055a4:	460c      	mov	r4, r1
 80055a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055aa:	f000 f82d 	bl	8005608 <_lseek_r>
 80055ae:	1c43      	adds	r3, r0, #1
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	bf15      	itete	ne
 80055b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055be:	81a3      	strheq	r3, [r4, #12]
 80055c0:	bf18      	it	ne
 80055c2:	81a3      	strhne	r3, [r4, #12]
 80055c4:	bd10      	pop	{r4, pc}

080055c6 <__sclose>:
 80055c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ca:	f000 b80d 	b.w	80055e8 <_close_r>

080055ce <memset>:
 80055ce:	4603      	mov	r3, r0
 80055d0:	4402      	add	r2, r0
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d100      	bne.n	80055d8 <memset+0xa>
 80055d6:	4770      	bx	lr
 80055d8:	f803 1b01 	strb.w	r1, [r3], #1
 80055dc:	e7f9      	b.n	80055d2 <memset+0x4>
	...

080055e0 <_localeconv_r>:
 80055e0:	4800      	ldr	r0, [pc, #0]	@ (80055e4 <_localeconv_r+0x4>)
 80055e2:	4770      	bx	lr
 80055e4:	20000158 	.word	0x20000158

080055e8 <_close_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	2300      	movs	r3, #0
 80055ec:	4d05      	ldr	r5, [pc, #20]	@ (8005604 <_close_r+0x1c>)
 80055ee:	4604      	mov	r4, r0
 80055f0:	4608      	mov	r0, r1
 80055f2:	602b      	str	r3, [r5, #0]
 80055f4:	f7ff f905 	bl	8004802 <_close>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d102      	bne.n	8005602 <_close_r+0x1a>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	b103      	cbz	r3, 8005602 <_close_r+0x1a>
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	bd38      	pop	{r3, r4, r5, pc}
 8005604:	200008a0 	.word	0x200008a0

08005608 <_lseek_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	2200      	movs	r2, #0
 8005612:	4d05      	ldr	r5, [pc, #20]	@ (8005628 <_lseek_r+0x20>)
 8005614:	602a      	str	r2, [r5, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	f7ff f917 	bl	800484a <_lseek>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_lseek_r+0x1e>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_lseek_r+0x1e>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	200008a0 	.word	0x200008a0

0800562c <_read_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	2200      	movs	r2, #0
 8005636:	4d05      	ldr	r5, [pc, #20]	@ (800564c <_read_r+0x20>)
 8005638:	602a      	str	r2, [r5, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	f7ff f8a8 	bl	8004790 <_read>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d102      	bne.n	800564a <_read_r+0x1e>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	b103      	cbz	r3, 800564a <_read_r+0x1e>
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	200008a0 	.word	0x200008a0

08005650 <_sbrk_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	2300      	movs	r3, #0
 8005654:	4d05      	ldr	r5, [pc, #20]	@ (800566c <_sbrk_r+0x1c>)
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	f7ff f902 	bl	8004864 <_sbrk>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_sbrk_r+0x1a>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_sbrk_r+0x1a>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	200008a0 	.word	0x200008a0

08005670 <_write_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4604      	mov	r4, r0
 8005674:	4608      	mov	r0, r1
 8005676:	4611      	mov	r1, r2
 8005678:	2200      	movs	r2, #0
 800567a:	4d05      	ldr	r5, [pc, #20]	@ (8005690 <_write_r+0x20>)
 800567c:	602a      	str	r2, [r5, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f7ff f8a3 	bl	80047ca <_write>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_write_r+0x1e>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_write_r+0x1e>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	200008a0 	.word	0x200008a0

08005694 <__errno>:
 8005694:	4b01      	ldr	r3, [pc, #4]	@ (800569c <__errno+0x8>)
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000018 	.word	0x20000018

080056a0 <__libc_init_array>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	2600      	movs	r6, #0
 80056a4:	4d0c      	ldr	r5, [pc, #48]	@ (80056d8 <__libc_init_array+0x38>)
 80056a6:	4c0d      	ldr	r4, [pc, #52]	@ (80056dc <__libc_init_array+0x3c>)
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	42a6      	cmp	r6, r4
 80056ae:	d109      	bne.n	80056c4 <__libc_init_array+0x24>
 80056b0:	f001 ffae 	bl	8007610 <_init>
 80056b4:	2600      	movs	r6, #0
 80056b6:	4d0a      	ldr	r5, [pc, #40]	@ (80056e0 <__libc_init_array+0x40>)
 80056b8:	4c0a      	ldr	r4, [pc, #40]	@ (80056e4 <__libc_init_array+0x44>)
 80056ba:	1b64      	subs	r4, r4, r5
 80056bc:	10a4      	asrs	r4, r4, #2
 80056be:	42a6      	cmp	r6, r4
 80056c0:	d105      	bne.n	80056ce <__libc_init_array+0x2e>
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c8:	4798      	blx	r3
 80056ca:	3601      	adds	r6, #1
 80056cc:	e7ee      	b.n	80056ac <__libc_init_array+0xc>
 80056ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d2:	4798      	blx	r3
 80056d4:	3601      	adds	r6, #1
 80056d6:	e7f2      	b.n	80056be <__libc_init_array+0x1e>
 80056d8:	0800817c 	.word	0x0800817c
 80056dc:	0800817c 	.word	0x0800817c
 80056e0:	0800817c 	.word	0x0800817c
 80056e4:	08008180 	.word	0x08008180

080056e8 <__retarget_lock_init_recursive>:
 80056e8:	4770      	bx	lr

080056ea <__retarget_lock_acquire_recursive>:
 80056ea:	4770      	bx	lr

080056ec <__retarget_lock_release_recursive>:
 80056ec:	4770      	bx	lr

080056ee <memchr>:
 80056ee:	4603      	mov	r3, r0
 80056f0:	b510      	push	{r4, lr}
 80056f2:	b2c9      	uxtb	r1, r1
 80056f4:	4402      	add	r2, r0
 80056f6:	4293      	cmp	r3, r2
 80056f8:	4618      	mov	r0, r3
 80056fa:	d101      	bne.n	8005700 <memchr+0x12>
 80056fc:	2000      	movs	r0, #0
 80056fe:	e003      	b.n	8005708 <memchr+0x1a>
 8005700:	7804      	ldrb	r4, [r0, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	428c      	cmp	r4, r1
 8005706:	d1f6      	bne.n	80056f6 <memchr+0x8>
 8005708:	bd10      	pop	{r4, pc}

0800570a <memcpy>:
 800570a:	440a      	add	r2, r1
 800570c:	4291      	cmp	r1, r2
 800570e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005712:	d100      	bne.n	8005716 <memcpy+0xc>
 8005714:	4770      	bx	lr
 8005716:	b510      	push	{r4, lr}
 8005718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800571c:	4291      	cmp	r1, r2
 800571e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005722:	d1f9      	bne.n	8005718 <memcpy+0xe>
 8005724:	bd10      	pop	{r4, pc}

08005726 <quorem>:
 8005726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	6903      	ldr	r3, [r0, #16]
 800572c:	690c      	ldr	r4, [r1, #16]
 800572e:	4607      	mov	r7, r0
 8005730:	42a3      	cmp	r3, r4
 8005732:	db7e      	blt.n	8005832 <quorem+0x10c>
 8005734:	3c01      	subs	r4, #1
 8005736:	00a3      	lsls	r3, r4, #2
 8005738:	f100 0514 	add.w	r5, r0, #20
 800573c:	f101 0814 	add.w	r8, r1, #20
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800574c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005750:	3301      	adds	r3, #1
 8005752:	429a      	cmp	r2, r3
 8005754:	fbb2 f6f3 	udiv	r6, r2, r3
 8005758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800575c:	d32e      	bcc.n	80057bc <quorem+0x96>
 800575e:	f04f 0a00 	mov.w	sl, #0
 8005762:	46c4      	mov	ip, r8
 8005764:	46ae      	mov	lr, r5
 8005766:	46d3      	mov	fp, sl
 8005768:	f85c 3b04 	ldr.w	r3, [ip], #4
 800576c:	b298      	uxth	r0, r3
 800576e:	fb06 a000 	mla	r0, r6, r0, sl
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	0c02      	lsrs	r2, r0, #16
 8005776:	fb06 2303 	mla	r3, r6, r3, r2
 800577a:	f8de 2000 	ldr.w	r2, [lr]
 800577e:	b280      	uxth	r0, r0
 8005780:	b292      	uxth	r2, r2
 8005782:	1a12      	subs	r2, r2, r0
 8005784:	445a      	add	r2, fp
 8005786:	f8de 0000 	ldr.w	r0, [lr]
 800578a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800578e:	b29b      	uxth	r3, r3
 8005790:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005794:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005798:	b292      	uxth	r2, r2
 800579a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800579e:	45e1      	cmp	r9, ip
 80057a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80057a4:	f84e 2b04 	str.w	r2, [lr], #4
 80057a8:	d2de      	bcs.n	8005768 <quorem+0x42>
 80057aa:	9b00      	ldr	r3, [sp, #0]
 80057ac:	58eb      	ldr	r3, [r5, r3]
 80057ae:	b92b      	cbnz	r3, 80057bc <quorem+0x96>
 80057b0:	9b01      	ldr	r3, [sp, #4]
 80057b2:	3b04      	subs	r3, #4
 80057b4:	429d      	cmp	r5, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	d32f      	bcc.n	800581a <quorem+0xf4>
 80057ba:	613c      	str	r4, [r7, #16]
 80057bc:	4638      	mov	r0, r7
 80057be:	f001 f8c9 	bl	8006954 <__mcmp>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	db25      	blt.n	8005812 <quorem+0xec>
 80057c6:	4629      	mov	r1, r5
 80057c8:	2000      	movs	r0, #0
 80057ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80057ce:	f8d1 c000 	ldr.w	ip, [r1]
 80057d2:	fa1f fe82 	uxth.w	lr, r2
 80057d6:	fa1f f38c 	uxth.w	r3, ip
 80057da:	eba3 030e 	sub.w	r3, r3, lr
 80057de:	4403      	add	r3, r0
 80057e0:	0c12      	lsrs	r2, r2, #16
 80057e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80057e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057f0:	45c1      	cmp	r9, r8
 80057f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057f6:	f841 3b04 	str.w	r3, [r1], #4
 80057fa:	d2e6      	bcs.n	80057ca <quorem+0xa4>
 80057fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005800:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005804:	b922      	cbnz	r2, 8005810 <quorem+0xea>
 8005806:	3b04      	subs	r3, #4
 8005808:	429d      	cmp	r5, r3
 800580a:	461a      	mov	r2, r3
 800580c:	d30b      	bcc.n	8005826 <quorem+0x100>
 800580e:	613c      	str	r4, [r7, #16]
 8005810:	3601      	adds	r6, #1
 8005812:	4630      	mov	r0, r6
 8005814:	b003      	add	sp, #12
 8005816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	3b04      	subs	r3, #4
 800581e:	2a00      	cmp	r2, #0
 8005820:	d1cb      	bne.n	80057ba <quorem+0x94>
 8005822:	3c01      	subs	r4, #1
 8005824:	e7c6      	b.n	80057b4 <quorem+0x8e>
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	3b04      	subs	r3, #4
 800582a:	2a00      	cmp	r2, #0
 800582c:	d1ef      	bne.n	800580e <quorem+0xe8>
 800582e:	3c01      	subs	r4, #1
 8005830:	e7ea      	b.n	8005808 <quorem+0xe2>
 8005832:	2000      	movs	r0, #0
 8005834:	e7ee      	b.n	8005814 <quorem+0xee>
	...

08005838 <_dtoa_r>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	4614      	mov	r4, r2
 800583e:	461d      	mov	r5, r3
 8005840:	69c7      	ldr	r7, [r0, #28]
 8005842:	b097      	sub	sp, #92	@ 0x5c
 8005844:	4681      	mov	r9, r0
 8005846:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800584a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800584c:	b97f      	cbnz	r7, 800586e <_dtoa_r+0x36>
 800584e:	2010      	movs	r0, #16
 8005850:	f7ff f86a 	bl	8004928 <malloc>
 8005854:	4602      	mov	r2, r0
 8005856:	f8c9 001c 	str.w	r0, [r9, #28]
 800585a:	b920      	cbnz	r0, 8005866 <_dtoa_r+0x2e>
 800585c:	21ef      	movs	r1, #239	@ 0xef
 800585e:	4bac      	ldr	r3, [pc, #688]	@ (8005b10 <_dtoa_r+0x2d8>)
 8005860:	48ac      	ldr	r0, [pc, #688]	@ (8005b14 <_dtoa_r+0x2dc>)
 8005862:	f001 fb99 	bl	8006f98 <__assert_func>
 8005866:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800586a:	6007      	str	r7, [r0, #0]
 800586c:	60c7      	str	r7, [r0, #12]
 800586e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	b159      	cbz	r1, 800588e <_dtoa_r+0x56>
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	2301      	movs	r3, #1
 800587a:	4093      	lsls	r3, r2
 800587c:	604a      	str	r2, [r1, #4]
 800587e:	608b      	str	r3, [r1, #8]
 8005880:	4648      	mov	r0, r9
 8005882:	f000 fe35 	bl	80064f0 <_Bfree>
 8005886:	2200      	movs	r2, #0
 8005888:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	1e2b      	subs	r3, r5, #0
 8005890:	bfaf      	iteee	ge
 8005892:	2300      	movge	r3, #0
 8005894:	2201      	movlt	r2, #1
 8005896:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800589a:	9307      	strlt	r3, [sp, #28]
 800589c:	bfa8      	it	ge
 800589e:	6033      	strge	r3, [r6, #0]
 80058a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80058a4:	4b9c      	ldr	r3, [pc, #624]	@ (8005b18 <_dtoa_r+0x2e0>)
 80058a6:	bfb8      	it	lt
 80058a8:	6032      	strlt	r2, [r6, #0]
 80058aa:	ea33 0308 	bics.w	r3, r3, r8
 80058ae:	d112      	bne.n	80058d6 <_dtoa_r+0x9e>
 80058b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80058b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80058bc:	4323      	orrs	r3, r4
 80058be:	f000 855e 	beq.w	800637e <_dtoa_r+0xb46>
 80058c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80058c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005b1c <_dtoa_r+0x2e4>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8560 	beq.w	800638e <_dtoa_r+0xb56>
 80058ce:	f10a 0303 	add.w	r3, sl, #3
 80058d2:	f000 bd5a 	b.w	800638a <_dtoa_r+0xb52>
 80058d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80058de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058e2:	2200      	movs	r2, #0
 80058e4:	2300      	movs	r3, #0
 80058e6:	f7fb f85f 	bl	80009a8 <__aeabi_dcmpeq>
 80058ea:	4607      	mov	r7, r0
 80058ec:	b158      	cbz	r0, 8005906 <_dtoa_r+0xce>
 80058ee:	2301      	movs	r3, #1
 80058f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80058f6:	b113      	cbz	r3, 80058fe <_dtoa_r+0xc6>
 80058f8:	4b89      	ldr	r3, [pc, #548]	@ (8005b20 <_dtoa_r+0x2e8>)
 80058fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005b24 <_dtoa_r+0x2ec>
 8005902:	f000 bd44 	b.w	800638e <_dtoa_r+0xb56>
 8005906:	ab14      	add	r3, sp, #80	@ 0x50
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	ab15      	add	r3, sp, #84	@ 0x54
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	4648      	mov	r0, r9
 8005910:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005914:	f001 f8ce 	bl	8006ab4 <__d2b>
 8005918:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800591c:	9003      	str	r0, [sp, #12]
 800591e:	2e00      	cmp	r6, #0
 8005920:	d078      	beq.n	8005a14 <_dtoa_r+0x1dc>
 8005922:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005928:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800592c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005930:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005934:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005938:	9712      	str	r7, [sp, #72]	@ 0x48
 800593a:	4619      	mov	r1, r3
 800593c:	2200      	movs	r2, #0
 800593e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b28 <_dtoa_r+0x2f0>)
 8005940:	f7fa fc12 	bl	8000168 <__aeabi_dsub>
 8005944:	a36c      	add	r3, pc, #432	@ (adr r3, 8005af8 <_dtoa_r+0x2c0>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f7fa fdc5 	bl	80004d8 <__aeabi_dmul>
 800594e:	a36c      	add	r3, pc, #432	@ (adr r3, 8005b00 <_dtoa_r+0x2c8>)
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f7fa fc0a 	bl	800016c <__adddf3>
 8005958:	4604      	mov	r4, r0
 800595a:	4630      	mov	r0, r6
 800595c:	460d      	mov	r5, r1
 800595e:	f7fa fd51 	bl	8000404 <__aeabi_i2d>
 8005962:	a369      	add	r3, pc, #420	@ (adr r3, 8005b08 <_dtoa_r+0x2d0>)
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f7fa fdb6 	bl	80004d8 <__aeabi_dmul>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4620      	mov	r0, r4
 8005972:	4629      	mov	r1, r5
 8005974:	f7fa fbfa 	bl	800016c <__adddf3>
 8005978:	4604      	mov	r4, r0
 800597a:	460d      	mov	r5, r1
 800597c:	f7fb f85c 	bl	8000a38 <__aeabi_d2iz>
 8005980:	2200      	movs	r2, #0
 8005982:	4607      	mov	r7, r0
 8005984:	2300      	movs	r3, #0
 8005986:	4620      	mov	r0, r4
 8005988:	4629      	mov	r1, r5
 800598a:	f7fb f817 	bl	80009bc <__aeabi_dcmplt>
 800598e:	b140      	cbz	r0, 80059a2 <_dtoa_r+0x16a>
 8005990:	4638      	mov	r0, r7
 8005992:	f7fa fd37 	bl	8000404 <__aeabi_i2d>
 8005996:	4622      	mov	r2, r4
 8005998:	462b      	mov	r3, r5
 800599a:	f7fb f805 	bl	80009a8 <__aeabi_dcmpeq>
 800599e:	b900      	cbnz	r0, 80059a2 <_dtoa_r+0x16a>
 80059a0:	3f01      	subs	r7, #1
 80059a2:	2f16      	cmp	r7, #22
 80059a4:	d854      	bhi.n	8005a50 <_dtoa_r+0x218>
 80059a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059aa:	4b60      	ldr	r3, [pc, #384]	@ (8005b2c <_dtoa_r+0x2f4>)
 80059ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f7fb f802 	bl	80009bc <__aeabi_dcmplt>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d04b      	beq.n	8005a54 <_dtoa_r+0x21c>
 80059bc:	2300      	movs	r3, #0
 80059be:	3f01      	subs	r7, #1
 80059c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80059c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80059c4:	1b9b      	subs	r3, r3, r6
 80059c6:	1e5a      	subs	r2, r3, #1
 80059c8:	bf49      	itett	mi
 80059ca:	f1c3 0301 	rsbmi	r3, r3, #1
 80059ce:	2300      	movpl	r3, #0
 80059d0:	9304      	strmi	r3, [sp, #16]
 80059d2:	2300      	movmi	r3, #0
 80059d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80059d6:	bf54      	ite	pl
 80059d8:	9304      	strpl	r3, [sp, #16]
 80059da:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80059dc:	2f00      	cmp	r7, #0
 80059de:	db3b      	blt.n	8005a58 <_dtoa_r+0x220>
 80059e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059e2:	970e      	str	r7, [sp, #56]	@ 0x38
 80059e4:	443b      	add	r3, r7
 80059e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059e8:	2300      	movs	r3, #0
 80059ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059ee:	2b09      	cmp	r3, #9
 80059f0:	d865      	bhi.n	8005abe <_dtoa_r+0x286>
 80059f2:	2b05      	cmp	r3, #5
 80059f4:	bfc4      	itt	gt
 80059f6:	3b04      	subgt	r3, #4
 80059f8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80059fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059fc:	bfc8      	it	gt
 80059fe:	2400      	movgt	r4, #0
 8005a00:	f1a3 0302 	sub.w	r3, r3, #2
 8005a04:	bfd8      	it	le
 8005a06:	2401      	movle	r4, #1
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d864      	bhi.n	8005ad6 <_dtoa_r+0x29e>
 8005a0c:	e8df f003 	tbb	[pc, r3]
 8005a10:	2c385553 	.word	0x2c385553
 8005a14:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005a18:	441e      	add	r6, r3
 8005a1a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	bfc1      	itttt	gt
 8005a22:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005a26:	fa08 f803 	lslgt.w	r8, r8, r3
 8005a2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005a2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005a32:	bfd6      	itet	le
 8005a34:	f1c3 0320 	rsble	r3, r3, #32
 8005a38:	ea48 0003 	orrgt.w	r0, r8, r3
 8005a3c:	fa04 f003 	lslle.w	r0, r4, r3
 8005a40:	f7fa fcd0 	bl	80003e4 <__aeabi_ui2d>
 8005a44:	2201      	movs	r2, #1
 8005a46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005a4a:	3e01      	subs	r6, #1
 8005a4c:	9212      	str	r2, [sp, #72]	@ 0x48
 8005a4e:	e774      	b.n	800593a <_dtoa_r+0x102>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e7b5      	b.n	80059c0 <_dtoa_r+0x188>
 8005a54:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005a56:	e7b4      	b.n	80059c2 <_dtoa_r+0x18a>
 8005a58:	9b04      	ldr	r3, [sp, #16]
 8005a5a:	1bdb      	subs	r3, r3, r7
 8005a5c:	9304      	str	r3, [sp, #16]
 8005a5e:	427b      	negs	r3, r7
 8005a60:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a62:	2300      	movs	r3, #0
 8005a64:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a66:	e7c1      	b.n	80059ec <_dtoa_r+0x1b4>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a6e:	eb07 0b03 	add.w	fp, r7, r3
 8005a72:	f10b 0301 	add.w	r3, fp, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	9308      	str	r3, [sp, #32]
 8005a7a:	bfb8      	it	lt
 8005a7c:	2301      	movlt	r3, #1
 8005a7e:	e006      	b.n	8005a8e <_dtoa_r+0x256>
 8005a80:	2301      	movs	r3, #1
 8005a82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	dd28      	ble.n	8005adc <_dtoa_r+0x2a4>
 8005a8a:	469b      	mov	fp, r3
 8005a8c:	9308      	str	r3, [sp, #32]
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2204      	movs	r2, #4
 8005a92:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005a96:	f102 0514 	add.w	r5, r2, #20
 8005a9a:	429d      	cmp	r5, r3
 8005a9c:	d926      	bls.n	8005aec <_dtoa_r+0x2b4>
 8005a9e:	6041      	str	r1, [r0, #4]
 8005aa0:	4648      	mov	r0, r9
 8005aa2:	f000 fce5 	bl	8006470 <_Balloc>
 8005aa6:	4682      	mov	sl, r0
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d143      	bne.n	8005b34 <_dtoa_r+0x2fc>
 8005aac:	4602      	mov	r2, r0
 8005aae:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b30 <_dtoa_r+0x2f8>)
 8005ab4:	e6d4      	b.n	8005860 <_dtoa_r+0x28>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e7e3      	b.n	8005a82 <_dtoa_r+0x24a>
 8005aba:	2300      	movs	r3, #0
 8005abc:	e7d5      	b.n	8005a6a <_dtoa_r+0x232>
 8005abe:	2401      	movs	r4, #1
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ac4:	9320      	str	r3, [sp, #128]	@ 0x80
 8005ac6:	f04f 3bff 	mov.w	fp, #4294967295
 8005aca:	2200      	movs	r2, #0
 8005acc:	2312      	movs	r3, #18
 8005ace:	f8cd b020 	str.w	fp, [sp, #32]
 8005ad2:	9221      	str	r2, [sp, #132]	@ 0x84
 8005ad4:	e7db      	b.n	8005a8e <_dtoa_r+0x256>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ada:	e7f4      	b.n	8005ac6 <_dtoa_r+0x28e>
 8005adc:	f04f 0b01 	mov.w	fp, #1
 8005ae0:	465b      	mov	r3, fp
 8005ae2:	f8cd b020 	str.w	fp, [sp, #32]
 8005ae6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005aea:	e7d0      	b.n	8005a8e <_dtoa_r+0x256>
 8005aec:	3101      	adds	r1, #1
 8005aee:	0052      	lsls	r2, r2, #1
 8005af0:	e7d1      	b.n	8005a96 <_dtoa_r+0x25e>
 8005af2:	bf00      	nop
 8005af4:	f3af 8000 	nop.w
 8005af8:	636f4361 	.word	0x636f4361
 8005afc:	3fd287a7 	.word	0x3fd287a7
 8005b00:	8b60c8b3 	.word	0x8b60c8b3
 8005b04:	3fc68a28 	.word	0x3fc68a28
 8005b08:	509f79fb 	.word	0x509f79fb
 8005b0c:	3fd34413 	.word	0x3fd34413
 8005b10:	08007e3d 	.word	0x08007e3d
 8005b14:	08007e54 	.word	0x08007e54
 8005b18:	7ff00000 	.word	0x7ff00000
 8005b1c:	08007e39 	.word	0x08007e39
 8005b20:	08007e0d 	.word	0x08007e0d
 8005b24:	08007e0c 	.word	0x08007e0c
 8005b28:	3ff80000 	.word	0x3ff80000
 8005b2c:	08007fa8 	.word	0x08007fa8
 8005b30:	08007eac 	.word	0x08007eac
 8005b34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b38:	6018      	str	r0, [r3, #0]
 8005b3a:	9b08      	ldr	r3, [sp, #32]
 8005b3c:	2b0e      	cmp	r3, #14
 8005b3e:	f200 80a1 	bhi.w	8005c84 <_dtoa_r+0x44c>
 8005b42:	2c00      	cmp	r4, #0
 8005b44:	f000 809e 	beq.w	8005c84 <_dtoa_r+0x44c>
 8005b48:	2f00      	cmp	r7, #0
 8005b4a:	dd33      	ble.n	8005bb4 <_dtoa_r+0x37c>
 8005b4c:	4b9c      	ldr	r3, [pc, #624]	@ (8005dc0 <_dtoa_r+0x588>)
 8005b4e:	f007 020f 	and.w	r2, r7, #15
 8005b52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b56:	05f8      	lsls	r0, r7, #23
 8005b58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005b60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005b64:	d516      	bpl.n	8005b94 <_dtoa_r+0x35c>
 8005b66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b6a:	4b96      	ldr	r3, [pc, #600]	@ (8005dc4 <_dtoa_r+0x58c>)
 8005b6c:	2603      	movs	r6, #3
 8005b6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b72:	f7fa fddb 	bl	800072c <__aeabi_ddiv>
 8005b76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b7a:	f004 040f 	and.w	r4, r4, #15
 8005b7e:	4d91      	ldr	r5, [pc, #580]	@ (8005dc4 <_dtoa_r+0x58c>)
 8005b80:	b954      	cbnz	r4, 8005b98 <_dtoa_r+0x360>
 8005b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b8a:	f7fa fdcf 	bl	800072c <__aeabi_ddiv>
 8005b8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b92:	e028      	b.n	8005be6 <_dtoa_r+0x3ae>
 8005b94:	2602      	movs	r6, #2
 8005b96:	e7f2      	b.n	8005b7e <_dtoa_r+0x346>
 8005b98:	07e1      	lsls	r1, r4, #31
 8005b9a:	d508      	bpl.n	8005bae <_dtoa_r+0x376>
 8005b9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ba0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ba4:	f7fa fc98 	bl	80004d8 <__aeabi_dmul>
 8005ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bac:	3601      	adds	r6, #1
 8005bae:	1064      	asrs	r4, r4, #1
 8005bb0:	3508      	adds	r5, #8
 8005bb2:	e7e5      	b.n	8005b80 <_dtoa_r+0x348>
 8005bb4:	f000 80af 	beq.w	8005d16 <_dtoa_r+0x4de>
 8005bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bbc:	427c      	negs	r4, r7
 8005bbe:	4b80      	ldr	r3, [pc, #512]	@ (8005dc0 <_dtoa_r+0x588>)
 8005bc0:	f004 020f 	and.w	r2, r4, #15
 8005bc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f7fa fc84 	bl	80004d8 <__aeabi_dmul>
 8005bd0:	2602      	movs	r6, #2
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005bd8:	4d7a      	ldr	r5, [pc, #488]	@ (8005dc4 <_dtoa_r+0x58c>)
 8005bda:	1124      	asrs	r4, r4, #4
 8005bdc:	2c00      	cmp	r4, #0
 8005bde:	f040 808f 	bne.w	8005d00 <_dtoa_r+0x4c8>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1d3      	bne.n	8005b8e <_dtoa_r+0x356>
 8005be6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005bea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8094 	beq.w	8005d1a <_dtoa_r+0x4e2>
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	4b73      	ldr	r3, [pc, #460]	@ (8005dc8 <_dtoa_r+0x590>)
 8005bfa:	f7fa fedf 	bl	80009bc <__aeabi_dcmplt>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f000 808b 	beq.w	8005d1a <_dtoa_r+0x4e2>
 8005c04:	9b08      	ldr	r3, [sp, #32]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8087 	beq.w	8005d1a <_dtoa_r+0x4e2>
 8005c0c:	f1bb 0f00 	cmp.w	fp, #0
 8005c10:	dd34      	ble.n	8005c7c <_dtoa_r+0x444>
 8005c12:	4620      	mov	r0, r4
 8005c14:	2200      	movs	r2, #0
 8005c16:	4629      	mov	r1, r5
 8005c18:	4b6c      	ldr	r3, [pc, #432]	@ (8005dcc <_dtoa_r+0x594>)
 8005c1a:	f7fa fc5d 	bl	80004d8 <__aeabi_dmul>
 8005c1e:	465c      	mov	r4, fp
 8005c20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c24:	f107 38ff 	add.w	r8, r7, #4294967295
 8005c28:	3601      	adds	r6, #1
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f7fa fbea 	bl	8000404 <__aeabi_i2d>
 8005c30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c34:	f7fa fc50 	bl	80004d8 <__aeabi_dmul>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4b65      	ldr	r3, [pc, #404]	@ (8005dd0 <_dtoa_r+0x598>)
 8005c3c:	f7fa fa96 	bl	800016c <__adddf3>
 8005c40:	4605      	mov	r5, r0
 8005c42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005c46:	2c00      	cmp	r4, #0
 8005c48:	d16a      	bne.n	8005d20 <_dtoa_r+0x4e8>
 8005c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	4b60      	ldr	r3, [pc, #384]	@ (8005dd4 <_dtoa_r+0x59c>)
 8005c52:	f7fa fa89 	bl	8000168 <__aeabi_dsub>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c5e:	462a      	mov	r2, r5
 8005c60:	4633      	mov	r3, r6
 8005c62:	f7fa fec9 	bl	80009f8 <__aeabi_dcmpgt>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	f040 8298 	bne.w	800619c <_dtoa_r+0x964>
 8005c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c70:	462a      	mov	r2, r5
 8005c72:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c76:	f7fa fea1 	bl	80009bc <__aeabi_dcmplt>
 8005c7a:	bb38      	cbnz	r0, 8005ccc <_dtoa_r+0x494>
 8005c7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005c80:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f2c0 8157 	blt.w	8005f3a <_dtoa_r+0x702>
 8005c8c:	2f0e      	cmp	r7, #14
 8005c8e:	f300 8154 	bgt.w	8005f3a <_dtoa_r+0x702>
 8005c92:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc0 <_dtoa_r+0x588>)
 8005c94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ca0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f280 80e5 	bge.w	8005e72 <_dtoa_r+0x63a>
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f300 80e1 	bgt.w	8005e72 <_dtoa_r+0x63a>
 8005cb0:	d10c      	bne.n	8005ccc <_dtoa_r+0x494>
 8005cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4b46      	ldr	r3, [pc, #280]	@ (8005dd4 <_dtoa_r+0x59c>)
 8005cba:	f7fa fc0d 	bl	80004d8 <__aeabi_dmul>
 8005cbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cc2:	f7fa fe8f 	bl	80009e4 <__aeabi_dcmpge>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	f000 8266 	beq.w	8006198 <_dtoa_r+0x960>
 8005ccc:	2400      	movs	r4, #0
 8005cce:	4625      	mov	r5, r4
 8005cd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cd2:	4656      	mov	r6, sl
 8005cd4:	ea6f 0803 	mvn.w	r8, r3
 8005cd8:	2700      	movs	r7, #0
 8005cda:	4621      	mov	r1, r4
 8005cdc:	4648      	mov	r0, r9
 8005cde:	f000 fc07 	bl	80064f0 <_Bfree>
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	f000 80bd 	beq.w	8005e62 <_dtoa_r+0x62a>
 8005ce8:	b12f      	cbz	r7, 8005cf6 <_dtoa_r+0x4be>
 8005cea:	42af      	cmp	r7, r5
 8005cec:	d003      	beq.n	8005cf6 <_dtoa_r+0x4be>
 8005cee:	4639      	mov	r1, r7
 8005cf0:	4648      	mov	r0, r9
 8005cf2:	f000 fbfd 	bl	80064f0 <_Bfree>
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	4648      	mov	r0, r9
 8005cfa:	f000 fbf9 	bl	80064f0 <_Bfree>
 8005cfe:	e0b0      	b.n	8005e62 <_dtoa_r+0x62a>
 8005d00:	07e2      	lsls	r2, r4, #31
 8005d02:	d505      	bpl.n	8005d10 <_dtoa_r+0x4d8>
 8005d04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d08:	f7fa fbe6 	bl	80004d8 <__aeabi_dmul>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	3601      	adds	r6, #1
 8005d10:	1064      	asrs	r4, r4, #1
 8005d12:	3508      	adds	r5, #8
 8005d14:	e762      	b.n	8005bdc <_dtoa_r+0x3a4>
 8005d16:	2602      	movs	r6, #2
 8005d18:	e765      	b.n	8005be6 <_dtoa_r+0x3ae>
 8005d1a:	46b8      	mov	r8, r7
 8005d1c:	9c08      	ldr	r4, [sp, #32]
 8005d1e:	e784      	b.n	8005c2a <_dtoa_r+0x3f2>
 8005d20:	4b27      	ldr	r3, [pc, #156]	@ (8005dc0 <_dtoa_r+0x588>)
 8005d22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d2c:	4454      	add	r4, sl
 8005d2e:	2900      	cmp	r1, #0
 8005d30:	d054      	beq.n	8005ddc <_dtoa_r+0x5a4>
 8005d32:	2000      	movs	r0, #0
 8005d34:	4928      	ldr	r1, [pc, #160]	@ (8005dd8 <_dtoa_r+0x5a0>)
 8005d36:	f7fa fcf9 	bl	800072c <__aeabi_ddiv>
 8005d3a:	4633      	mov	r3, r6
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	f7fa fa13 	bl	8000168 <__aeabi_dsub>
 8005d42:	4656      	mov	r6, sl
 8005d44:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d4c:	f7fa fe74 	bl	8000a38 <__aeabi_d2iz>
 8005d50:	4605      	mov	r5, r0
 8005d52:	f7fa fb57 	bl	8000404 <__aeabi_i2d>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d5e:	f7fa fa03 	bl	8000168 <__aeabi_dsub>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	3530      	adds	r5, #48	@ 0x30
 8005d68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d70:	f806 5b01 	strb.w	r5, [r6], #1
 8005d74:	f7fa fe22 	bl	80009bc <__aeabi_dcmplt>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d172      	bne.n	8005e62 <_dtoa_r+0x62a>
 8005d7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d80:	2000      	movs	r0, #0
 8005d82:	4911      	ldr	r1, [pc, #68]	@ (8005dc8 <_dtoa_r+0x590>)
 8005d84:	f7fa f9f0 	bl	8000168 <__aeabi_dsub>
 8005d88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d8c:	f7fa fe16 	bl	80009bc <__aeabi_dcmplt>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f040 80b4 	bne.w	8005efe <_dtoa_r+0x6c6>
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	f43f af70 	beq.w	8005c7c <_dtoa_r+0x444>
 8005d9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005da0:	2200      	movs	r2, #0
 8005da2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dcc <_dtoa_r+0x594>)
 8005da4:	f7fa fb98 	bl	80004d8 <__aeabi_dmul>
 8005da8:	2200      	movs	r2, #0
 8005daa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005dae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005db2:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <_dtoa_r+0x594>)
 8005db4:	f7fa fb90 	bl	80004d8 <__aeabi_dmul>
 8005db8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005dbc:	e7c4      	b.n	8005d48 <_dtoa_r+0x510>
 8005dbe:	bf00      	nop
 8005dc0:	08007fa8 	.word	0x08007fa8
 8005dc4:	08007f80 	.word	0x08007f80
 8005dc8:	3ff00000 	.word	0x3ff00000
 8005dcc:	40240000 	.word	0x40240000
 8005dd0:	401c0000 	.word	0x401c0000
 8005dd4:	40140000 	.word	0x40140000
 8005dd8:	3fe00000 	.word	0x3fe00000
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	f7fa fb7a 	bl	80004d8 <__aeabi_dmul>
 8005de4:	4656      	mov	r6, sl
 8005de6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005dea:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005dec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005df0:	f7fa fe22 	bl	8000a38 <__aeabi_d2iz>
 8005df4:	4605      	mov	r5, r0
 8005df6:	f7fa fb05 	bl	8000404 <__aeabi_i2d>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e02:	f7fa f9b1 	bl	8000168 <__aeabi_dsub>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	3530      	adds	r5, #48	@ 0x30
 8005e0c:	f806 5b01 	strb.w	r5, [r6], #1
 8005e10:	42a6      	cmp	r6, r4
 8005e12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	d124      	bne.n	8005e66 <_dtoa_r+0x62e>
 8005e1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e20:	4bae      	ldr	r3, [pc, #696]	@ (80060dc <_dtoa_r+0x8a4>)
 8005e22:	f7fa f9a3 	bl	800016c <__adddf3>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e2e:	f7fa fde3 	bl	80009f8 <__aeabi_dcmpgt>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d163      	bne.n	8005efe <_dtoa_r+0x6c6>
 8005e36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	49a7      	ldr	r1, [pc, #668]	@ (80060dc <_dtoa_r+0x8a4>)
 8005e3e:	f7fa f993 	bl	8000168 <__aeabi_dsub>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e4a:	f7fa fdb7 	bl	80009bc <__aeabi_dcmplt>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f43f af14 	beq.w	8005c7c <_dtoa_r+0x444>
 8005e54:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005e56:	1e73      	subs	r3, r6, #1
 8005e58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e5e:	2b30      	cmp	r3, #48	@ 0x30
 8005e60:	d0f8      	beq.n	8005e54 <_dtoa_r+0x61c>
 8005e62:	4647      	mov	r7, r8
 8005e64:	e03b      	b.n	8005ede <_dtoa_r+0x6a6>
 8005e66:	4b9e      	ldr	r3, [pc, #632]	@ (80060e0 <_dtoa_r+0x8a8>)
 8005e68:	f7fa fb36 	bl	80004d8 <__aeabi_dmul>
 8005e6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e70:	e7bc      	b.n	8005dec <_dtoa_r+0x5b4>
 8005e72:	4656      	mov	r6, sl
 8005e74:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f7fa fc54 	bl	800072c <__aeabi_ddiv>
 8005e84:	f7fa fdd8 	bl	8000a38 <__aeabi_d2iz>
 8005e88:	4680      	mov	r8, r0
 8005e8a:	f7fa fabb 	bl	8000404 <__aeabi_i2d>
 8005e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e92:	f7fa fb21 	bl	80004d8 <__aeabi_dmul>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f7fa f963 	bl	8000168 <__aeabi_dsub>
 8005ea2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ea6:	9d08      	ldr	r5, [sp, #32]
 8005ea8:	f806 4b01 	strb.w	r4, [r6], #1
 8005eac:	eba6 040a 	sub.w	r4, r6, sl
 8005eb0:	42a5      	cmp	r5, r4
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	d133      	bne.n	8005f20 <_dtoa_r+0x6e8>
 8005eb8:	f7fa f958 	bl	800016c <__adddf3>
 8005ebc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	f7fa fd98 	bl	80009f8 <__aeabi_dcmpgt>
 8005ec8:	b9c0      	cbnz	r0, 8005efc <_dtoa_r+0x6c4>
 8005eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	f7fa fd69 	bl	80009a8 <__aeabi_dcmpeq>
 8005ed6:	b110      	cbz	r0, 8005ede <_dtoa_r+0x6a6>
 8005ed8:	f018 0f01 	tst.w	r8, #1
 8005edc:	d10e      	bne.n	8005efc <_dtoa_r+0x6c4>
 8005ede:	4648      	mov	r0, r9
 8005ee0:	9903      	ldr	r1, [sp, #12]
 8005ee2:	f000 fb05 	bl	80064f0 <_Bfree>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	7033      	strb	r3, [r6, #0]
 8005eea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005eec:	3701      	adds	r7, #1
 8005eee:	601f      	str	r7, [r3, #0]
 8005ef0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 824b 	beq.w	800638e <_dtoa_r+0xb56>
 8005ef8:	601e      	str	r6, [r3, #0]
 8005efa:	e248      	b.n	800638e <_dtoa_r+0xb56>
 8005efc:	46b8      	mov	r8, r7
 8005efe:	4633      	mov	r3, r6
 8005f00:	461e      	mov	r6, r3
 8005f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f06:	2a39      	cmp	r2, #57	@ 0x39
 8005f08:	d106      	bne.n	8005f18 <_dtoa_r+0x6e0>
 8005f0a:	459a      	cmp	sl, r3
 8005f0c:	d1f8      	bne.n	8005f00 <_dtoa_r+0x6c8>
 8005f0e:	2230      	movs	r2, #48	@ 0x30
 8005f10:	f108 0801 	add.w	r8, r8, #1
 8005f14:	f88a 2000 	strb.w	r2, [sl]
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	3201      	adds	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e7a0      	b.n	8005e62 <_dtoa_r+0x62a>
 8005f20:	2200      	movs	r2, #0
 8005f22:	4b6f      	ldr	r3, [pc, #444]	@ (80060e0 <_dtoa_r+0x8a8>)
 8005f24:	f7fa fad8 	bl	80004d8 <__aeabi_dmul>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	460d      	mov	r5, r1
 8005f30:	f7fa fd3a 	bl	80009a8 <__aeabi_dcmpeq>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d09f      	beq.n	8005e78 <_dtoa_r+0x640>
 8005f38:	e7d1      	b.n	8005ede <_dtoa_r+0x6a6>
 8005f3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005f3c:	2a00      	cmp	r2, #0
 8005f3e:	f000 80ea 	beq.w	8006116 <_dtoa_r+0x8de>
 8005f42:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005f44:	2a01      	cmp	r2, #1
 8005f46:	f300 80cd 	bgt.w	80060e4 <_dtoa_r+0x8ac>
 8005f4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f4c:	2a00      	cmp	r2, #0
 8005f4e:	f000 80c1 	beq.w	80060d4 <_dtoa_r+0x89c>
 8005f52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005f56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f58:	9e04      	ldr	r6, [sp, #16]
 8005f5a:	9a04      	ldr	r2, [sp, #16]
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	441a      	add	r2, r3
 8005f60:	9204      	str	r2, [sp, #16]
 8005f62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f64:	4648      	mov	r0, r9
 8005f66:	441a      	add	r2, r3
 8005f68:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f6a:	f000 fb75 	bl	8006658 <__i2b>
 8005f6e:	4605      	mov	r5, r0
 8005f70:	b166      	cbz	r6, 8005f8c <_dtoa_r+0x754>
 8005f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dd09      	ble.n	8005f8c <_dtoa_r+0x754>
 8005f78:	42b3      	cmp	r3, r6
 8005f7a:	bfa8      	it	ge
 8005f7c:	4633      	movge	r3, r6
 8005f7e:	9a04      	ldr	r2, [sp, #16]
 8005f80:	1af6      	subs	r6, r6, r3
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	9204      	str	r2, [sp, #16]
 8005f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f8e:	b30b      	cbz	r3, 8005fd4 <_dtoa_r+0x79c>
 8005f90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80c6 	beq.w	8006124 <_dtoa_r+0x8ec>
 8005f98:	2c00      	cmp	r4, #0
 8005f9a:	f000 80c0 	beq.w	800611e <_dtoa_r+0x8e6>
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	4648      	mov	r0, r9
 8005fa4:	f000 fc10 	bl	80067c8 <__pow5mult>
 8005fa8:	9a03      	ldr	r2, [sp, #12]
 8005faa:	4601      	mov	r1, r0
 8005fac:	4605      	mov	r5, r0
 8005fae:	4648      	mov	r0, r9
 8005fb0:	f000 fb68 	bl	8006684 <__multiply>
 8005fb4:	9903      	ldr	r1, [sp, #12]
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	4648      	mov	r0, r9
 8005fba:	f000 fa99 	bl	80064f0 <_Bfree>
 8005fbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fc0:	1b1b      	subs	r3, r3, r4
 8005fc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fc4:	f000 80b1 	beq.w	800612a <_dtoa_r+0x8f2>
 8005fc8:	4641      	mov	r1, r8
 8005fca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fcc:	4648      	mov	r0, r9
 8005fce:	f000 fbfb 	bl	80067c8 <__pow5mult>
 8005fd2:	9003      	str	r0, [sp, #12]
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	4648      	mov	r0, r9
 8005fd8:	f000 fb3e 	bl	8006658 <__i2b>
 8005fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fde:	4604      	mov	r4, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 81d8 	beq.w	8006396 <_dtoa_r+0xb5e>
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4601      	mov	r1, r0
 8005fea:	4648      	mov	r0, r9
 8005fec:	f000 fbec 	bl	80067c8 <__pow5mult>
 8005ff0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	f300 809f 	bgt.w	8006138 <_dtoa_r+0x900>
 8005ffa:	9b06      	ldr	r3, [sp, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 8097 	bne.w	8006130 <_dtoa_r+0x8f8>
 8006002:	9b07      	ldr	r3, [sp, #28]
 8006004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 8093 	bne.w	8006134 <_dtoa_r+0x8fc>
 800600e:	9b07      	ldr	r3, [sp, #28]
 8006010:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006014:	0d1b      	lsrs	r3, r3, #20
 8006016:	051b      	lsls	r3, r3, #20
 8006018:	b133      	cbz	r3, 8006028 <_dtoa_r+0x7f0>
 800601a:	9b04      	ldr	r3, [sp, #16]
 800601c:	3301      	adds	r3, #1
 800601e:	9304      	str	r3, [sp, #16]
 8006020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006022:	3301      	adds	r3, #1
 8006024:	9309      	str	r3, [sp, #36]	@ 0x24
 8006026:	2301      	movs	r3, #1
 8006028:	930a      	str	r3, [sp, #40]	@ 0x28
 800602a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 81b8 	beq.w	80063a2 <_dtoa_r+0xb6a>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006038:	6918      	ldr	r0, [r3, #16]
 800603a:	f000 fac1 	bl	80065c0 <__hi0bits>
 800603e:	f1c0 0020 	rsb	r0, r0, #32
 8006042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006044:	4418      	add	r0, r3
 8006046:	f010 001f 	ands.w	r0, r0, #31
 800604a:	f000 8082 	beq.w	8006152 <_dtoa_r+0x91a>
 800604e:	f1c0 0320 	rsb	r3, r0, #32
 8006052:	2b04      	cmp	r3, #4
 8006054:	dd73      	ble.n	800613e <_dtoa_r+0x906>
 8006056:	9b04      	ldr	r3, [sp, #16]
 8006058:	f1c0 001c 	rsb	r0, r0, #28
 800605c:	4403      	add	r3, r0
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006062:	4406      	add	r6, r0
 8006064:	4403      	add	r3, r0
 8006066:	9309      	str	r3, [sp, #36]	@ 0x24
 8006068:	9b04      	ldr	r3, [sp, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	dd05      	ble.n	800607a <_dtoa_r+0x842>
 800606e:	461a      	mov	r2, r3
 8006070:	4648      	mov	r0, r9
 8006072:	9903      	ldr	r1, [sp, #12]
 8006074:	f000 fc02 	bl	800687c <__lshift>
 8006078:	9003      	str	r0, [sp, #12]
 800607a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800607c:	2b00      	cmp	r3, #0
 800607e:	dd05      	ble.n	800608c <_dtoa_r+0x854>
 8006080:	4621      	mov	r1, r4
 8006082:	461a      	mov	r2, r3
 8006084:	4648      	mov	r0, r9
 8006086:	f000 fbf9 	bl	800687c <__lshift>
 800608a:	4604      	mov	r4, r0
 800608c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d061      	beq.n	8006156 <_dtoa_r+0x91e>
 8006092:	4621      	mov	r1, r4
 8006094:	9803      	ldr	r0, [sp, #12]
 8006096:	f000 fc5d 	bl	8006954 <__mcmp>
 800609a:	2800      	cmp	r0, #0
 800609c:	da5b      	bge.n	8006156 <_dtoa_r+0x91e>
 800609e:	2300      	movs	r3, #0
 80060a0:	220a      	movs	r2, #10
 80060a2:	4648      	mov	r0, r9
 80060a4:	9903      	ldr	r1, [sp, #12]
 80060a6:	f000 fa45 	bl	8006534 <__multadd>
 80060aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060ac:	f107 38ff 	add.w	r8, r7, #4294967295
 80060b0:	9003      	str	r0, [sp, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8177 	beq.w	80063a6 <_dtoa_r+0xb6e>
 80060b8:	4629      	mov	r1, r5
 80060ba:	2300      	movs	r3, #0
 80060bc:	220a      	movs	r2, #10
 80060be:	4648      	mov	r0, r9
 80060c0:	f000 fa38 	bl	8006534 <__multadd>
 80060c4:	f1bb 0f00 	cmp.w	fp, #0
 80060c8:	4605      	mov	r5, r0
 80060ca:	dc6f      	bgt.n	80061ac <_dtoa_r+0x974>
 80060cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	dc49      	bgt.n	8006166 <_dtoa_r+0x92e>
 80060d2:	e06b      	b.n	80061ac <_dtoa_r+0x974>
 80060d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80060d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80060da:	e73c      	b.n	8005f56 <_dtoa_r+0x71e>
 80060dc:	3fe00000 	.word	0x3fe00000
 80060e0:	40240000 	.word	0x40240000
 80060e4:	9b08      	ldr	r3, [sp, #32]
 80060e6:	1e5c      	subs	r4, r3, #1
 80060e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ea:	42a3      	cmp	r3, r4
 80060ec:	db09      	blt.n	8006102 <_dtoa_r+0x8ca>
 80060ee:	1b1c      	subs	r4, r3, r4
 80060f0:	9b08      	ldr	r3, [sp, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f6bf af30 	bge.w	8005f58 <_dtoa_r+0x720>
 80060f8:	9b04      	ldr	r3, [sp, #16]
 80060fa:	9a08      	ldr	r2, [sp, #32]
 80060fc:	1a9e      	subs	r6, r3, r2
 80060fe:	2300      	movs	r3, #0
 8006100:	e72b      	b.n	8005f5a <_dtoa_r+0x722>
 8006102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006106:	1ae3      	subs	r3, r4, r3
 8006108:	441a      	add	r2, r3
 800610a:	940a      	str	r4, [sp, #40]	@ 0x28
 800610c:	9e04      	ldr	r6, [sp, #16]
 800610e:	2400      	movs	r4, #0
 8006110:	9b08      	ldr	r3, [sp, #32]
 8006112:	920e      	str	r2, [sp, #56]	@ 0x38
 8006114:	e721      	b.n	8005f5a <_dtoa_r+0x722>
 8006116:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006118:	9e04      	ldr	r6, [sp, #16]
 800611a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800611c:	e728      	b.n	8005f70 <_dtoa_r+0x738>
 800611e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006122:	e751      	b.n	8005fc8 <_dtoa_r+0x790>
 8006124:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006126:	9903      	ldr	r1, [sp, #12]
 8006128:	e750      	b.n	8005fcc <_dtoa_r+0x794>
 800612a:	f8cd 800c 	str.w	r8, [sp, #12]
 800612e:	e751      	b.n	8005fd4 <_dtoa_r+0x79c>
 8006130:	2300      	movs	r3, #0
 8006132:	e779      	b.n	8006028 <_dtoa_r+0x7f0>
 8006134:	9b06      	ldr	r3, [sp, #24]
 8006136:	e777      	b.n	8006028 <_dtoa_r+0x7f0>
 8006138:	2300      	movs	r3, #0
 800613a:	930a      	str	r3, [sp, #40]	@ 0x28
 800613c:	e779      	b.n	8006032 <_dtoa_r+0x7fa>
 800613e:	d093      	beq.n	8006068 <_dtoa_r+0x830>
 8006140:	9a04      	ldr	r2, [sp, #16]
 8006142:	331c      	adds	r3, #28
 8006144:	441a      	add	r2, r3
 8006146:	9204      	str	r2, [sp, #16]
 8006148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800614a:	441e      	add	r6, r3
 800614c:	441a      	add	r2, r3
 800614e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006150:	e78a      	b.n	8006068 <_dtoa_r+0x830>
 8006152:	4603      	mov	r3, r0
 8006154:	e7f4      	b.n	8006140 <_dtoa_r+0x908>
 8006156:	9b08      	ldr	r3, [sp, #32]
 8006158:	46b8      	mov	r8, r7
 800615a:	2b00      	cmp	r3, #0
 800615c:	dc20      	bgt.n	80061a0 <_dtoa_r+0x968>
 800615e:	469b      	mov	fp, r3
 8006160:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006162:	2b02      	cmp	r3, #2
 8006164:	dd1e      	ble.n	80061a4 <_dtoa_r+0x96c>
 8006166:	f1bb 0f00 	cmp.w	fp, #0
 800616a:	f47f adb1 	bne.w	8005cd0 <_dtoa_r+0x498>
 800616e:	4621      	mov	r1, r4
 8006170:	465b      	mov	r3, fp
 8006172:	2205      	movs	r2, #5
 8006174:	4648      	mov	r0, r9
 8006176:	f000 f9dd 	bl	8006534 <__multadd>
 800617a:	4601      	mov	r1, r0
 800617c:	4604      	mov	r4, r0
 800617e:	9803      	ldr	r0, [sp, #12]
 8006180:	f000 fbe8 	bl	8006954 <__mcmp>
 8006184:	2800      	cmp	r0, #0
 8006186:	f77f ada3 	ble.w	8005cd0 <_dtoa_r+0x498>
 800618a:	4656      	mov	r6, sl
 800618c:	2331      	movs	r3, #49	@ 0x31
 800618e:	f108 0801 	add.w	r8, r8, #1
 8006192:	f806 3b01 	strb.w	r3, [r6], #1
 8006196:	e59f      	b.n	8005cd8 <_dtoa_r+0x4a0>
 8006198:	46b8      	mov	r8, r7
 800619a:	9c08      	ldr	r4, [sp, #32]
 800619c:	4625      	mov	r5, r4
 800619e:	e7f4      	b.n	800618a <_dtoa_r+0x952>
 80061a0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80061a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8101 	beq.w	80063ae <_dtoa_r+0xb76>
 80061ac:	2e00      	cmp	r6, #0
 80061ae:	dd05      	ble.n	80061bc <_dtoa_r+0x984>
 80061b0:	4629      	mov	r1, r5
 80061b2:	4632      	mov	r2, r6
 80061b4:	4648      	mov	r0, r9
 80061b6:	f000 fb61 	bl	800687c <__lshift>
 80061ba:	4605      	mov	r5, r0
 80061bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d05c      	beq.n	800627c <_dtoa_r+0xa44>
 80061c2:	4648      	mov	r0, r9
 80061c4:	6869      	ldr	r1, [r5, #4]
 80061c6:	f000 f953 	bl	8006470 <_Balloc>
 80061ca:	4606      	mov	r6, r0
 80061cc:	b928      	cbnz	r0, 80061da <_dtoa_r+0x9a2>
 80061ce:	4602      	mov	r2, r0
 80061d0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80061d4:	4b80      	ldr	r3, [pc, #512]	@ (80063d8 <_dtoa_r+0xba0>)
 80061d6:	f7ff bb43 	b.w	8005860 <_dtoa_r+0x28>
 80061da:	692a      	ldr	r2, [r5, #16]
 80061dc:	f105 010c 	add.w	r1, r5, #12
 80061e0:	3202      	adds	r2, #2
 80061e2:	0092      	lsls	r2, r2, #2
 80061e4:	300c      	adds	r0, #12
 80061e6:	f7ff fa90 	bl	800570a <memcpy>
 80061ea:	2201      	movs	r2, #1
 80061ec:	4631      	mov	r1, r6
 80061ee:	4648      	mov	r0, r9
 80061f0:	f000 fb44 	bl	800687c <__lshift>
 80061f4:	462f      	mov	r7, r5
 80061f6:	4605      	mov	r5, r0
 80061f8:	f10a 0301 	add.w	r3, sl, #1
 80061fc:	9304      	str	r3, [sp, #16]
 80061fe:	eb0a 030b 	add.w	r3, sl, fp
 8006202:	930a      	str	r3, [sp, #40]	@ 0x28
 8006204:	9b06      	ldr	r3, [sp, #24]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	9309      	str	r3, [sp, #36]	@ 0x24
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	4621      	mov	r1, r4
 8006210:	9803      	ldr	r0, [sp, #12]
 8006212:	f103 3bff 	add.w	fp, r3, #4294967295
 8006216:	f7ff fa86 	bl	8005726 <quorem>
 800621a:	4603      	mov	r3, r0
 800621c:	4639      	mov	r1, r7
 800621e:	3330      	adds	r3, #48	@ 0x30
 8006220:	9006      	str	r0, [sp, #24]
 8006222:	9803      	ldr	r0, [sp, #12]
 8006224:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006226:	f000 fb95 	bl	8006954 <__mcmp>
 800622a:	462a      	mov	r2, r5
 800622c:	9008      	str	r0, [sp, #32]
 800622e:	4621      	mov	r1, r4
 8006230:	4648      	mov	r0, r9
 8006232:	f000 fbab 	bl	800698c <__mdiff>
 8006236:	68c2      	ldr	r2, [r0, #12]
 8006238:	4606      	mov	r6, r0
 800623a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800623c:	bb02      	cbnz	r2, 8006280 <_dtoa_r+0xa48>
 800623e:	4601      	mov	r1, r0
 8006240:	9803      	ldr	r0, [sp, #12]
 8006242:	f000 fb87 	bl	8006954 <__mcmp>
 8006246:	4602      	mov	r2, r0
 8006248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800624a:	4631      	mov	r1, r6
 800624c:	4648      	mov	r0, r9
 800624e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006252:	f000 f94d 	bl	80064f0 <_Bfree>
 8006256:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006258:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800625a:	9e04      	ldr	r6, [sp, #16]
 800625c:	ea42 0103 	orr.w	r1, r2, r3
 8006260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006262:	4319      	orrs	r1, r3
 8006264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006266:	d10d      	bne.n	8006284 <_dtoa_r+0xa4c>
 8006268:	2b39      	cmp	r3, #57	@ 0x39
 800626a:	d027      	beq.n	80062bc <_dtoa_r+0xa84>
 800626c:	9a08      	ldr	r2, [sp, #32]
 800626e:	2a00      	cmp	r2, #0
 8006270:	dd01      	ble.n	8006276 <_dtoa_r+0xa3e>
 8006272:	9b06      	ldr	r3, [sp, #24]
 8006274:	3331      	adds	r3, #49	@ 0x31
 8006276:	f88b 3000 	strb.w	r3, [fp]
 800627a:	e52e      	b.n	8005cda <_dtoa_r+0x4a2>
 800627c:	4628      	mov	r0, r5
 800627e:	e7b9      	b.n	80061f4 <_dtoa_r+0x9bc>
 8006280:	2201      	movs	r2, #1
 8006282:	e7e2      	b.n	800624a <_dtoa_r+0xa12>
 8006284:	9908      	ldr	r1, [sp, #32]
 8006286:	2900      	cmp	r1, #0
 8006288:	db04      	blt.n	8006294 <_dtoa_r+0xa5c>
 800628a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800628c:	4301      	orrs	r1, r0
 800628e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006290:	4301      	orrs	r1, r0
 8006292:	d120      	bne.n	80062d6 <_dtoa_r+0xa9e>
 8006294:	2a00      	cmp	r2, #0
 8006296:	ddee      	ble.n	8006276 <_dtoa_r+0xa3e>
 8006298:	2201      	movs	r2, #1
 800629a:	9903      	ldr	r1, [sp, #12]
 800629c:	4648      	mov	r0, r9
 800629e:	9304      	str	r3, [sp, #16]
 80062a0:	f000 faec 	bl	800687c <__lshift>
 80062a4:	4621      	mov	r1, r4
 80062a6:	9003      	str	r0, [sp, #12]
 80062a8:	f000 fb54 	bl	8006954 <__mcmp>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	9b04      	ldr	r3, [sp, #16]
 80062b0:	dc02      	bgt.n	80062b8 <_dtoa_r+0xa80>
 80062b2:	d1e0      	bne.n	8006276 <_dtoa_r+0xa3e>
 80062b4:	07da      	lsls	r2, r3, #31
 80062b6:	d5de      	bpl.n	8006276 <_dtoa_r+0xa3e>
 80062b8:	2b39      	cmp	r3, #57	@ 0x39
 80062ba:	d1da      	bne.n	8006272 <_dtoa_r+0xa3a>
 80062bc:	2339      	movs	r3, #57	@ 0x39
 80062be:	f88b 3000 	strb.w	r3, [fp]
 80062c2:	4633      	mov	r3, r6
 80062c4:	461e      	mov	r6, r3
 80062c6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	2a39      	cmp	r2, #57	@ 0x39
 80062ce:	d04e      	beq.n	800636e <_dtoa_r+0xb36>
 80062d0:	3201      	adds	r2, #1
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e501      	b.n	8005cda <_dtoa_r+0x4a2>
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	dd03      	ble.n	80062e2 <_dtoa_r+0xaaa>
 80062da:	2b39      	cmp	r3, #57	@ 0x39
 80062dc:	d0ee      	beq.n	80062bc <_dtoa_r+0xa84>
 80062de:	3301      	adds	r3, #1
 80062e0:	e7c9      	b.n	8006276 <_dtoa_r+0xa3e>
 80062e2:	9a04      	ldr	r2, [sp, #16]
 80062e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062ea:	428a      	cmp	r2, r1
 80062ec:	d028      	beq.n	8006340 <_dtoa_r+0xb08>
 80062ee:	2300      	movs	r3, #0
 80062f0:	220a      	movs	r2, #10
 80062f2:	9903      	ldr	r1, [sp, #12]
 80062f4:	4648      	mov	r0, r9
 80062f6:	f000 f91d 	bl	8006534 <__multadd>
 80062fa:	42af      	cmp	r7, r5
 80062fc:	9003      	str	r0, [sp, #12]
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	f04f 020a 	mov.w	r2, #10
 8006306:	4639      	mov	r1, r7
 8006308:	4648      	mov	r0, r9
 800630a:	d107      	bne.n	800631c <_dtoa_r+0xae4>
 800630c:	f000 f912 	bl	8006534 <__multadd>
 8006310:	4607      	mov	r7, r0
 8006312:	4605      	mov	r5, r0
 8006314:	9b04      	ldr	r3, [sp, #16]
 8006316:	3301      	adds	r3, #1
 8006318:	9304      	str	r3, [sp, #16]
 800631a:	e777      	b.n	800620c <_dtoa_r+0x9d4>
 800631c:	f000 f90a 	bl	8006534 <__multadd>
 8006320:	4629      	mov	r1, r5
 8006322:	4607      	mov	r7, r0
 8006324:	2300      	movs	r3, #0
 8006326:	220a      	movs	r2, #10
 8006328:	4648      	mov	r0, r9
 800632a:	f000 f903 	bl	8006534 <__multadd>
 800632e:	4605      	mov	r5, r0
 8006330:	e7f0      	b.n	8006314 <_dtoa_r+0xadc>
 8006332:	f1bb 0f00 	cmp.w	fp, #0
 8006336:	bfcc      	ite	gt
 8006338:	465e      	movgt	r6, fp
 800633a:	2601      	movle	r6, #1
 800633c:	2700      	movs	r7, #0
 800633e:	4456      	add	r6, sl
 8006340:	2201      	movs	r2, #1
 8006342:	9903      	ldr	r1, [sp, #12]
 8006344:	4648      	mov	r0, r9
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	f000 fa98 	bl	800687c <__lshift>
 800634c:	4621      	mov	r1, r4
 800634e:	9003      	str	r0, [sp, #12]
 8006350:	f000 fb00 	bl	8006954 <__mcmp>
 8006354:	2800      	cmp	r0, #0
 8006356:	dcb4      	bgt.n	80062c2 <_dtoa_r+0xa8a>
 8006358:	d102      	bne.n	8006360 <_dtoa_r+0xb28>
 800635a:	9b04      	ldr	r3, [sp, #16]
 800635c:	07db      	lsls	r3, r3, #31
 800635e:	d4b0      	bmi.n	80062c2 <_dtoa_r+0xa8a>
 8006360:	4633      	mov	r3, r6
 8006362:	461e      	mov	r6, r3
 8006364:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006368:	2a30      	cmp	r2, #48	@ 0x30
 800636a:	d0fa      	beq.n	8006362 <_dtoa_r+0xb2a>
 800636c:	e4b5      	b.n	8005cda <_dtoa_r+0x4a2>
 800636e:	459a      	cmp	sl, r3
 8006370:	d1a8      	bne.n	80062c4 <_dtoa_r+0xa8c>
 8006372:	2331      	movs	r3, #49	@ 0x31
 8006374:	f108 0801 	add.w	r8, r8, #1
 8006378:	f88a 3000 	strb.w	r3, [sl]
 800637c:	e4ad      	b.n	8005cda <_dtoa_r+0x4a2>
 800637e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006380:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80063dc <_dtoa_r+0xba4>
 8006384:	b11b      	cbz	r3, 800638e <_dtoa_r+0xb56>
 8006386:	f10a 0308 	add.w	r3, sl, #8
 800638a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	4650      	mov	r0, sl
 8006390:	b017      	add	sp, #92	@ 0x5c
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006396:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006398:	2b01      	cmp	r3, #1
 800639a:	f77f ae2e 	ble.w	8005ffa <_dtoa_r+0x7c2>
 800639e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063a2:	2001      	movs	r0, #1
 80063a4:	e64d      	b.n	8006042 <_dtoa_r+0x80a>
 80063a6:	f1bb 0f00 	cmp.w	fp, #0
 80063aa:	f77f aed9 	ble.w	8006160 <_dtoa_r+0x928>
 80063ae:	4656      	mov	r6, sl
 80063b0:	4621      	mov	r1, r4
 80063b2:	9803      	ldr	r0, [sp, #12]
 80063b4:	f7ff f9b7 	bl	8005726 <quorem>
 80063b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80063bc:	f806 3b01 	strb.w	r3, [r6], #1
 80063c0:	eba6 020a 	sub.w	r2, r6, sl
 80063c4:	4593      	cmp	fp, r2
 80063c6:	ddb4      	ble.n	8006332 <_dtoa_r+0xafa>
 80063c8:	2300      	movs	r3, #0
 80063ca:	220a      	movs	r2, #10
 80063cc:	4648      	mov	r0, r9
 80063ce:	9903      	ldr	r1, [sp, #12]
 80063d0:	f000 f8b0 	bl	8006534 <__multadd>
 80063d4:	9003      	str	r0, [sp, #12]
 80063d6:	e7eb      	b.n	80063b0 <_dtoa_r+0xb78>
 80063d8:	08007eac 	.word	0x08007eac
 80063dc:	08007e30 	.word	0x08007e30

080063e0 <_free_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4605      	mov	r5, r0
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d040      	beq.n	800646a <_free_r+0x8a>
 80063e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ec:	1f0c      	subs	r4, r1, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bfb8      	it	lt
 80063f2:	18e4      	addlt	r4, r4, r3
 80063f4:	f7fe fb4a 	bl	8004a8c <__malloc_lock>
 80063f8:	4a1c      	ldr	r2, [pc, #112]	@ (800646c <_free_r+0x8c>)
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	b933      	cbnz	r3, 800640c <_free_r+0x2c>
 80063fe:	6063      	str	r3, [r4, #4]
 8006400:	6014      	str	r4, [r2, #0]
 8006402:	4628      	mov	r0, r5
 8006404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006408:	f7fe bb46 	b.w	8004a98 <__malloc_unlock>
 800640c:	42a3      	cmp	r3, r4
 800640e:	d908      	bls.n	8006422 <_free_r+0x42>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	1821      	adds	r1, r4, r0
 8006414:	428b      	cmp	r3, r1
 8006416:	bf01      	itttt	eq
 8006418:	6819      	ldreq	r1, [r3, #0]
 800641a:	685b      	ldreq	r3, [r3, #4]
 800641c:	1809      	addeq	r1, r1, r0
 800641e:	6021      	streq	r1, [r4, #0]
 8006420:	e7ed      	b.n	80063fe <_free_r+0x1e>
 8006422:	461a      	mov	r2, r3
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b10b      	cbz	r3, 800642c <_free_r+0x4c>
 8006428:	42a3      	cmp	r3, r4
 800642a:	d9fa      	bls.n	8006422 <_free_r+0x42>
 800642c:	6811      	ldr	r1, [r2, #0]
 800642e:	1850      	adds	r0, r2, r1
 8006430:	42a0      	cmp	r0, r4
 8006432:	d10b      	bne.n	800644c <_free_r+0x6c>
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	4401      	add	r1, r0
 8006438:	1850      	adds	r0, r2, r1
 800643a:	4283      	cmp	r3, r0
 800643c:	6011      	str	r1, [r2, #0]
 800643e:	d1e0      	bne.n	8006402 <_free_r+0x22>
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4408      	add	r0, r1
 8006446:	6010      	str	r0, [r2, #0]
 8006448:	6053      	str	r3, [r2, #4]
 800644a:	e7da      	b.n	8006402 <_free_r+0x22>
 800644c:	d902      	bls.n	8006454 <_free_r+0x74>
 800644e:	230c      	movs	r3, #12
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	e7d6      	b.n	8006402 <_free_r+0x22>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	1821      	adds	r1, r4, r0
 8006458:	428b      	cmp	r3, r1
 800645a:	bf01      	itttt	eq
 800645c:	6819      	ldreq	r1, [r3, #0]
 800645e:	685b      	ldreq	r3, [r3, #4]
 8006460:	1809      	addeq	r1, r1, r0
 8006462:	6021      	streq	r1, [r4, #0]
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	6054      	str	r4, [r2, #4]
 8006468:	e7cb      	b.n	8006402 <_free_r+0x22>
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20000760 	.word	0x20000760

08006470 <_Balloc>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	69c6      	ldr	r6, [r0, #28]
 8006474:	4604      	mov	r4, r0
 8006476:	460d      	mov	r5, r1
 8006478:	b976      	cbnz	r6, 8006498 <_Balloc+0x28>
 800647a:	2010      	movs	r0, #16
 800647c:	f7fe fa54 	bl	8004928 <malloc>
 8006480:	4602      	mov	r2, r0
 8006482:	61e0      	str	r0, [r4, #28]
 8006484:	b920      	cbnz	r0, 8006490 <_Balloc+0x20>
 8006486:	216b      	movs	r1, #107	@ 0x6b
 8006488:	4b17      	ldr	r3, [pc, #92]	@ (80064e8 <_Balloc+0x78>)
 800648a:	4818      	ldr	r0, [pc, #96]	@ (80064ec <_Balloc+0x7c>)
 800648c:	f000 fd84 	bl	8006f98 <__assert_func>
 8006490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006494:	6006      	str	r6, [r0, #0]
 8006496:	60c6      	str	r6, [r0, #12]
 8006498:	69e6      	ldr	r6, [r4, #28]
 800649a:	68f3      	ldr	r3, [r6, #12]
 800649c:	b183      	cbz	r3, 80064c0 <_Balloc+0x50>
 800649e:	69e3      	ldr	r3, [r4, #28]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064a6:	b9b8      	cbnz	r0, 80064d8 <_Balloc+0x68>
 80064a8:	2101      	movs	r1, #1
 80064aa:	fa01 f605 	lsl.w	r6, r1, r5
 80064ae:	1d72      	adds	r2, r6, #5
 80064b0:	4620      	mov	r0, r4
 80064b2:	0092      	lsls	r2, r2, #2
 80064b4:	f000 fd8e 	bl	8006fd4 <_calloc_r>
 80064b8:	b160      	cbz	r0, 80064d4 <_Balloc+0x64>
 80064ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064be:	e00e      	b.n	80064de <_Balloc+0x6e>
 80064c0:	2221      	movs	r2, #33	@ 0x21
 80064c2:	2104      	movs	r1, #4
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fd85 	bl	8006fd4 <_calloc_r>
 80064ca:	69e3      	ldr	r3, [r4, #28]
 80064cc:	60f0      	str	r0, [r6, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e4      	bne.n	800649e <_Balloc+0x2e>
 80064d4:	2000      	movs	r0, #0
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	6802      	ldr	r2, [r0, #0]
 80064da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064de:	2300      	movs	r3, #0
 80064e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064e4:	e7f7      	b.n	80064d6 <_Balloc+0x66>
 80064e6:	bf00      	nop
 80064e8:	08007e3d 	.word	0x08007e3d
 80064ec:	08007ebd 	.word	0x08007ebd

080064f0 <_Bfree>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	69c6      	ldr	r6, [r0, #28]
 80064f4:	4605      	mov	r5, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	b976      	cbnz	r6, 8006518 <_Bfree+0x28>
 80064fa:	2010      	movs	r0, #16
 80064fc:	f7fe fa14 	bl	8004928 <malloc>
 8006500:	4602      	mov	r2, r0
 8006502:	61e8      	str	r0, [r5, #28]
 8006504:	b920      	cbnz	r0, 8006510 <_Bfree+0x20>
 8006506:	218f      	movs	r1, #143	@ 0x8f
 8006508:	4b08      	ldr	r3, [pc, #32]	@ (800652c <_Bfree+0x3c>)
 800650a:	4809      	ldr	r0, [pc, #36]	@ (8006530 <_Bfree+0x40>)
 800650c:	f000 fd44 	bl	8006f98 <__assert_func>
 8006510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006514:	6006      	str	r6, [r0, #0]
 8006516:	60c6      	str	r6, [r0, #12]
 8006518:	b13c      	cbz	r4, 800652a <_Bfree+0x3a>
 800651a:	69eb      	ldr	r3, [r5, #28]
 800651c:	6862      	ldr	r2, [r4, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006524:	6021      	str	r1, [r4, #0]
 8006526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	08007e3d 	.word	0x08007e3d
 8006530:	08007ebd 	.word	0x08007ebd

08006534 <__multadd>:
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	4607      	mov	r7, r0
 800653a:	460c      	mov	r4, r1
 800653c:	461e      	mov	r6, r3
 800653e:	2000      	movs	r0, #0
 8006540:	690d      	ldr	r5, [r1, #16]
 8006542:	f101 0c14 	add.w	ip, r1, #20
 8006546:	f8dc 3000 	ldr.w	r3, [ip]
 800654a:	3001      	adds	r0, #1
 800654c:	b299      	uxth	r1, r3
 800654e:	fb02 6101 	mla	r1, r2, r1, r6
 8006552:	0c1e      	lsrs	r6, r3, #16
 8006554:	0c0b      	lsrs	r3, r1, #16
 8006556:	fb02 3306 	mla	r3, r2, r6, r3
 800655a:	b289      	uxth	r1, r1
 800655c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006560:	4285      	cmp	r5, r0
 8006562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006566:	f84c 1b04 	str.w	r1, [ip], #4
 800656a:	dcec      	bgt.n	8006546 <__multadd+0x12>
 800656c:	b30e      	cbz	r6, 80065b2 <__multadd+0x7e>
 800656e:	68a3      	ldr	r3, [r4, #8]
 8006570:	42ab      	cmp	r3, r5
 8006572:	dc19      	bgt.n	80065a8 <__multadd+0x74>
 8006574:	6861      	ldr	r1, [r4, #4]
 8006576:	4638      	mov	r0, r7
 8006578:	3101      	adds	r1, #1
 800657a:	f7ff ff79 	bl	8006470 <_Balloc>
 800657e:	4680      	mov	r8, r0
 8006580:	b928      	cbnz	r0, 800658e <__multadd+0x5a>
 8006582:	4602      	mov	r2, r0
 8006584:	21ba      	movs	r1, #186	@ 0xba
 8006586:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <__multadd+0x84>)
 8006588:	480c      	ldr	r0, [pc, #48]	@ (80065bc <__multadd+0x88>)
 800658a:	f000 fd05 	bl	8006f98 <__assert_func>
 800658e:	6922      	ldr	r2, [r4, #16]
 8006590:	f104 010c 	add.w	r1, r4, #12
 8006594:	3202      	adds	r2, #2
 8006596:	0092      	lsls	r2, r2, #2
 8006598:	300c      	adds	r0, #12
 800659a:	f7ff f8b6 	bl	800570a <memcpy>
 800659e:	4621      	mov	r1, r4
 80065a0:	4638      	mov	r0, r7
 80065a2:	f7ff ffa5 	bl	80064f0 <_Bfree>
 80065a6:	4644      	mov	r4, r8
 80065a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065ac:	3501      	adds	r5, #1
 80065ae:	615e      	str	r6, [r3, #20]
 80065b0:	6125      	str	r5, [r4, #16]
 80065b2:	4620      	mov	r0, r4
 80065b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b8:	08007eac 	.word	0x08007eac
 80065bc:	08007ebd 	.word	0x08007ebd

080065c0 <__hi0bits>:
 80065c0:	4603      	mov	r3, r0
 80065c2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065c6:	bf3a      	itte	cc
 80065c8:	0403      	lslcc	r3, r0, #16
 80065ca:	2010      	movcc	r0, #16
 80065cc:	2000      	movcs	r0, #0
 80065ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065d2:	bf3c      	itt	cc
 80065d4:	021b      	lslcc	r3, r3, #8
 80065d6:	3008      	addcc	r0, #8
 80065d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065dc:	bf3c      	itt	cc
 80065de:	011b      	lslcc	r3, r3, #4
 80065e0:	3004      	addcc	r0, #4
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e6:	bf3c      	itt	cc
 80065e8:	009b      	lslcc	r3, r3, #2
 80065ea:	3002      	addcc	r0, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	db05      	blt.n	80065fc <__hi0bits+0x3c>
 80065f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065f4:	f100 0001 	add.w	r0, r0, #1
 80065f8:	bf08      	it	eq
 80065fa:	2020      	moveq	r0, #32
 80065fc:	4770      	bx	lr

080065fe <__lo0bits>:
 80065fe:	6803      	ldr	r3, [r0, #0]
 8006600:	4602      	mov	r2, r0
 8006602:	f013 0007 	ands.w	r0, r3, #7
 8006606:	d00b      	beq.n	8006620 <__lo0bits+0x22>
 8006608:	07d9      	lsls	r1, r3, #31
 800660a:	d421      	bmi.n	8006650 <__lo0bits+0x52>
 800660c:	0798      	lsls	r0, r3, #30
 800660e:	bf49      	itett	mi
 8006610:	085b      	lsrmi	r3, r3, #1
 8006612:	089b      	lsrpl	r3, r3, #2
 8006614:	2001      	movmi	r0, #1
 8006616:	6013      	strmi	r3, [r2, #0]
 8006618:	bf5c      	itt	pl
 800661a:	2002      	movpl	r0, #2
 800661c:	6013      	strpl	r3, [r2, #0]
 800661e:	4770      	bx	lr
 8006620:	b299      	uxth	r1, r3
 8006622:	b909      	cbnz	r1, 8006628 <__lo0bits+0x2a>
 8006624:	2010      	movs	r0, #16
 8006626:	0c1b      	lsrs	r3, r3, #16
 8006628:	b2d9      	uxtb	r1, r3
 800662a:	b909      	cbnz	r1, 8006630 <__lo0bits+0x32>
 800662c:	3008      	adds	r0, #8
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	0719      	lsls	r1, r3, #28
 8006632:	bf04      	itt	eq
 8006634:	091b      	lsreq	r3, r3, #4
 8006636:	3004      	addeq	r0, #4
 8006638:	0799      	lsls	r1, r3, #30
 800663a:	bf04      	itt	eq
 800663c:	089b      	lsreq	r3, r3, #2
 800663e:	3002      	addeq	r0, #2
 8006640:	07d9      	lsls	r1, r3, #31
 8006642:	d403      	bmi.n	800664c <__lo0bits+0x4e>
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	f100 0001 	add.w	r0, r0, #1
 800664a:	d003      	beq.n	8006654 <__lo0bits+0x56>
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	4770      	bx	lr
 8006650:	2000      	movs	r0, #0
 8006652:	4770      	bx	lr
 8006654:	2020      	movs	r0, #32
 8006656:	4770      	bx	lr

08006658 <__i2b>:
 8006658:	b510      	push	{r4, lr}
 800665a:	460c      	mov	r4, r1
 800665c:	2101      	movs	r1, #1
 800665e:	f7ff ff07 	bl	8006470 <_Balloc>
 8006662:	4602      	mov	r2, r0
 8006664:	b928      	cbnz	r0, 8006672 <__i2b+0x1a>
 8006666:	f240 1145 	movw	r1, #325	@ 0x145
 800666a:	4b04      	ldr	r3, [pc, #16]	@ (800667c <__i2b+0x24>)
 800666c:	4804      	ldr	r0, [pc, #16]	@ (8006680 <__i2b+0x28>)
 800666e:	f000 fc93 	bl	8006f98 <__assert_func>
 8006672:	2301      	movs	r3, #1
 8006674:	6144      	str	r4, [r0, #20]
 8006676:	6103      	str	r3, [r0, #16]
 8006678:	bd10      	pop	{r4, pc}
 800667a:	bf00      	nop
 800667c:	08007eac 	.word	0x08007eac
 8006680:	08007ebd 	.word	0x08007ebd

08006684 <__multiply>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	4617      	mov	r7, r2
 800668a:	690a      	ldr	r2, [r1, #16]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4689      	mov	r9, r1
 8006690:	429a      	cmp	r2, r3
 8006692:	bfa2      	ittt	ge
 8006694:	463b      	movge	r3, r7
 8006696:	460f      	movge	r7, r1
 8006698:	4699      	movge	r9, r3
 800669a:	693d      	ldr	r5, [r7, #16]
 800669c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	eb05 060a 	add.w	r6, r5, sl
 80066a8:	42b3      	cmp	r3, r6
 80066aa:	b085      	sub	sp, #20
 80066ac:	bfb8      	it	lt
 80066ae:	3101      	addlt	r1, #1
 80066b0:	f7ff fede 	bl	8006470 <_Balloc>
 80066b4:	b930      	cbnz	r0, 80066c4 <__multiply+0x40>
 80066b6:	4602      	mov	r2, r0
 80066b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066bc:	4b40      	ldr	r3, [pc, #256]	@ (80067c0 <__multiply+0x13c>)
 80066be:	4841      	ldr	r0, [pc, #260]	@ (80067c4 <__multiply+0x140>)
 80066c0:	f000 fc6a 	bl	8006f98 <__assert_func>
 80066c4:	f100 0414 	add.w	r4, r0, #20
 80066c8:	4623      	mov	r3, r4
 80066ca:	2200      	movs	r2, #0
 80066cc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80066d0:	4573      	cmp	r3, lr
 80066d2:	d320      	bcc.n	8006716 <__multiply+0x92>
 80066d4:	f107 0814 	add.w	r8, r7, #20
 80066d8:	f109 0114 	add.w	r1, r9, #20
 80066dc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80066e0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	1beb      	subs	r3, r5, r7
 80066e8:	3b15      	subs	r3, #21
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	3304      	adds	r3, #4
 80066f0:	3715      	adds	r7, #21
 80066f2:	42bd      	cmp	r5, r7
 80066f4:	bf38      	it	cc
 80066f6:	2304      	movcc	r3, #4
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	9b02      	ldr	r3, [sp, #8]
 80066fc:	9103      	str	r1, [sp, #12]
 80066fe:	428b      	cmp	r3, r1
 8006700:	d80c      	bhi.n	800671c <__multiply+0x98>
 8006702:	2e00      	cmp	r6, #0
 8006704:	dd03      	ble.n	800670e <__multiply+0x8a>
 8006706:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800670a:	2b00      	cmp	r3, #0
 800670c:	d055      	beq.n	80067ba <__multiply+0x136>
 800670e:	6106      	str	r6, [r0, #16]
 8006710:	b005      	add	sp, #20
 8006712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006716:	f843 2b04 	str.w	r2, [r3], #4
 800671a:	e7d9      	b.n	80066d0 <__multiply+0x4c>
 800671c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006720:	f1ba 0f00 	cmp.w	sl, #0
 8006724:	d01f      	beq.n	8006766 <__multiply+0xe2>
 8006726:	46c4      	mov	ip, r8
 8006728:	46a1      	mov	r9, r4
 800672a:	2700      	movs	r7, #0
 800672c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006730:	f8d9 3000 	ldr.w	r3, [r9]
 8006734:	fa1f fb82 	uxth.w	fp, r2
 8006738:	b29b      	uxth	r3, r3
 800673a:	fb0a 330b 	mla	r3, sl, fp, r3
 800673e:	443b      	add	r3, r7
 8006740:	f8d9 7000 	ldr.w	r7, [r9]
 8006744:	0c12      	lsrs	r2, r2, #16
 8006746:	0c3f      	lsrs	r7, r7, #16
 8006748:	fb0a 7202 	mla	r2, sl, r2, r7
 800674c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006750:	b29b      	uxth	r3, r3
 8006752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006756:	4565      	cmp	r5, ip
 8006758:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800675c:	f849 3b04 	str.w	r3, [r9], #4
 8006760:	d8e4      	bhi.n	800672c <__multiply+0xa8>
 8006762:	9b01      	ldr	r3, [sp, #4]
 8006764:	50e7      	str	r7, [r4, r3]
 8006766:	9b03      	ldr	r3, [sp, #12]
 8006768:	3104      	adds	r1, #4
 800676a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800676e:	f1b9 0f00 	cmp.w	r9, #0
 8006772:	d020      	beq.n	80067b6 <__multiply+0x132>
 8006774:	4647      	mov	r7, r8
 8006776:	46a4      	mov	ip, r4
 8006778:	f04f 0a00 	mov.w	sl, #0
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	f8b7 b000 	ldrh.w	fp, [r7]
 8006782:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006786:	b29b      	uxth	r3, r3
 8006788:	fb09 220b 	mla	r2, r9, fp, r2
 800678c:	4452      	add	r2, sl
 800678e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006792:	f84c 3b04 	str.w	r3, [ip], #4
 8006796:	f857 3b04 	ldr.w	r3, [r7], #4
 800679a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800679e:	f8bc 3000 	ldrh.w	r3, [ip]
 80067a2:	42bd      	cmp	r5, r7
 80067a4:	fb09 330a 	mla	r3, r9, sl, r3
 80067a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80067ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067b0:	d8e5      	bhi.n	800677e <__multiply+0xfa>
 80067b2:	9a01      	ldr	r2, [sp, #4]
 80067b4:	50a3      	str	r3, [r4, r2]
 80067b6:	3404      	adds	r4, #4
 80067b8:	e79f      	b.n	80066fa <__multiply+0x76>
 80067ba:	3e01      	subs	r6, #1
 80067bc:	e7a1      	b.n	8006702 <__multiply+0x7e>
 80067be:	bf00      	nop
 80067c0:	08007eac 	.word	0x08007eac
 80067c4:	08007ebd 	.word	0x08007ebd

080067c8 <__pow5mult>:
 80067c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067cc:	4615      	mov	r5, r2
 80067ce:	f012 0203 	ands.w	r2, r2, #3
 80067d2:	4607      	mov	r7, r0
 80067d4:	460e      	mov	r6, r1
 80067d6:	d007      	beq.n	80067e8 <__pow5mult+0x20>
 80067d8:	4c25      	ldr	r4, [pc, #148]	@ (8006870 <__pow5mult+0xa8>)
 80067da:	3a01      	subs	r2, #1
 80067dc:	2300      	movs	r3, #0
 80067de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067e2:	f7ff fea7 	bl	8006534 <__multadd>
 80067e6:	4606      	mov	r6, r0
 80067e8:	10ad      	asrs	r5, r5, #2
 80067ea:	d03d      	beq.n	8006868 <__pow5mult+0xa0>
 80067ec:	69fc      	ldr	r4, [r7, #28]
 80067ee:	b97c      	cbnz	r4, 8006810 <__pow5mult+0x48>
 80067f0:	2010      	movs	r0, #16
 80067f2:	f7fe f899 	bl	8004928 <malloc>
 80067f6:	4602      	mov	r2, r0
 80067f8:	61f8      	str	r0, [r7, #28]
 80067fa:	b928      	cbnz	r0, 8006808 <__pow5mult+0x40>
 80067fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006800:	4b1c      	ldr	r3, [pc, #112]	@ (8006874 <__pow5mult+0xac>)
 8006802:	481d      	ldr	r0, [pc, #116]	@ (8006878 <__pow5mult+0xb0>)
 8006804:	f000 fbc8 	bl	8006f98 <__assert_func>
 8006808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800680c:	6004      	str	r4, [r0, #0]
 800680e:	60c4      	str	r4, [r0, #12]
 8006810:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006818:	b94c      	cbnz	r4, 800682e <__pow5mult+0x66>
 800681a:	f240 2171 	movw	r1, #625	@ 0x271
 800681e:	4638      	mov	r0, r7
 8006820:	f7ff ff1a 	bl	8006658 <__i2b>
 8006824:	2300      	movs	r3, #0
 8006826:	4604      	mov	r4, r0
 8006828:	f8c8 0008 	str.w	r0, [r8, #8]
 800682c:	6003      	str	r3, [r0, #0]
 800682e:	f04f 0900 	mov.w	r9, #0
 8006832:	07eb      	lsls	r3, r5, #31
 8006834:	d50a      	bpl.n	800684c <__pow5mult+0x84>
 8006836:	4631      	mov	r1, r6
 8006838:	4622      	mov	r2, r4
 800683a:	4638      	mov	r0, r7
 800683c:	f7ff ff22 	bl	8006684 <__multiply>
 8006840:	4680      	mov	r8, r0
 8006842:	4631      	mov	r1, r6
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff fe53 	bl	80064f0 <_Bfree>
 800684a:	4646      	mov	r6, r8
 800684c:	106d      	asrs	r5, r5, #1
 800684e:	d00b      	beq.n	8006868 <__pow5mult+0xa0>
 8006850:	6820      	ldr	r0, [r4, #0]
 8006852:	b938      	cbnz	r0, 8006864 <__pow5mult+0x9c>
 8006854:	4622      	mov	r2, r4
 8006856:	4621      	mov	r1, r4
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff ff13 	bl	8006684 <__multiply>
 800685e:	6020      	str	r0, [r4, #0]
 8006860:	f8c0 9000 	str.w	r9, [r0]
 8006864:	4604      	mov	r4, r0
 8006866:	e7e4      	b.n	8006832 <__pow5mult+0x6a>
 8006868:	4630      	mov	r0, r6
 800686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800686e:	bf00      	nop
 8006870:	08007f70 	.word	0x08007f70
 8006874:	08007e3d 	.word	0x08007e3d
 8006878:	08007ebd 	.word	0x08007ebd

0800687c <__lshift>:
 800687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	4607      	mov	r7, r0
 8006884:	4691      	mov	r9, r2
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	6849      	ldr	r1, [r1, #4]
 800688a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006894:	f108 0601 	add.w	r6, r8, #1
 8006898:	42b3      	cmp	r3, r6
 800689a:	db0b      	blt.n	80068b4 <__lshift+0x38>
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff fde7 	bl	8006470 <_Balloc>
 80068a2:	4605      	mov	r5, r0
 80068a4:	b948      	cbnz	r0, 80068ba <__lshift+0x3e>
 80068a6:	4602      	mov	r2, r0
 80068a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068ac:	4b27      	ldr	r3, [pc, #156]	@ (800694c <__lshift+0xd0>)
 80068ae:	4828      	ldr	r0, [pc, #160]	@ (8006950 <__lshift+0xd4>)
 80068b0:	f000 fb72 	bl	8006f98 <__assert_func>
 80068b4:	3101      	adds	r1, #1
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	e7ee      	b.n	8006898 <__lshift+0x1c>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f100 0114 	add.w	r1, r0, #20
 80068c0:	f100 0210 	add.w	r2, r0, #16
 80068c4:	4618      	mov	r0, r3
 80068c6:	4553      	cmp	r3, sl
 80068c8:	db33      	blt.n	8006932 <__lshift+0xb6>
 80068ca:	6920      	ldr	r0, [r4, #16]
 80068cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068d0:	f104 0314 	add.w	r3, r4, #20
 80068d4:	f019 091f 	ands.w	r9, r9, #31
 80068d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068e0:	d02b      	beq.n	800693a <__lshift+0xbe>
 80068e2:	468a      	mov	sl, r1
 80068e4:	2200      	movs	r2, #0
 80068e6:	f1c9 0e20 	rsb	lr, r9, #32
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	fa00 f009 	lsl.w	r0, r0, r9
 80068f0:	4310      	orrs	r0, r2
 80068f2:	f84a 0b04 	str.w	r0, [sl], #4
 80068f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fa:	459c      	cmp	ip, r3
 80068fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006900:	d8f3      	bhi.n	80068ea <__lshift+0x6e>
 8006902:	ebac 0304 	sub.w	r3, ip, r4
 8006906:	3b15      	subs	r3, #21
 8006908:	f023 0303 	bic.w	r3, r3, #3
 800690c:	3304      	adds	r3, #4
 800690e:	f104 0015 	add.w	r0, r4, #21
 8006912:	4560      	cmp	r0, ip
 8006914:	bf88      	it	hi
 8006916:	2304      	movhi	r3, #4
 8006918:	50ca      	str	r2, [r1, r3]
 800691a:	b10a      	cbz	r2, 8006920 <__lshift+0xa4>
 800691c:	f108 0602 	add.w	r6, r8, #2
 8006920:	3e01      	subs	r6, #1
 8006922:	4638      	mov	r0, r7
 8006924:	4621      	mov	r1, r4
 8006926:	612e      	str	r6, [r5, #16]
 8006928:	f7ff fde2 	bl	80064f0 <_Bfree>
 800692c:	4628      	mov	r0, r5
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	f842 0f04 	str.w	r0, [r2, #4]!
 8006936:	3301      	adds	r3, #1
 8006938:	e7c5      	b.n	80068c6 <__lshift+0x4a>
 800693a:	3904      	subs	r1, #4
 800693c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006940:	459c      	cmp	ip, r3
 8006942:	f841 2f04 	str.w	r2, [r1, #4]!
 8006946:	d8f9      	bhi.n	800693c <__lshift+0xc0>
 8006948:	e7ea      	b.n	8006920 <__lshift+0xa4>
 800694a:	bf00      	nop
 800694c:	08007eac 	.word	0x08007eac
 8006950:	08007ebd 	.word	0x08007ebd

08006954 <__mcmp>:
 8006954:	4603      	mov	r3, r0
 8006956:	690a      	ldr	r2, [r1, #16]
 8006958:	6900      	ldr	r0, [r0, #16]
 800695a:	b530      	push	{r4, r5, lr}
 800695c:	1a80      	subs	r0, r0, r2
 800695e:	d10e      	bne.n	800697e <__mcmp+0x2a>
 8006960:	3314      	adds	r3, #20
 8006962:	3114      	adds	r1, #20
 8006964:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006968:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800696c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006970:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006974:	4295      	cmp	r5, r2
 8006976:	d003      	beq.n	8006980 <__mcmp+0x2c>
 8006978:	d205      	bcs.n	8006986 <__mcmp+0x32>
 800697a:	f04f 30ff 	mov.w	r0, #4294967295
 800697e:	bd30      	pop	{r4, r5, pc}
 8006980:	42a3      	cmp	r3, r4
 8006982:	d3f3      	bcc.n	800696c <__mcmp+0x18>
 8006984:	e7fb      	b.n	800697e <__mcmp+0x2a>
 8006986:	2001      	movs	r0, #1
 8006988:	e7f9      	b.n	800697e <__mcmp+0x2a>
	...

0800698c <__mdiff>:
 800698c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	4689      	mov	r9, r1
 8006992:	4606      	mov	r6, r0
 8006994:	4611      	mov	r1, r2
 8006996:	4648      	mov	r0, r9
 8006998:	4614      	mov	r4, r2
 800699a:	f7ff ffdb 	bl	8006954 <__mcmp>
 800699e:	1e05      	subs	r5, r0, #0
 80069a0:	d112      	bne.n	80069c8 <__mdiff+0x3c>
 80069a2:	4629      	mov	r1, r5
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff fd63 	bl	8006470 <_Balloc>
 80069aa:	4602      	mov	r2, r0
 80069ac:	b928      	cbnz	r0, 80069ba <__mdiff+0x2e>
 80069ae:	f240 2137 	movw	r1, #567	@ 0x237
 80069b2:	4b3e      	ldr	r3, [pc, #248]	@ (8006aac <__mdiff+0x120>)
 80069b4:	483e      	ldr	r0, [pc, #248]	@ (8006ab0 <__mdiff+0x124>)
 80069b6:	f000 faef 	bl	8006f98 <__assert_func>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069c0:	4610      	mov	r0, r2
 80069c2:	b003      	add	sp, #12
 80069c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c8:	bfbc      	itt	lt
 80069ca:	464b      	movlt	r3, r9
 80069cc:	46a1      	movlt	r9, r4
 80069ce:	4630      	mov	r0, r6
 80069d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069d4:	bfba      	itte	lt
 80069d6:	461c      	movlt	r4, r3
 80069d8:	2501      	movlt	r5, #1
 80069da:	2500      	movge	r5, #0
 80069dc:	f7ff fd48 	bl	8006470 <_Balloc>
 80069e0:	4602      	mov	r2, r0
 80069e2:	b918      	cbnz	r0, 80069ec <__mdiff+0x60>
 80069e4:	f240 2145 	movw	r1, #581	@ 0x245
 80069e8:	4b30      	ldr	r3, [pc, #192]	@ (8006aac <__mdiff+0x120>)
 80069ea:	e7e3      	b.n	80069b4 <__mdiff+0x28>
 80069ec:	f100 0b14 	add.w	fp, r0, #20
 80069f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069f4:	f109 0310 	add.w	r3, r9, #16
 80069f8:	60c5      	str	r5, [r0, #12]
 80069fa:	f04f 0c00 	mov.w	ip, #0
 80069fe:	f109 0514 	add.w	r5, r9, #20
 8006a02:	46d9      	mov	r9, fp
 8006a04:	6926      	ldr	r6, [r4, #16]
 8006a06:	f104 0e14 	add.w	lr, r4, #20
 8006a0a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a0e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a12:	9301      	str	r3, [sp, #4]
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a1e:	b281      	uxth	r1, r0
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	fa1f f38a 	uxth.w	r3, sl
 8006a26:	1a5b      	subs	r3, r3, r1
 8006a28:	0c00      	lsrs	r0, r0, #16
 8006a2a:	4463      	add	r3, ip
 8006a2c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a30:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a3a:	4576      	cmp	r6, lr
 8006a3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a40:	f849 3b04 	str.w	r3, [r9], #4
 8006a44:	d8e6      	bhi.n	8006a14 <__mdiff+0x88>
 8006a46:	1b33      	subs	r3, r6, r4
 8006a48:	3b15      	subs	r3, #21
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	3415      	adds	r4, #21
 8006a50:	3304      	adds	r3, #4
 8006a52:	42a6      	cmp	r6, r4
 8006a54:	bf38      	it	cc
 8006a56:	2304      	movcc	r3, #4
 8006a58:	441d      	add	r5, r3
 8006a5a:	445b      	add	r3, fp
 8006a5c:	461e      	mov	r6, r3
 8006a5e:	462c      	mov	r4, r5
 8006a60:	4544      	cmp	r4, r8
 8006a62:	d30e      	bcc.n	8006a82 <__mdiff+0xf6>
 8006a64:	f108 0103 	add.w	r1, r8, #3
 8006a68:	1b49      	subs	r1, r1, r5
 8006a6a:	f021 0103 	bic.w	r1, r1, #3
 8006a6e:	3d03      	subs	r5, #3
 8006a70:	45a8      	cmp	r8, r5
 8006a72:	bf38      	it	cc
 8006a74:	2100      	movcc	r1, #0
 8006a76:	440b      	add	r3, r1
 8006a78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a7c:	b199      	cbz	r1, 8006aa6 <__mdiff+0x11a>
 8006a7e:	6117      	str	r7, [r2, #16]
 8006a80:	e79e      	b.n	80069c0 <__mdiff+0x34>
 8006a82:	46e6      	mov	lr, ip
 8006a84:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a88:	fa1f fc81 	uxth.w	ip, r1
 8006a8c:	44f4      	add	ip, lr
 8006a8e:	0c08      	lsrs	r0, r1, #16
 8006a90:	4471      	add	r1, lr
 8006a92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a96:	b289      	uxth	r1, r1
 8006a98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006aa0:	f846 1b04 	str.w	r1, [r6], #4
 8006aa4:	e7dc      	b.n	8006a60 <__mdiff+0xd4>
 8006aa6:	3f01      	subs	r7, #1
 8006aa8:	e7e6      	b.n	8006a78 <__mdiff+0xec>
 8006aaa:	bf00      	nop
 8006aac:	08007eac 	.word	0x08007eac
 8006ab0:	08007ebd 	.word	0x08007ebd

08006ab4 <__d2b>:
 8006ab4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006ab8:	2101      	movs	r1, #1
 8006aba:	4690      	mov	r8, r2
 8006abc:	4699      	mov	r9, r3
 8006abe:	9e08      	ldr	r6, [sp, #32]
 8006ac0:	f7ff fcd6 	bl	8006470 <_Balloc>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	b930      	cbnz	r0, 8006ad6 <__d2b+0x22>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	f240 310f 	movw	r1, #783	@ 0x30f
 8006ace:	4b23      	ldr	r3, [pc, #140]	@ (8006b5c <__d2b+0xa8>)
 8006ad0:	4823      	ldr	r0, [pc, #140]	@ (8006b60 <__d2b+0xac>)
 8006ad2:	f000 fa61 	bl	8006f98 <__assert_func>
 8006ad6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ada:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ade:	b10d      	cbz	r5, 8006ae4 <__d2b+0x30>
 8006ae0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	f1b8 0300 	subs.w	r3, r8, #0
 8006aea:	d024      	beq.n	8006b36 <__d2b+0x82>
 8006aec:	4668      	mov	r0, sp
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	f7ff fd85 	bl	80065fe <__lo0bits>
 8006af4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006af8:	b1d8      	cbz	r0, 8006b32 <__d2b+0x7e>
 8006afa:	f1c0 0320 	rsb	r3, r0, #32
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	430b      	orrs	r3, r1
 8006b04:	40c2      	lsrs	r2, r0
 8006b06:	6163      	str	r3, [r4, #20]
 8006b08:	9201      	str	r2, [sp, #4]
 8006b0a:	9b01      	ldr	r3, [sp, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bf0c      	ite	eq
 8006b10:	2201      	moveq	r2, #1
 8006b12:	2202      	movne	r2, #2
 8006b14:	61a3      	str	r3, [r4, #24]
 8006b16:	6122      	str	r2, [r4, #16]
 8006b18:	b1ad      	cbz	r5, 8006b46 <__d2b+0x92>
 8006b1a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b1e:	4405      	add	r5, r0
 8006b20:	6035      	str	r5, [r6, #0]
 8006b22:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b28:	6018      	str	r0, [r3, #0]
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	b002      	add	sp, #8
 8006b2e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006b32:	6161      	str	r1, [r4, #20]
 8006b34:	e7e9      	b.n	8006b0a <__d2b+0x56>
 8006b36:	a801      	add	r0, sp, #4
 8006b38:	f7ff fd61 	bl	80065fe <__lo0bits>
 8006b3c:	9b01      	ldr	r3, [sp, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	6163      	str	r3, [r4, #20]
 8006b42:	3020      	adds	r0, #32
 8006b44:	e7e7      	b.n	8006b16 <__d2b+0x62>
 8006b46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b4e:	6030      	str	r0, [r6, #0]
 8006b50:	6918      	ldr	r0, [r3, #16]
 8006b52:	f7ff fd35 	bl	80065c0 <__hi0bits>
 8006b56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b5a:	e7e4      	b.n	8006b26 <__d2b+0x72>
 8006b5c:	08007eac 	.word	0x08007eac
 8006b60:	08007ebd 	.word	0x08007ebd

08006b64 <__ssputs_r>:
 8006b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	461f      	mov	r7, r3
 8006b6a:	688e      	ldr	r6, [r1, #8]
 8006b6c:	4682      	mov	sl, r0
 8006b6e:	42be      	cmp	r6, r7
 8006b70:	460c      	mov	r4, r1
 8006b72:	4690      	mov	r8, r2
 8006b74:	680b      	ldr	r3, [r1, #0]
 8006b76:	d82d      	bhi.n	8006bd4 <__ssputs_r+0x70>
 8006b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b80:	d026      	beq.n	8006bd0 <__ssputs_r+0x6c>
 8006b82:	6965      	ldr	r5, [r4, #20]
 8006b84:	6909      	ldr	r1, [r1, #16]
 8006b86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b8a:	eba3 0901 	sub.w	r9, r3, r1
 8006b8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b92:	1c7b      	adds	r3, r7, #1
 8006b94:	444b      	add	r3, r9
 8006b96:	106d      	asrs	r5, r5, #1
 8006b98:	429d      	cmp	r5, r3
 8006b9a:	bf38      	it	cc
 8006b9c:	461d      	movcc	r5, r3
 8006b9e:	0553      	lsls	r3, r2, #21
 8006ba0:	d527      	bpl.n	8006bf2 <__ssputs_r+0x8e>
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	f7fd fef2 	bl	800498c <_malloc_r>
 8006ba8:	4606      	mov	r6, r0
 8006baa:	b360      	cbz	r0, 8006c06 <__ssputs_r+0xa2>
 8006bac:	464a      	mov	r2, r9
 8006bae:	6921      	ldr	r1, [r4, #16]
 8006bb0:	f7fe fdab 	bl	800570a <memcpy>
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	6126      	str	r6, [r4, #16]
 8006bc2:	444e      	add	r6, r9
 8006bc4:	6026      	str	r6, [r4, #0]
 8006bc6:	463e      	mov	r6, r7
 8006bc8:	6165      	str	r5, [r4, #20]
 8006bca:	eba5 0509 	sub.w	r5, r5, r9
 8006bce:	60a5      	str	r5, [r4, #8]
 8006bd0:	42be      	cmp	r6, r7
 8006bd2:	d900      	bls.n	8006bd6 <__ssputs_r+0x72>
 8006bd4:	463e      	mov	r6, r7
 8006bd6:	4632      	mov	r2, r6
 8006bd8:	4641      	mov	r1, r8
 8006bda:	6820      	ldr	r0, [r4, #0]
 8006bdc:	f000 f9c2 	bl	8006f64 <memmove>
 8006be0:	2000      	movs	r0, #0
 8006be2:	68a3      	ldr	r3, [r4, #8]
 8006be4:	1b9b      	subs	r3, r3, r6
 8006be6:	60a3      	str	r3, [r4, #8]
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	4433      	add	r3, r6
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf2:	462a      	mov	r2, r5
 8006bf4:	f000 fa14 	bl	8007020 <_realloc_r>
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d1e0      	bne.n	8006bc0 <__ssputs_r+0x5c>
 8006bfe:	4650      	mov	r0, sl
 8006c00:	6921      	ldr	r1, [r4, #16]
 8006c02:	f7ff fbed 	bl	80063e0 <_free_r>
 8006c06:	230c      	movs	r3, #12
 8006c08:	f8ca 3000 	str.w	r3, [sl]
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	e7e9      	b.n	8006bee <__ssputs_r+0x8a>
	...

08006c1c <_svfiprintf_r>:
 8006c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	4698      	mov	r8, r3
 8006c22:	898b      	ldrh	r3, [r1, #12]
 8006c24:	4607      	mov	r7, r0
 8006c26:	061b      	lsls	r3, r3, #24
 8006c28:	460d      	mov	r5, r1
 8006c2a:	4614      	mov	r4, r2
 8006c2c:	b09d      	sub	sp, #116	@ 0x74
 8006c2e:	d510      	bpl.n	8006c52 <_svfiprintf_r+0x36>
 8006c30:	690b      	ldr	r3, [r1, #16]
 8006c32:	b973      	cbnz	r3, 8006c52 <_svfiprintf_r+0x36>
 8006c34:	2140      	movs	r1, #64	@ 0x40
 8006c36:	f7fd fea9 	bl	800498c <_malloc_r>
 8006c3a:	6028      	str	r0, [r5, #0]
 8006c3c:	6128      	str	r0, [r5, #16]
 8006c3e:	b930      	cbnz	r0, 8006c4e <_svfiprintf_r+0x32>
 8006c40:	230c      	movs	r3, #12
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	b01d      	add	sp, #116	@ 0x74
 8006c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4e:	2340      	movs	r3, #64	@ 0x40
 8006c50:	616b      	str	r3, [r5, #20]
 8006c52:	2300      	movs	r3, #0
 8006c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c56:	2320      	movs	r3, #32
 8006c58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c5c:	2330      	movs	r3, #48	@ 0x30
 8006c5e:	f04f 0901 	mov.w	r9, #1
 8006c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c66:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e00 <_svfiprintf_r+0x1e4>
 8006c6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c6e:	4623      	mov	r3, r4
 8006c70:	469a      	mov	sl, r3
 8006c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c76:	b10a      	cbz	r2, 8006c7c <_svfiprintf_r+0x60>
 8006c78:	2a25      	cmp	r2, #37	@ 0x25
 8006c7a:	d1f9      	bne.n	8006c70 <_svfiprintf_r+0x54>
 8006c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c80:	d00b      	beq.n	8006c9a <_svfiprintf_r+0x7e>
 8006c82:	465b      	mov	r3, fp
 8006c84:	4622      	mov	r2, r4
 8006c86:	4629      	mov	r1, r5
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f7ff ff6b 	bl	8006b64 <__ssputs_r>
 8006c8e:	3001      	adds	r0, #1
 8006c90:	f000 80a7 	beq.w	8006de2 <_svfiprintf_r+0x1c6>
 8006c94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c96:	445a      	add	r2, fp
 8006c98:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 809f 	beq.w	8006de2 <_svfiprintf_r+0x1c6>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8006caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cae:	f10a 0a01 	add.w	sl, sl, #1
 8006cb2:	9304      	str	r3, [sp, #16]
 8006cb4:	9307      	str	r3, [sp, #28]
 8006cb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cba:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cbc:	4654      	mov	r4, sl
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc4:	484e      	ldr	r0, [pc, #312]	@ (8006e00 <_svfiprintf_r+0x1e4>)
 8006cc6:	f7fe fd12 	bl	80056ee <memchr>
 8006cca:	9a04      	ldr	r2, [sp, #16]
 8006ccc:	b9d8      	cbnz	r0, 8006d06 <_svfiprintf_r+0xea>
 8006cce:	06d0      	lsls	r0, r2, #27
 8006cd0:	bf44      	itt	mi
 8006cd2:	2320      	movmi	r3, #32
 8006cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cd8:	0711      	lsls	r1, r2, #28
 8006cda:	bf44      	itt	mi
 8006cdc:	232b      	movmi	r3, #43	@ 0x2b
 8006cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ce8:	d015      	beq.n	8006d16 <_svfiprintf_r+0xfa>
 8006cea:	4654      	mov	r4, sl
 8006cec:	2000      	movs	r0, #0
 8006cee:	f04f 0c0a 	mov.w	ip, #10
 8006cf2:	9a07      	ldr	r2, [sp, #28]
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cfa:	3b30      	subs	r3, #48	@ 0x30
 8006cfc:	2b09      	cmp	r3, #9
 8006cfe:	d94b      	bls.n	8006d98 <_svfiprintf_r+0x17c>
 8006d00:	b1b0      	cbz	r0, 8006d30 <_svfiprintf_r+0x114>
 8006d02:	9207      	str	r2, [sp, #28]
 8006d04:	e014      	b.n	8006d30 <_svfiprintf_r+0x114>
 8006d06:	eba0 0308 	sub.w	r3, r0, r8
 8006d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	46a2      	mov	sl, r4
 8006d12:	9304      	str	r3, [sp, #16]
 8006d14:	e7d2      	b.n	8006cbc <_svfiprintf_r+0xa0>
 8006d16:	9b03      	ldr	r3, [sp, #12]
 8006d18:	1d19      	adds	r1, r3, #4
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	9103      	str	r1, [sp, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bfbb      	ittet	lt
 8006d22:	425b      	neglt	r3, r3
 8006d24:	f042 0202 	orrlt.w	r2, r2, #2
 8006d28:	9307      	strge	r3, [sp, #28]
 8006d2a:	9307      	strlt	r3, [sp, #28]
 8006d2c:	bfb8      	it	lt
 8006d2e:	9204      	strlt	r2, [sp, #16]
 8006d30:	7823      	ldrb	r3, [r4, #0]
 8006d32:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d34:	d10a      	bne.n	8006d4c <_svfiprintf_r+0x130>
 8006d36:	7863      	ldrb	r3, [r4, #1]
 8006d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d3a:	d132      	bne.n	8006da2 <_svfiprintf_r+0x186>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	3402      	adds	r4, #2
 8006d40:	1d1a      	adds	r2, r3, #4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	9203      	str	r2, [sp, #12]
 8006d46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d4a:	9305      	str	r3, [sp, #20]
 8006d4c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e04 <_svfiprintf_r+0x1e8>
 8006d50:	2203      	movs	r2, #3
 8006d52:	4650      	mov	r0, sl
 8006d54:	7821      	ldrb	r1, [r4, #0]
 8006d56:	f7fe fcca 	bl	80056ee <memchr>
 8006d5a:	b138      	cbz	r0, 8006d6c <_svfiprintf_r+0x150>
 8006d5c:	2240      	movs	r2, #64	@ 0x40
 8006d5e:	9b04      	ldr	r3, [sp, #16]
 8006d60:	eba0 000a 	sub.w	r0, r0, sl
 8006d64:	4082      	lsls	r2, r0
 8006d66:	4313      	orrs	r3, r2
 8006d68:	3401      	adds	r4, #1
 8006d6a:	9304      	str	r3, [sp, #16]
 8006d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d70:	2206      	movs	r2, #6
 8006d72:	4825      	ldr	r0, [pc, #148]	@ (8006e08 <_svfiprintf_r+0x1ec>)
 8006d74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d78:	f7fe fcb9 	bl	80056ee <memchr>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d036      	beq.n	8006dee <_svfiprintf_r+0x1d2>
 8006d80:	4b22      	ldr	r3, [pc, #136]	@ (8006e0c <_svfiprintf_r+0x1f0>)
 8006d82:	bb1b      	cbnz	r3, 8006dcc <_svfiprintf_r+0x1b0>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	3307      	adds	r3, #7
 8006d88:	f023 0307 	bic.w	r3, r3, #7
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	9303      	str	r3, [sp, #12]
 8006d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d92:	4433      	add	r3, r6
 8006d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d96:	e76a      	b.n	8006c6e <_svfiprintf_r+0x52>
 8006d98:	460c      	mov	r4, r1
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006da0:	e7a8      	b.n	8006cf4 <_svfiprintf_r+0xd8>
 8006da2:	2300      	movs	r3, #0
 8006da4:	f04f 0c0a 	mov.w	ip, #10
 8006da8:	4619      	mov	r1, r3
 8006daa:	3401      	adds	r4, #1
 8006dac:	9305      	str	r3, [sp, #20]
 8006dae:	4620      	mov	r0, r4
 8006db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006db4:	3a30      	subs	r2, #48	@ 0x30
 8006db6:	2a09      	cmp	r2, #9
 8006db8:	d903      	bls.n	8006dc2 <_svfiprintf_r+0x1a6>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0c6      	beq.n	8006d4c <_svfiprintf_r+0x130>
 8006dbe:	9105      	str	r1, [sp, #20]
 8006dc0:	e7c4      	b.n	8006d4c <_svfiprintf_r+0x130>
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dca:	e7f0      	b.n	8006dae <_svfiprintf_r+0x192>
 8006dcc:	ab03      	add	r3, sp, #12
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e10 <_svfiprintf_r+0x1f4>)
 8006dd6:	a904      	add	r1, sp, #16
 8006dd8:	f7fd ff02 	bl	8004be0 <_printf_float>
 8006ddc:	1c42      	adds	r2, r0, #1
 8006dde:	4606      	mov	r6, r0
 8006de0:	d1d6      	bne.n	8006d90 <_svfiprintf_r+0x174>
 8006de2:	89ab      	ldrh	r3, [r5, #12]
 8006de4:	065b      	lsls	r3, r3, #25
 8006de6:	f53f af2d 	bmi.w	8006c44 <_svfiprintf_r+0x28>
 8006dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dec:	e72c      	b.n	8006c48 <_svfiprintf_r+0x2c>
 8006dee:	ab03      	add	r3, sp, #12
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	462a      	mov	r2, r5
 8006df4:	4638      	mov	r0, r7
 8006df6:	4b06      	ldr	r3, [pc, #24]	@ (8006e10 <_svfiprintf_r+0x1f4>)
 8006df8:	a904      	add	r1, sp, #16
 8006dfa:	f7fe f98f 	bl	800511c <_printf_i>
 8006dfe:	e7ed      	b.n	8006ddc <_svfiprintf_r+0x1c0>
 8006e00:	08007f16 	.word	0x08007f16
 8006e04:	08007f1c 	.word	0x08007f1c
 8006e08:	08007f20 	.word	0x08007f20
 8006e0c:	08004be1 	.word	0x08004be1
 8006e10:	08006b65 	.word	0x08006b65

08006e14 <__sflush_r>:
 8006e14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	0716      	lsls	r6, r2, #28
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	d454      	bmi.n	8006ecc <__sflush_r+0xb8>
 8006e22:	684b      	ldr	r3, [r1, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	dc02      	bgt.n	8006e2e <__sflush_r+0x1a>
 8006e28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	dd48      	ble.n	8006ec0 <__sflush_r+0xac>
 8006e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e30:	2e00      	cmp	r6, #0
 8006e32:	d045      	beq.n	8006ec0 <__sflush_r+0xac>
 8006e34:	2300      	movs	r3, #0
 8006e36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e3a:	682f      	ldr	r7, [r5, #0]
 8006e3c:	6a21      	ldr	r1, [r4, #32]
 8006e3e:	602b      	str	r3, [r5, #0]
 8006e40:	d030      	beq.n	8006ea4 <__sflush_r+0x90>
 8006e42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	0759      	lsls	r1, r3, #29
 8006e48:	d505      	bpl.n	8006e56 <__sflush_r+0x42>
 8006e4a:	6863      	ldr	r3, [r4, #4]
 8006e4c:	1ad2      	subs	r2, r2, r3
 8006e4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e50:	b10b      	cbz	r3, 8006e56 <__sflush_r+0x42>
 8006e52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	4628      	mov	r0, r5
 8006e5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e5c:	6a21      	ldr	r1, [r4, #32]
 8006e5e:	47b0      	blx	r6
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	d106      	bne.n	8006e74 <__sflush_r+0x60>
 8006e66:	6829      	ldr	r1, [r5, #0]
 8006e68:	291d      	cmp	r1, #29
 8006e6a:	d82b      	bhi.n	8006ec4 <__sflush_r+0xb0>
 8006e6c:	4a28      	ldr	r2, [pc, #160]	@ (8006f10 <__sflush_r+0xfc>)
 8006e6e:	40ca      	lsrs	r2, r1
 8006e70:	07d6      	lsls	r6, r2, #31
 8006e72:	d527      	bpl.n	8006ec4 <__sflush_r+0xb0>
 8006e74:	2200      	movs	r2, #0
 8006e76:	6062      	str	r2, [r4, #4]
 8006e78:	6922      	ldr	r2, [r4, #16]
 8006e7a:	04d9      	lsls	r1, r3, #19
 8006e7c:	6022      	str	r2, [r4, #0]
 8006e7e:	d504      	bpl.n	8006e8a <__sflush_r+0x76>
 8006e80:	1c42      	adds	r2, r0, #1
 8006e82:	d101      	bne.n	8006e88 <__sflush_r+0x74>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b903      	cbnz	r3, 8006e8a <__sflush_r+0x76>
 8006e88:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e8c:	602f      	str	r7, [r5, #0]
 8006e8e:	b1b9      	cbz	r1, 8006ec0 <__sflush_r+0xac>
 8006e90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e94:	4299      	cmp	r1, r3
 8006e96:	d002      	beq.n	8006e9e <__sflush_r+0x8a>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f7ff faa1 	bl	80063e0 <_free_r>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ea2:	e00d      	b.n	8006ec0 <__sflush_r+0xac>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b0      	blx	r6
 8006eaa:	4602      	mov	r2, r0
 8006eac:	1c50      	adds	r0, r2, #1
 8006eae:	d1c9      	bne.n	8006e44 <__sflush_r+0x30>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0c6      	beq.n	8006e44 <__sflush_r+0x30>
 8006eb6:	2b1d      	cmp	r3, #29
 8006eb8:	d001      	beq.n	8006ebe <__sflush_r+0xaa>
 8006eba:	2b16      	cmp	r3, #22
 8006ebc:	d11d      	bne.n	8006efa <__sflush_r+0xe6>
 8006ebe:	602f      	str	r7, [r5, #0]
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e021      	b.n	8006f08 <__sflush_r+0xf4>
 8006ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec8:	b21b      	sxth	r3, r3
 8006eca:	e01a      	b.n	8006f02 <__sflush_r+0xee>
 8006ecc:	690f      	ldr	r7, [r1, #16]
 8006ece:	2f00      	cmp	r7, #0
 8006ed0:	d0f6      	beq.n	8006ec0 <__sflush_r+0xac>
 8006ed2:	0793      	lsls	r3, r2, #30
 8006ed4:	bf18      	it	ne
 8006ed6:	2300      	movne	r3, #0
 8006ed8:	680e      	ldr	r6, [r1, #0]
 8006eda:	bf08      	it	eq
 8006edc:	694b      	ldreq	r3, [r1, #20]
 8006ede:	1bf6      	subs	r6, r6, r7
 8006ee0:	600f      	str	r7, [r1, #0]
 8006ee2:	608b      	str	r3, [r1, #8]
 8006ee4:	2e00      	cmp	r6, #0
 8006ee6:	ddeb      	ble.n	8006ec0 <__sflush_r+0xac>
 8006ee8:	4633      	mov	r3, r6
 8006eea:	463a      	mov	r2, r7
 8006eec:	4628      	mov	r0, r5
 8006eee:	6a21      	ldr	r1, [r4, #32]
 8006ef0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ef4:	47e0      	blx	ip
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	dc07      	bgt.n	8006f0a <__sflush_r+0xf6>
 8006efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f0a:	4407      	add	r7, r0
 8006f0c:	1a36      	subs	r6, r6, r0
 8006f0e:	e7e9      	b.n	8006ee4 <__sflush_r+0xd0>
 8006f10:	20400001 	.word	0x20400001

08006f14 <_fflush_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	690b      	ldr	r3, [r1, #16]
 8006f18:	4605      	mov	r5, r0
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	b913      	cbnz	r3, 8006f24 <_fflush_r+0x10>
 8006f1e:	2500      	movs	r5, #0
 8006f20:	4628      	mov	r0, r5
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	b118      	cbz	r0, 8006f2e <_fflush_r+0x1a>
 8006f26:	6a03      	ldr	r3, [r0, #32]
 8006f28:	b90b      	cbnz	r3, 8006f2e <_fflush_r+0x1a>
 8006f2a:	f7fe faa1 	bl	8005470 <__sinit>
 8006f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f3      	beq.n	8006f1e <_fflush_r+0xa>
 8006f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f38:	07d0      	lsls	r0, r2, #31
 8006f3a:	d404      	bmi.n	8006f46 <_fflush_r+0x32>
 8006f3c:	0599      	lsls	r1, r3, #22
 8006f3e:	d402      	bmi.n	8006f46 <_fflush_r+0x32>
 8006f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f42:	f7fe fbd2 	bl	80056ea <__retarget_lock_acquire_recursive>
 8006f46:	4628      	mov	r0, r5
 8006f48:	4621      	mov	r1, r4
 8006f4a:	f7ff ff63 	bl	8006e14 <__sflush_r>
 8006f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f50:	4605      	mov	r5, r0
 8006f52:	07da      	lsls	r2, r3, #31
 8006f54:	d4e4      	bmi.n	8006f20 <_fflush_r+0xc>
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	059b      	lsls	r3, r3, #22
 8006f5a:	d4e1      	bmi.n	8006f20 <_fflush_r+0xc>
 8006f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f5e:	f7fe fbc5 	bl	80056ec <__retarget_lock_release_recursive>
 8006f62:	e7dd      	b.n	8006f20 <_fflush_r+0xc>

08006f64 <memmove>:
 8006f64:	4288      	cmp	r0, r1
 8006f66:	b510      	push	{r4, lr}
 8006f68:	eb01 0402 	add.w	r4, r1, r2
 8006f6c:	d902      	bls.n	8006f74 <memmove+0x10>
 8006f6e:	4284      	cmp	r4, r0
 8006f70:	4623      	mov	r3, r4
 8006f72:	d807      	bhi.n	8006f84 <memmove+0x20>
 8006f74:	1e43      	subs	r3, r0, #1
 8006f76:	42a1      	cmp	r1, r4
 8006f78:	d008      	beq.n	8006f8c <memmove+0x28>
 8006f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f82:	e7f8      	b.n	8006f76 <memmove+0x12>
 8006f84:	4601      	mov	r1, r0
 8006f86:	4402      	add	r2, r0
 8006f88:	428a      	cmp	r2, r1
 8006f8a:	d100      	bne.n	8006f8e <memmove+0x2a>
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f96:	e7f7      	b.n	8006f88 <memmove+0x24>

08006f98 <__assert_func>:
 8006f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4b09      	ldr	r3, [pc, #36]	@ (8006fc4 <__assert_func+0x2c>)
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68d8      	ldr	r0, [r3, #12]
 8006fa6:	b14c      	cbz	r4, 8006fbc <__assert_func+0x24>
 8006fa8:	4b07      	ldr	r3, [pc, #28]	@ (8006fc8 <__assert_func+0x30>)
 8006faa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fae:	9100      	str	r1, [sp, #0]
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	4906      	ldr	r1, [pc, #24]	@ (8006fcc <__assert_func+0x34>)
 8006fb4:	f000 f870 	bl	8007098 <fiprintf>
 8006fb8:	f000 f880 	bl	80070bc <abort>
 8006fbc:	4b04      	ldr	r3, [pc, #16]	@ (8006fd0 <__assert_func+0x38>)
 8006fbe:	461c      	mov	r4, r3
 8006fc0:	e7f3      	b.n	8006faa <__assert_func+0x12>
 8006fc2:	bf00      	nop
 8006fc4:	20000018 	.word	0x20000018
 8006fc8:	08007f31 	.word	0x08007f31
 8006fcc:	08007f3e 	.word	0x08007f3e
 8006fd0:	08007f6c 	.word	0x08007f6c

08006fd4 <_calloc_r>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	fba1 5402 	umull	r5, r4, r1, r2
 8006fda:	b934      	cbnz	r4, 8006fea <_calloc_r+0x16>
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7fd fcd5 	bl	800498c <_malloc_r>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	b928      	cbnz	r0, 8006ff2 <_calloc_r+0x1e>
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	bd70      	pop	{r4, r5, r6, pc}
 8006fea:	220c      	movs	r2, #12
 8006fec:	2600      	movs	r6, #0
 8006fee:	6002      	str	r2, [r0, #0]
 8006ff0:	e7f9      	b.n	8006fe6 <_calloc_r+0x12>
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	f7fe faea 	bl	80055ce <memset>
 8006ffa:	e7f4      	b.n	8006fe6 <_calloc_r+0x12>

08006ffc <__ascii_mbtowc>:
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	b901      	cbnz	r1, 8007002 <__ascii_mbtowc+0x6>
 8007000:	a901      	add	r1, sp, #4
 8007002:	b142      	cbz	r2, 8007016 <__ascii_mbtowc+0x1a>
 8007004:	b14b      	cbz	r3, 800701a <__ascii_mbtowc+0x1e>
 8007006:	7813      	ldrb	r3, [r2, #0]
 8007008:	600b      	str	r3, [r1, #0]
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	1e10      	subs	r0, r2, #0
 800700e:	bf18      	it	ne
 8007010:	2001      	movne	r0, #1
 8007012:	b002      	add	sp, #8
 8007014:	4770      	bx	lr
 8007016:	4610      	mov	r0, r2
 8007018:	e7fb      	b.n	8007012 <__ascii_mbtowc+0x16>
 800701a:	f06f 0001 	mvn.w	r0, #1
 800701e:	e7f8      	b.n	8007012 <__ascii_mbtowc+0x16>

08007020 <_realloc_r>:
 8007020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007024:	4607      	mov	r7, r0
 8007026:	4614      	mov	r4, r2
 8007028:	460d      	mov	r5, r1
 800702a:	b921      	cbnz	r1, 8007036 <_realloc_r+0x16>
 800702c:	4611      	mov	r1, r2
 800702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	f7fd bcab 	b.w	800498c <_malloc_r>
 8007036:	b92a      	cbnz	r2, 8007044 <_realloc_r+0x24>
 8007038:	f7ff f9d2 	bl	80063e0 <_free_r>
 800703c:	4625      	mov	r5, r4
 800703e:	4628      	mov	r0, r5
 8007040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007044:	f000 f841 	bl	80070ca <_malloc_usable_size_r>
 8007048:	4284      	cmp	r4, r0
 800704a:	4606      	mov	r6, r0
 800704c:	d802      	bhi.n	8007054 <_realloc_r+0x34>
 800704e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007052:	d8f4      	bhi.n	800703e <_realloc_r+0x1e>
 8007054:	4621      	mov	r1, r4
 8007056:	4638      	mov	r0, r7
 8007058:	f7fd fc98 	bl	800498c <_malloc_r>
 800705c:	4680      	mov	r8, r0
 800705e:	b908      	cbnz	r0, 8007064 <_realloc_r+0x44>
 8007060:	4645      	mov	r5, r8
 8007062:	e7ec      	b.n	800703e <_realloc_r+0x1e>
 8007064:	42b4      	cmp	r4, r6
 8007066:	4622      	mov	r2, r4
 8007068:	4629      	mov	r1, r5
 800706a:	bf28      	it	cs
 800706c:	4632      	movcs	r2, r6
 800706e:	f7fe fb4c 	bl	800570a <memcpy>
 8007072:	4629      	mov	r1, r5
 8007074:	4638      	mov	r0, r7
 8007076:	f7ff f9b3 	bl	80063e0 <_free_r>
 800707a:	e7f1      	b.n	8007060 <_realloc_r+0x40>

0800707c <__ascii_wctomb>:
 800707c:	4603      	mov	r3, r0
 800707e:	4608      	mov	r0, r1
 8007080:	b141      	cbz	r1, 8007094 <__ascii_wctomb+0x18>
 8007082:	2aff      	cmp	r2, #255	@ 0xff
 8007084:	d904      	bls.n	8007090 <__ascii_wctomb+0x14>
 8007086:	228a      	movs	r2, #138	@ 0x8a
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	4770      	bx	lr
 8007090:	2001      	movs	r0, #1
 8007092:	700a      	strb	r2, [r1, #0]
 8007094:	4770      	bx	lr
	...

08007098 <fiprintf>:
 8007098:	b40e      	push	{r1, r2, r3}
 800709a:	b503      	push	{r0, r1, lr}
 800709c:	4601      	mov	r1, r0
 800709e:	ab03      	add	r3, sp, #12
 80070a0:	4805      	ldr	r0, [pc, #20]	@ (80070b8 <fiprintf+0x20>)
 80070a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a6:	6800      	ldr	r0, [r0, #0]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	f000 f83d 	bl	8007128 <_vfiprintf_r>
 80070ae:	b002      	add	sp, #8
 80070b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b4:	b003      	add	sp, #12
 80070b6:	4770      	bx	lr
 80070b8:	20000018 	.word	0x20000018

080070bc <abort>:
 80070bc:	2006      	movs	r0, #6
 80070be:	b508      	push	{r3, lr}
 80070c0:	f000 fa06 	bl	80074d0 <raise>
 80070c4:	2001      	movs	r0, #1
 80070c6:	f7fd fb58 	bl	800477a <_exit>

080070ca <_malloc_usable_size_r>:
 80070ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ce:	1f18      	subs	r0, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bfbc      	itt	lt
 80070d4:	580b      	ldrlt	r3, [r1, r0]
 80070d6:	18c0      	addlt	r0, r0, r3
 80070d8:	4770      	bx	lr

080070da <__sfputc_r>:
 80070da:	6893      	ldr	r3, [r2, #8]
 80070dc:	b410      	push	{r4}
 80070de:	3b01      	subs	r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	6093      	str	r3, [r2, #8]
 80070e4:	da07      	bge.n	80070f6 <__sfputc_r+0x1c>
 80070e6:	6994      	ldr	r4, [r2, #24]
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	db01      	blt.n	80070f0 <__sfputc_r+0x16>
 80070ec:	290a      	cmp	r1, #10
 80070ee:	d102      	bne.n	80070f6 <__sfputc_r+0x1c>
 80070f0:	bc10      	pop	{r4}
 80070f2:	f000 b931 	b.w	8007358 <__swbuf_r>
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	1c58      	adds	r0, r3, #1
 80070fa:	6010      	str	r0, [r2, #0]
 80070fc:	7019      	strb	r1, [r3, #0]
 80070fe:	4608      	mov	r0, r1
 8007100:	bc10      	pop	{r4}
 8007102:	4770      	bx	lr

08007104 <__sfputs_r>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	4606      	mov	r6, r0
 8007108:	460f      	mov	r7, r1
 800710a:	4614      	mov	r4, r2
 800710c:	18d5      	adds	r5, r2, r3
 800710e:	42ac      	cmp	r4, r5
 8007110:	d101      	bne.n	8007116 <__sfputs_r+0x12>
 8007112:	2000      	movs	r0, #0
 8007114:	e007      	b.n	8007126 <__sfputs_r+0x22>
 8007116:	463a      	mov	r2, r7
 8007118:	4630      	mov	r0, r6
 800711a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711e:	f7ff ffdc 	bl	80070da <__sfputc_r>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d1f3      	bne.n	800710e <__sfputs_r+0xa>
 8007126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007128 <_vfiprintf_r>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	460d      	mov	r5, r1
 800712e:	4614      	mov	r4, r2
 8007130:	4698      	mov	r8, r3
 8007132:	4606      	mov	r6, r0
 8007134:	b09d      	sub	sp, #116	@ 0x74
 8007136:	b118      	cbz	r0, 8007140 <_vfiprintf_r+0x18>
 8007138:	6a03      	ldr	r3, [r0, #32]
 800713a:	b90b      	cbnz	r3, 8007140 <_vfiprintf_r+0x18>
 800713c:	f7fe f998 	bl	8005470 <__sinit>
 8007140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007142:	07d9      	lsls	r1, r3, #31
 8007144:	d405      	bmi.n	8007152 <_vfiprintf_r+0x2a>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	059a      	lsls	r2, r3, #22
 800714a:	d402      	bmi.n	8007152 <_vfiprintf_r+0x2a>
 800714c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800714e:	f7fe facc 	bl	80056ea <__retarget_lock_acquire_recursive>
 8007152:	89ab      	ldrh	r3, [r5, #12]
 8007154:	071b      	lsls	r3, r3, #28
 8007156:	d501      	bpl.n	800715c <_vfiprintf_r+0x34>
 8007158:	692b      	ldr	r3, [r5, #16]
 800715a:	b99b      	cbnz	r3, 8007184 <_vfiprintf_r+0x5c>
 800715c:	4629      	mov	r1, r5
 800715e:	4630      	mov	r0, r6
 8007160:	f000 f938 	bl	80073d4 <__swsetup_r>
 8007164:	b170      	cbz	r0, 8007184 <_vfiprintf_r+0x5c>
 8007166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007168:	07dc      	lsls	r4, r3, #31
 800716a:	d504      	bpl.n	8007176 <_vfiprintf_r+0x4e>
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	b01d      	add	sp, #116	@ 0x74
 8007172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	89ab      	ldrh	r3, [r5, #12]
 8007178:	0598      	lsls	r0, r3, #22
 800717a:	d4f7      	bmi.n	800716c <_vfiprintf_r+0x44>
 800717c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800717e:	f7fe fab5 	bl	80056ec <__retarget_lock_release_recursive>
 8007182:	e7f3      	b.n	800716c <_vfiprintf_r+0x44>
 8007184:	2300      	movs	r3, #0
 8007186:	9309      	str	r3, [sp, #36]	@ 0x24
 8007188:	2320      	movs	r3, #32
 800718a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800718e:	2330      	movs	r3, #48	@ 0x30
 8007190:	f04f 0901 	mov.w	r9, #1
 8007194:	f8cd 800c 	str.w	r8, [sp, #12]
 8007198:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007344 <_vfiprintf_r+0x21c>
 800719c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071a0:	4623      	mov	r3, r4
 80071a2:	469a      	mov	sl, r3
 80071a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a8:	b10a      	cbz	r2, 80071ae <_vfiprintf_r+0x86>
 80071aa:	2a25      	cmp	r2, #37	@ 0x25
 80071ac:	d1f9      	bne.n	80071a2 <_vfiprintf_r+0x7a>
 80071ae:	ebba 0b04 	subs.w	fp, sl, r4
 80071b2:	d00b      	beq.n	80071cc <_vfiprintf_r+0xa4>
 80071b4:	465b      	mov	r3, fp
 80071b6:	4622      	mov	r2, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff ffa2 	bl	8007104 <__sfputs_r>
 80071c0:	3001      	adds	r0, #1
 80071c2:	f000 80a7 	beq.w	8007314 <_vfiprintf_r+0x1ec>
 80071c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071c8:	445a      	add	r2, fp
 80071ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80071cc:	f89a 3000 	ldrb.w	r3, [sl]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 809f 	beq.w	8007314 <_vfiprintf_r+0x1ec>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e0:	f10a 0a01 	add.w	sl, sl, #1
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80071ee:	4654      	mov	r4, sl
 80071f0:	2205      	movs	r2, #5
 80071f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f6:	4853      	ldr	r0, [pc, #332]	@ (8007344 <_vfiprintf_r+0x21c>)
 80071f8:	f7fe fa79 	bl	80056ee <memchr>
 80071fc:	9a04      	ldr	r2, [sp, #16]
 80071fe:	b9d8      	cbnz	r0, 8007238 <_vfiprintf_r+0x110>
 8007200:	06d1      	lsls	r1, r2, #27
 8007202:	bf44      	itt	mi
 8007204:	2320      	movmi	r3, #32
 8007206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800720a:	0713      	lsls	r3, r2, #28
 800720c:	bf44      	itt	mi
 800720e:	232b      	movmi	r3, #43	@ 0x2b
 8007210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007214:	f89a 3000 	ldrb.w	r3, [sl]
 8007218:	2b2a      	cmp	r3, #42	@ 0x2a
 800721a:	d015      	beq.n	8007248 <_vfiprintf_r+0x120>
 800721c:	4654      	mov	r4, sl
 800721e:	2000      	movs	r0, #0
 8007220:	f04f 0c0a 	mov.w	ip, #10
 8007224:	9a07      	ldr	r2, [sp, #28]
 8007226:	4621      	mov	r1, r4
 8007228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722c:	3b30      	subs	r3, #48	@ 0x30
 800722e:	2b09      	cmp	r3, #9
 8007230:	d94b      	bls.n	80072ca <_vfiprintf_r+0x1a2>
 8007232:	b1b0      	cbz	r0, 8007262 <_vfiprintf_r+0x13a>
 8007234:	9207      	str	r2, [sp, #28]
 8007236:	e014      	b.n	8007262 <_vfiprintf_r+0x13a>
 8007238:	eba0 0308 	sub.w	r3, r0, r8
 800723c:	fa09 f303 	lsl.w	r3, r9, r3
 8007240:	4313      	orrs	r3, r2
 8007242:	46a2      	mov	sl, r4
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	e7d2      	b.n	80071ee <_vfiprintf_r+0xc6>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	1d19      	adds	r1, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	9103      	str	r1, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfbb      	ittet	lt
 8007254:	425b      	neglt	r3, r3
 8007256:	f042 0202 	orrlt.w	r2, r2, #2
 800725a:	9307      	strge	r3, [sp, #28]
 800725c:	9307      	strlt	r3, [sp, #28]
 800725e:	bfb8      	it	lt
 8007260:	9204      	strlt	r2, [sp, #16]
 8007262:	7823      	ldrb	r3, [r4, #0]
 8007264:	2b2e      	cmp	r3, #46	@ 0x2e
 8007266:	d10a      	bne.n	800727e <_vfiprintf_r+0x156>
 8007268:	7863      	ldrb	r3, [r4, #1]
 800726a:	2b2a      	cmp	r3, #42	@ 0x2a
 800726c:	d132      	bne.n	80072d4 <_vfiprintf_r+0x1ac>
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	3402      	adds	r4, #2
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	9203      	str	r2, [sp, #12]
 8007278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007348 <_vfiprintf_r+0x220>
 8007282:	2203      	movs	r2, #3
 8007284:	4650      	mov	r0, sl
 8007286:	7821      	ldrb	r1, [r4, #0]
 8007288:	f7fe fa31 	bl	80056ee <memchr>
 800728c:	b138      	cbz	r0, 800729e <_vfiprintf_r+0x176>
 800728e:	2240      	movs	r2, #64	@ 0x40
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	eba0 000a 	sub.w	r0, r0, sl
 8007296:	4082      	lsls	r2, r0
 8007298:	4313      	orrs	r3, r2
 800729a:	3401      	adds	r4, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a2:	2206      	movs	r2, #6
 80072a4:	4829      	ldr	r0, [pc, #164]	@ (800734c <_vfiprintf_r+0x224>)
 80072a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072aa:	f7fe fa20 	bl	80056ee <memchr>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d03f      	beq.n	8007332 <_vfiprintf_r+0x20a>
 80072b2:	4b27      	ldr	r3, [pc, #156]	@ (8007350 <_vfiprintf_r+0x228>)
 80072b4:	bb1b      	cbnz	r3, 80072fe <_vfiprintf_r+0x1d6>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	3307      	adds	r3, #7
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	3308      	adds	r3, #8
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c4:	443b      	add	r3, r7
 80072c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c8:	e76a      	b.n	80071a0 <_vfiprintf_r+0x78>
 80072ca:	460c      	mov	r4, r1
 80072cc:	2001      	movs	r0, #1
 80072ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d2:	e7a8      	b.n	8007226 <_vfiprintf_r+0xfe>
 80072d4:	2300      	movs	r3, #0
 80072d6:	f04f 0c0a 	mov.w	ip, #10
 80072da:	4619      	mov	r1, r3
 80072dc:	3401      	adds	r4, #1
 80072de:	9305      	str	r3, [sp, #20]
 80072e0:	4620      	mov	r0, r4
 80072e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e6:	3a30      	subs	r2, #48	@ 0x30
 80072e8:	2a09      	cmp	r2, #9
 80072ea:	d903      	bls.n	80072f4 <_vfiprintf_r+0x1cc>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0c6      	beq.n	800727e <_vfiprintf_r+0x156>
 80072f0:	9105      	str	r1, [sp, #20]
 80072f2:	e7c4      	b.n	800727e <_vfiprintf_r+0x156>
 80072f4:	4604      	mov	r4, r0
 80072f6:	2301      	movs	r3, #1
 80072f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fc:	e7f0      	b.n	80072e0 <_vfiprintf_r+0x1b8>
 80072fe:	ab03      	add	r3, sp, #12
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	462a      	mov	r2, r5
 8007304:	4630      	mov	r0, r6
 8007306:	4b13      	ldr	r3, [pc, #76]	@ (8007354 <_vfiprintf_r+0x22c>)
 8007308:	a904      	add	r1, sp, #16
 800730a:	f7fd fc69 	bl	8004be0 <_printf_float>
 800730e:	4607      	mov	r7, r0
 8007310:	1c78      	adds	r0, r7, #1
 8007312:	d1d6      	bne.n	80072c2 <_vfiprintf_r+0x19a>
 8007314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007316:	07d9      	lsls	r1, r3, #31
 8007318:	d405      	bmi.n	8007326 <_vfiprintf_r+0x1fe>
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	059a      	lsls	r2, r3, #22
 800731e:	d402      	bmi.n	8007326 <_vfiprintf_r+0x1fe>
 8007320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007322:	f7fe f9e3 	bl	80056ec <__retarget_lock_release_recursive>
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	065b      	lsls	r3, r3, #25
 800732a:	f53f af1f 	bmi.w	800716c <_vfiprintf_r+0x44>
 800732e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007330:	e71e      	b.n	8007170 <_vfiprintf_r+0x48>
 8007332:	ab03      	add	r3, sp, #12
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	462a      	mov	r2, r5
 8007338:	4630      	mov	r0, r6
 800733a:	4b06      	ldr	r3, [pc, #24]	@ (8007354 <_vfiprintf_r+0x22c>)
 800733c:	a904      	add	r1, sp, #16
 800733e:	f7fd feed 	bl	800511c <_printf_i>
 8007342:	e7e4      	b.n	800730e <_vfiprintf_r+0x1e6>
 8007344:	08007f16 	.word	0x08007f16
 8007348:	08007f1c 	.word	0x08007f1c
 800734c:	08007f20 	.word	0x08007f20
 8007350:	08004be1 	.word	0x08004be1
 8007354:	08007105 	.word	0x08007105

08007358 <__swbuf_r>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	460e      	mov	r6, r1
 800735c:	4614      	mov	r4, r2
 800735e:	4605      	mov	r5, r0
 8007360:	b118      	cbz	r0, 800736a <__swbuf_r+0x12>
 8007362:	6a03      	ldr	r3, [r0, #32]
 8007364:	b90b      	cbnz	r3, 800736a <__swbuf_r+0x12>
 8007366:	f7fe f883 	bl	8005470 <__sinit>
 800736a:	69a3      	ldr	r3, [r4, #24]
 800736c:	60a3      	str	r3, [r4, #8]
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	071a      	lsls	r2, r3, #28
 8007372:	d501      	bpl.n	8007378 <__swbuf_r+0x20>
 8007374:	6923      	ldr	r3, [r4, #16]
 8007376:	b943      	cbnz	r3, 800738a <__swbuf_r+0x32>
 8007378:	4621      	mov	r1, r4
 800737a:	4628      	mov	r0, r5
 800737c:	f000 f82a 	bl	80073d4 <__swsetup_r>
 8007380:	b118      	cbz	r0, 800738a <__swbuf_r+0x32>
 8007382:	f04f 37ff 	mov.w	r7, #4294967295
 8007386:	4638      	mov	r0, r7
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	6922      	ldr	r2, [r4, #16]
 800738e:	b2f6      	uxtb	r6, r6
 8007390:	1a98      	subs	r0, r3, r2
 8007392:	6963      	ldr	r3, [r4, #20]
 8007394:	4637      	mov	r7, r6
 8007396:	4283      	cmp	r3, r0
 8007398:	dc05      	bgt.n	80073a6 <__swbuf_r+0x4e>
 800739a:	4621      	mov	r1, r4
 800739c:	4628      	mov	r0, r5
 800739e:	f7ff fdb9 	bl	8006f14 <_fflush_r>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d1ed      	bne.n	8007382 <__swbuf_r+0x2a>
 80073a6:	68a3      	ldr	r3, [r4, #8]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	60a3      	str	r3, [r4, #8]
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	6022      	str	r2, [r4, #0]
 80073b2:	701e      	strb	r6, [r3, #0]
 80073b4:	6962      	ldr	r2, [r4, #20]
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d004      	beq.n	80073c6 <__swbuf_r+0x6e>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	07db      	lsls	r3, r3, #31
 80073c0:	d5e1      	bpl.n	8007386 <__swbuf_r+0x2e>
 80073c2:	2e0a      	cmp	r6, #10
 80073c4:	d1df      	bne.n	8007386 <__swbuf_r+0x2e>
 80073c6:	4621      	mov	r1, r4
 80073c8:	4628      	mov	r0, r5
 80073ca:	f7ff fda3 	bl	8006f14 <_fflush_r>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d0d9      	beq.n	8007386 <__swbuf_r+0x2e>
 80073d2:	e7d6      	b.n	8007382 <__swbuf_r+0x2a>

080073d4 <__swsetup_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4b29      	ldr	r3, [pc, #164]	@ (800747c <__swsetup_r+0xa8>)
 80073d8:	4605      	mov	r5, r0
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	460c      	mov	r4, r1
 80073de:	b118      	cbz	r0, 80073e8 <__swsetup_r+0x14>
 80073e0:	6a03      	ldr	r3, [r0, #32]
 80073e2:	b90b      	cbnz	r3, 80073e8 <__swsetup_r+0x14>
 80073e4:	f7fe f844 	bl	8005470 <__sinit>
 80073e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ec:	0719      	lsls	r1, r3, #28
 80073ee:	d422      	bmi.n	8007436 <__swsetup_r+0x62>
 80073f0:	06da      	lsls	r2, r3, #27
 80073f2:	d407      	bmi.n	8007404 <__swsetup_r+0x30>
 80073f4:	2209      	movs	r2, #9
 80073f6:	602a      	str	r2, [r5, #0]
 80073f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	81a3      	strh	r3, [r4, #12]
 8007402:	e033      	b.n	800746c <__swsetup_r+0x98>
 8007404:	0758      	lsls	r0, r3, #29
 8007406:	d512      	bpl.n	800742e <__swsetup_r+0x5a>
 8007408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800740a:	b141      	cbz	r1, 800741e <__swsetup_r+0x4a>
 800740c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007410:	4299      	cmp	r1, r3
 8007412:	d002      	beq.n	800741a <__swsetup_r+0x46>
 8007414:	4628      	mov	r0, r5
 8007416:	f7fe ffe3 	bl	80063e0 <_free_r>
 800741a:	2300      	movs	r3, #0
 800741c:	6363      	str	r3, [r4, #52]	@ 0x34
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007424:	81a3      	strh	r3, [r4, #12]
 8007426:	2300      	movs	r3, #0
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	f043 0308 	orr.w	r3, r3, #8
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	b94b      	cbnz	r3, 800744e <__swsetup_r+0x7a>
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007444:	d003      	beq.n	800744e <__swsetup_r+0x7a>
 8007446:	4621      	mov	r1, r4
 8007448:	4628      	mov	r0, r5
 800744a:	f000 f882 	bl	8007552 <__smakebuf_r>
 800744e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007452:	f013 0201 	ands.w	r2, r3, #1
 8007456:	d00a      	beq.n	800746e <__swsetup_r+0x9a>
 8007458:	2200      	movs	r2, #0
 800745a:	60a2      	str	r2, [r4, #8]
 800745c:	6962      	ldr	r2, [r4, #20]
 800745e:	4252      	negs	r2, r2
 8007460:	61a2      	str	r2, [r4, #24]
 8007462:	6922      	ldr	r2, [r4, #16]
 8007464:	b942      	cbnz	r2, 8007478 <__swsetup_r+0xa4>
 8007466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800746a:	d1c5      	bne.n	80073f8 <__swsetup_r+0x24>
 800746c:	bd38      	pop	{r3, r4, r5, pc}
 800746e:	0799      	lsls	r1, r3, #30
 8007470:	bf58      	it	pl
 8007472:	6962      	ldrpl	r2, [r4, #20]
 8007474:	60a2      	str	r2, [r4, #8]
 8007476:	e7f4      	b.n	8007462 <__swsetup_r+0x8e>
 8007478:	2000      	movs	r0, #0
 800747a:	e7f7      	b.n	800746c <__swsetup_r+0x98>
 800747c:	20000018 	.word	0x20000018

08007480 <_raise_r>:
 8007480:	291f      	cmp	r1, #31
 8007482:	b538      	push	{r3, r4, r5, lr}
 8007484:	4605      	mov	r5, r0
 8007486:	460c      	mov	r4, r1
 8007488:	d904      	bls.n	8007494 <_raise_r+0x14>
 800748a:	2316      	movs	r3, #22
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	f04f 30ff 	mov.w	r0, #4294967295
 8007492:	bd38      	pop	{r3, r4, r5, pc}
 8007494:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007496:	b112      	cbz	r2, 800749e <_raise_r+0x1e>
 8007498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800749c:	b94b      	cbnz	r3, 80074b2 <_raise_r+0x32>
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 f830 	bl	8007504 <_getpid_r>
 80074a4:	4622      	mov	r2, r4
 80074a6:	4601      	mov	r1, r0
 80074a8:	4628      	mov	r0, r5
 80074aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ae:	f000 b817 	b.w	80074e0 <_kill_r>
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d00a      	beq.n	80074cc <_raise_r+0x4c>
 80074b6:	1c59      	adds	r1, r3, #1
 80074b8:	d103      	bne.n	80074c2 <_raise_r+0x42>
 80074ba:	2316      	movs	r3, #22
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	2001      	movs	r0, #1
 80074c0:	e7e7      	b.n	8007492 <_raise_r+0x12>
 80074c2:	2100      	movs	r1, #0
 80074c4:	4620      	mov	r0, r4
 80074c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80074ca:	4798      	blx	r3
 80074cc:	2000      	movs	r0, #0
 80074ce:	e7e0      	b.n	8007492 <_raise_r+0x12>

080074d0 <raise>:
 80074d0:	4b02      	ldr	r3, [pc, #8]	@ (80074dc <raise+0xc>)
 80074d2:	4601      	mov	r1, r0
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f7ff bfd3 	b.w	8007480 <_raise_r>
 80074da:	bf00      	nop
 80074dc:	20000018 	.word	0x20000018

080074e0 <_kill_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	2300      	movs	r3, #0
 80074e4:	4d06      	ldr	r5, [pc, #24]	@ (8007500 <_kill_r+0x20>)
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	4611      	mov	r1, r2
 80074ec:	602b      	str	r3, [r5, #0]
 80074ee:	f7fd f934 	bl	800475a <_kill>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	d102      	bne.n	80074fc <_kill_r+0x1c>
 80074f6:	682b      	ldr	r3, [r5, #0]
 80074f8:	b103      	cbz	r3, 80074fc <_kill_r+0x1c>
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	bf00      	nop
 8007500:	200008a0 	.word	0x200008a0

08007504 <_getpid_r>:
 8007504:	f7fd b922 	b.w	800474c <_getpid>

08007508 <__swhatbuf_r>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	460c      	mov	r4, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	4615      	mov	r5, r2
 8007512:	2900      	cmp	r1, #0
 8007514:	461e      	mov	r6, r3
 8007516:	b096      	sub	sp, #88	@ 0x58
 8007518:	da0c      	bge.n	8007534 <__swhatbuf_r+0x2c>
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	2100      	movs	r1, #0
 800751e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007522:	bf14      	ite	ne
 8007524:	2340      	movne	r3, #64	@ 0x40
 8007526:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800752a:	2000      	movs	r0, #0
 800752c:	6031      	str	r1, [r6, #0]
 800752e:	602b      	str	r3, [r5, #0]
 8007530:	b016      	add	sp, #88	@ 0x58
 8007532:	bd70      	pop	{r4, r5, r6, pc}
 8007534:	466a      	mov	r2, sp
 8007536:	f000 f849 	bl	80075cc <_fstat_r>
 800753a:	2800      	cmp	r0, #0
 800753c:	dbed      	blt.n	800751a <__swhatbuf_r+0x12>
 800753e:	9901      	ldr	r1, [sp, #4]
 8007540:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007544:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007548:	4259      	negs	r1, r3
 800754a:	4159      	adcs	r1, r3
 800754c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007550:	e7eb      	b.n	800752a <__swhatbuf_r+0x22>

08007552 <__smakebuf_r>:
 8007552:	898b      	ldrh	r3, [r1, #12]
 8007554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007556:	079d      	lsls	r5, r3, #30
 8007558:	4606      	mov	r6, r0
 800755a:	460c      	mov	r4, r1
 800755c:	d507      	bpl.n	800756e <__smakebuf_r+0x1c>
 800755e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	2301      	movs	r3, #1
 8007568:	6163      	str	r3, [r4, #20]
 800756a:	b003      	add	sp, #12
 800756c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800756e:	466a      	mov	r2, sp
 8007570:	ab01      	add	r3, sp, #4
 8007572:	f7ff ffc9 	bl	8007508 <__swhatbuf_r>
 8007576:	9f00      	ldr	r7, [sp, #0]
 8007578:	4605      	mov	r5, r0
 800757a:	4639      	mov	r1, r7
 800757c:	4630      	mov	r0, r6
 800757e:	f7fd fa05 	bl	800498c <_malloc_r>
 8007582:	b948      	cbnz	r0, 8007598 <__smakebuf_r+0x46>
 8007584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007588:	059a      	lsls	r2, r3, #22
 800758a:	d4ee      	bmi.n	800756a <__smakebuf_r+0x18>
 800758c:	f023 0303 	bic.w	r3, r3, #3
 8007590:	f043 0302 	orr.w	r3, r3, #2
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	e7e2      	b.n	800755e <__smakebuf_r+0xc>
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800759e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075a2:	81a3      	strh	r3, [r4, #12]
 80075a4:	9b01      	ldr	r3, [sp, #4]
 80075a6:	6020      	str	r0, [r4, #0]
 80075a8:	b15b      	cbz	r3, 80075c2 <__smakebuf_r+0x70>
 80075aa:	4630      	mov	r0, r6
 80075ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075b0:	f000 f81e 	bl	80075f0 <_isatty_r>
 80075b4:	b128      	cbz	r0, 80075c2 <__smakebuf_r+0x70>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f023 0303 	bic.w	r3, r3, #3
 80075bc:	f043 0301 	orr.w	r3, r3, #1
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	431d      	orrs	r5, r3
 80075c6:	81a5      	strh	r5, [r4, #12]
 80075c8:	e7cf      	b.n	800756a <__smakebuf_r+0x18>
	...

080075cc <_fstat_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	2300      	movs	r3, #0
 80075d0:	4d06      	ldr	r5, [pc, #24]	@ (80075ec <_fstat_r+0x20>)
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	602b      	str	r3, [r5, #0]
 80075da:	f7fd f91d 	bl	8004818 <_fstat>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d102      	bne.n	80075e8 <_fstat_r+0x1c>
 80075e2:	682b      	ldr	r3, [r5, #0]
 80075e4:	b103      	cbz	r3, 80075e8 <_fstat_r+0x1c>
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	bd38      	pop	{r3, r4, r5, pc}
 80075ea:	bf00      	nop
 80075ec:	200008a0 	.word	0x200008a0

080075f0 <_isatty_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	2300      	movs	r3, #0
 80075f4:	4d05      	ldr	r5, [pc, #20]	@ (800760c <_isatty_r+0x1c>)
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7fd f91b 	bl	8004836 <_isatty>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_isatty_r+0x1a>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_isatty_r+0x1a>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	200008a0 	.word	0x200008a0

08007610 <_init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr

0800761c <_fini>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr
