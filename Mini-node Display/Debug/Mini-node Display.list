
Mini-node Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002afc  080071f8  080071f8  000081f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cf4  08009cf4  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009cf4  08009cf4  0000acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cfc  08009cfc  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cfc  08009cfc  0000acfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d00  08009d00  0000ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009d04  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  200001d8  08009edc  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  08009edc  0000b904  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b7a  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3a  00000000  00000000  00013d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  000159b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ff  00000000  00000000  00016308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fcb  00000000  00000000  00016a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be22  00000000  00000000  0002f9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a5c  00000000  00000000  0003b7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000380c  00000000  00000000  000c1294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c4aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080071e0 	.word	0x080071e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080071e0 	.word	0x080071e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_Init+0x28>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_Init+0x28>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f92b 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	200f      	movs	r0, #15
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f003 f89c 	bl	8004208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40022000 	.word	0x40022000

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f935 	bl	800136a <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f90b 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000000c 	.word	0x2000000c
 8001134:	20000004 	.word	0x20000004
 8001138:	20000000 	.word	0x20000000

0800113c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <HAL_IncTick+0x1c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_IncTick+0x20>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a03      	ldr	r2, [pc, #12]	@ (800115c <HAL_IncTick+0x20>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000004 	.word	0x20000004
 800115c:	200001f4 	.word	0x200001f4

08001160 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b02      	ldr	r3, [pc, #8]	@ (8001170 <HAL_GetTick+0x10>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	200001f4 	.word	0x200001f4

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff fff0 	bl	8001160 <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffe0 	bl	8001160 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000004 	.word	0x20000004

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	@ (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	@ (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff90 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff49 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff5e 	bl	8001204 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff90 	bl	8001274 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5f 	bl	8001220 <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffb0 	bl	80012d8 <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b08b      	sub	sp, #44	@ 0x2c
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001396:	e169      	b.n	800166c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001398:	2201      	movs	r2, #1
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 8158 	bne.w	8001666 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4a9a      	ldr	r2, [pc, #616]	@ (8001624 <HAL_GPIO_Init+0x2a0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d05e      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013c0:	4a98      	ldr	r2, [pc, #608]	@ (8001624 <HAL_GPIO_Init+0x2a0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d875      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013c6:	4a98      	ldr	r2, [pc, #608]	@ (8001628 <HAL_GPIO_Init+0x2a4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d058      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013cc:	4a96      	ldr	r2, [pc, #600]	@ (8001628 <HAL_GPIO_Init+0x2a4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d86f      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013d2:	4a96      	ldr	r2, [pc, #600]	@ (800162c <HAL_GPIO_Init+0x2a8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d052      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013d8:	4a94      	ldr	r2, [pc, #592]	@ (800162c <HAL_GPIO_Init+0x2a8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d869      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013de:	4a94      	ldr	r2, [pc, #592]	@ (8001630 <HAL_GPIO_Init+0x2ac>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d04c      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013e4:	4a92      	ldr	r2, [pc, #584]	@ (8001630 <HAL_GPIO_Init+0x2ac>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d863      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013ea:	4a92      	ldr	r2, [pc, #584]	@ (8001634 <HAL_GPIO_Init+0x2b0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d046      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013f0:	4a90      	ldr	r2, [pc, #576]	@ (8001634 <HAL_GPIO_Init+0x2b0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d85d      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d82a      	bhi.n	8001450 <HAL_GPIO_Init+0xcc>
 80013fa:	2b12      	cmp	r3, #18
 80013fc:	d859      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001404 <HAL_GPIO_Init+0x80>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	0800147f 	.word	0x0800147f
 8001408:	08001459 	.word	0x08001459
 800140c:	0800146b 	.word	0x0800146b
 8001410:	080014ad 	.word	0x080014ad
 8001414:	080014b3 	.word	0x080014b3
 8001418:	080014b3 	.word	0x080014b3
 800141c:	080014b3 	.word	0x080014b3
 8001420:	080014b3 	.word	0x080014b3
 8001424:	080014b3 	.word	0x080014b3
 8001428:	080014b3 	.word	0x080014b3
 800142c:	080014b3 	.word	0x080014b3
 8001430:	080014b3 	.word	0x080014b3
 8001434:	080014b3 	.word	0x080014b3
 8001438:	080014b3 	.word	0x080014b3
 800143c:	080014b3 	.word	0x080014b3
 8001440:	080014b3 	.word	0x080014b3
 8001444:	080014b3 	.word	0x080014b3
 8001448:	08001461 	.word	0x08001461
 800144c:	08001475 	.word	0x08001475
 8001450:	4a79      	ldr	r2, [pc, #484]	@ (8001638 <HAL_GPIO_Init+0x2b4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001456:	e02c      	b.n	80014b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e029      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	3304      	adds	r3, #4
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e024      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	3308      	adds	r3, #8
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e01f      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	330c      	adds	r3, #12
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e01a      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001486:	2304      	movs	r3, #4
 8001488:	623b      	str	r3, [r7, #32]
          break;
 800148a:	e013      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d105      	bne.n	80014a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001494:	2308      	movs	r3, #8
 8001496:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	611a      	str	r2, [r3, #16]
          break;
 800149e:	e009      	b.n	80014b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a0:	2308      	movs	r3, #8
 80014a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	615a      	str	r2, [r3, #20]
          break;
 80014aa:	e003      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
          break;
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          break;
 80014b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2bff      	cmp	r3, #255	@ 0xff
 80014b8:	d801      	bhi.n	80014be <HAL_GPIO_Init+0x13a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	e001      	b.n	80014c2 <HAL_GPIO_Init+0x13e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3304      	adds	r3, #4
 80014c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2bff      	cmp	r3, #255	@ 0xff
 80014c8:	d802      	bhi.n	80014d0 <HAL_GPIO_Init+0x14c>
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	e002      	b.n	80014d6 <HAL_GPIO_Init+0x152>
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	3b08      	subs	r3, #8
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	210f      	movs	r1, #15
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	401a      	ands	r2, r3
 80014e8:	6a39      	ldr	r1, [r7, #32]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	431a      	orrs	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80b1 	beq.w	8001666 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001504:	4b4d      	ldr	r3, [pc, #308]	@ (800163c <HAL_GPIO_Init+0x2b8>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a4c      	ldr	r2, [pc, #304]	@ (800163c <HAL_GPIO_Init+0x2b8>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b4a      	ldr	r3, [pc, #296]	@ (800163c <HAL_GPIO_Init+0x2b8>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800151c:	4a48      	ldr	r2, [pc, #288]	@ (8001640 <HAL_GPIO_Init+0x2bc>)
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	220f      	movs	r2, #15
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a40      	ldr	r2, [pc, #256]	@ (8001644 <HAL_GPIO_Init+0x2c0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d013      	beq.n	8001570 <HAL_GPIO_Init+0x1ec>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a3f      	ldr	r2, [pc, #252]	@ (8001648 <HAL_GPIO_Init+0x2c4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00d      	beq.n	800156c <HAL_GPIO_Init+0x1e8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a3e      	ldr	r2, [pc, #248]	@ (800164c <HAL_GPIO_Init+0x2c8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_GPIO_Init+0x1e4>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a3d      	ldr	r2, [pc, #244]	@ (8001650 <HAL_GPIO_Init+0x2cc>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d101      	bne.n	8001564 <HAL_GPIO_Init+0x1e0>
 8001560:	2303      	movs	r3, #3
 8001562:	e006      	b.n	8001572 <HAL_GPIO_Init+0x1ee>
 8001564:	2304      	movs	r3, #4
 8001566:	e004      	b.n	8001572 <HAL_GPIO_Init+0x1ee>
 8001568:	2302      	movs	r3, #2
 800156a:	e002      	b.n	8001572 <HAL_GPIO_Init+0x1ee>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_GPIO_Init+0x1ee>
 8001570:	2300      	movs	r3, #0
 8001572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001574:	f002 0203 	and.w	r2, r2, #3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4093      	lsls	r3, r2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001582:	492f      	ldr	r1, [pc, #188]	@ (8001640 <HAL_GPIO_Init+0x2bc>)
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800159c:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	492c      	ldr	r1, [pc, #176]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4928      	ldr	r1, [pc, #160]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	4922      	ldr	r1, [pc, #136]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60cb      	str	r3, [r1, #12]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	491e      	ldr	r1, [pc, #120]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ec:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4918      	ldr	r1, [pc, #96]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	43db      	mvns	r3, r3
 8001602:	4914      	ldr	r1, [pc, #80]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 8001604:	4013      	ands	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d021      	beq.n	8001658 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	490e      	ldr	r1, [pc, #56]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e021      	b.n	8001666 <HAL_GPIO_Init+0x2e2>
 8001622:	bf00      	nop
 8001624:	10320000 	.word	0x10320000
 8001628:	10310000 	.word	0x10310000
 800162c:	10220000 	.word	0x10220000
 8001630:	10210000 	.word	0x10210000
 8001634:	10120000 	.word	0x10120000
 8001638:	10110000 	.word	0x10110000
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	40010800 	.word	0x40010800
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40011000 	.word	0x40011000
 8001650:	40011400 	.word	0x40011400
 8001654:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_GPIO_Init+0x304>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	43db      	mvns	r3, r3
 8001660:	4909      	ldr	r1, [pc, #36]	@ (8001688 <HAL_GPIO_Init+0x304>)
 8001662:	4013      	ands	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	3301      	adds	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	fa22 f303 	lsr.w	r3, r2, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	f47f ae8e 	bne.w	8001398 <HAL_GPIO_Init+0x14>
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	372c      	adds	r7, #44	@ 0x2c
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e12b      	b.n	80018f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f002 fdda 	bl	800426c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2224      	movs	r2, #36	@ 0x24
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016f0:	f001 fd5a 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a81      	ldr	r2, [pc, #516]	@ (8001900 <HAL_I2C_Init+0x274>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d807      	bhi.n	8001710 <HAL_I2C_Init+0x84>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a80      	ldr	r2, [pc, #512]	@ (8001904 <HAL_I2C_Init+0x278>)
 8001704:	4293      	cmp	r3, r2
 8001706:	bf94      	ite	ls
 8001708:	2301      	movls	r3, #1
 800170a:	2300      	movhi	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	e006      	b.n	800171e <HAL_I2C_Init+0x92>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a7d      	ldr	r2, [pc, #500]	@ (8001908 <HAL_I2C_Init+0x27c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	bf94      	ite	ls
 8001718:	2301      	movls	r3, #1
 800171a:	2300      	movhi	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0e7      	b.n	80018f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4a78      	ldr	r2, [pc, #480]	@ (800190c <HAL_I2C_Init+0x280>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a6a      	ldr	r2, [pc, #424]	@ (8001900 <HAL_I2C_Init+0x274>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d802      	bhi.n	8001760 <HAL_I2C_Init+0xd4>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3301      	adds	r3, #1
 800175e:	e009      	b.n	8001774 <HAL_I2C_Init+0xe8>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	4a69      	ldr	r2, [pc, #420]	@ (8001910 <HAL_I2C_Init+0x284>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	3301      	adds	r3, #1
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001786:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	495c      	ldr	r1, [pc, #368]	@ (8001900 <HAL_I2C_Init+0x274>)
 8001790:	428b      	cmp	r3, r1
 8001792:	d819      	bhi.n	80017c8 <HAL_I2C_Init+0x13c>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e59      	subs	r1, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a2:	1c59      	adds	r1, r3, #1
 80017a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017a8:	400b      	ands	r3, r1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <HAL_I2C_Init+0x138>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1e59      	subs	r1, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c2:	e051      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e04f      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <HAL_I2C_Init+0x168>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e012      	b.n	800181a <HAL_I2C_Init+0x18e>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Init+0x196>
 800181e:	2301      	movs	r3, #1
 8001820:	e022      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10e      	bne.n	8001848 <HAL_I2C_Init+0x1bc>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e58      	subs	r0, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	440b      	add	r3, r1
 8001838:	fbb0 f3f3 	udiv	r3, r0, r3
 800183c:	3301      	adds	r3, #1
 800183e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001846:	e00f      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001896:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6911      	ldr	r1, [r2, #16]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68d2      	ldr	r2, [r2, #12]
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	000186a0 	.word	0x000186a0
 8001904:	001e847f 	.word	0x001e847f
 8001908:	003d08ff 	.word	0x003d08ff
 800190c:	431bde83 	.word	0x431bde83
 8001910:	10624dd3 	.word	0x10624dd3

08001914 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	461a      	mov	r2, r3
 8001920:	460b      	mov	r3, r1
 8001922:	817b      	strh	r3, [r7, #10]
 8001924:	4613      	mov	r3, r2
 8001926:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fc1a 	bl	8001160 <HAL_GetTick>
 800192c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b20      	cmp	r3, #32
 8001938:	f040 80e0 	bne.w	8001afc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2319      	movs	r3, #25
 8001942:	2201      	movs	r2, #1
 8001944:	4970      	ldr	r1, [pc, #448]	@ (8001b08 <HAL_I2C_Master_Transmit+0x1f4>)
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 fe2e 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	e0d3      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_I2C_Master_Transmit+0x50>
 8001960:	2302      	movs	r3, #2
 8001962:	e0cc      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d007      	beq.n	800198a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001998:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2221      	movs	r2, #33	@ 0x21
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2210      	movs	r2, #16
 80019a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	893a      	ldrh	r2, [r7, #8]
 80019ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a50      	ldr	r2, [pc, #320]	@ (8001b0c <HAL_I2C_Master_Transmit+0x1f8>)
 80019ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019cc:	8979      	ldrh	r1, [r7, #10]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	6a3a      	ldr	r2, [r7, #32]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fc02 	bl	80021dc <I2C_MasterRequestWrite>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e08d      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019f8:	e066      	b.n	8001ac8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 feec 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d107      	bne.n	8001a22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e06b      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d11b      	bne.n	8001a9c <HAL_I2C_Master_Transmit+0x188>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d017      	beq.n	8001a9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	6a39      	ldr	r1, [r7, #32]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fee3 	bl	800286c <I2C_WaitOnBTFFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d107      	bne.n	8001ac4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ac2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e01a      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d194      	bne.n	80019fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e000      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001afc:	2302      	movs	r3, #2
  }
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	00100002 	.word	0x00100002
 8001b0c:	ffff0000 	.word	0xffff0000

08001b10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	@ 0x30
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	817b      	strh	r3, [r7, #10]
 8001b20:	4613      	mov	r3, r2
 8001b22:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff fb1a 	bl	8001160 <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	f040 824b 	bne.w	8001fd2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2319      	movs	r3, #25
 8001b42:	2201      	movs	r2, #1
 8001b44:	497f      	ldr	r1, [pc, #508]	@ (8001d44 <HAL_I2C_Master_Receive+0x234>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fd2e 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
 8001b54:	e23e      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_I2C_Master_Receive+0x54>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e237      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x4c4>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d007      	beq.n	8001b8a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0201 	orr.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2222      	movs	r2, #34	@ 0x22
 8001b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	893a      	ldrh	r2, [r7, #8]
 8001bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d48 <HAL_I2C_Master_Receive+0x238>)
 8001bca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bcc:	8979      	ldrh	r1, [r7, #10]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fb84 	bl	80022e0 <I2C_MasterRequestRead>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1f8      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d113      	bne.n	8001c12 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e1cc      	b.n	8001fac <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d11e      	bne.n	8001c58 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c28:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2a:	b672      	cpsid	i
}
 8001c2c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c54:	b662      	cpsie	i
}
 8001c56:	e035      	b.n	8001cc4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d11e      	bne.n	8001c9e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c70:	b672      	cpsid	i
}
 8001c72:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c9a:	b662      	cpsie	i
}
 8001c9c:	e012      	b.n	8001cc4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001cc4:	e172      	b.n	8001fac <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	f200 811f 	bhi.w	8001f0e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d123      	bne.n	8001d20 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 fe0d 	bl	80028fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e173      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d1e:	e145      	b.n	8001fac <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d152      	bne.n	8001dce <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4906      	ldr	r1, [pc, #24]	@ (8001d4c <HAL_I2C_Master_Receive+0x23c>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 fc38 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e148      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x4c4>
 8001d42:	bf00      	nop
 8001d44:	00100002 	.word	0x00100002
 8001d48:	ffff0000 	.word	0xffff0000
 8001d4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d96:	b662      	cpsie	i
}
 8001d98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dcc:	e0ee      	b.n	8001fac <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4981      	ldr	r1, [pc, #516]	@ (8001fdc <HAL_I2C_Master_Receive+0x4cc>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fbe5 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0f5      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001df6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001df8:	b672      	cpsid	i
}
 8001dfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe0 <HAL_I2C_Master_Receive+0x4d0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	08db      	lsrs	r3, r3, #3
 8001e34:	4a6b      	ldr	r2, [pc, #428]	@ (8001fe4 <HAL_I2C_Master_Receive+0x4d4>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0a1a      	lsrs	r2, r3, #8
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00da      	lsls	r2, r3, #3
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d118      	bne.n	8001e86 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001e76:	b662      	cpsie	i
}
 8001e78:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0a6      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d1d9      	bne.n	8001e48 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed6:	b662      	cpsie	i
}
 8001ed8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f0c:	e04e      	b.n	8001fac <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fcf2 	bl	80028fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e058      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d124      	bne.n	8001fac <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d107      	bne.n	8001f7a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f78:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f ae88 	bne.w	8001cc6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	@ 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	00010004 	.word	0x00010004
 8001fe0:	2000000c 	.word	0x2000000c
 8001fe4:	14f8b589 	.word	0x14f8b589

08001fe8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	817b      	strh	r3, [r7, #10]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	813b      	strh	r3, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002002:	f7ff f8ad 	bl	8001160 <HAL_GetTick>
 8002006:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b20      	cmp	r3, #32
 8002012:	f040 80d9 	bne.w	80021c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2319      	movs	r3, #25
 800201c:	2201      	movs	r2, #1
 800201e:	496d      	ldr	r1, [pc, #436]	@ (80021d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fac1 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800202c:	2302      	movs	r3, #2
 800202e:	e0cc      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_I2C_Mem_Write+0x56>
 800203a:	2302      	movs	r3, #2
 800203c:	e0c5      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	d007      	beq.n	8002064 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2221      	movs	r2, #33	@ 0x21
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2240      	movs	r2, #64	@ 0x40
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a4d      	ldr	r2, [pc, #308]	@ (80021d8 <HAL_I2C_Mem_Write+0x1f0>)
 80020a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020a6:	88f8      	ldrh	r0, [r7, #6]
 80020a8:	893a      	ldrh	r2, [r7, #8]
 80020aa:	8979      	ldrh	r1, [r7, #10]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4603      	mov	r3, r0
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f9e0 	bl	800247c <I2C_RequestMemoryWrite>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d052      	beq.n	8002168 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e081      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fb86 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d107      	bne.n	80020ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e06b      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b04      	cmp	r3, #4
 800212e:	d11b      	bne.n	8002168 <HAL_I2C_Mem_Write+0x180>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d017      	beq.n	8002168 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1aa      	bne.n	80020c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fb79 	bl	800286c <I2C_WaitOnBTFFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	2b04      	cmp	r3, #4
 8002186:	d107      	bne.n	8002198 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002196:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e016      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	00100002 	.word	0x00100002
 80021d8:	ffff0000 	.word	0xffff0000

080021dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	460b      	mov	r3, r1
 80021ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d006      	beq.n	8002206 <I2C_MasterRequestWrite+0x2a>
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d003      	beq.n	8002206 <I2C_MasterRequestWrite+0x2a>
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002204:	d108      	bne.n	8002218 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e00b      	b.n	8002230 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	2b12      	cmp	r3, #18
 800221e:	d107      	bne.n	8002230 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800222e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f9b3 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00d      	beq.n	8002264 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002256:	d103      	bne.n	8002260 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e035      	b.n	80022d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800226c:	d108      	bne.n	8002280 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800226e:	897b      	ldrh	r3, [r7, #10]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800227c:	611a      	str	r2, [r3, #16]
 800227e:	e01b      	b.n	80022b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002280:	897b      	ldrh	r3, [r7, #10]
 8002282:	11db      	asrs	r3, r3, #7
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 0306 	and.w	r3, r3, #6
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f063 030f 	orn	r3, r3, #15
 8002290:	b2da      	uxtb	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	490e      	ldr	r1, [pc, #56]	@ (80022d8 <I2C_MasterRequestWrite+0xfc>)
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f9fc 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e010      	b.n	80022d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022ae:	897b      	ldrh	r3, [r7, #10]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4907      	ldr	r1, [pc, #28]	@ (80022dc <I2C_MasterRequestWrite+0x100>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f9ec 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	00010008 	.word	0x00010008
 80022dc:	00010002 	.word	0x00010002

080022e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	460b      	mov	r3, r1
 80022ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002304:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d006      	beq.n	800231a <I2C_MasterRequestRead+0x3a>
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d003      	beq.n	800231a <I2C_MasterRequestRead+0x3a>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002318:	d108      	bne.n	800232c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e00b      	b.n	8002344 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	2b11      	cmp	r3, #17
 8002332:	d107      	bne.n	8002344 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f929 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800236a:	d103      	bne.n	8002374 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e079      	b.n	800246c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002380:	d108      	bne.n	8002394 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002382:	897b      	ldrh	r3, [r7, #10]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	e05f      	b.n	8002454 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002394:	897b      	ldrh	r3, [r7, #10]
 8002396:	11db      	asrs	r3, r3, #7
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f003 0306 	and.w	r3, r3, #6
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f063 030f 	orn	r3, r3, #15
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4930      	ldr	r1, [pc, #192]	@ (8002474 <I2C_MasterRequestRead+0x194>)
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f972 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e054      	b.n	800246c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4929      	ldr	r1, [pc, #164]	@ (8002478 <I2C_MasterRequestRead+0x198>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f962 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e044      	b.n	800246c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002406:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f8c7 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800242e:	d103      	bne.n	8002438 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e017      	b.n	800246c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800243c:	897b      	ldrh	r3, [r7, #10]
 800243e:	11db      	asrs	r3, r3, #7
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f003 0306 	and.w	r3, r3, #6
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f063 030e 	orn	r3, r3, #14
 800244c:	b2da      	uxtb	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4907      	ldr	r1, [pc, #28]	@ (8002478 <I2C_MasterRequestRead+0x198>)
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f91e 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	00010008 	.word	0x00010008
 8002478:	00010002 	.word	0x00010002

0800247c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	461a      	mov	r2, r3
 800248a:	4603      	mov	r3, r0
 800248c:	817b      	strh	r3, [r7, #10]
 800248e:	460b      	mov	r3, r1
 8002490:	813b      	strh	r3, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f878 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024cc:	d103      	bne.n	80024d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e05f      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	6a3a      	ldr	r2, [r7, #32]
 80024ee:	492d      	ldr	r1, [pc, #180]	@ (80025a4 <I2C_RequestMemoryWrite+0x128>)
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f8d3 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e04c      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002518:	6a39      	ldr	r1, [r7, #32]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f95e 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	2b04      	cmp	r3, #4
 800252c:	d107      	bne.n	800253e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e02b      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002548:	893b      	ldrh	r3, [r7, #8]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]
 8002552:	e021      	b.n	8002598 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002554:	893b      	ldrh	r3, [r7, #8]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	b29b      	uxth	r3, r3
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002564:	6a39      	ldr	r1, [r7, #32]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f938 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00d      	beq.n	800258e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	2b04      	cmp	r3, #4
 8002578:	d107      	bne.n	800258a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002588:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e005      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800258e:	893b      	ldrh	r3, [r7, #8]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	00010002 	.word	0x00010002

080025a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b8:	e048      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d044      	beq.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7fe fdcd 	bl	8001160 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d139      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10d      	bne.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	e00c      	b.n	8002618 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	43da      	mvns	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4013      	ands	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	429a      	cmp	r2, r3
 800261c:	d116      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e023      	b.n	8002694 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10d      	bne.n	8002672 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	e00c      	b.n	800268c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	43da      	mvns	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4013      	ands	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	429a      	cmp	r2, r3
 8002690:	d093      	beq.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026aa:	e071      	b.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ba:	d123      	bne.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e067      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d041      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7fe fd28 	bl	8001160 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d136      	bne.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10c      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4013      	ands	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e00b      	b.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	43da      	mvns	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4013      	ands	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e021      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10c      	bne.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e00b      	b.n	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f af6d 	bne.w	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	e034      	b.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8e3 	bl	80029b6 <I2C_IsAcknowledgeFailed>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e034      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d028      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7fe fcad 	bl	8001160 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11d      	bne.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002822:	2b80      	cmp	r3, #128	@ 0x80
 8002824:	d016      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b80      	cmp	r3, #128	@ 0x80
 8002860:	d1c3      	bne.n	80027ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002878:	e034      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f89b 	bl	80029b6 <I2C_IsAcknowledgeFailed>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e034      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d028      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7fe fc65 	bl	8001160 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11d      	bne.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d016      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d1c3      	bne.n	800287a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002908:	e049      	b.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b10      	cmp	r3, #16
 8002916:	d119      	bne.n	800294c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0210 	mvn.w	r2, #16
 8002920:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e030      	b.n	80029ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7fe fc08 	bl	8001160 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11d      	bne.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d016      	beq.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e007      	b.n	80029ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a8:	2b40      	cmp	r3, #64	@ 0x40
 80029aa:	d1ae      	bne.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029cc:	d11b      	bne.n	8002a06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e272      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8087 	beq.w	8002b42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a34:	4b92      	ldr	r3, [pc, #584]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d00c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a40:	4b8f      	ldr	r3, [pc, #572]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d112      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5e>
 8002a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5a:	4b89      	ldr	r3, [pc, #548]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d06c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x12c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d168      	bne.n	8002b40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e24c      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x76>
 8002a7c:	4b80      	ldr	r3, [pc, #512]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7f      	ldr	r2, [pc, #508]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e02e      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x98>
 8002a92:	4b7b      	ldr	r3, [pc, #492]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7a      	ldr	r2, [pc, #488]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b78      	ldr	r3, [pc, #480]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a77      	ldr	r2, [pc, #476]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xbc>
 8002ab6:	4b72      	ldr	r3, [pc, #456]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a71      	ldr	r2, [pc, #452]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b68      	ldr	r3, [pc, #416]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a67      	ldr	r2, [pc, #412]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fb36 	bl	8001160 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fb32 	bl	8001160 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e200      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xe4>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fb22 	bl	8001160 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fb1e 	bl	8001160 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1ec      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b53      	ldr	r3, [pc, #332]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x10c>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b5a:	4b49      	ldr	r3, [pc, #292]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x18c>
 8002b66:	4b46      	ldr	r3, [pc, #280]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x176>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c0      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4939      	ldr	r1, [pc, #228]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe fad7 	bl	8001160 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fad3 	bl	8001160 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1a1      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4927      	ldr	r1, [pc, #156]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b26      	ldr	r3, [pc, #152]	@ (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fab6 	bl	8001160 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fab2 	bl	8001160 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e180      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d03a      	beq.n	8002c98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fe fa96 	bl	8001160 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fe fa92 	bl	8001160 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e160      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f000 faba 	bl	80031d0 <RCC_Delay>
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_RCC_OscConfig+0x274>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7fe fa7c 	bl	8001160 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6a:	e00f      	b.n	8002c8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7fe fa78 	bl	8001160 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d908      	bls.n	8002c8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e146      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	42420000 	.word	0x42420000
 8002c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	4b92      	ldr	r3, [pc, #584]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e9      	bne.n	8002c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a6 	beq.w	8002df2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b8b      	ldr	r3, [pc, #556]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	4b88      	ldr	r3, [pc, #544]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4a87      	ldr	r2, [pc, #540]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	61d3      	str	r3, [r2, #28]
 8002cc2:	4b85      	ldr	r3, [pc, #532]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b82      	ldr	r3, [pc, #520]	@ (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d118      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cde:	4b7f      	ldr	r3, [pc, #508]	@ (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7e      	ldr	r2, [pc, #504]	@ (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fa39 	bl	8001160 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7fe fa35 	bl	8001160 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b64      	cmp	r3, #100	@ 0x64
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e103      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b75      	ldr	r3, [pc, #468]	@ (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x312>
 8002d18:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	e02d      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x334>
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a69      	ldr	r2, [pc, #420]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4b67      	ldr	r3, [pc, #412]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a66      	ldr	r2, [pc, #408]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
 8002d46:	e01c      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x356>
 8002d50:	4b61      	ldr	r3, [pc, #388]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a60      	ldr	r2, [pc, #384]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a5d      	ldr	r2, [pc, #372]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6213      	str	r3, [r2, #32]
 8002d68:	e00b      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	4b58      	ldr	r3, [pc, #352]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a57      	ldr	r2, [pc, #348]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d015      	beq.n	8002db6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe f9e9 	bl	8001160 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fe f9e5 	bl	8001160 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0b1      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ee      	beq.n	8002d92 <HAL_RCC_OscConfig+0x37e>
 8002db4:	e014      	b.n	8002de0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe f9d3 	bl	8001160 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe f9cf 	bl	8001160 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e09b      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	4b40      	ldr	r3, [pc, #256]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d105      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	4a3b      	ldr	r2, [pc, #236]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8087 	beq.w	8002f0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dfc:	4b36      	ldr	r3, [pc, #216]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d061      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d146      	bne.n	8002e9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b33      	ldr	r3, [pc, #204]	@ (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe f9a3 	bl	8001160 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe f99f 	bl	8001160 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e06d      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	4b29      	ldr	r3, [pc, #164]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e44:	d108      	bne.n	8002e58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e46:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4921      	ldr	r1, [pc, #132]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e58:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a19      	ldr	r1, [r3, #32]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	491b      	ldr	r1, [pc, #108]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe f973 	bl	8001160 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fe f96f 	bl	8001160 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e03d      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x46a>
 8002e9c:	e035      	b.n	8002f0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f95c 	bl	8001160 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe f958 	bl	8001160 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e026      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x498>
 8002eca:	e01e      	b.n	8002f0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e019      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_RCC_OscConfig+0x500>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0d0      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d910      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b67      	ldr	r3, [pc, #412]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 0207 	bic.w	r2, r3, #7
 8002f42:	4965      	ldr	r1, [pc, #404]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b63      	ldr	r3, [pc, #396]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0b8      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f74:	4b59      	ldr	r3, [pc, #356]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a58      	ldr	r2, [pc, #352]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f8c:	4b53      	ldr	r3, [pc, #332]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a52      	ldr	r2, [pc, #328]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f98:	4b50      	ldr	r3, [pc, #320]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	494d      	ldr	r1, [pc, #308]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d040      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b47      	ldr	r3, [pc, #284]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d115      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e07f      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b41      	ldr	r3, [pc, #260]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e073      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06b      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b39      	ldr	r3, [pc, #228]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4936      	ldr	r1, [pc, #216]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fe f8aa 	bl	8001160 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe f8a6 	bl	8001160 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e053      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d210      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 0207 	bic.w	r2, r3, #7
 800304e:	4922      	ldr	r1, [pc, #136]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e032      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003074:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4916      	ldr	r1, [pc, #88]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003092:	4b12      	ldr	r3, [pc, #72]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	490e      	ldr	r1, [pc, #56]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a6:	f000 f821 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 80030aa:	4602      	mov	r2, r0
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	490a      	ldr	r1, [pc, #40]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	5ccb      	ldrb	r3, [r1, r3]
 80030ba:	fa22 f303 	lsr.w	r3, r2, r3
 80030be:	4a09      	ldr	r2, [pc, #36]	@ (80030e4 <HAL_RCC_ClockConfig+0x1cc>)
 80030c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030c2:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_RCC_ClockConfig+0x1d0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe f808 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08009964 	.word	0x08009964
 80030e4:	2000000c 	.word	0x2000000c
 80030e8:	20000000 	.word	0x20000000

080030ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x94>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b04      	cmp	r3, #4
 8003114:	d002      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x30>
 8003116:	2b08      	cmp	r3, #8
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x36>
 800311a:	e027      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800311c:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x98>)
 800311e:	613b      	str	r3, [r7, #16]
      break;
 8003120:	e027      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0c9b      	lsrs	r3, r3, #18
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	4a17      	ldr	r2, [pc, #92]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x9c>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d010      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x94>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	0c5b      	lsrs	r3, r3, #17
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	4a11      	ldr	r2, [pc, #68]	@ (800318c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a0d      	ldr	r2, [pc, #52]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x98>)
 800314e:	fb03 f202 	mul.w	r2, r3, r2
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e004      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0c      	ldr	r2, [pc, #48]	@ (8003190 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	613b      	str	r3, [r7, #16]
      break;
 800316a:	e002      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x98>)
 800316e:	613b      	str	r3, [r7, #16]
      break;
 8003170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003172:	693b      	ldr	r3, [r7, #16]
}
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	007a1200 	.word	0x007a1200
 8003188:	08007294 	.word	0x08007294
 800318c:	080072a4 	.word	0x080072a4
 8003190:	003d0900 	.word	0x003d0900

08003194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b02      	ldr	r3, [pc, #8]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	2000000c 	.word	0x2000000c

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031ac:	f7ff fff2 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	@ (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	08009974 	.word	0x08009974

080031d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <RCC_Delay+0x34>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003208 <RCC_Delay+0x38>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a5b      	lsrs	r3, r3, #9
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031ec:	bf00      	nop
  }
  while (Delay --);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e5a      	subs	r2, r3, #1
 80031f2:	60fa      	str	r2, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f9      	bne.n	80031ec <RCC_Delay+0x1c>
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	2000000c 	.word	0x2000000c
 8003208:	10624dd3 	.word	0x10624dd3
 800320c:	00000000 	.word	0x00000000

08003210 <checkForBeat>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// Simple peak detection function
bool checkForBeat(uint32_t sample) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
    static uint32_t threshold = 100000;
    //static bool beatDetected = false;
    static uint32_t lastBeatTime = 0;

    // Check if finger is on sensor
    if (sample < 50000) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800321e:	4293      	cmp	r3, r2
 8003220:	d801      	bhi.n	8003226 <checkForBeat+0x16>
        return false;
 8003222:	2300      	movs	r3, #0
 8003224:	e030      	b.n	8003288 <checkForBeat+0x78>
    }

    // Simple derivative-based peak detection
    if (sample > lastSample && sample > threshold) {
 8003226:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <checkForBeat+0x88>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	d927      	bls.n	8003280 <checkForBeat+0x70>
 8003230:	4b1a      	ldr	r3, [pc, #104]	@ (800329c <checkForBeat+0x8c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d922      	bls.n	8003280 <checkForBeat+0x70>
        uint32_t currentTime = HAL_GetTick();
 800323a:	f7fd ff91 	bl	8001160 <HAL_GetTick>
 800323e:	60f8      	str	r0, [r7, #12]
        if ((currentTime - lastBeatTime) > 300) { // Minimum 300ms between beats
 8003240:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <checkForBeat+0x90>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800324c:	d918      	bls.n	8003280 <checkForBeat+0x70>
            lastBeatTime = currentTime;
 800324e:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <checkForBeat+0x90>)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6013      	str	r3, [r2, #0]
            //beatDetected = true;

            // Adaptive threshold
            threshold = sample * 0.8;
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7fd f8c5 	bl	80003e4 <__aeabi_ui2d>
 800325a:	a30d      	add	r3, pc, #52	@ (adr r3, 8003290 <checkForBeat+0x80>)
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f7fd f93a 	bl	80004d8 <__aeabi_dmul>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f7fd fc0c 	bl	8000a88 <__aeabi_d2uiz>
 8003270:	4603      	mov	r3, r0
 8003272:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <checkForBeat+0x8c>)
 8003274:	6013      	str	r3, [r2, #0]

            lastSample = sample;
 8003276:	4a08      	ldr	r2, [pc, #32]	@ (8003298 <checkForBeat+0x88>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6013      	str	r3, [r2, #0]
            return true;
 800327c:	2301      	movs	r3, #1
 800327e:	e003      	b.n	8003288 <checkForBeat+0x78>
        }
    }

    lastSample = sample;
 8003280:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <checkForBeat+0x88>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6013      	str	r3, [r2, #0]
    return false;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	9999999a 	.word	0x9999999a
 8003294:	3fe99999 	.word	0x3fe99999
 8003298:	200003a4 	.word	0x200003a4
 800329c:	20000008 	.word	0x20000008
 80032a0:	200003a8 	.word	0x200003a8

080032a4 <calculateMovingAverage>:

// Calculate moving average for noise reduction
uint32_t calculateMovingAverage(uint32_t newValue) {
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    irBuffer[bufferIndex] = newValue;
 80032ac:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <calculateMovingAverage+0x70>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	4a19      	ldr	r2, [pc, #100]	@ (8003318 <calculateMovingAverage+0x74>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    bufferIndex = (bufferIndex + 1) % BUFFER_SIZE;
 80032ba:	4b16      	ldr	r3, [pc, #88]	@ (8003314 <calculateMovingAverage+0x70>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	4b16      	ldr	r3, [pc, #88]	@ (800331c <calculateMovingAverage+0x78>)
 80032c2:	fb83 1302 	smull	r1, r3, r3, r2
 80032c6:	1099      	asrs	r1, r3, #2
 80032c8:	17d3      	asrs	r3, r2, #31
 80032ca:	1ac9      	subs	r1, r1, r3
 80032cc:	460b      	mov	r3, r1
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	1ad1      	subs	r1, r2, r3
 80032d6:	b2ca      	uxtb	r2, r1
 80032d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <calculateMovingAverage+0x70>)
 80032da:	701a      	strb	r2, [r3, #0]

    uint32_t sum = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	e009      	b.n	80032fa <calculateMovingAverage+0x56>
        sum += irBuffer[i];
 80032e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003318 <calculateMovingAverage+0x74>)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	3301      	adds	r3, #1
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	ddf2      	ble.n	80032e6 <calculateMovingAverage+0x42>
    }
    return sum / BUFFER_SIZE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a07      	ldr	r2, [pc, #28]	@ (8003320 <calculateMovingAverage+0x7c>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	08db      	lsrs	r3, r3, #3
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	20000294 	.word	0x20000294
 8003318:	2000026c 	.word	0x2000026c
 800331c:	66666667 	.word	0x66666667
 8003320:	cccccccd 	.word	0xcccccccd

08003324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b091      	sub	sp, #68	@ 0x44
 8003328:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800332a:	f7fd fec1 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800332e:	f000 f9db 	bl	80036e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003332:	f000 fa4d 	bl	80037d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003336:	f000 fa1d 	bl	8003774 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  // Initialize MAX30102 and SSD1306
    ssd1306_Init();
 800333a:	f000 fd63 	bl	8003e04 <ssd1306_Init>
    max30102_init(&max30102, &hi2c1);
 800333e:	49b1      	ldr	r1, [pc, #708]	@ (8003604 <main+0x2e0>)
 8003340:	48b1      	ldr	r0, [pc, #708]	@ (8003608 <main+0x2e4>)
 8003342:	f000 fa83 	bl	800384c <max30102_init>
  max30102_reset(&max30102);
 8003346:	48b0      	ldr	r0, [pc, #704]	@ (8003608 <main+0x2e4>)
 8003348:	f000 faf7 	bl	800393a <max30102_reset>
  HAL_Delay(100);
 800334c:	2064      	movs	r0, #100	@ 0x64
 800334e:	f7fd ff11 	bl	8001174 <HAL_Delay>

  max30102_clear_fifo(&max30102);
 8003352:	48ad      	ldr	r0, [pc, #692]	@ (8003608 <main+0x2e4>)
 8003354:	f000 fc84 	bl	8003c60 <max30102_clear_fifo>
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8003358:	2307      	movs	r3, #7
 800335a:	2201      	movs	r2, #1
 800335c:	2103      	movs	r1, #3
 800335e:	48aa      	ldr	r0, [pc, #680]	@ (8003608 <main+0x2e4>)
 8003360:	f000 fc42 	bl	8003be8 <max30102_set_fifo_config>

  // Optimized sensor settings for heart rate detection
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8003364:	2101      	movs	r1, #1
 8003366:	48a8      	ldr	r0, [pc, #672]	@ (8003608 <main+0x2e4>)
 8003368:	f000 fba6 	bl	8003ab8 <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_4096);
 800336c:	2101      	movs	r1, #1
 800336e:	48a6      	ldr	r0, [pc, #664]	@ (8003608 <main+0x2e4>)
 8003370:	f000 fbc5 	bl	8003afe <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_100); // Lower sampling rate for HR
 8003374:	2101      	movs	r1, #1
 8003376:	48a4      	ldr	r0, [pc, #656]	@ (8003608 <main+0x2e4>)
 8003378:	f000 fb79 	bl	8003a6e <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 12.5); // Higher LED current for better signal
 800337c:	49a3      	ldr	r1, [pc, #652]	@ (800360c <main+0x2e8>)
 800337e:	48a2      	ldr	r0, [pc, #648]	@ (8003608 <main+0x2e4>)
 8003380:	f000 fbe2 	bl	8003b48 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 12.5);
 8003384:	49a1      	ldr	r1, [pc, #644]	@ (800360c <main+0x2e8>)
 8003386:	48a0      	ldr	r0, [pc, #640]	@ (8003608 <main+0x2e4>)
 8003388:	f000 fc06 	bl	8003b98 <max30102_set_led_current_2>

  // Enter SpO2 mode (uses both RED and IR LEDs)
  max30102_set_mode(&max30102, max30102_spo2);
 800338c:	2103      	movs	r1, #3
 800338e:	489e      	ldr	r0, [pc, #632]	@ (8003608 <main+0x2e4>)
 8003390:	f000 fb47 	bl	8003a22 <max30102_set_mode>
  max30102_set_a_full(&max30102, 1);
 8003394:	2101      	movs	r1, #1
 8003396:	489c      	ldr	r0, [pc, #624]	@ (8003608 <main+0x2e4>)
 8003398:	f000 fae0 	bl	800395c <max30102_set_a_full>




  // Display initialization message
  ssd1306_SetCursor(0, 0);
 800339c:	2100      	movs	r1, #0
 800339e:	2000      	movs	r0, #0
 80033a0:	f000 fee8 	bl	8004174 <ssd1306_SetCursor>
  ssd1306_WriteString("Heart Rate Monitor", Font_7x10, 1);
 80033a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003610 <main+0x2ec>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	9200      	str	r2, [sp, #0]
 80033aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ac:	4899      	ldr	r0, [pc, #612]	@ (8003614 <main+0x2f0>)
 80033ae:	f000 febb 	bl	8004128 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 15);
 80033b2:	210f      	movs	r1, #15
 80033b4:	2000      	movs	r0, #0
 80033b6:	f000 fedd 	bl	8004174 <ssd1306_SetCursor>
  ssd1306_WriteString("Place finger on", Font_7x10, 1);
 80033ba:	4b95      	ldr	r3, [pc, #596]	@ (8003610 <main+0x2ec>)
 80033bc:	2201      	movs	r2, #1
 80033be:	9200      	str	r2, [sp, #0]
 80033c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c2:	4895      	ldr	r0, [pc, #596]	@ (8003618 <main+0x2f4>)
 80033c4:	f000 feb0 	bl	8004128 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 25);
 80033c8:	2119      	movs	r1, #25
 80033ca:	2000      	movs	r0, #0
 80033cc:	f000 fed2 	bl	8004174 <ssd1306_SetCursor>
  ssd1306_WriteString("sensor...", Font_7x10, 1);
 80033d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003610 <main+0x2ec>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	9200      	str	r2, [sp, #0]
 80033d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d8:	4890      	ldr	r0, [pc, #576]	@ (800361c <main+0x2f8>)
 80033da:	f000 fea5 	bl	8004128 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80033de:	f000 fd93 	bl	8003f08 <ssd1306_UpdateScreen>

  HAL_Delay(2000);
 80033e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033e6:	f7fd fec5 	bl	8001174 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read sensor data
	      max30102_read_fifo(&max30102);
 80033ea:	4887      	ldr	r0, [pc, #540]	@ (8003608 <main+0x2e4>)
 80033ec:	f000 fc57 	bl	8003c9e <max30102_read_fifo>

	      // Get IR value for heart rate detection (IR is more stable than RED)
	      irValue = max30102._ir_samples[0];
 80033f0:	4b85      	ldr	r3, [pc, #532]	@ (8003608 <main+0x2e4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a8a      	ldr	r2, [pc, #552]	@ (8003620 <main+0x2fc>)
 80033f6:	6013      	str	r3, [r2, #0]

	      // Apply moving average filter
	      irAverage = calculateMovingAverage(irValue);
 80033f8:	4b89      	ldr	r3, [pc, #548]	@ (8003620 <main+0x2fc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff51 	bl	80032a4 <calculateMovingAverage>
 8003402:	4603      	mov	r3, r0
 8003404:	4a87      	ldr	r2, [pc, #540]	@ (8003624 <main+0x300>)
 8003406:	6013      	str	r3, [r2, #0]

	      // Check for finger presence
	      fingerDetected = (irValue > 50000);
 8003408:	4b85      	ldr	r3, [pc, #532]	@ (8003620 <main+0x2fc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003410:	4293      	cmp	r3, r2
 8003412:	bf8c      	ite	hi
 8003414:	2301      	movhi	r3, #1
 8003416:	2300      	movls	r3, #0
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4b83      	ldr	r3, [pc, #524]	@ (8003628 <main+0x304>)
 800341c:	701a      	strb	r2, [r3, #0]

	      // Clear display area
	      ssd1306_SetCursor(0, 0);
 800341e:	2100      	movs	r1, #0
 8003420:	2000      	movs	r0, #0
 8003422:	f000 fea7 	bl	8004174 <ssd1306_SetCursor>
	      ssd1306_WriteString("                  ", Font_16x24, 1);
 8003426:	4b81      	ldr	r3, [pc, #516]	@ (800362c <main+0x308>)
 8003428:	2201      	movs	r2, #1
 800342a:	9200      	str	r2, [sp, #0]
 800342c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800342e:	4880      	ldr	r0, [pc, #512]	@ (8003630 <main+0x30c>)
 8003430:	f000 fe7a 	bl	8004128 <ssd1306_WriteString>
	      ssd1306_SetCursor(0, 15);
 8003434:	210f      	movs	r1, #15
 8003436:	2000      	movs	r0, #0
 8003438:	f000 fe9c 	bl	8004174 <ssd1306_SetCursor>
	      ssd1306_WriteString("                ", Font_16x24, 1);
 800343c:	4b7b      	ldr	r3, [pc, #492]	@ (800362c <main+0x308>)
 800343e:	2201      	movs	r2, #1
 8003440:	9200      	str	r2, [sp, #0]
 8003442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003444:	487b      	ldr	r0, [pc, #492]	@ (8003634 <main+0x310>)
 8003446:	f000 fe6f 	bl	8004128 <ssd1306_WriteString>
	      ssd1306_SetCursor(0, 30);
 800344a:	211e      	movs	r1, #30
 800344c:	2000      	movs	r0, #0
 800344e:	f000 fe91 	bl	8004174 <ssd1306_SetCursor>
	      ssd1306_WriteString("                ", Font_11x18, 1);
 8003452:	4b79      	ldr	r3, [pc, #484]	@ (8003638 <main+0x314>)
 8003454:	2201      	movs	r2, #1
 8003456:	9200      	str	r2, [sp, #0]
 8003458:	cb0e      	ldmia	r3, {r1, r2, r3}
 800345a:	4876      	ldr	r0, [pc, #472]	@ (8003634 <main+0x310>)
 800345c:	f000 fe64 	bl	8004128 <ssd1306_WriteString>
	      ssd1306_SetCursor(0, 45);
 8003460:	212d      	movs	r1, #45	@ 0x2d
 8003462:	2000      	movs	r0, #0
 8003464:	f000 fe86 	bl	8004174 <ssd1306_SetCursor>
	      ssd1306_WriteString("                ", Font_11x18, 1);
 8003468:	4b73      	ldr	r3, [pc, #460]	@ (8003638 <main+0x314>)
 800346a:	2201      	movs	r2, #1
 800346c:	9200      	str	r2, [sp, #0]
 800346e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003470:	4870      	ldr	r0, [pc, #448]	@ (8003634 <main+0x310>)
 8003472:	f000 fe59 	bl	8004128 <ssd1306_WriteString>

	      if (fingerDetected) {
 8003476:	4b6c      	ldr	r3, [pc, #432]	@ (8003628 <main+0x304>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80fc 	beq.w	8003678 <main+0x354>
	          // Display finger detected status
	          ssd1306_SetCursor(0, 0);
 8003480:	2100      	movs	r1, #0
 8003482:	2000      	movs	r0, #0
 8003484:	f000 fe76 	bl	8004174 <ssd1306_SetCursor>
	          ssd1306_WriteString("Finger: OK", Font_7x10, 1);
 8003488:	4b61      	ldr	r3, [pc, #388]	@ (8003610 <main+0x2ec>)
 800348a:	2201      	movs	r2, #1
 800348c:	9200      	str	r2, [sp, #0]
 800348e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003490:	486a      	ldr	r0, [pc, #424]	@ (800363c <main+0x318>)
 8003492:	f000 fe49 	bl	8004128 <ssd1306_WriteString>

	          // Check for heartbeat
	          if (checkForBeat(irAverage)) {
 8003496:	4b63      	ldr	r3, [pc, #396]	@ (8003624 <main+0x300>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff feb8 	bl	8003210 <checkForBeat>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d06b      	beq.n	800357e <main+0x25a>
	              // Calculate time between beats
	              delta = HAL_GetTick() - lastBeat;
 80034a6:	f7fd fe5b 	bl	8001160 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b64      	ldr	r3, [pc, #400]	@ (8003640 <main+0x31c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	4a64      	ldr	r2, [pc, #400]	@ (8003644 <main+0x320>)
 80034b4:	6013      	str	r3, [r2, #0]
	              lastBeat = HAL_GetTick();
 80034b6:	f7fd fe53 	bl	8001160 <HAL_GetTick>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4a60      	ldr	r2, [pc, #384]	@ (8003640 <main+0x31c>)
 80034be:	6013      	str	r3, [r2, #0]

	              // Calculate BPM
	              beatsPerMinute = 60.0f / (delta / 1000.0f);
 80034c0:	4b60      	ldr	r3, [pc, #384]	@ (8003644 <main+0x320>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd fbb5 	bl	8000c34 <__aeabi_ui2f>
 80034ca:	4603      	mov	r3, r0
 80034cc:	495e      	ldr	r1, [pc, #376]	@ (8003648 <main+0x324>)
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd fcbc 	bl	8000e4c <__aeabi_fdiv>
 80034d4:	4603      	mov	r3, r0
 80034d6:	4619      	mov	r1, r3
 80034d8:	485c      	ldr	r0, [pc, #368]	@ (800364c <main+0x328>)
 80034da:	f7fd fcb7 	bl	8000e4c <__aeabi_fdiv>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003650 <main+0x32c>)
 80034e4:	601a      	str	r2, [r3, #0]

	              // Validate BPM range (normal human range)
	              if (beatsPerMinute < 255 && beatsPerMinute > 20) {
 80034e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003650 <main+0x32c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	495a      	ldr	r1, [pc, #360]	@ (8003654 <main+0x330>)
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fd97 	bl	8001020 <__aeabi_fcmplt>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d042      	beq.n	800357e <main+0x25a>
 80034f8:	4b55      	ldr	r3, [pc, #340]	@ (8003650 <main+0x32c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4956      	ldr	r1, [pc, #344]	@ (8003658 <main+0x334>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fd fdac 	bl	800105c <__aeabi_fcmpgt>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d039      	beq.n	800357e <main+0x25a>
	                  rates[rateSpot++] = (uint8_t)beatsPerMinute;
 800350a:	4b51      	ldr	r3, [pc, #324]	@ (8003650 <main+0x32c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b53      	ldr	r3, [pc, #332]	@ (800365c <main+0x338>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	1c59      	adds	r1, r3, #1
 8003514:	b2c8      	uxtb	r0, r1
 8003516:	4951      	ldr	r1, [pc, #324]	@ (800365c <main+0x338>)
 8003518:	7008      	strb	r0, [r1, #0]
 800351a:	461c      	mov	r4, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f7fd fda7 	bl	8001070 <__aeabi_f2uiz>
 8003522:	4603      	mov	r3, r0
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4b4e      	ldr	r3, [pc, #312]	@ (8003660 <main+0x33c>)
 8003528:	551a      	strb	r2, [r3, r4]
	                  rateSpot %= RATE_SIZE;
 800352a:	4b4c      	ldr	r3, [pc, #304]	@ (800365c <main+0x338>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	b2da      	uxtb	r2, r3
 8003534:	4b49      	ldr	r3, [pc, #292]	@ (800365c <main+0x338>)
 8003536:	701a      	strb	r2, [r3, #0]

	                  // Calculate average BPM
	                  beatAvg = 0;
 8003538:	4b4a      	ldr	r3, [pc, #296]	@ (8003664 <main+0x340>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
	                  for (uint8_t x = 0; x < RATE_SIZE; x++) {
 800353e:	2300      	movs	r3, #0
 8003540:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003544:	e00e      	b.n	8003564 <main+0x240>
	                      beatAvg += rates[x];
 8003546:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800354a:	4a45      	ldr	r2, [pc, #276]	@ (8003660 <main+0x33c>)
 800354c:	5cd3      	ldrb	r3, [r2, r3]
 800354e:	461a      	mov	r2, r3
 8003550:	4b44      	ldr	r3, [pc, #272]	@ (8003664 <main+0x340>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4413      	add	r3, r2
 8003556:	4a43      	ldr	r2, [pc, #268]	@ (8003664 <main+0x340>)
 8003558:	6013      	str	r3, [r2, #0]
	                  for (uint8_t x = 0; x < RATE_SIZE; x++) {
 800355a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800355e:	3301      	adds	r3, #1
 8003560:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003564:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003568:	2b03      	cmp	r3, #3
 800356a:	d9ec      	bls.n	8003546 <main+0x222>
	                  }
	                  beatAvg /= RATE_SIZE;
 800356c:	4b3d      	ldr	r3, [pc, #244]	@ (8003664 <main+0x340>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	da00      	bge.n	8003576 <main+0x252>
 8003574:	3303      	adds	r3, #3
 8003576:	109b      	asrs	r3, r3, #2
 8003578:	461a      	mov	r2, r3
 800357a:	4b3a      	ldr	r3, [pc, #232]	@ (8003664 <main+0x340>)
 800357c:	601a      	str	r2, [r3, #0]
	              }
	          }

	          // Display current BPM
	          char bpmString[16];
	          sprintf(bpmString, "BPM: %.0f", beatsPerMinute);
 800357e:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <main+0x32c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fc ff50 	bl	8000428 <__aeabi_f2d>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003590:	4935      	ldr	r1, [pc, #212]	@ (8003668 <main+0x344>)
 8003592:	f001 fd9d 	bl	80050d0 <siprintf>
	          ssd1306_SetCursor(0, 15);
 8003596:	210f      	movs	r1, #15
 8003598:	2000      	movs	r0, #0
 800359a:	f000 fdeb 	bl	8004174 <ssd1306_SetCursor>
	          ssd1306_WriteString(bpmString, Font_7x10, 1);
 800359e:	4b1c      	ldr	r3, [pc, #112]	@ (8003610 <main+0x2ec>)
 80035a0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80035a4:	2201      	movs	r2, #1
 80035a6:	9200      	str	r2, [sp, #0]
 80035a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035aa:	f000 fdbd 	bl	8004128 <ssd1306_WriteString>

	          // Display average BPM
	          char avgString[16];
	          sprintf(avgString, "Avg: %d", beatAvg);
 80035ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <main+0x340>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	492d      	ldr	r1, [pc, #180]	@ (800366c <main+0x348>)
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fd89 	bl	80050d0 <siprintf>
	          ssd1306_SetCursor(0, 30);
 80035be:	211e      	movs	r1, #30
 80035c0:	2000      	movs	r0, #0
 80035c2:	f000 fdd7 	bl	8004174 <ssd1306_SetCursor>
	          ssd1306_WriteString(avgString, Font_7x10, 1);
 80035c6:	4b12      	ldr	r3, [pc, #72]	@ (8003610 <main+0x2ec>)
 80035c8:	f107 0014 	add.w	r0, r7, #20
 80035cc:	2201      	movs	r2, #1
 80035ce:	9200      	str	r2, [sp, #0]
 80035d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d2:	f000 fda9 	bl	8004128 <ssd1306_WriteString>

	          // Display signal strength
	          char signalString[16];
	          sprintf(signalString, "Signal: %lu", irValue / 1000);
 80035d6:	4b12      	ldr	r3, [pc, #72]	@ (8003620 <main+0x2fc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a25      	ldr	r2, [pc, #148]	@ (8003670 <main+0x34c>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	099a      	lsrs	r2, r3, #6
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	4923      	ldr	r1, [pc, #140]	@ (8003674 <main+0x350>)
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 fd72 	bl	80050d0 <siprintf>
	          ssd1306_SetCursor(0, 45);
 80035ec:	212d      	movs	r1, #45	@ 0x2d
 80035ee:	2000      	movs	r0, #0
 80035f0:	f000 fdc0 	bl	8004174 <ssd1306_SetCursor>
	          ssd1306_WriteString(signalString, Font_7x10, 1);
 80035f4:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <main+0x2ec>)
 80035f6:	1d38      	adds	r0, r7, #4
 80035f8:	2201      	movs	r2, #1
 80035fa:	9200      	str	r2, [sp, #0]
 80035fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035fe:	f000 fd93 	bl	8004128 <ssd1306_WriteString>
 8003602:	e056      	b.n	80036b2 <main+0x38e>
 8003604:	200001f8 	.word	0x200001f8
 8003608:	2000029c 	.word	0x2000029c
 800360c:	41480000 	.word	0x41480000
 8003610:	08009940 	.word	0x08009940
 8003614:	080071f8 	.word	0x080071f8
 8003618:	0800720c 	.word	0x0800720c
 800361c:	0800721c 	.word	0x0800721c
 8003620:	20000260 	.word	0x20000260
 8003624:	20000298 	.word	0x20000298
 8003628:	20000268 	.word	0x20000268
 800362c:	08009958 	.word	0x08009958
 8003630:	08007228 	.word	0x08007228
 8003634:	0800723c 	.word	0x0800723c
 8003638:	0800994c 	.word	0x0800994c
 800363c:	08007250 	.word	0x08007250
 8003640:	20000254 	.word	0x20000254
 8003644:	20000264 	.word	0x20000264
 8003648:	447a0000 	.word	0x447a0000
 800364c:	42700000 	.word	0x42700000
 8003650:	20000258 	.word	0x20000258
 8003654:	437f0000 	.word	0x437f0000
 8003658:	41a00000 	.word	0x41a00000
 800365c:	20000250 	.word	0x20000250
 8003660:	2000024c 	.word	0x2000024c
 8003664:	2000025c 	.word	0x2000025c
 8003668:	0800725c 	.word	0x0800725c
 800366c:	08007268 	.word	0x08007268
 8003670:	10624dd3 	.word	0x10624dd3
 8003674:	08007270 	.word	0x08007270

	      } else {
	          // No finger detected
	          ssd1306_SetCursor(0, 0);
 8003678:	2100      	movs	r1, #0
 800367a:	2000      	movs	r0, #0
 800367c:	f000 fd7a 	bl	8004174 <ssd1306_SetCursor>
	          ssd1306_WriteString("No finger", Font_7x10, 1);
 8003680:	4b13      	ldr	r3, [pc, #76]	@ (80036d0 <main+0x3ac>)
 8003682:	2201      	movs	r2, #1
 8003684:	9200      	str	r2, [sp, #0]
 8003686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003688:	4812      	ldr	r0, [pc, #72]	@ (80036d4 <main+0x3b0>)
 800368a:	f000 fd4d 	bl	8004128 <ssd1306_WriteString>
	          ssd1306_SetCursor(0, 15);
 800368e:	210f      	movs	r1, #15
 8003690:	2000      	movs	r0, #0
 8003692:	f000 fd6f 	bl	8004174 <ssd1306_SetCursor>
	          ssd1306_WriteString("detected", Font_7x10, 1);
 8003696:	4b0e      	ldr	r3, [pc, #56]	@ (80036d0 <main+0x3ac>)
 8003698:	2201      	movs	r2, #1
 800369a:	9200      	str	r2, [sp, #0]
 800369c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800369e:	480e      	ldr	r0, [pc, #56]	@ (80036d8 <main+0x3b4>)
 80036a0:	f000 fd42 	bl	8004128 <ssd1306_WriteString>

	          // Reset heart rate values
	          beatsPerMinute = 0;
 80036a4:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <main+0x3b8>)
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
	          beatAvg = 0;
 80036ac:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <main+0x3bc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
	      }

	      ssd1306_UpdateScreen();
 80036b2:	f000 fc29 	bl	8003f08 <ssd1306_UpdateScreen>

	      // Handle interrupts
	      if (max30102_has_interrupt(&max30102)) {
 80036b6:	480b      	ldr	r0, [pc, #44]	@ (80036e4 <main+0x3c0>)
 80036b8:	f000 f979 	bl	80039ae <max30102_has_interrupt>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <main+0x3a4>
	          max30102_interrupt_handler(&max30102);
 80036c2:	4808      	ldr	r0, [pc, #32]	@ (80036e4 <main+0x3c0>)
 80036c4:	f000 f97f 	bl	80039c6 <max30102_interrupt_handler>
	      }

	      HAL_Delay(50); // Reduced delay for more responsive detection
 80036c8:	2032      	movs	r0, #50	@ 0x32
 80036ca:	f7fd fd53 	bl	8001174 <HAL_Delay>
	      max30102_read_fifo(&max30102);
 80036ce:	e68c      	b.n	80033ea <main+0xc6>
 80036d0:	08009940 	.word	0x08009940
 80036d4:	0800727c 	.word	0x0800727c
 80036d8:	08007288 	.word	0x08007288
 80036dc:	20000258 	.word	0x20000258
 80036e0:	2000025c 	.word	0x2000025c
 80036e4:	2000029c 	.word	0x2000029c

080036e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b090      	sub	sp, #64	@ 0x40
 80036ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ee:	f107 0318 	add.w	r3, r7, #24
 80036f2:	2228      	movs	r2, #40	@ 0x28
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fd4f 	bl	800519a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036fc:	1d3b      	adds	r3, r7, #4
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800370e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003714:	2300      	movs	r3, #0
 8003716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003718:	2301      	movs	r3, #1
 800371a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800371c:	2302      	movs	r3, #2
 800371e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003726:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800372a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800372c:	f107 0318 	add.w	r3, r7, #24
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff f96f 	bl	8002a14 <HAL_RCC_OscConfig>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800373c:	f000 f876 	bl	800382c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003740:	230f      	movs	r3, #15
 8003742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003744:	2302      	movs	r3, #2
 8003746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800374c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	2102      	movs	r1, #2
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fbdc 	bl	8002f18 <HAL_RCC_ClockConfig>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003766:	f000 f861 	bl	800382c <Error_Handler>
  }
}
 800376a:	bf00      	nop
 800376c:	3740      	adds	r7, #64	@ 0x40
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003778:	4b12      	ldr	r3, [pc, #72]	@ (80037c4 <MX_I2C1_Init+0x50>)
 800377a:	4a13      	ldr	r2, [pc, #76]	@ (80037c8 <MX_I2C1_Init+0x54>)
 800377c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800377e:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <MX_I2C1_Init+0x50>)
 8003780:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <MX_I2C1_Init+0x58>)
 8003782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003784:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <MX_I2C1_Init+0x50>)
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800378a:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <MX_I2C1_Init+0x50>)
 800378c:	2200      	movs	r2, #0
 800378e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <MX_I2C1_Init+0x50>)
 8003792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003798:	4b0a      	ldr	r3, [pc, #40]	@ (80037c4 <MX_I2C1_Init+0x50>)
 800379a:	2200      	movs	r2, #0
 800379c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800379e:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <MX_I2C1_Init+0x50>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037a4:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <MX_I2C1_Init+0x50>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037aa:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <MX_I2C1_Init+0x50>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037b0:	4804      	ldr	r0, [pc, #16]	@ (80037c4 <MX_I2C1_Init+0x50>)
 80037b2:	f7fd ff6b 	bl	800168c <HAL_I2C_Init>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80037bc:	f000 f836 	bl	800382c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037c0:	bf00      	nop
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	200001f8 	.word	0x200001f8
 80037c8:	40005400 	.word	0x40005400
 80037cc:	00061a80 	.word	0x00061a80

080037d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037d6:	4b14      	ldr	r3, [pc, #80]	@ (8003828 <MX_GPIO_Init+0x58>)
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	4a13      	ldr	r2, [pc, #76]	@ (8003828 <MX_GPIO_Init+0x58>)
 80037dc:	f043 0320 	orr.w	r3, r3, #32
 80037e0:	6193      	str	r3, [r2, #24]
 80037e2:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <MX_GPIO_Init+0x58>)
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <MX_GPIO_Init+0x58>)
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003828 <MX_GPIO_Init+0x58>)
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	6193      	str	r3, [r2, #24]
 80037fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003828 <MX_GPIO_Init+0x58>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003806:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <MX_GPIO_Init+0x58>)
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	4a07      	ldr	r2, [pc, #28]	@ (8003828 <MX_GPIO_Init+0x58>)
 800380c:	f043 0308 	orr.w	r3, r3, #8
 8003810:	6193      	str	r3, [r2, #24]
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <MX_GPIO_Init+0x58>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40021000 	.word	0x40021000

0800382c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003830:	b672      	cpsid	i
}
 8003832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003834:	bf00      	nop
 8003836:	e7fd      	b.n	8003834 <Error_Handler+0x8>

08003838 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	2280      	movs	r2, #128	@ 0x80
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f001 fc94 	bl	800519a <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3384      	adds	r3, #132	@ 0x84
 8003876:	2280      	movs	r2, #128	@ 0x80
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fc8d 	bl	800519a <memset>
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	461a      	mov	r2, r3
 8003894:	460b      	mov	r3, r1
 8003896:	72fb      	strb	r3, [r7, #11]
 8003898:	4613      	mov	r3, r2
 800389a:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800389c:	893b      	ldrh	r3, [r7, #8]
 800389e:	3301      	adds	r3, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fe3b 	bl	800451c <malloc>
 80038a6:	4603      	mov	r3, r0
 80038a8:	617b      	str	r3, [r7, #20]
    *payload = reg;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	7afa      	ldrb	r2, [r7, #11]
 80038ae:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <max30102_write+0x42>
 80038b6:	893b      	ldrh	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d006      	beq.n	80038ca <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	893a      	ldrh	r2, [r7, #8]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 fd06 	bl	80052d6 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	893b      	ldrh	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038d8:	9200      	str	r2, [sp, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	21ae      	movs	r1, #174	@ 0xae
 80038de:	f7fe f819 	bl	8001914 <HAL_I2C_Master_Transmit>
    free(payload);
 80038e2:	6978      	ldr	r0, [r7, #20]
 80038e4:	f000 fe22 	bl	800452c <free>
}
 80038e8:	bf00      	nop
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	461a      	mov	r2, r3
 80038fc:	460b      	mov	r3, r1
 80038fe:	72fb      	strb	r3, [r7, #11]
 8003900:	4613      	mov	r3, r2
 8003902:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8003904:	7afb      	ldrb	r3, [r7, #11]
 8003906:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	f107 0217 	add.w	r2, r7, #23
 8003910:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2301      	movs	r3, #1
 8003918:	21ae      	movs	r1, #174	@ 0xae
 800391a:	f7fd fffb 	bl	8001914 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	893b      	ldrh	r3, [r7, #8]
 8003924:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003928:	9200      	str	r2, [sp, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	21ae      	movs	r1, #174	@ 0xae
 800392e:	f7fe f8ef 	bl	8001b10 <HAL_I2C_Master_Receive>
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8003942:	2340      	movs	r3, #64	@ 0x40
 8003944:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8003946:	f107 020f 	add.w	r2, r7, #15
 800394a:	2301      	movs	r3, #1
 800394c:	2109      	movs	r1, #9
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff9a 	bl	8003888 <max30102_write>
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800396c:	f107 020f 	add.w	r2, r7, #15
 8003970:	2301      	movs	r3, #1
 8003972:	2102      	movs	r1, #2
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ffbb 	bl	80038f0 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003980:	b2db      	uxtb	r3, r3
 8003982:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8003984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003988:	01db      	lsls	r3, r3, #7
 800398a:	b25a      	sxtb	r2, r3
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	b25b      	sxtb	r3, r3
 8003990:	4313      	orrs	r3, r2
 8003992:	b25b      	sxtb	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003998:	f107 020f 	add.w	r2, r7, #15
 800399c:	2301      	movs	r3, #1
 800399e:	2102      	movs	r1, #2
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff71 	bl	8003888 <max30102_write>
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr

080039c6 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 80039ce:	2300      	movs	r3, #0
 80039d0:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 80039d2:	f107 020c 	add.w	r2, r7, #12
 80039d6:	2302      	movs	r3, #2
 80039d8:	2100      	movs	r1, #0
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ff88 	bl	80038f0 <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 80039e0:	7b3b      	ldrb	r3, [r7, #12]
 80039e2:	09db      	lsrs	r3, r3, #7
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f955 	bl	8003c9e <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 80039f4:	7b7b      	ldrb	r3, [r7, #13]
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8003a02:	f107 020a 	add.w	r2, r7, #10
 8003a06:	f107 030b 	add.w	r3, r7, #11
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f9ab 	bl	8003d68 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003a2e:	f107 020f 	add.w	r2, r7, #15
 8003a32:	2301      	movs	r3, #1
 8003a34:	2109      	movs	r1, #9
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff ff5a 	bl	80038f0 <max30102_read>
    config = (config & 0xf8) | mode;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	b25b      	sxtb	r3, r3
 8003a40:	f023 0307 	bic.w	r3, r3, #7
 8003a44:	b25a      	sxtb	r2, r3
 8003a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003a52:	f107 020f 	add.w	r2, r7, #15
 8003a56:	2301      	movs	r3, #1
 8003a58:	2109      	movs	r1, #9
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ff14 	bl	8003888 <max30102_write>
    max30102_clear_fifo(obj);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f8fd 	bl	8003c60 <max30102_clear_fifo>
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003a7a:	f107 020f 	add.w	r2, r7, #15
 8003a7e:	2301      	movs	r3, #1
 8003a80:	210a      	movs	r1, #10
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff34 	bl	80038f0 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	b25b      	sxtb	r3, r3
 8003a8c:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 8003a90:	b25a      	sxtb	r2, r3
 8003a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	b25b      	sxtb	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003aa2:	f107 020f 	add.w	r2, r7, #15
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	210a      	movs	r1, #10
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff feec 	bl	8003888 <max30102_write>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003ac4:	f107 020f 	add.w	r2, r7, #15
 8003ac8:	2301      	movs	r3, #1
 8003aca:	210a      	movs	r1, #10
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff0f 	bl	80038f0 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	b25b      	sxtb	r3, r3
 8003ad6:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003ada:	b25a      	sxtb	r2, r3
 8003adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b25b      	sxtb	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003ae8:	f107 020f 	add.w	r2, r7, #15
 8003aec:	2301      	movs	r3, #1
 8003aee:	210a      	movs	r1, #10
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff fec9 	bl	8003888 <max30102_write>
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003b0a:	f107 020f 	add.w	r2, r7, #15
 8003b0e:	2301      	movs	r3, #1
 8003b10:	210a      	movs	r1, #10
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff feec 	bl	80038f0 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	b25a      	sxtb	r2, r3
 8003b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b26:	015b      	lsls	r3, r3, #5
 8003b28:	b25b      	sxtb	r3, r3
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003b32:	f107 020f 	add.w	r2, r7, #15
 8003b36:	2301      	movs	r3, #1
 8003b38:	210a      	movs	r1, #10
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fea4 	bl	8003888 <max30102_write>
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003b52:	6838      	ldr	r0, [r7, #0]
 8003b54:	f7fc fc68 	bl	8000428 <__aeabi_f2d>
 8003b58:	a30d      	add	r3, pc, #52	@ (adr r3, 8003b90 <max30102_set_led_current_1+0x48>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f7fc fde5 	bl	800072c <__aeabi_ddiv>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f7fc ff8d 	bl	8000a88 <__aeabi_d2uiz>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8003b74:	f107 020f 	add.w	r2, r7, #15
 8003b78:	2301      	movs	r3, #1
 8003b7a:	210c      	movs	r1, #12
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff fe83 	bl	8003888 <max30102_write>
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	f3af 8000 	nop.w
 8003b90:	9999999a 	.word	0x9999999a
 8003b94:	3fc99999 	.word	0x3fc99999

08003b98 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003ba2:	6838      	ldr	r0, [r7, #0]
 8003ba4:	f7fc fc40 	bl	8000428 <__aeabi_f2d>
 8003ba8:	a30d      	add	r3, pc, #52	@ (adr r3, 8003be0 <max30102_set_led_current_2+0x48>)
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f7fc fdbd 	bl	800072c <__aeabi_ddiv>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f7fc ff65 	bl	8000a88 <__aeabi_d2uiz>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8003bc4:	f107 020f 	add.w	r2, r7, #15
 8003bc8:	2301      	movs	r3, #1
 8003bca:	210d      	movs	r1, #13
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fe5b 	bl	8003888 <max30102_write>
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	f3af 8000 	nop.w
 8003be0:	9999999a 	.word	0x9999999a
 8003be4:	3fc99999 	.word	0x3fc99999

08003be8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	70fb      	strb	r3, [r7, #3]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70bb      	strb	r3, [r7, #2]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8003c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c0a:	015b      	lsls	r3, r3, #5
 8003c0c:	b25a      	sxtb	r2, r3
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	4313      	orrs	r3, r2
 8003c14:	b25b      	sxtb	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8003c1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	b25b      	sxtb	r3, r3
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	b25a      	sxtb	r2, r3
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	b25b      	sxtb	r3, r3
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	b25b      	sxtb	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8003c34:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	b25a      	sxtb	r2, r3
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	4313      	orrs	r3, r2
 8003c44:	b25b      	sxtb	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8003c4a:	f107 020f 	add.w	r2, r7, #15
 8003c4e:	2301      	movs	r3, #1
 8003c50:	2108      	movs	r1, #8
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff fe18 	bl	8003888 <max30102_write>
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8003c6c:	f107 020f 	add.w	r2, r7, #15
 8003c70:	2303      	movs	r3, #3
 8003c72:	2104      	movs	r1, #4
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff fe07 	bl	8003888 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8003c7a:	f107 020f 	add.w	r2, r7, #15
 8003c7e:	2303      	movs	r3, #3
 8003c80:	2106      	movs	r1, #6
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fe00 	bl	8003888 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8003c88:	f107 020f 	add.w	r2, r7, #15
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	2105      	movs	r1, #5
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fdf9 	bl	8003888 <max30102_write>
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b088      	sub	sp, #32
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	74fb      	strb	r3, [r7, #19]
 8003caa:	2300      	movs	r3, #0
 8003cac:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8003cae:	f107 0213 	add.w	r2, r7, #19
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	2104      	movs	r1, #4
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fe1a 	bl	80038f0 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8003cbc:	f107 0212 	add.w	r2, r7, #18
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2106      	movs	r1, #6
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fe13 	bl	80038f0 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8003cca:	7cfa      	ldrb	r2, [r7, #19]
 8003ccc:	7cbb      	ldrb	r3, [r7, #18]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8003cd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	dc03      	bgt.n	8003ce4 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8003cdc:	7ffb      	ldrb	r3, [r7, #31]
 8003cde:	3320      	adds	r3, #32
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77bb      	strb	r3, [r7, #30]
 8003ce8:	e033      	b.n	8003d52 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8003cea:	f107 020c 	add.w	r2, r7, #12
 8003cee:	2306      	movs	r3, #6
 8003cf0:	2107      	movs	r1, #7
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fdfc 	bl	80038f0 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8003cf8:	7b3b      	ldrb	r3, [r7, #12]
 8003cfa:	041a      	lsls	r2, r3, #16
 8003cfc:	7b7b      	ldrb	r3, [r7, #13]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	4313      	orrs	r3, r2
 8003d02:	7bba      	ldrb	r2, [r7, #14]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003d0a:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	041a      	lsls	r2, r3, #16
 8003d10:	7c3b      	ldrb	r3, [r7, #16]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	4313      	orrs	r3, r2
 8003d16:	7c7a      	ldrb	r2, [r7, #17]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003d1e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8003d20:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8003d2e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	3320      	adds	r3, #32
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8003d3e:	6979      	ldr	r1, [r7, #20]
 8003d40:	69b8      	ldr	r0, [r7, #24]
 8003d42:	f7ff fd79 	bl	8003838 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8003d46:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	77bb      	strb	r3, [r7, #30]
 8003d52:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8003d56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	dbc5      	blt.n	8003cea <max30102_read_fifo+0x4c>
    }
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8003d74:	2301      	movs	r3, #1
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	211f      	movs	r1, #31
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7ff fdb8 	bl	80038f0 <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8003d80:	2301      	movs	r3, #1
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	2120      	movs	r1, #32
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f7ff fdb2 	bl	80038f0 <max30102_read>
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af04      	add	r7, sp, #16
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	2301      	movs	r3, #1
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	1dfb      	adds	r3, r7, #7
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2301      	movs	r3, #1
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2178      	movs	r1, #120	@ 0x78
 8003dbe:	4803      	ldr	r0, [pc, #12]	@ (8003dcc <ssd1306_WriteCommand+0x2c>)
 8003dc0:	f7fe f912 	bl	8001fe8 <HAL_I2C_Mem_Write>
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200001f8 	.word	0x200001f8

08003dd0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af04      	add	r7, sp, #16
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295
 8003de2:	9202      	str	r2, [sp, #8]
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	2301      	movs	r3, #1
 8003dec:	2240      	movs	r2, #64	@ 0x40
 8003dee:	2178      	movs	r1, #120	@ 0x78
 8003df0:	4803      	ldr	r0, [pc, #12]	@ (8003e00 <ssd1306_WriteData+0x30>)
 8003df2:	f7fe f8f9 	bl	8001fe8 <HAL_I2C_Mem_Write>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	200001f8 	.word	0x200001f8

08003e04 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003e08:	f7ff ffc4 	bl	8003d94 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003e0c:	2064      	movs	r0, #100	@ 0x64
 8003e0e:	f7fd f9b1 	bl	8001174 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003e12:	2000      	movs	r0, #0
 8003e14:	f000 f9da 	bl	80041cc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003e18:	2020      	movs	r0, #32
 8003e1a:	f7ff ffc1 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f7ff ffbe 	bl	8003da0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e24:	20b0      	movs	r0, #176	@ 0xb0
 8003e26:	f7ff ffbb 	bl	8003da0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003e2a:	20c8      	movs	r0, #200	@ 0xc8
 8003e2c:	f7ff ffb8 	bl	8003da0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7ff ffb5 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003e36:	2010      	movs	r0, #16
 8003e38:	f7ff ffb2 	bl	8003da0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003e3c:	2040      	movs	r0, #64	@ 0x40
 8003e3e:	f7ff ffaf 	bl	8003da0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003e42:	20ff      	movs	r0, #255	@ 0xff
 8003e44:	f000 f9ae 	bl	80041a4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003e48:	20a1      	movs	r0, #161	@ 0xa1
 8003e4a:	f7ff ffa9 	bl	8003da0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003e4e:	20a6      	movs	r0, #166	@ 0xa6
 8003e50:	f7ff ffa6 	bl	8003da0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003e54:	20a8      	movs	r0, #168	@ 0xa8
 8003e56:	f7ff ffa3 	bl	8003da0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003e5a:	203f      	movs	r0, #63	@ 0x3f
 8003e5c:	f7ff ffa0 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e60:	20a4      	movs	r0, #164	@ 0xa4
 8003e62:	f7ff ff9d 	bl	8003da0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003e66:	20d3      	movs	r0, #211	@ 0xd3
 8003e68:	f7ff ff9a 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7ff ff97 	bl	8003da0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e72:	20d5      	movs	r0, #213	@ 0xd5
 8003e74:	f7ff ff94 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003e78:	20f0      	movs	r0, #240	@ 0xf0
 8003e7a:	f7ff ff91 	bl	8003da0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003e7e:	20d9      	movs	r0, #217	@ 0xd9
 8003e80:	f7ff ff8e 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003e84:	2022      	movs	r0, #34	@ 0x22
 8003e86:	f7ff ff8b 	bl	8003da0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003e8a:	20da      	movs	r0, #218	@ 0xda
 8003e8c:	f7ff ff88 	bl	8003da0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003e90:	2012      	movs	r0, #18
 8003e92:	f7ff ff85 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003e96:	20db      	movs	r0, #219	@ 0xdb
 8003e98:	f7ff ff82 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003e9c:	2020      	movs	r0, #32
 8003e9e:	f7ff ff7f 	bl	8003da0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003ea2:	208d      	movs	r0, #141	@ 0x8d
 8003ea4:	f7ff ff7c 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003ea8:	2014      	movs	r0, #20
 8003eaa:	f7ff ff79 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003eae:	2001      	movs	r0, #1
 8003eb0:	f000 f98c 	bl	80041cc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f000 f80f 	bl	8003ed8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003eba:	f000 f825 	bl	8003f08 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003ebe:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <ssd1306_Init+0xd0>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	@ (8003ed4 <ssd1306_Init+0xd0>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003eca:	4b02      	ldr	r3, [pc, #8]	@ (8003ed4 <ssd1306_Init+0xd0>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	711a      	strb	r2, [r3, #4]
}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200007ac 	.word	0x200007ac

08003ed8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <ssd1306_Fill+0x14>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <ssd1306_Fill+0x16>
 8003eec:	23ff      	movs	r3, #255	@ 0xff
 8003eee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4803      	ldr	r0, [pc, #12]	@ (8003f04 <ssd1306_Fill+0x2c>)
 8003ef6:	f001 f950 	bl	800519a <memset>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200003ac 	.word	0x200003ac

08003f08 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f0e:	2300      	movs	r3, #0
 8003f10:	71fb      	strb	r3, [r7, #7]
 8003f12:	e016      	b.n	8003f42 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	3b50      	subs	r3, #80	@ 0x50
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff ff40 	bl	8003da0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003f20:	2000      	movs	r0, #0
 8003f22:	f7ff ff3d 	bl	8003da0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003f26:	2010      	movs	r0, #16
 8003f28:	f7ff ff3a 	bl	8003da0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	01db      	lsls	r3, r3, #7
 8003f30:	4a08      	ldr	r2, [pc, #32]	@ (8003f54 <ssd1306_UpdateScreen+0x4c>)
 8003f32:	4413      	add	r3, r2
 8003f34:	2180      	movs	r1, #128	@ 0x80
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff ff4a 	bl	8003dd0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	71fb      	strb	r3, [r7, #7]
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	2b07      	cmp	r3, #7
 8003f46:	d9e5      	bls.n	8003f14 <ssd1306_UpdateScreen+0xc>
    }
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200003ac 	.word	0x200003ac

08003f58 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
 8003f62:	460b      	mov	r3, r1
 8003f64:	71bb      	strb	r3, [r7, #6]
 8003f66:	4613      	mov	r3, r2
 8003f68:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	db3d      	blt.n	8003fee <ssd1306_DrawPixel+0x96>
 8003f72:	79bb      	ldrb	r3, [r7, #6]
 8003f74:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f76:	d83a      	bhi.n	8003fee <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003f78:	797b      	ldrb	r3, [r7, #5]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d11a      	bne.n	8003fb4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003f7e:	79fa      	ldrb	r2, [r7, #7]
 8003f80:	79bb      	ldrb	r3, [r7, #6]
 8003f82:	08db      	lsrs	r3, r3, #3
 8003f84:	b2d8      	uxtb	r0, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	01db      	lsls	r3, r3, #7
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff8 <ssd1306_DrawPixel+0xa0>)
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	b25a      	sxtb	r2, r3
 8003f92:	79bb      	ldrb	r3, [r7, #6]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	2101      	movs	r1, #1
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	b25b      	sxtb	r3, r3
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	b259      	sxtb	r1, r3
 8003fa4:	79fa      	ldrb	r2, [r7, #7]
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	01db      	lsls	r3, r3, #7
 8003faa:	4413      	add	r3, r2
 8003fac:	b2c9      	uxtb	r1, r1
 8003fae:	4a12      	ldr	r2, [pc, #72]	@ (8003ff8 <ssd1306_DrawPixel+0xa0>)
 8003fb0:	54d1      	strb	r1, [r2, r3]
 8003fb2:	e01d      	b.n	8003ff0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003fb4:	79fa      	ldrb	r2, [r7, #7]
 8003fb6:	79bb      	ldrb	r3, [r7, #6]
 8003fb8:	08db      	lsrs	r3, r3, #3
 8003fba:	b2d8      	uxtb	r0, r3
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	01db      	lsls	r3, r3, #7
 8003fc0:	4413      	add	r3, r2
 8003fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <ssd1306_DrawPixel+0xa0>)
 8003fc4:	5cd3      	ldrb	r3, [r2, r3]
 8003fc6:	b25a      	sxtb	r2, r3
 8003fc8:	79bb      	ldrb	r3, [r7, #6]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	2101      	movs	r1, #1
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	b25b      	sxtb	r3, r3
 8003fda:	4013      	ands	r3, r2
 8003fdc:	b259      	sxtb	r1, r3
 8003fde:	79fa      	ldrb	r2, [r7, #7]
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	01db      	lsls	r3, r3, #7
 8003fe4:	4413      	add	r3, r2
 8003fe6:	b2c9      	uxtb	r1, r1
 8003fe8:	4a03      	ldr	r2, [pc, #12]	@ (8003ff8 <ssd1306_DrawPixel+0xa0>)
 8003fea:	54d1      	strb	r1, [r2, r3]
 8003fec:	e000      	b.n	8003ff0 <ssd1306_DrawPixel+0x98>
        return;
 8003fee:	bf00      	nop
    }
}
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	200003ac 	.word	0x200003ac

08003ffc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b089      	sub	sp, #36	@ 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	4604      	mov	r4, r0
 8004004:	4638      	mov	r0, r7
 8004006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800400a:	4623      	mov	r3, r4
 800400c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800400e:	4b45      	ldr	r3, [pc, #276]	@ (8004124 <ssd1306_WriteChar+0x128>)
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	783b      	ldrb	r3, [r7, #0]
 8004016:	4413      	add	r3, r2
 8004018:	2b80      	cmp	r3, #128	@ 0x80
 800401a:	dc06      	bgt.n	800402a <ssd1306_WriteChar+0x2e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800401c:	4b41      	ldr	r3, [pc, #260]	@ (8004124 <ssd1306_WriteChar+0x128>)
 800401e:	885b      	ldrh	r3, [r3, #2]
 8004020:	461a      	mov	r2, r3
 8004022:	787b      	ldrb	r3, [r7, #1]
 8004024:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	dd01      	ble.n	800402e <ssd1306_WriteChar+0x32>
    {
        // Not enough space on current line
        return 0;
 800402a:	2300      	movs	r3, #0
 800402c:	e075      	b.n	800411a <ssd1306_WriteChar+0x11e>
    }
    
    uint8_t sh = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	75fb      	strb	r3, [r7, #23]
    if(Font.width > 16)
 8004032:	783b      	ldrb	r3, [r7, #0]
 8004034:	2b10      	cmp	r3, #16
 8004036:	d901      	bls.n	800403c <ssd1306_WriteChar+0x40>
    	sh = 1;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e055      	b.n	80040ee <ssd1306_WriteChar+0xf2>
    	uint16_t idx = (ch - 32) * Font.height + i;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	3b20      	subs	r3, #32
 8004046:	b29b      	uxth	r3, r3
 8004048:	787a      	ldrb	r2, [r7, #1]
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	b29a      	uxth	r2, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	b29b      	uxth	r3, r3
 8004054:	4413      	add	r3, r2
 8004056:	82bb      	strh	r3, [r7, #20]
        b = Font.data[idx<<sh];
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	8ab9      	ldrh	r1, [r7, #20]
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	613b      	str	r3, [r7, #16]
        for(j = 0; j < Font.width; j++) {
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	e036      	b.n	80040de <ssd1306_WriteChar+0xe2>
            if((b << j) & 0x8000)  {
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d013      	beq.n	80040a8 <ssd1306_WriteChar+0xac>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004080:	4b28      	ldr	r3, [pc, #160]	@ (8004124 <ssd1306_WriteChar+0x128>)
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	4413      	add	r3, r2
 800408c:	b2d8      	uxtb	r0, r3
 800408e:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <ssd1306_WriteChar+0x128>)
 8004090:	885b      	ldrh	r3, [r3, #2]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4413      	add	r3, r2
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80040a0:	4619      	mov	r1, r3
 80040a2:	f7ff ff59 	bl	8003f58 <ssd1306_DrawPixel>
 80040a6:	e017      	b.n	80040d8 <ssd1306_WriteChar+0xdc>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80040a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <ssd1306_WriteChar+0x128>)
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	b2d8      	uxtb	r0, r3
 80040b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <ssd1306_WriteChar+0x128>)
 80040b8:	885b      	ldrh	r3, [r3, #2]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	b2d9      	uxtb	r1, r3
 80040c4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	f7ff ff40 	bl	8003f58 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	3301      	adds	r3, #1
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	783b      	ldrb	r3, [r7, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d3c3      	bcc.n	8004070 <ssd1306_WriteChar+0x74>
    for(i = 0; i < Font.height; i++) {
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	787b      	ldrb	r3, [r7, #1]
 80040f0:	461a      	mov	r2, r3
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d3a4      	bcc.n	8004042 <ssd1306_WriteChar+0x46>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <ssd1306_WriteChar+0x128>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	2a00      	cmp	r2, #0
 8004100:	d005      	beq.n	800410e <ssd1306_WriteChar+0x112>
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	3a20      	subs	r2, #32
 8004108:	440a      	add	r2, r1
 800410a:	7812      	ldrb	r2, [r2, #0]
 800410c:	e000      	b.n	8004110 <ssd1306_WriteChar+0x114>
 800410e:	783a      	ldrb	r2, [r7, #0]
 8004110:	4413      	add	r3, r2
 8004112:	b29a      	uxth	r2, r3
 8004114:	4b03      	ldr	r3, [pc, #12]	@ (8004124 <ssd1306_WriteChar+0x128>)
 8004116:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3724      	adds	r7, #36	@ 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd90      	pop	{r4, r7, pc}
 8004122:	bf00      	nop
 8004124:	200007ac 	.word	0x200007ac

08004128 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	4638      	mov	r0, r7
 8004132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004136:	e013      	b.n	8004160 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	7818      	ldrb	r0, [r3, #0]
 800413c:	7e3b      	ldrb	r3, [r7, #24]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	463b      	mov	r3, r7
 8004142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004144:	f7ff ff5a 	bl	8003ffc <ssd1306_WriteChar>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d002      	beq.n	800415a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	e008      	b.n	800416c <ssd1306_WriteString+0x44>
        }
        str++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3301      	adds	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e7      	bne.n	8004138 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	781b      	ldrb	r3, [r3, #0]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	460a      	mov	r2, r1
 800417e:	71fb      	strb	r3, [r7, #7]
 8004180:	4613      	mov	r3, r2
 8004182:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	b29a      	uxth	r2, r3
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <ssd1306_SetCursor+0x2c>)
 800418a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800418c:	79bb      	ldrb	r3, [r7, #6]
 800418e:	b29a      	uxth	r2, r3
 8004190:	4b03      	ldr	r3, [pc, #12]	@ (80041a0 <ssd1306_SetCursor+0x2c>)
 8004192:	805a      	strh	r2, [r3, #2]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	200007ac 	.word	0x200007ac

080041a4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80041ae:	2381      	movs	r3, #129	@ 0x81
 80041b0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fdf3 	bl	8003da0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fdef 	bl	8003da0 <ssd1306_WriteCommand>
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80041dc:	23af      	movs	r3, #175	@ 0xaf
 80041de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80041e0:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <ssd1306_SetDisplayOn+0x38>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	715a      	strb	r2, [r3, #5]
 80041e6:	e004      	b.n	80041f2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80041e8:	23ae      	movs	r3, #174	@ 0xae
 80041ea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <ssd1306_SetDisplayOn+0x38>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fdd3 	bl	8003da0 <ssd1306_WriteCommand>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	200007ac 	.word	0x200007ac

08004208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800420e:	4b15      	ldr	r3, [pc, #84]	@ (8004264 <HAL_MspInit+0x5c>)
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	4a14      	ldr	r2, [pc, #80]	@ (8004264 <HAL_MspInit+0x5c>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6193      	str	r3, [r2, #24]
 800421a:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <HAL_MspInit+0x5c>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	4b0f      	ldr	r3, [pc, #60]	@ (8004264 <HAL_MspInit+0x5c>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4a0e      	ldr	r2, [pc, #56]	@ (8004264 <HAL_MspInit+0x5c>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004230:	61d3      	str	r3, [r2, #28]
 8004232:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <HAL_MspInit+0x5c>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800423e:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <HAL_MspInit+0x60>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	4a04      	ldr	r2, [pc, #16]	@ (8004268 <HAL_MspInit+0x60>)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	40021000 	.word	0x40021000
 8004268:	40010000 	.word	0x40010000

0800426c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004274:	f107 0310 	add.w	r3, r7, #16
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a15      	ldr	r2, [pc, #84]	@ (80042dc <HAL_I2C_MspInit+0x70>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d123      	bne.n	80042d4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800428c:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <HAL_I2C_MspInit+0x74>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	4a13      	ldr	r2, [pc, #76]	@ (80042e0 <HAL_I2C_MspInit+0x74>)
 8004292:	f043 0308 	orr.w	r3, r3, #8
 8004296:	6193      	str	r3, [r2, #24]
 8004298:	4b11      	ldr	r3, [pc, #68]	@ (80042e0 <HAL_I2C_MspInit+0x74>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042a4:	23c0      	movs	r3, #192	@ 0xc0
 80042a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042a8:	2312      	movs	r3, #18
 80042aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ac:	2303      	movs	r3, #3
 80042ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b0:	f107 0310 	add.w	r3, r7, #16
 80042b4:	4619      	mov	r1, r3
 80042b6:	480b      	ldr	r0, [pc, #44]	@ (80042e4 <HAL_I2C_MspInit+0x78>)
 80042b8:	f7fd f864 	bl	8001384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042bc:	4b08      	ldr	r3, [pc, #32]	@ (80042e0 <HAL_I2C_MspInit+0x74>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4a07      	ldr	r2, [pc, #28]	@ (80042e0 <HAL_I2C_MspInit+0x74>)
 80042c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042c6:	61d3      	str	r3, [r2, #28]
 80042c8:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <HAL_I2C_MspInit+0x74>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80042d4:	bf00      	nop
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40005400 	.word	0x40005400
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40010c00 	.word	0x40010c00

080042e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <NMI_Handler+0x4>

080042f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <HardFault_Handler+0x4>

080042f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <MemManage_Handler+0x4>

08004300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <BusFault_Handler+0x4>

08004308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <UsageFault_Handler+0x4>

08004310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004338:	f7fc ff00 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}

08004340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return 1;
 8004344:	2301      	movs	r3, #1
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <_kill>:

int _kill(int pid, int sig)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004358:	f000 ff82 	bl	8005260 <__errno>
 800435c:	4603      	mov	r3, r0
 800435e:	2216      	movs	r2, #22
 8004360:	601a      	str	r2, [r3, #0]
  return -1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_exit>:

void _exit (int status)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004376:	f04f 31ff 	mov.w	r1, #4294967295
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff ffe7 	bl	800434e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <_exit+0x12>

08004384 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e00a      	b.n	80043ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004396:	f3af 8000 	nop.w
 800439a:	4601      	mov	r1, r0
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	60ba      	str	r2, [r7, #8]
 80043a2:	b2ca      	uxtb	r2, r1
 80043a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	3301      	adds	r3, #1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	dbf0      	blt.n	8004396 <_read+0x12>
  }

  return len;
 80043b4:	687b      	ldr	r3, [r7, #4]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e009      	b.n	80043e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	60ba      	str	r2, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	3301      	adds	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	dbf1      	blt.n	80043d0 <_write+0x12>
  }
  return len;
 80043ec:	687b      	ldr	r3, [r7, #4]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <_close>:

int _close(int file)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800441c:	605a      	str	r2, [r3, #4]
  return 0;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <_isatty>:

int _isatty(int file)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004432:	2301      	movs	r3, #1
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
	...

08004458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004460:	4a14      	ldr	r2, [pc, #80]	@ (80044b4 <_sbrk+0x5c>)
 8004462:	4b15      	ldr	r3, [pc, #84]	@ (80044b8 <_sbrk+0x60>)
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800446c:	4b13      	ldr	r3, [pc, #76]	@ (80044bc <_sbrk+0x64>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004474:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <_sbrk+0x64>)
 8004476:	4a12      	ldr	r2, [pc, #72]	@ (80044c0 <_sbrk+0x68>)
 8004478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800447a:	4b10      	ldr	r3, [pc, #64]	@ (80044bc <_sbrk+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	429a      	cmp	r2, r3
 8004486:	d207      	bcs.n	8004498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004488:	f000 feea 	bl	8005260 <__errno>
 800448c:	4603      	mov	r3, r0
 800448e:	220c      	movs	r2, #12
 8004490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	e009      	b.n	80044ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004498:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <_sbrk+0x64>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800449e:	4b07      	ldr	r3, [pc, #28]	@ (80044bc <_sbrk+0x64>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	4a05      	ldr	r2, [pc, #20]	@ (80044bc <_sbrk+0x64>)
 80044a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044aa:	68fb      	ldr	r3, [r7, #12]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20005000 	.word	0x20005000
 80044b8:	00000400 	.word	0x00000400
 80044bc:	200007b4 	.word	0x200007b4
 80044c0:	20000908 	.word	0x20000908

080044c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044c8:	bf00      	nop
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <Reset_Handler>:
 80044d0:	f7ff fff8 	bl	80044c4 <SystemInit>
 80044d4:	480b      	ldr	r0, [pc, #44]	@ (8004504 <LoopFillZerobss+0xe>)
 80044d6:	490c      	ldr	r1, [pc, #48]	@ (8004508 <LoopFillZerobss+0x12>)
 80044d8:	4a0c      	ldr	r2, [pc, #48]	@ (800450c <LoopFillZerobss+0x16>)
 80044da:	2300      	movs	r3, #0
 80044dc:	e002      	b.n	80044e4 <LoopCopyDataInit>

080044de <CopyDataInit>:
 80044de:	58d4      	ldr	r4, [r2, r3]
 80044e0:	50c4      	str	r4, [r0, r3]
 80044e2:	3304      	adds	r3, #4

080044e4 <LoopCopyDataInit>:
 80044e4:	18c4      	adds	r4, r0, r3
 80044e6:	428c      	cmp	r4, r1
 80044e8:	d3f9      	bcc.n	80044de <CopyDataInit>
 80044ea:	4a09      	ldr	r2, [pc, #36]	@ (8004510 <LoopFillZerobss+0x1a>)
 80044ec:	4c09      	ldr	r4, [pc, #36]	@ (8004514 <LoopFillZerobss+0x1e>)
 80044ee:	2300      	movs	r3, #0
 80044f0:	e001      	b.n	80044f6 <LoopFillZerobss>

080044f2 <FillZerobss>:
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	3204      	adds	r2, #4

080044f6 <LoopFillZerobss>:
 80044f6:	42a2      	cmp	r2, r4
 80044f8:	d3fb      	bcc.n	80044f2 <FillZerobss>
 80044fa:	f000 feb7 	bl	800526c <__libc_init_array>
 80044fe:	f7fe ff11 	bl	8003324 <main>
 8004502:	4770      	bx	lr
 8004504:	20000000 	.word	0x20000000
 8004508:	200001d8 	.word	0x200001d8
 800450c:	08009d04 	.word	0x08009d04
 8004510:	200001d8 	.word	0x200001d8
 8004514:	20000904 	.word	0x20000904

08004518 <ADC1_2_IRQHandler>:
 8004518:	e7fe      	b.n	8004518 <ADC1_2_IRQHandler>
	...

0800451c <malloc>:
 800451c:	4b02      	ldr	r3, [pc, #8]	@ (8004528 <malloc+0xc>)
 800451e:	4601      	mov	r1, r0
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	f000 b82d 	b.w	8004580 <_malloc_r>
 8004526:	bf00      	nop
 8004528:	2000001c 	.word	0x2000001c

0800452c <free>:
 800452c:	4b02      	ldr	r3, [pc, #8]	@ (8004538 <free+0xc>)
 800452e:	4601      	mov	r1, r0
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f001 bd3d 	b.w	8005fb0 <_free_r>
 8004536:	bf00      	nop
 8004538:	2000001c 	.word	0x2000001c

0800453c <sbrk_aligned>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4e0f      	ldr	r6, [pc, #60]	@ (800457c <sbrk_aligned+0x40>)
 8004540:	460c      	mov	r4, r1
 8004542:	6831      	ldr	r1, [r6, #0]
 8004544:	4605      	mov	r5, r0
 8004546:	b911      	cbnz	r1, 800454e <sbrk_aligned+0x12>
 8004548:	f000 fe68 	bl	800521c <_sbrk_r>
 800454c:	6030      	str	r0, [r6, #0]
 800454e:	4621      	mov	r1, r4
 8004550:	4628      	mov	r0, r5
 8004552:	f000 fe63 	bl	800521c <_sbrk_r>
 8004556:	1c43      	adds	r3, r0, #1
 8004558:	d103      	bne.n	8004562 <sbrk_aligned+0x26>
 800455a:	f04f 34ff 	mov.w	r4, #4294967295
 800455e:	4620      	mov	r0, r4
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	1cc4      	adds	r4, r0, #3
 8004564:	f024 0403 	bic.w	r4, r4, #3
 8004568:	42a0      	cmp	r0, r4
 800456a:	d0f8      	beq.n	800455e <sbrk_aligned+0x22>
 800456c:	1a21      	subs	r1, r4, r0
 800456e:	4628      	mov	r0, r5
 8004570:	f000 fe54 	bl	800521c <_sbrk_r>
 8004574:	3001      	adds	r0, #1
 8004576:	d1f2      	bne.n	800455e <sbrk_aligned+0x22>
 8004578:	e7ef      	b.n	800455a <sbrk_aligned+0x1e>
 800457a:	bf00      	nop
 800457c:	200007b8 	.word	0x200007b8

08004580 <_malloc_r>:
 8004580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004584:	1ccd      	adds	r5, r1, #3
 8004586:	f025 0503 	bic.w	r5, r5, #3
 800458a:	3508      	adds	r5, #8
 800458c:	2d0c      	cmp	r5, #12
 800458e:	bf38      	it	cc
 8004590:	250c      	movcc	r5, #12
 8004592:	2d00      	cmp	r5, #0
 8004594:	4606      	mov	r6, r0
 8004596:	db01      	blt.n	800459c <_malloc_r+0x1c>
 8004598:	42a9      	cmp	r1, r5
 800459a:	d904      	bls.n	80045a6 <_malloc_r+0x26>
 800459c:	230c      	movs	r3, #12
 800459e:	6033      	str	r3, [r6, #0]
 80045a0:	2000      	movs	r0, #0
 80045a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800467c <_malloc_r+0xfc>
 80045aa:	f000 f869 	bl	8004680 <__malloc_lock>
 80045ae:	f8d8 3000 	ldr.w	r3, [r8]
 80045b2:	461c      	mov	r4, r3
 80045b4:	bb44      	cbnz	r4, 8004608 <_malloc_r+0x88>
 80045b6:	4629      	mov	r1, r5
 80045b8:	4630      	mov	r0, r6
 80045ba:	f7ff ffbf 	bl	800453c <sbrk_aligned>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	4604      	mov	r4, r0
 80045c2:	d158      	bne.n	8004676 <_malloc_r+0xf6>
 80045c4:	f8d8 4000 	ldr.w	r4, [r8]
 80045c8:	4627      	mov	r7, r4
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	d143      	bne.n	8004656 <_malloc_r+0xd6>
 80045ce:	2c00      	cmp	r4, #0
 80045d0:	d04b      	beq.n	800466a <_malloc_r+0xea>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	4639      	mov	r1, r7
 80045d6:	4630      	mov	r0, r6
 80045d8:	eb04 0903 	add.w	r9, r4, r3
 80045dc:	f000 fe1e 	bl	800521c <_sbrk_r>
 80045e0:	4581      	cmp	r9, r0
 80045e2:	d142      	bne.n	800466a <_malloc_r+0xea>
 80045e4:	6821      	ldr	r1, [r4, #0]
 80045e6:	4630      	mov	r0, r6
 80045e8:	1a6d      	subs	r5, r5, r1
 80045ea:	4629      	mov	r1, r5
 80045ec:	f7ff ffa6 	bl	800453c <sbrk_aligned>
 80045f0:	3001      	adds	r0, #1
 80045f2:	d03a      	beq.n	800466a <_malloc_r+0xea>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	442b      	add	r3, r5
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	f8d8 3000 	ldr.w	r3, [r8]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	bb62      	cbnz	r2, 800465c <_malloc_r+0xdc>
 8004602:	f8c8 7000 	str.w	r7, [r8]
 8004606:	e00f      	b.n	8004628 <_malloc_r+0xa8>
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	1b52      	subs	r2, r2, r5
 800460c:	d420      	bmi.n	8004650 <_malloc_r+0xd0>
 800460e:	2a0b      	cmp	r2, #11
 8004610:	d917      	bls.n	8004642 <_malloc_r+0xc2>
 8004612:	1961      	adds	r1, r4, r5
 8004614:	42a3      	cmp	r3, r4
 8004616:	6025      	str	r5, [r4, #0]
 8004618:	bf18      	it	ne
 800461a:	6059      	strne	r1, [r3, #4]
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	bf08      	it	eq
 8004620:	f8c8 1000 	streq.w	r1, [r8]
 8004624:	5162      	str	r2, [r4, r5]
 8004626:	604b      	str	r3, [r1, #4]
 8004628:	4630      	mov	r0, r6
 800462a:	f000 f82f 	bl	800468c <__malloc_unlock>
 800462e:	f104 000b 	add.w	r0, r4, #11
 8004632:	1d23      	adds	r3, r4, #4
 8004634:	f020 0007 	bic.w	r0, r0, #7
 8004638:	1ac2      	subs	r2, r0, r3
 800463a:	bf1c      	itt	ne
 800463c:	1a1b      	subne	r3, r3, r0
 800463e:	50a3      	strne	r3, [r4, r2]
 8004640:	e7af      	b.n	80045a2 <_malloc_r+0x22>
 8004642:	6862      	ldr	r2, [r4, #4]
 8004644:	42a3      	cmp	r3, r4
 8004646:	bf0c      	ite	eq
 8004648:	f8c8 2000 	streq.w	r2, [r8]
 800464c:	605a      	strne	r2, [r3, #4]
 800464e:	e7eb      	b.n	8004628 <_malloc_r+0xa8>
 8004650:	4623      	mov	r3, r4
 8004652:	6864      	ldr	r4, [r4, #4]
 8004654:	e7ae      	b.n	80045b4 <_malloc_r+0x34>
 8004656:	463c      	mov	r4, r7
 8004658:	687f      	ldr	r7, [r7, #4]
 800465a:	e7b6      	b.n	80045ca <_malloc_r+0x4a>
 800465c:	461a      	mov	r2, r3
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	42a3      	cmp	r3, r4
 8004662:	d1fb      	bne.n	800465c <_malloc_r+0xdc>
 8004664:	2300      	movs	r3, #0
 8004666:	6053      	str	r3, [r2, #4]
 8004668:	e7de      	b.n	8004628 <_malloc_r+0xa8>
 800466a:	230c      	movs	r3, #12
 800466c:	4630      	mov	r0, r6
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	f000 f80c 	bl	800468c <__malloc_unlock>
 8004674:	e794      	b.n	80045a0 <_malloc_r+0x20>
 8004676:	6005      	str	r5, [r0, #0]
 8004678:	e7d6      	b.n	8004628 <_malloc_r+0xa8>
 800467a:	bf00      	nop
 800467c:	200007bc 	.word	0x200007bc

08004680 <__malloc_lock>:
 8004680:	4801      	ldr	r0, [pc, #4]	@ (8004688 <__malloc_lock+0x8>)
 8004682:	f000 be18 	b.w	80052b6 <__retarget_lock_acquire_recursive>
 8004686:	bf00      	nop
 8004688:	20000900 	.word	0x20000900

0800468c <__malloc_unlock>:
 800468c:	4801      	ldr	r0, [pc, #4]	@ (8004694 <__malloc_unlock+0x8>)
 800468e:	f000 be13 	b.w	80052b8 <__retarget_lock_release_recursive>
 8004692:	bf00      	nop
 8004694:	20000900 	.word	0x20000900

08004698 <__cvt>:
 8004698:	2b00      	cmp	r3, #0
 800469a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800469e:	461d      	mov	r5, r3
 80046a0:	bfbb      	ittet	lt
 80046a2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80046a6:	461d      	movlt	r5, r3
 80046a8:	2300      	movge	r3, #0
 80046aa:	232d      	movlt	r3, #45	@ 0x2d
 80046ac:	b088      	sub	sp, #32
 80046ae:	4614      	mov	r4, r2
 80046b0:	bfb8      	it	lt
 80046b2:	4614      	movlt	r4, r2
 80046b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80046b6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80046b8:	7013      	strb	r3, [r2, #0]
 80046ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80046bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80046c0:	f023 0820 	bic.w	r8, r3, #32
 80046c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046c8:	d005      	beq.n	80046d6 <__cvt+0x3e>
 80046ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80046ce:	d100      	bne.n	80046d2 <__cvt+0x3a>
 80046d0:	3601      	adds	r6, #1
 80046d2:	2302      	movs	r3, #2
 80046d4:	e000      	b.n	80046d8 <__cvt+0x40>
 80046d6:	2303      	movs	r3, #3
 80046d8:	aa07      	add	r2, sp, #28
 80046da:	9204      	str	r2, [sp, #16]
 80046dc:	aa06      	add	r2, sp, #24
 80046de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80046e2:	e9cd 3600 	strd	r3, r6, [sp]
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	f000 fe8d 	bl	8005408 <_dtoa_r>
 80046ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80046f2:	4607      	mov	r7, r0
 80046f4:	d119      	bne.n	800472a <__cvt+0x92>
 80046f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80046f8:	07db      	lsls	r3, r3, #31
 80046fa:	d50e      	bpl.n	800471a <__cvt+0x82>
 80046fc:	eb00 0906 	add.w	r9, r0, r6
 8004700:	2200      	movs	r2, #0
 8004702:	2300      	movs	r3, #0
 8004704:	4620      	mov	r0, r4
 8004706:	4629      	mov	r1, r5
 8004708:	f7fc f94e 	bl	80009a8 <__aeabi_dcmpeq>
 800470c:	b108      	cbz	r0, 8004712 <__cvt+0x7a>
 800470e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004712:	2230      	movs	r2, #48	@ 0x30
 8004714:	9b07      	ldr	r3, [sp, #28]
 8004716:	454b      	cmp	r3, r9
 8004718:	d31e      	bcc.n	8004758 <__cvt+0xc0>
 800471a:	4638      	mov	r0, r7
 800471c:	9b07      	ldr	r3, [sp, #28]
 800471e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004720:	1bdb      	subs	r3, r3, r7
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	b008      	add	sp, #32
 8004726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800472e:	eb00 0906 	add.w	r9, r0, r6
 8004732:	d1e5      	bne.n	8004700 <__cvt+0x68>
 8004734:	7803      	ldrb	r3, [r0, #0]
 8004736:	2b30      	cmp	r3, #48	@ 0x30
 8004738:	d10a      	bne.n	8004750 <__cvt+0xb8>
 800473a:	2200      	movs	r2, #0
 800473c:	2300      	movs	r3, #0
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	f7fc f931 	bl	80009a8 <__aeabi_dcmpeq>
 8004746:	b918      	cbnz	r0, 8004750 <__cvt+0xb8>
 8004748:	f1c6 0601 	rsb	r6, r6, #1
 800474c:	f8ca 6000 	str.w	r6, [sl]
 8004750:	f8da 3000 	ldr.w	r3, [sl]
 8004754:	4499      	add	r9, r3
 8004756:	e7d3      	b.n	8004700 <__cvt+0x68>
 8004758:	1c59      	adds	r1, r3, #1
 800475a:	9107      	str	r1, [sp, #28]
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e7d9      	b.n	8004714 <__cvt+0x7c>

08004760 <__exponent>:
 8004760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004762:	2900      	cmp	r1, #0
 8004764:	bfb6      	itet	lt
 8004766:	232d      	movlt	r3, #45	@ 0x2d
 8004768:	232b      	movge	r3, #43	@ 0x2b
 800476a:	4249      	neglt	r1, r1
 800476c:	2909      	cmp	r1, #9
 800476e:	7002      	strb	r2, [r0, #0]
 8004770:	7043      	strb	r3, [r0, #1]
 8004772:	dd29      	ble.n	80047c8 <__exponent+0x68>
 8004774:	f10d 0307 	add.w	r3, sp, #7
 8004778:	461d      	mov	r5, r3
 800477a:	270a      	movs	r7, #10
 800477c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004780:	461a      	mov	r2, r3
 8004782:	fb07 1416 	mls	r4, r7, r6, r1
 8004786:	3430      	adds	r4, #48	@ 0x30
 8004788:	f802 4c01 	strb.w	r4, [r2, #-1]
 800478c:	460c      	mov	r4, r1
 800478e:	2c63      	cmp	r4, #99	@ 0x63
 8004790:	4631      	mov	r1, r6
 8004792:	f103 33ff 	add.w	r3, r3, #4294967295
 8004796:	dcf1      	bgt.n	800477c <__exponent+0x1c>
 8004798:	3130      	adds	r1, #48	@ 0x30
 800479a:	1e94      	subs	r4, r2, #2
 800479c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047a0:	4623      	mov	r3, r4
 80047a2:	1c41      	adds	r1, r0, #1
 80047a4:	42ab      	cmp	r3, r5
 80047a6:	d30a      	bcc.n	80047be <__exponent+0x5e>
 80047a8:	f10d 0309 	add.w	r3, sp, #9
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	42ac      	cmp	r4, r5
 80047b0:	bf88      	it	hi
 80047b2:	2300      	movhi	r3, #0
 80047b4:	3302      	adds	r3, #2
 80047b6:	4403      	add	r3, r0
 80047b8:	1a18      	subs	r0, r3, r0
 80047ba:	b003      	add	sp, #12
 80047bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047be:	f813 6b01 	ldrb.w	r6, [r3], #1
 80047c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80047c6:	e7ed      	b.n	80047a4 <__exponent+0x44>
 80047c8:	2330      	movs	r3, #48	@ 0x30
 80047ca:	3130      	adds	r1, #48	@ 0x30
 80047cc:	7083      	strb	r3, [r0, #2]
 80047ce:	70c1      	strb	r1, [r0, #3]
 80047d0:	1d03      	adds	r3, r0, #4
 80047d2:	e7f1      	b.n	80047b8 <__exponent+0x58>

080047d4 <_printf_float>:
 80047d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d8:	b091      	sub	sp, #68	@ 0x44
 80047da:	460c      	mov	r4, r1
 80047dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80047e0:	4616      	mov	r6, r2
 80047e2:	461f      	mov	r7, r3
 80047e4:	4605      	mov	r5, r0
 80047e6:	f000 fce1 	bl	80051ac <_localeconv_r>
 80047ea:	6803      	ldr	r3, [r0, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	9308      	str	r3, [sp, #32]
 80047f0:	f7fb fcae 	bl	8000150 <strlen>
 80047f4:	2300      	movs	r3, #0
 80047f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80047f8:	f8d8 3000 	ldr.w	r3, [r8]
 80047fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80047fe:	3307      	adds	r3, #7
 8004800:	f023 0307 	bic.w	r3, r3, #7
 8004804:	f103 0208 	add.w	r2, r3, #8
 8004808:	f894 a018 	ldrb.w	sl, [r4, #24]
 800480c:	f8d4 b000 	ldr.w	fp, [r4]
 8004810:	f8c8 2000 	str.w	r2, [r8]
 8004814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004818:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800481c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800481e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004822:	f04f 32ff 	mov.w	r2, #4294967295
 8004826:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800482a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800482e:	4b9c      	ldr	r3, [pc, #624]	@ (8004aa0 <_printf_float+0x2cc>)
 8004830:	f7fc f8ec 	bl	8000a0c <__aeabi_dcmpun>
 8004834:	bb70      	cbnz	r0, 8004894 <_printf_float+0xc0>
 8004836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800483a:	f04f 32ff 	mov.w	r2, #4294967295
 800483e:	4b98      	ldr	r3, [pc, #608]	@ (8004aa0 <_printf_float+0x2cc>)
 8004840:	f7fc f8c6 	bl	80009d0 <__aeabi_dcmple>
 8004844:	bb30      	cbnz	r0, 8004894 <_printf_float+0xc0>
 8004846:	2200      	movs	r2, #0
 8004848:	2300      	movs	r3, #0
 800484a:	4640      	mov	r0, r8
 800484c:	4649      	mov	r1, r9
 800484e:	f7fc f8b5 	bl	80009bc <__aeabi_dcmplt>
 8004852:	b110      	cbz	r0, 800485a <_printf_float+0x86>
 8004854:	232d      	movs	r3, #45	@ 0x2d
 8004856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800485a:	4a92      	ldr	r2, [pc, #584]	@ (8004aa4 <_printf_float+0x2d0>)
 800485c:	4b92      	ldr	r3, [pc, #584]	@ (8004aa8 <_printf_float+0x2d4>)
 800485e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004862:	bf8c      	ite	hi
 8004864:	4690      	movhi	r8, r2
 8004866:	4698      	movls	r8, r3
 8004868:	2303      	movs	r3, #3
 800486a:	f04f 0900 	mov.w	r9, #0
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	f02b 0304 	bic.w	r3, fp, #4
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	4633      	mov	r3, r6
 8004878:	4621      	mov	r1, r4
 800487a:	4628      	mov	r0, r5
 800487c:	9700      	str	r7, [sp, #0]
 800487e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004880:	f000 f9d4 	bl	8004c2c <_printf_common>
 8004884:	3001      	adds	r0, #1
 8004886:	f040 8090 	bne.w	80049aa <_printf_float+0x1d6>
 800488a:	f04f 30ff 	mov.w	r0, #4294967295
 800488e:	b011      	add	sp, #68	@ 0x44
 8004890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004894:	4642      	mov	r2, r8
 8004896:	464b      	mov	r3, r9
 8004898:	4640      	mov	r0, r8
 800489a:	4649      	mov	r1, r9
 800489c:	f7fc f8b6 	bl	8000a0c <__aeabi_dcmpun>
 80048a0:	b148      	cbz	r0, 80048b6 <_printf_float+0xe2>
 80048a2:	464b      	mov	r3, r9
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bfb8      	it	lt
 80048a8:	232d      	movlt	r3, #45	@ 0x2d
 80048aa:	4a80      	ldr	r2, [pc, #512]	@ (8004aac <_printf_float+0x2d8>)
 80048ac:	bfb8      	it	lt
 80048ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80048b2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ab0 <_printf_float+0x2dc>)
 80048b4:	e7d3      	b.n	800485e <_printf_float+0x8a>
 80048b6:	6863      	ldr	r3, [r4, #4]
 80048b8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	d13f      	bne.n	8004940 <_printf_float+0x16c>
 80048c0:	2306      	movs	r3, #6
 80048c2:	6063      	str	r3, [r4, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	9206      	str	r2, [sp, #24]
 80048ce:	aa0e      	add	r2, sp, #56	@ 0x38
 80048d0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80048d4:	aa0d      	add	r2, sp, #52	@ 0x34
 80048d6:	9203      	str	r2, [sp, #12]
 80048d8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80048dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80048e0:	6863      	ldr	r3, [r4, #4]
 80048e2:	4642      	mov	r2, r8
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	4628      	mov	r0, r5
 80048e8:	464b      	mov	r3, r9
 80048ea:	910a      	str	r1, [sp, #40]	@ 0x28
 80048ec:	f7ff fed4 	bl	8004698 <__cvt>
 80048f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80048f2:	4680      	mov	r8, r0
 80048f4:	2947      	cmp	r1, #71	@ 0x47
 80048f6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80048f8:	d128      	bne.n	800494c <_printf_float+0x178>
 80048fa:	1cc8      	adds	r0, r1, #3
 80048fc:	db02      	blt.n	8004904 <_printf_float+0x130>
 80048fe:	6863      	ldr	r3, [r4, #4]
 8004900:	4299      	cmp	r1, r3
 8004902:	dd40      	ble.n	8004986 <_printf_float+0x1b2>
 8004904:	f1aa 0a02 	sub.w	sl, sl, #2
 8004908:	fa5f fa8a 	uxtb.w	sl, sl
 800490c:	4652      	mov	r2, sl
 800490e:	3901      	subs	r1, #1
 8004910:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004914:	910d      	str	r1, [sp, #52]	@ 0x34
 8004916:	f7ff ff23 	bl	8004760 <__exponent>
 800491a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800491c:	4681      	mov	r9, r0
 800491e:	1813      	adds	r3, r2, r0
 8004920:	2a01      	cmp	r2, #1
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	dc02      	bgt.n	800492c <_printf_float+0x158>
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	07d2      	lsls	r2, r2, #31
 800492a:	d501      	bpl.n	8004930 <_printf_float+0x15c>
 800492c:	3301      	adds	r3, #1
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004934:	2b00      	cmp	r3, #0
 8004936:	d09e      	beq.n	8004876 <_printf_float+0xa2>
 8004938:	232d      	movs	r3, #45	@ 0x2d
 800493a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800493e:	e79a      	b.n	8004876 <_printf_float+0xa2>
 8004940:	2947      	cmp	r1, #71	@ 0x47
 8004942:	d1bf      	bne.n	80048c4 <_printf_float+0xf0>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1bd      	bne.n	80048c4 <_printf_float+0xf0>
 8004948:	2301      	movs	r3, #1
 800494a:	e7ba      	b.n	80048c2 <_printf_float+0xee>
 800494c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004950:	d9dc      	bls.n	800490c <_printf_float+0x138>
 8004952:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004956:	d118      	bne.n	800498a <_printf_float+0x1b6>
 8004958:	2900      	cmp	r1, #0
 800495a:	6863      	ldr	r3, [r4, #4]
 800495c:	dd0b      	ble.n	8004976 <_printf_float+0x1a2>
 800495e:	6121      	str	r1, [r4, #16]
 8004960:	b913      	cbnz	r3, 8004968 <_printf_float+0x194>
 8004962:	6822      	ldr	r2, [r4, #0]
 8004964:	07d0      	lsls	r0, r2, #31
 8004966:	d502      	bpl.n	800496e <_printf_float+0x19a>
 8004968:	3301      	adds	r3, #1
 800496a:	440b      	add	r3, r1
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	f04f 0900 	mov.w	r9, #0
 8004972:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004974:	e7dc      	b.n	8004930 <_printf_float+0x15c>
 8004976:	b913      	cbnz	r3, 800497e <_printf_float+0x1aa>
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	07d2      	lsls	r2, r2, #31
 800497c:	d501      	bpl.n	8004982 <_printf_float+0x1ae>
 800497e:	3302      	adds	r3, #2
 8004980:	e7f4      	b.n	800496c <_printf_float+0x198>
 8004982:	2301      	movs	r3, #1
 8004984:	e7f2      	b.n	800496c <_printf_float+0x198>
 8004986:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800498a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800498c:	4299      	cmp	r1, r3
 800498e:	db05      	blt.n	800499c <_printf_float+0x1c8>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	6121      	str	r1, [r4, #16]
 8004994:	07d8      	lsls	r0, r3, #31
 8004996:	d5ea      	bpl.n	800496e <_printf_float+0x19a>
 8004998:	1c4b      	adds	r3, r1, #1
 800499a:	e7e7      	b.n	800496c <_printf_float+0x198>
 800499c:	2900      	cmp	r1, #0
 800499e:	bfcc      	ite	gt
 80049a0:	2201      	movgt	r2, #1
 80049a2:	f1c1 0202 	rsble	r2, r1, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	e7e0      	b.n	800496c <_printf_float+0x198>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	055a      	lsls	r2, r3, #21
 80049ae:	d407      	bmi.n	80049c0 <_printf_float+0x1ec>
 80049b0:	6923      	ldr	r3, [r4, #16]
 80049b2:	4642      	mov	r2, r8
 80049b4:	4631      	mov	r1, r6
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	d12b      	bne.n	8004a16 <_printf_float+0x242>
 80049be:	e764      	b.n	800488a <_printf_float+0xb6>
 80049c0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049c4:	f240 80dc 	bls.w	8004b80 <_printf_float+0x3ac>
 80049c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80049cc:	2200      	movs	r2, #0
 80049ce:	2300      	movs	r3, #0
 80049d0:	f7fb ffea 	bl	80009a8 <__aeabi_dcmpeq>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d033      	beq.n	8004a40 <_printf_float+0x26c>
 80049d8:	2301      	movs	r3, #1
 80049da:	4631      	mov	r1, r6
 80049dc:	4628      	mov	r0, r5
 80049de:	4a35      	ldr	r2, [pc, #212]	@ (8004ab4 <_printf_float+0x2e0>)
 80049e0:	47b8      	blx	r7
 80049e2:	3001      	adds	r0, #1
 80049e4:	f43f af51 	beq.w	800488a <_printf_float+0xb6>
 80049e8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80049ec:	4543      	cmp	r3, r8
 80049ee:	db02      	blt.n	80049f6 <_printf_float+0x222>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	07d8      	lsls	r0, r3, #31
 80049f4:	d50f      	bpl.n	8004a16 <_printf_float+0x242>
 80049f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049fa:	4631      	mov	r1, r6
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b8      	blx	r7
 8004a00:	3001      	adds	r0, #1
 8004a02:	f43f af42 	beq.w	800488a <_printf_float+0xb6>
 8004a06:	f04f 0900 	mov.w	r9, #0
 8004a0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a0e:	f104 0a1a 	add.w	sl, r4, #26
 8004a12:	45c8      	cmp	r8, r9
 8004a14:	dc09      	bgt.n	8004a2a <_printf_float+0x256>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	079b      	lsls	r3, r3, #30
 8004a1a:	f100 8102 	bmi.w	8004c22 <_printf_float+0x44e>
 8004a1e:	68e0      	ldr	r0, [r4, #12]
 8004a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a22:	4298      	cmp	r0, r3
 8004a24:	bfb8      	it	lt
 8004a26:	4618      	movlt	r0, r3
 8004a28:	e731      	b.n	800488e <_printf_float+0xba>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	4652      	mov	r2, sl
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	f43f af28 	beq.w	800488a <_printf_float+0xb6>
 8004a3a:	f109 0901 	add.w	r9, r9, #1
 8004a3e:	e7e8      	b.n	8004a12 <_printf_float+0x23e>
 8004a40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dc38      	bgt.n	8004ab8 <_printf_float+0x2e4>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4a19      	ldr	r2, [pc, #100]	@ (8004ab4 <_printf_float+0x2e0>)
 8004a4e:	47b8      	blx	r7
 8004a50:	3001      	adds	r0, #1
 8004a52:	f43f af1a 	beq.w	800488a <_printf_float+0xb6>
 8004a56:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004a5a:	ea59 0303 	orrs.w	r3, r9, r3
 8004a5e:	d102      	bne.n	8004a66 <_printf_float+0x292>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	07d9      	lsls	r1, r3, #31
 8004a64:	d5d7      	bpl.n	8004a16 <_printf_float+0x242>
 8004a66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	f43f af0a 	beq.w	800488a <_printf_float+0xb6>
 8004a76:	f04f 0a00 	mov.w	sl, #0
 8004a7a:	f104 0b1a 	add.w	fp, r4, #26
 8004a7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a80:	425b      	negs	r3, r3
 8004a82:	4553      	cmp	r3, sl
 8004a84:	dc01      	bgt.n	8004a8a <_printf_float+0x2b6>
 8004a86:	464b      	mov	r3, r9
 8004a88:	e793      	b.n	80049b2 <_printf_float+0x1de>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	465a      	mov	r2, fp
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f aef8 	beq.w	800488a <_printf_float+0xb6>
 8004a9a:	f10a 0a01 	add.w	sl, sl, #1
 8004a9e:	e7ee      	b.n	8004a7e <_printf_float+0x2aa>
 8004aa0:	7fefffff 	.word	0x7fefffff
 8004aa4:	08009980 	.word	0x08009980
 8004aa8:	0800997c 	.word	0x0800997c
 8004aac:	08009988 	.word	0x08009988
 8004ab0:	08009984 	.word	0x08009984
 8004ab4:	0800998c 	.word	0x0800998c
 8004ab8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004aba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004abe:	4553      	cmp	r3, sl
 8004ac0:	bfa8      	it	ge
 8004ac2:	4653      	movge	r3, sl
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	4699      	mov	r9, r3
 8004ac8:	dc36      	bgt.n	8004b38 <_printf_float+0x364>
 8004aca:	f04f 0b00 	mov.w	fp, #0
 8004ace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ad2:	f104 021a 	add.w	r2, r4, #26
 8004ad6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ad8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ada:	eba3 0309 	sub.w	r3, r3, r9
 8004ade:	455b      	cmp	r3, fp
 8004ae0:	dc31      	bgt.n	8004b46 <_printf_float+0x372>
 8004ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ae4:	459a      	cmp	sl, r3
 8004ae6:	dc3a      	bgt.n	8004b5e <_printf_float+0x38a>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	07da      	lsls	r2, r3, #31
 8004aec:	d437      	bmi.n	8004b5e <_printf_float+0x38a>
 8004aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004af0:	ebaa 0903 	sub.w	r9, sl, r3
 8004af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004af6:	ebaa 0303 	sub.w	r3, sl, r3
 8004afa:	4599      	cmp	r9, r3
 8004afc:	bfa8      	it	ge
 8004afe:	4699      	movge	r9, r3
 8004b00:	f1b9 0f00 	cmp.w	r9, #0
 8004b04:	dc33      	bgt.n	8004b6e <_printf_float+0x39a>
 8004b06:	f04f 0800 	mov.w	r8, #0
 8004b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b0e:	f104 0b1a 	add.w	fp, r4, #26
 8004b12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b14:	ebaa 0303 	sub.w	r3, sl, r3
 8004b18:	eba3 0309 	sub.w	r3, r3, r9
 8004b1c:	4543      	cmp	r3, r8
 8004b1e:	f77f af7a 	ble.w	8004a16 <_printf_float+0x242>
 8004b22:	2301      	movs	r3, #1
 8004b24:	465a      	mov	r2, fp
 8004b26:	4631      	mov	r1, r6
 8004b28:	4628      	mov	r0, r5
 8004b2a:	47b8      	blx	r7
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	f43f aeac 	beq.w	800488a <_printf_float+0xb6>
 8004b32:	f108 0801 	add.w	r8, r8, #1
 8004b36:	e7ec      	b.n	8004b12 <_printf_float+0x33e>
 8004b38:	4642      	mov	r2, r8
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	d1c2      	bne.n	8004aca <_printf_float+0x2f6>
 8004b44:	e6a1      	b.n	800488a <_printf_float+0xb6>
 8004b46:	2301      	movs	r3, #1
 8004b48:	4631      	mov	r1, r6
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004b4e:	47b8      	blx	r7
 8004b50:	3001      	adds	r0, #1
 8004b52:	f43f ae9a 	beq.w	800488a <_printf_float+0xb6>
 8004b56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b58:	f10b 0b01 	add.w	fp, fp, #1
 8004b5c:	e7bb      	b.n	8004ad6 <_printf_float+0x302>
 8004b5e:	4631      	mov	r1, r6
 8004b60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b64:	4628      	mov	r0, r5
 8004b66:	47b8      	blx	r7
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d1c0      	bne.n	8004aee <_printf_float+0x31a>
 8004b6c:	e68d      	b.n	800488a <_printf_float+0xb6>
 8004b6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b70:	464b      	mov	r3, r9
 8004b72:	4631      	mov	r1, r6
 8004b74:	4628      	mov	r0, r5
 8004b76:	4442      	add	r2, r8
 8004b78:	47b8      	blx	r7
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d1c3      	bne.n	8004b06 <_printf_float+0x332>
 8004b7e:	e684      	b.n	800488a <_printf_float+0xb6>
 8004b80:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004b84:	f1ba 0f01 	cmp.w	sl, #1
 8004b88:	dc01      	bgt.n	8004b8e <_printf_float+0x3ba>
 8004b8a:	07db      	lsls	r3, r3, #31
 8004b8c:	d536      	bpl.n	8004bfc <_printf_float+0x428>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4642      	mov	r2, r8
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f ae76 	beq.w	800488a <_printf_float+0xb6>
 8004b9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b8      	blx	r7
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f43f ae6e 	beq.w	800488a <_printf_float+0xb6>
 8004bae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bba:	f7fb fef5 	bl	80009a8 <__aeabi_dcmpeq>
 8004bbe:	b9c0      	cbnz	r0, 8004bf2 <_printf_float+0x41e>
 8004bc0:	4653      	mov	r3, sl
 8004bc2:	f108 0201 	add.w	r2, r8, #1
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d10c      	bne.n	8004bea <_printf_float+0x416>
 8004bd0:	e65b      	b.n	800488a <_printf_float+0xb6>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	465a      	mov	r2, fp
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f ae54 	beq.w	800488a <_printf_float+0xb6>
 8004be2:	f108 0801 	add.w	r8, r8, #1
 8004be6:	45d0      	cmp	r8, sl
 8004be8:	dbf3      	blt.n	8004bd2 <_printf_float+0x3fe>
 8004bea:	464b      	mov	r3, r9
 8004bec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004bf0:	e6e0      	b.n	80049b4 <_printf_float+0x1e0>
 8004bf2:	f04f 0800 	mov.w	r8, #0
 8004bf6:	f104 0b1a 	add.w	fp, r4, #26
 8004bfa:	e7f4      	b.n	8004be6 <_printf_float+0x412>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	4642      	mov	r2, r8
 8004c00:	e7e1      	b.n	8004bc6 <_printf_float+0x3f2>
 8004c02:	2301      	movs	r3, #1
 8004c04:	464a      	mov	r2, r9
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	f43f ae3c 	beq.w	800488a <_printf_float+0xb6>
 8004c12:	f108 0801 	add.w	r8, r8, #1
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004c1a:	1a5b      	subs	r3, r3, r1
 8004c1c:	4543      	cmp	r3, r8
 8004c1e:	dcf0      	bgt.n	8004c02 <_printf_float+0x42e>
 8004c20:	e6fd      	b.n	8004a1e <_printf_float+0x24a>
 8004c22:	f04f 0800 	mov.w	r8, #0
 8004c26:	f104 0919 	add.w	r9, r4, #25
 8004c2a:	e7f4      	b.n	8004c16 <_printf_float+0x442>

08004c2c <_printf_common>:
 8004c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	4616      	mov	r6, r2
 8004c32:	4698      	mov	r8, r3
 8004c34:	688a      	ldr	r2, [r1, #8]
 8004c36:	690b      	ldr	r3, [r1, #16]
 8004c38:	4607      	mov	r7, r0
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	bfb8      	it	lt
 8004c3e:	4613      	movlt	r3, r2
 8004c40:	6033      	str	r3, [r6, #0]
 8004c42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c46:	460c      	mov	r4, r1
 8004c48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c4c:	b10a      	cbz	r2, 8004c52 <_printf_common+0x26>
 8004c4e:	3301      	adds	r3, #1
 8004c50:	6033      	str	r3, [r6, #0]
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	0699      	lsls	r1, r3, #26
 8004c56:	bf42      	ittt	mi
 8004c58:	6833      	ldrmi	r3, [r6, #0]
 8004c5a:	3302      	addmi	r3, #2
 8004c5c:	6033      	strmi	r3, [r6, #0]
 8004c5e:	6825      	ldr	r5, [r4, #0]
 8004c60:	f015 0506 	ands.w	r5, r5, #6
 8004c64:	d106      	bne.n	8004c74 <_printf_common+0x48>
 8004c66:	f104 0a19 	add.w	sl, r4, #25
 8004c6a:	68e3      	ldr	r3, [r4, #12]
 8004c6c:	6832      	ldr	r2, [r6, #0]
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	42ab      	cmp	r3, r5
 8004c72:	dc2b      	bgt.n	8004ccc <_printf_common+0xa0>
 8004c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c78:	6822      	ldr	r2, [r4, #0]
 8004c7a:	3b00      	subs	r3, #0
 8004c7c:	bf18      	it	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	0692      	lsls	r2, r2, #26
 8004c82:	d430      	bmi.n	8004ce6 <_printf_common+0xba>
 8004c84:	4641      	mov	r1, r8
 8004c86:	4638      	mov	r0, r7
 8004c88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c8c:	47c8      	blx	r9
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d023      	beq.n	8004cda <_printf_common+0xae>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	6922      	ldr	r2, [r4, #16]
 8004c96:	f003 0306 	and.w	r3, r3, #6
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	bf14      	ite	ne
 8004c9e:	2500      	movne	r5, #0
 8004ca0:	6833      	ldreq	r3, [r6, #0]
 8004ca2:	f04f 0600 	mov.w	r6, #0
 8004ca6:	bf08      	it	eq
 8004ca8:	68e5      	ldreq	r5, [r4, #12]
 8004caa:	f104 041a 	add.w	r4, r4, #26
 8004cae:	bf08      	it	eq
 8004cb0:	1aed      	subeq	r5, r5, r3
 8004cb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cb6:	bf08      	it	eq
 8004cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	bfc4      	itt	gt
 8004cc0:	1a9b      	subgt	r3, r3, r2
 8004cc2:	18ed      	addgt	r5, r5, r3
 8004cc4:	42b5      	cmp	r5, r6
 8004cc6:	d11a      	bne.n	8004cfe <_printf_common+0xd2>
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e008      	b.n	8004cde <_printf_common+0xb2>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4652      	mov	r2, sl
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	47c8      	blx	r9
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d103      	bne.n	8004ce2 <_printf_common+0xb6>
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	3501      	adds	r5, #1
 8004ce4:	e7c1      	b.n	8004c6a <_printf_common+0x3e>
 8004ce6:	2030      	movs	r0, #48	@ 0x30
 8004ce8:	18e1      	adds	r1, r4, r3
 8004cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cf4:	4422      	add	r2, r4
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cfc:	e7c2      	b.n	8004c84 <_printf_common+0x58>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4622      	mov	r2, r4
 8004d02:	4641      	mov	r1, r8
 8004d04:	4638      	mov	r0, r7
 8004d06:	47c8      	blx	r9
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d0e6      	beq.n	8004cda <_printf_common+0xae>
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7d9      	b.n	8004cc4 <_printf_common+0x98>

08004d10 <_printf_i>:
 8004d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	7e0f      	ldrb	r7, [r1, #24]
 8004d16:	4691      	mov	r9, r2
 8004d18:	2f78      	cmp	r7, #120	@ 0x78
 8004d1a:	4680      	mov	r8, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	469a      	mov	sl, r3
 8004d20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d26:	d807      	bhi.n	8004d38 <_printf_i+0x28>
 8004d28:	2f62      	cmp	r7, #98	@ 0x62
 8004d2a:	d80a      	bhi.n	8004d42 <_printf_i+0x32>
 8004d2c:	2f00      	cmp	r7, #0
 8004d2e:	f000 80d1 	beq.w	8004ed4 <_printf_i+0x1c4>
 8004d32:	2f58      	cmp	r7, #88	@ 0x58
 8004d34:	f000 80b8 	beq.w	8004ea8 <_printf_i+0x198>
 8004d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d40:	e03a      	b.n	8004db8 <_printf_i+0xa8>
 8004d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d46:	2b15      	cmp	r3, #21
 8004d48:	d8f6      	bhi.n	8004d38 <_printf_i+0x28>
 8004d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8004d50 <_printf_i+0x40>)
 8004d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d50:	08004da9 	.word	0x08004da9
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004d39 	.word	0x08004d39
 8004d5c:	08004d39 	.word	0x08004d39
 8004d60:	08004d39 	.word	0x08004d39
 8004d64:	08004d39 	.word	0x08004d39
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004d39 	.word	0x08004d39
 8004d70:	08004d39 	.word	0x08004d39
 8004d74:	08004d39 	.word	0x08004d39
 8004d78:	08004d39 	.word	0x08004d39
 8004d7c:	08004ebb 	.word	0x08004ebb
 8004d80:	08004de7 	.word	0x08004de7
 8004d84:	08004e75 	.word	0x08004e75
 8004d88:	08004d39 	.word	0x08004d39
 8004d8c:	08004d39 	.word	0x08004d39
 8004d90:	08004edd 	.word	0x08004edd
 8004d94:	08004d39 	.word	0x08004d39
 8004d98:	08004de7 	.word	0x08004de7
 8004d9c:	08004d39 	.word	0x08004d39
 8004da0:	08004d39 	.word	0x08004d39
 8004da4:	08004e7d 	.word	0x08004e7d
 8004da8:	6833      	ldr	r3, [r6, #0]
 8004daa:	1d1a      	adds	r2, r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6032      	str	r2, [r6, #0]
 8004db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004db8:	2301      	movs	r3, #1
 8004dba:	e09c      	b.n	8004ef6 <_printf_i+0x1e6>
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	6820      	ldr	r0, [r4, #0]
 8004dc0:	1d19      	adds	r1, r3, #4
 8004dc2:	6031      	str	r1, [r6, #0]
 8004dc4:	0606      	lsls	r6, r0, #24
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0xbc>
 8004dc8:	681d      	ldr	r5, [r3, #0]
 8004dca:	e003      	b.n	8004dd4 <_printf_i+0xc4>
 8004dcc:	0645      	lsls	r5, r0, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0xb8>
 8004dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dd4:	2d00      	cmp	r5, #0
 8004dd6:	da03      	bge.n	8004de0 <_printf_i+0xd0>
 8004dd8:	232d      	movs	r3, #45	@ 0x2d
 8004dda:	426d      	negs	r5, r5
 8004ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004de0:	230a      	movs	r3, #10
 8004de2:	4858      	ldr	r0, [pc, #352]	@ (8004f44 <_printf_i+0x234>)
 8004de4:	e011      	b.n	8004e0a <_printf_i+0xfa>
 8004de6:	6821      	ldr	r1, [r4, #0]
 8004de8:	6833      	ldr	r3, [r6, #0]
 8004dea:	0608      	lsls	r0, r1, #24
 8004dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8004df0:	d402      	bmi.n	8004df8 <_printf_i+0xe8>
 8004df2:	0649      	lsls	r1, r1, #25
 8004df4:	bf48      	it	mi
 8004df6:	b2ad      	uxthmi	r5, r5
 8004df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dfa:	6033      	str	r3, [r6, #0]
 8004dfc:	bf14      	ite	ne
 8004dfe:	230a      	movne	r3, #10
 8004e00:	2308      	moveq	r3, #8
 8004e02:	4850      	ldr	r0, [pc, #320]	@ (8004f44 <_printf_i+0x234>)
 8004e04:	2100      	movs	r1, #0
 8004e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e0a:	6866      	ldr	r6, [r4, #4]
 8004e0c:	2e00      	cmp	r6, #0
 8004e0e:	60a6      	str	r6, [r4, #8]
 8004e10:	db05      	blt.n	8004e1e <_printf_i+0x10e>
 8004e12:	6821      	ldr	r1, [r4, #0]
 8004e14:	432e      	orrs	r6, r5
 8004e16:	f021 0104 	bic.w	r1, r1, #4
 8004e1a:	6021      	str	r1, [r4, #0]
 8004e1c:	d04b      	beq.n	8004eb6 <_printf_i+0x1a6>
 8004e1e:	4616      	mov	r6, r2
 8004e20:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e24:	fb03 5711 	mls	r7, r3, r1, r5
 8004e28:	5dc7      	ldrb	r7, [r0, r7]
 8004e2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e2e:	462f      	mov	r7, r5
 8004e30:	42bb      	cmp	r3, r7
 8004e32:	460d      	mov	r5, r1
 8004e34:	d9f4      	bls.n	8004e20 <_printf_i+0x110>
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d10b      	bne.n	8004e52 <_printf_i+0x142>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	07df      	lsls	r7, r3, #31
 8004e3e:	d508      	bpl.n	8004e52 <_printf_i+0x142>
 8004e40:	6923      	ldr	r3, [r4, #16]
 8004e42:	6861      	ldr	r1, [r4, #4]
 8004e44:	4299      	cmp	r1, r3
 8004e46:	bfde      	ittt	le
 8004e48:	2330      	movle	r3, #48	@ 0x30
 8004e4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e52:	1b92      	subs	r2, r2, r6
 8004e54:	6122      	str	r2, [r4, #16]
 8004e56:	464b      	mov	r3, r9
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	f8cd a000 	str.w	sl, [sp]
 8004e60:	aa03      	add	r2, sp, #12
 8004e62:	f7ff fee3 	bl	8004c2c <_printf_common>
 8004e66:	3001      	adds	r0, #1
 8004e68:	d14a      	bne.n	8004f00 <_printf_i+0x1f0>
 8004e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6e:	b004      	add	sp, #16
 8004e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	f043 0320 	orr.w	r3, r3, #32
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	2778      	movs	r7, #120	@ 0x78
 8004e7e:	4832      	ldr	r0, [pc, #200]	@ (8004f48 <_printf_i+0x238>)
 8004e80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	6831      	ldr	r1, [r6, #0]
 8004e88:	061f      	lsls	r7, r3, #24
 8004e8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e8e:	d402      	bmi.n	8004e96 <_printf_i+0x186>
 8004e90:	065f      	lsls	r7, r3, #25
 8004e92:	bf48      	it	mi
 8004e94:	b2ad      	uxthmi	r5, r5
 8004e96:	6031      	str	r1, [r6, #0]
 8004e98:	07d9      	lsls	r1, r3, #31
 8004e9a:	bf44      	itt	mi
 8004e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004ea0:	6023      	strmi	r3, [r4, #0]
 8004ea2:	b11d      	cbz	r5, 8004eac <_printf_i+0x19c>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	e7ad      	b.n	8004e04 <_printf_i+0xf4>
 8004ea8:	4826      	ldr	r0, [pc, #152]	@ (8004f44 <_printf_i+0x234>)
 8004eaa:	e7e9      	b.n	8004e80 <_printf_i+0x170>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	f023 0320 	bic.w	r3, r3, #32
 8004eb2:	6023      	str	r3, [r4, #0]
 8004eb4:	e7f6      	b.n	8004ea4 <_printf_i+0x194>
 8004eb6:	4616      	mov	r6, r2
 8004eb8:	e7bd      	b.n	8004e36 <_printf_i+0x126>
 8004eba:	6833      	ldr	r3, [r6, #0]
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	1d18      	adds	r0, r3, #4
 8004ec0:	6961      	ldr	r1, [r4, #20]
 8004ec2:	6030      	str	r0, [r6, #0]
 8004ec4:	062e      	lsls	r6, r5, #24
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	d501      	bpl.n	8004ece <_printf_i+0x1be>
 8004eca:	6019      	str	r1, [r3, #0]
 8004ecc:	e002      	b.n	8004ed4 <_printf_i+0x1c4>
 8004ece:	0668      	lsls	r0, r5, #25
 8004ed0:	d5fb      	bpl.n	8004eca <_printf_i+0x1ba>
 8004ed2:	8019      	strh	r1, [r3, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4616      	mov	r6, r2
 8004ed8:	6123      	str	r3, [r4, #16]
 8004eda:	e7bc      	b.n	8004e56 <_printf_i+0x146>
 8004edc:	6833      	ldr	r3, [r6, #0]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	1d1a      	adds	r2, r3, #4
 8004ee2:	6032      	str	r2, [r6, #0]
 8004ee4:	681e      	ldr	r6, [r3, #0]
 8004ee6:	6862      	ldr	r2, [r4, #4]
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f000 f9e6 	bl	80052ba <memchr>
 8004eee:	b108      	cbz	r0, 8004ef4 <_printf_i+0x1e4>
 8004ef0:	1b80      	subs	r0, r0, r6
 8004ef2:	6060      	str	r0, [r4, #4]
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efe:	e7aa      	b.n	8004e56 <_printf_i+0x146>
 8004f00:	4632      	mov	r2, r6
 8004f02:	4649      	mov	r1, r9
 8004f04:	4640      	mov	r0, r8
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	47d0      	blx	sl
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d0ad      	beq.n	8004e6a <_printf_i+0x15a>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	079b      	lsls	r3, r3, #30
 8004f12:	d413      	bmi.n	8004f3c <_printf_i+0x22c>
 8004f14:	68e0      	ldr	r0, [r4, #12]
 8004f16:	9b03      	ldr	r3, [sp, #12]
 8004f18:	4298      	cmp	r0, r3
 8004f1a:	bfb8      	it	lt
 8004f1c:	4618      	movlt	r0, r3
 8004f1e:	e7a6      	b.n	8004e6e <_printf_i+0x15e>
 8004f20:	2301      	movs	r3, #1
 8004f22:	4632      	mov	r2, r6
 8004f24:	4649      	mov	r1, r9
 8004f26:	4640      	mov	r0, r8
 8004f28:	47d0      	blx	sl
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d09d      	beq.n	8004e6a <_printf_i+0x15a>
 8004f2e:	3501      	adds	r5, #1
 8004f30:	68e3      	ldr	r3, [r4, #12]
 8004f32:	9903      	ldr	r1, [sp, #12]
 8004f34:	1a5b      	subs	r3, r3, r1
 8004f36:	42ab      	cmp	r3, r5
 8004f38:	dcf2      	bgt.n	8004f20 <_printf_i+0x210>
 8004f3a:	e7eb      	b.n	8004f14 <_printf_i+0x204>
 8004f3c:	2500      	movs	r5, #0
 8004f3e:	f104 0619 	add.w	r6, r4, #25
 8004f42:	e7f5      	b.n	8004f30 <_printf_i+0x220>
 8004f44:	0800998e 	.word	0x0800998e
 8004f48:	0800999f 	.word	0x0800999f

08004f4c <std>:
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	b510      	push	{r4, lr}
 8004f50:	4604      	mov	r4, r0
 8004f52:	e9c0 3300 	strd	r3, r3, [r0]
 8004f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f5a:	6083      	str	r3, [r0, #8]
 8004f5c:	8181      	strh	r1, [r0, #12]
 8004f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f60:	81c2      	strh	r2, [r0, #14]
 8004f62:	6183      	str	r3, [r0, #24]
 8004f64:	4619      	mov	r1, r3
 8004f66:	2208      	movs	r2, #8
 8004f68:	305c      	adds	r0, #92	@ 0x5c
 8004f6a:	f000 f916 	bl	800519a <memset>
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa4 <std+0x58>)
 8004f70:	6224      	str	r4, [r4, #32]
 8004f72:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f74:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa8 <std+0x5c>)
 8004f76:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f78:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <std+0x60>)
 8004f7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb0 <std+0x64>)
 8004f7e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f80:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb4 <std+0x68>)
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d006      	beq.n	8004f94 <std+0x48>
 8004f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f8a:	4294      	cmp	r4, r2
 8004f8c:	d002      	beq.n	8004f94 <std+0x48>
 8004f8e:	33d0      	adds	r3, #208	@ 0xd0
 8004f90:	429c      	cmp	r4, r3
 8004f92:	d105      	bne.n	8004fa0 <std+0x54>
 8004f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f9c:	f000 b98a 	b.w	80052b4 <__retarget_lock_init_recursive>
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08005115 	.word	0x08005115
 8004fa8:	08005137 	.word	0x08005137
 8004fac:	0800516f 	.word	0x0800516f
 8004fb0:	08005193 	.word	0x08005193
 8004fb4:	200007c0 	.word	0x200007c0

08004fb8 <stdio_exit_handler>:
 8004fb8:	4a02      	ldr	r2, [pc, #8]	@ (8004fc4 <stdio_exit_handler+0xc>)
 8004fba:	4903      	ldr	r1, [pc, #12]	@ (8004fc8 <stdio_exit_handler+0x10>)
 8004fbc:	4803      	ldr	r0, [pc, #12]	@ (8004fcc <stdio_exit_handler+0x14>)
 8004fbe:	f000 b869 	b.w	8005094 <_fwalk_sglue>
 8004fc2:	bf00      	nop
 8004fc4:	20000010 	.word	0x20000010
 8004fc8:	08006ae5 	.word	0x08006ae5
 8004fcc:	20000020 	.word	0x20000020

08004fd0 <cleanup_stdio>:
 8004fd0:	6841      	ldr	r1, [r0, #4]
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005004 <cleanup_stdio+0x34>)
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	4299      	cmp	r1, r3
 8004fd8:	4604      	mov	r4, r0
 8004fda:	d001      	beq.n	8004fe0 <cleanup_stdio+0x10>
 8004fdc:	f001 fd82 	bl	8006ae4 <_fflush_r>
 8004fe0:	68a1      	ldr	r1, [r4, #8]
 8004fe2:	4b09      	ldr	r3, [pc, #36]	@ (8005008 <cleanup_stdio+0x38>)
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	d002      	beq.n	8004fee <cleanup_stdio+0x1e>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f001 fd7b 	bl	8006ae4 <_fflush_r>
 8004fee:	68e1      	ldr	r1, [r4, #12]
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <cleanup_stdio+0x3c>)
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	d004      	beq.n	8005000 <cleanup_stdio+0x30>
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffc:	f001 bd72 	b.w	8006ae4 <_fflush_r>
 8005000:	bd10      	pop	{r4, pc}
 8005002:	bf00      	nop
 8005004:	200007c0 	.word	0x200007c0
 8005008:	20000828 	.word	0x20000828
 800500c:	20000890 	.word	0x20000890

08005010 <global_stdio_init.part.0>:
 8005010:	b510      	push	{r4, lr}
 8005012:	4b0b      	ldr	r3, [pc, #44]	@ (8005040 <global_stdio_init.part.0+0x30>)
 8005014:	4c0b      	ldr	r4, [pc, #44]	@ (8005044 <global_stdio_init.part.0+0x34>)
 8005016:	4a0c      	ldr	r2, [pc, #48]	@ (8005048 <global_stdio_init.part.0+0x38>)
 8005018:	4620      	mov	r0, r4
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	2104      	movs	r1, #4
 800501e:	2200      	movs	r2, #0
 8005020:	f7ff ff94 	bl	8004f4c <std>
 8005024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005028:	2201      	movs	r2, #1
 800502a:	2109      	movs	r1, #9
 800502c:	f7ff ff8e 	bl	8004f4c <std>
 8005030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005034:	2202      	movs	r2, #2
 8005036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503a:	2112      	movs	r1, #18
 800503c:	f7ff bf86 	b.w	8004f4c <std>
 8005040:	200008f8 	.word	0x200008f8
 8005044:	200007c0 	.word	0x200007c0
 8005048:	08004fb9 	.word	0x08004fb9

0800504c <__sfp_lock_acquire>:
 800504c:	4801      	ldr	r0, [pc, #4]	@ (8005054 <__sfp_lock_acquire+0x8>)
 800504e:	f000 b932 	b.w	80052b6 <__retarget_lock_acquire_recursive>
 8005052:	bf00      	nop
 8005054:	20000901 	.word	0x20000901

08005058 <__sfp_lock_release>:
 8005058:	4801      	ldr	r0, [pc, #4]	@ (8005060 <__sfp_lock_release+0x8>)
 800505a:	f000 b92d 	b.w	80052b8 <__retarget_lock_release_recursive>
 800505e:	bf00      	nop
 8005060:	20000901 	.word	0x20000901

08005064 <__sinit>:
 8005064:	b510      	push	{r4, lr}
 8005066:	4604      	mov	r4, r0
 8005068:	f7ff fff0 	bl	800504c <__sfp_lock_acquire>
 800506c:	6a23      	ldr	r3, [r4, #32]
 800506e:	b11b      	cbz	r3, 8005078 <__sinit+0x14>
 8005070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005074:	f7ff bff0 	b.w	8005058 <__sfp_lock_release>
 8005078:	4b04      	ldr	r3, [pc, #16]	@ (800508c <__sinit+0x28>)
 800507a:	6223      	str	r3, [r4, #32]
 800507c:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <__sinit+0x2c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f5      	bne.n	8005070 <__sinit+0xc>
 8005084:	f7ff ffc4 	bl	8005010 <global_stdio_init.part.0>
 8005088:	e7f2      	b.n	8005070 <__sinit+0xc>
 800508a:	bf00      	nop
 800508c:	08004fd1 	.word	0x08004fd1
 8005090:	200008f8 	.word	0x200008f8

08005094 <_fwalk_sglue>:
 8005094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005098:	4607      	mov	r7, r0
 800509a:	4688      	mov	r8, r1
 800509c:	4614      	mov	r4, r2
 800509e:	2600      	movs	r6, #0
 80050a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050a4:	f1b9 0901 	subs.w	r9, r9, #1
 80050a8:	d505      	bpl.n	80050b6 <_fwalk_sglue+0x22>
 80050aa:	6824      	ldr	r4, [r4, #0]
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	d1f7      	bne.n	80050a0 <_fwalk_sglue+0xc>
 80050b0:	4630      	mov	r0, r6
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b6:	89ab      	ldrh	r3, [r5, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d907      	bls.n	80050cc <_fwalk_sglue+0x38>
 80050bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050c0:	3301      	adds	r3, #1
 80050c2:	d003      	beq.n	80050cc <_fwalk_sglue+0x38>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c0      	blx	r8
 80050ca:	4306      	orrs	r6, r0
 80050cc:	3568      	adds	r5, #104	@ 0x68
 80050ce:	e7e9      	b.n	80050a4 <_fwalk_sglue+0x10>

080050d0 <siprintf>:
 80050d0:	b40e      	push	{r1, r2, r3}
 80050d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050d6:	b510      	push	{r4, lr}
 80050d8:	2400      	movs	r4, #0
 80050da:	b09d      	sub	sp, #116	@ 0x74
 80050dc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80050de:	9002      	str	r0, [sp, #8]
 80050e0:	9006      	str	r0, [sp, #24]
 80050e2:	9107      	str	r1, [sp, #28]
 80050e4:	9104      	str	r1, [sp, #16]
 80050e6:	4809      	ldr	r0, [pc, #36]	@ (800510c <siprintf+0x3c>)
 80050e8:	4909      	ldr	r1, [pc, #36]	@ (8005110 <siprintf+0x40>)
 80050ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ee:	9105      	str	r1, [sp, #20]
 80050f0:	6800      	ldr	r0, [r0, #0]
 80050f2:	a902      	add	r1, sp, #8
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80050f8:	f001 fb78 	bl	80067ec <_svfiprintf_r>
 80050fc:	9b02      	ldr	r3, [sp, #8]
 80050fe:	701c      	strb	r4, [r3, #0]
 8005100:	b01d      	add	sp, #116	@ 0x74
 8005102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005106:	b003      	add	sp, #12
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	2000001c 	.word	0x2000001c
 8005110:	ffff0208 	.word	0xffff0208

08005114 <__sread>:
 8005114:	b510      	push	{r4, lr}
 8005116:	460c      	mov	r4, r1
 8005118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511c:	f000 f86c 	bl	80051f8 <_read_r>
 8005120:	2800      	cmp	r0, #0
 8005122:	bfab      	itete	ge
 8005124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005126:	89a3      	ldrhlt	r3, [r4, #12]
 8005128:	181b      	addge	r3, r3, r0
 800512a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800512e:	bfac      	ite	ge
 8005130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005132:	81a3      	strhlt	r3, [r4, #12]
 8005134:	bd10      	pop	{r4, pc}

08005136 <__swrite>:
 8005136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513a:	461f      	mov	r7, r3
 800513c:	898b      	ldrh	r3, [r1, #12]
 800513e:	4605      	mov	r5, r0
 8005140:	05db      	lsls	r3, r3, #23
 8005142:	460c      	mov	r4, r1
 8005144:	4616      	mov	r6, r2
 8005146:	d505      	bpl.n	8005154 <__swrite+0x1e>
 8005148:	2302      	movs	r3, #2
 800514a:	2200      	movs	r2, #0
 800514c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005150:	f000 f840 	bl	80051d4 <_lseek_r>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	4632      	mov	r2, r6
 8005158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	4628      	mov	r0, r5
 8005160:	463b      	mov	r3, r7
 8005162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800516a:	f000 b867 	b.w	800523c <_write_r>

0800516e <__sseek>:
 800516e:	b510      	push	{r4, lr}
 8005170:	460c      	mov	r4, r1
 8005172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005176:	f000 f82d 	bl	80051d4 <_lseek_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	bf15      	itete	ne
 8005180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800518a:	81a3      	strheq	r3, [r4, #12]
 800518c:	bf18      	it	ne
 800518e:	81a3      	strhne	r3, [r4, #12]
 8005190:	bd10      	pop	{r4, pc}

08005192 <__sclose>:
 8005192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005196:	f000 b80d 	b.w	80051b4 <_close_r>

0800519a <memset>:
 800519a:	4603      	mov	r3, r0
 800519c:	4402      	add	r2, r0
 800519e:	4293      	cmp	r3, r2
 80051a0:	d100      	bne.n	80051a4 <memset+0xa>
 80051a2:	4770      	bx	lr
 80051a4:	f803 1b01 	strb.w	r1, [r3], #1
 80051a8:	e7f9      	b.n	800519e <memset+0x4>
	...

080051ac <_localeconv_r>:
 80051ac:	4800      	ldr	r0, [pc, #0]	@ (80051b0 <_localeconv_r+0x4>)
 80051ae:	4770      	bx	lr
 80051b0:	2000015c 	.word	0x2000015c

080051b4 <_close_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	2300      	movs	r3, #0
 80051b8:	4d05      	ldr	r5, [pc, #20]	@ (80051d0 <_close_r+0x1c>)
 80051ba:	4604      	mov	r4, r0
 80051bc:	4608      	mov	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7ff f919 	bl	80043f6 <_close>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d102      	bne.n	80051ce <_close_r+0x1a>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	b103      	cbz	r3, 80051ce <_close_r+0x1a>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	200008fc 	.word	0x200008fc

080051d4 <_lseek_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	4611      	mov	r1, r2
 80051dc:	2200      	movs	r2, #0
 80051de:	4d05      	ldr	r5, [pc, #20]	@ (80051f4 <_lseek_r+0x20>)
 80051e0:	602a      	str	r2, [r5, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f7ff f92b 	bl	800443e <_lseek>
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	d102      	bne.n	80051f2 <_lseek_r+0x1e>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	b103      	cbz	r3, 80051f2 <_lseek_r+0x1e>
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	200008fc 	.word	0x200008fc

080051f8 <_read_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4604      	mov	r4, r0
 80051fc:	4608      	mov	r0, r1
 80051fe:	4611      	mov	r1, r2
 8005200:	2200      	movs	r2, #0
 8005202:	4d05      	ldr	r5, [pc, #20]	@ (8005218 <_read_r+0x20>)
 8005204:	602a      	str	r2, [r5, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	f7ff f8bc 	bl	8004384 <_read>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d102      	bne.n	8005216 <_read_r+0x1e>
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	b103      	cbz	r3, 8005216 <_read_r+0x1e>
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	200008fc 	.word	0x200008fc

0800521c <_sbrk_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	2300      	movs	r3, #0
 8005220:	4d05      	ldr	r5, [pc, #20]	@ (8005238 <_sbrk_r+0x1c>)
 8005222:	4604      	mov	r4, r0
 8005224:	4608      	mov	r0, r1
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	f7ff f916 	bl	8004458 <_sbrk>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_sbrk_r+0x1a>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_sbrk_r+0x1a>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	200008fc 	.word	0x200008fc

0800523c <_write_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4604      	mov	r4, r0
 8005240:	4608      	mov	r0, r1
 8005242:	4611      	mov	r1, r2
 8005244:	2200      	movs	r2, #0
 8005246:	4d05      	ldr	r5, [pc, #20]	@ (800525c <_write_r+0x20>)
 8005248:	602a      	str	r2, [r5, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f7ff f8b7 	bl	80043be <_write>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_write_r+0x1e>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_write_r+0x1e>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	200008fc 	.word	0x200008fc

08005260 <__errno>:
 8005260:	4b01      	ldr	r3, [pc, #4]	@ (8005268 <__errno+0x8>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	2000001c 	.word	0x2000001c

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	2600      	movs	r6, #0
 8005270:	4d0c      	ldr	r5, [pc, #48]	@ (80052a4 <__libc_init_array+0x38>)
 8005272:	4c0d      	ldr	r4, [pc, #52]	@ (80052a8 <__libc_init_array+0x3c>)
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	f001 ffb0 	bl	80071e0 <_init>
 8005280:	2600      	movs	r6, #0
 8005282:	4d0a      	ldr	r5, [pc, #40]	@ (80052ac <__libc_init_array+0x40>)
 8005284:	4c0a      	ldr	r4, [pc, #40]	@ (80052b0 <__libc_init_array+0x44>)
 8005286:	1b64      	subs	r4, r4, r5
 8005288:	10a4      	asrs	r4, r4, #2
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	08009cfc 	.word	0x08009cfc
 80052a8:	08009cfc 	.word	0x08009cfc
 80052ac:	08009cfc 	.word	0x08009cfc
 80052b0:	08009d00 	.word	0x08009d00

080052b4 <__retarget_lock_init_recursive>:
 80052b4:	4770      	bx	lr

080052b6 <__retarget_lock_acquire_recursive>:
 80052b6:	4770      	bx	lr

080052b8 <__retarget_lock_release_recursive>:
 80052b8:	4770      	bx	lr

080052ba <memchr>:
 80052ba:	4603      	mov	r3, r0
 80052bc:	b510      	push	{r4, lr}
 80052be:	b2c9      	uxtb	r1, r1
 80052c0:	4402      	add	r2, r0
 80052c2:	4293      	cmp	r3, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	d101      	bne.n	80052cc <memchr+0x12>
 80052c8:	2000      	movs	r0, #0
 80052ca:	e003      	b.n	80052d4 <memchr+0x1a>
 80052cc:	7804      	ldrb	r4, [r0, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	428c      	cmp	r4, r1
 80052d2:	d1f6      	bne.n	80052c2 <memchr+0x8>
 80052d4:	bd10      	pop	{r4, pc}

080052d6 <memcpy>:
 80052d6:	440a      	add	r2, r1
 80052d8:	4291      	cmp	r1, r2
 80052da:	f100 33ff 	add.w	r3, r0, #4294967295
 80052de:	d100      	bne.n	80052e2 <memcpy+0xc>
 80052e0:	4770      	bx	lr
 80052e2:	b510      	push	{r4, lr}
 80052e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e8:	4291      	cmp	r1, r2
 80052ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ee:	d1f9      	bne.n	80052e4 <memcpy+0xe>
 80052f0:	bd10      	pop	{r4, pc}

080052f2 <quorem>:
 80052f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f6:	6903      	ldr	r3, [r0, #16]
 80052f8:	690c      	ldr	r4, [r1, #16]
 80052fa:	4607      	mov	r7, r0
 80052fc:	42a3      	cmp	r3, r4
 80052fe:	db7e      	blt.n	80053fe <quorem+0x10c>
 8005300:	3c01      	subs	r4, #1
 8005302:	00a3      	lsls	r3, r4, #2
 8005304:	f100 0514 	add.w	r5, r0, #20
 8005308:	f101 0814 	add.w	r8, r1, #20
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005318:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800531c:	3301      	adds	r3, #1
 800531e:	429a      	cmp	r2, r3
 8005320:	fbb2 f6f3 	udiv	r6, r2, r3
 8005324:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005328:	d32e      	bcc.n	8005388 <quorem+0x96>
 800532a:	f04f 0a00 	mov.w	sl, #0
 800532e:	46c4      	mov	ip, r8
 8005330:	46ae      	mov	lr, r5
 8005332:	46d3      	mov	fp, sl
 8005334:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005338:	b298      	uxth	r0, r3
 800533a:	fb06 a000 	mla	r0, r6, r0, sl
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	0c02      	lsrs	r2, r0, #16
 8005342:	fb06 2303 	mla	r3, r6, r3, r2
 8005346:	f8de 2000 	ldr.w	r2, [lr]
 800534a:	b280      	uxth	r0, r0
 800534c:	b292      	uxth	r2, r2
 800534e:	1a12      	subs	r2, r2, r0
 8005350:	445a      	add	r2, fp
 8005352:	f8de 0000 	ldr.w	r0, [lr]
 8005356:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800535a:	b29b      	uxth	r3, r3
 800535c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005360:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005364:	b292      	uxth	r2, r2
 8005366:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800536a:	45e1      	cmp	r9, ip
 800536c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005370:	f84e 2b04 	str.w	r2, [lr], #4
 8005374:	d2de      	bcs.n	8005334 <quorem+0x42>
 8005376:	9b00      	ldr	r3, [sp, #0]
 8005378:	58eb      	ldr	r3, [r5, r3]
 800537a:	b92b      	cbnz	r3, 8005388 <quorem+0x96>
 800537c:	9b01      	ldr	r3, [sp, #4]
 800537e:	3b04      	subs	r3, #4
 8005380:	429d      	cmp	r5, r3
 8005382:	461a      	mov	r2, r3
 8005384:	d32f      	bcc.n	80053e6 <quorem+0xf4>
 8005386:	613c      	str	r4, [r7, #16]
 8005388:	4638      	mov	r0, r7
 800538a:	f001 f8cb 	bl	8006524 <__mcmp>
 800538e:	2800      	cmp	r0, #0
 8005390:	db25      	blt.n	80053de <quorem+0xec>
 8005392:	4629      	mov	r1, r5
 8005394:	2000      	movs	r0, #0
 8005396:	f858 2b04 	ldr.w	r2, [r8], #4
 800539a:	f8d1 c000 	ldr.w	ip, [r1]
 800539e:	fa1f fe82 	uxth.w	lr, r2
 80053a2:	fa1f f38c 	uxth.w	r3, ip
 80053a6:	eba3 030e 	sub.w	r3, r3, lr
 80053aa:	4403      	add	r3, r0
 80053ac:	0c12      	lsrs	r2, r2, #16
 80053ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80053b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053bc:	45c1      	cmp	r9, r8
 80053be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053c2:	f841 3b04 	str.w	r3, [r1], #4
 80053c6:	d2e6      	bcs.n	8005396 <quorem+0xa4>
 80053c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053d0:	b922      	cbnz	r2, 80053dc <quorem+0xea>
 80053d2:	3b04      	subs	r3, #4
 80053d4:	429d      	cmp	r5, r3
 80053d6:	461a      	mov	r2, r3
 80053d8:	d30b      	bcc.n	80053f2 <quorem+0x100>
 80053da:	613c      	str	r4, [r7, #16]
 80053dc:	3601      	adds	r6, #1
 80053de:	4630      	mov	r0, r6
 80053e0:	b003      	add	sp, #12
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	3b04      	subs	r3, #4
 80053ea:	2a00      	cmp	r2, #0
 80053ec:	d1cb      	bne.n	8005386 <quorem+0x94>
 80053ee:	3c01      	subs	r4, #1
 80053f0:	e7c6      	b.n	8005380 <quorem+0x8e>
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	3b04      	subs	r3, #4
 80053f6:	2a00      	cmp	r2, #0
 80053f8:	d1ef      	bne.n	80053da <quorem+0xe8>
 80053fa:	3c01      	subs	r4, #1
 80053fc:	e7ea      	b.n	80053d4 <quorem+0xe2>
 80053fe:	2000      	movs	r0, #0
 8005400:	e7ee      	b.n	80053e0 <quorem+0xee>
 8005402:	0000      	movs	r0, r0
 8005404:	0000      	movs	r0, r0
	...

08005408 <_dtoa_r>:
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	4614      	mov	r4, r2
 800540e:	461d      	mov	r5, r3
 8005410:	69c7      	ldr	r7, [r0, #28]
 8005412:	b097      	sub	sp, #92	@ 0x5c
 8005414:	4681      	mov	r9, r0
 8005416:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800541a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800541c:	b97f      	cbnz	r7, 800543e <_dtoa_r+0x36>
 800541e:	2010      	movs	r0, #16
 8005420:	f7ff f87c 	bl	800451c <malloc>
 8005424:	4602      	mov	r2, r0
 8005426:	f8c9 001c 	str.w	r0, [r9, #28]
 800542a:	b920      	cbnz	r0, 8005436 <_dtoa_r+0x2e>
 800542c:	21ef      	movs	r1, #239	@ 0xef
 800542e:	4bac      	ldr	r3, [pc, #688]	@ (80056e0 <_dtoa_r+0x2d8>)
 8005430:	48ac      	ldr	r0, [pc, #688]	@ (80056e4 <_dtoa_r+0x2dc>)
 8005432:	f001 fb99 	bl	8006b68 <__assert_func>
 8005436:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800543a:	6007      	str	r7, [r0, #0]
 800543c:	60c7      	str	r7, [r0, #12]
 800543e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	b159      	cbz	r1, 800545e <_dtoa_r+0x56>
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	2301      	movs	r3, #1
 800544a:	4093      	lsls	r3, r2
 800544c:	604a      	str	r2, [r1, #4]
 800544e:	608b      	str	r3, [r1, #8]
 8005450:	4648      	mov	r0, r9
 8005452:	f000 fe35 	bl	80060c0 <_Bfree>
 8005456:	2200      	movs	r2, #0
 8005458:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	1e2b      	subs	r3, r5, #0
 8005460:	bfaf      	iteee	ge
 8005462:	2300      	movge	r3, #0
 8005464:	2201      	movlt	r2, #1
 8005466:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800546a:	9307      	strlt	r3, [sp, #28]
 800546c:	bfa8      	it	ge
 800546e:	6033      	strge	r3, [r6, #0]
 8005470:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005474:	4b9c      	ldr	r3, [pc, #624]	@ (80056e8 <_dtoa_r+0x2e0>)
 8005476:	bfb8      	it	lt
 8005478:	6032      	strlt	r2, [r6, #0]
 800547a:	ea33 0308 	bics.w	r3, r3, r8
 800547e:	d112      	bne.n	80054a6 <_dtoa_r+0x9e>
 8005480:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005484:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800548c:	4323      	orrs	r3, r4
 800548e:	f000 855e 	beq.w	8005f4e <_dtoa_r+0xb46>
 8005492:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005494:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80056ec <_dtoa_r+0x2e4>
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8560 	beq.w	8005f5e <_dtoa_r+0xb56>
 800549e:	f10a 0303 	add.w	r3, sl, #3
 80054a2:	f000 bd5a 	b.w	8005f5a <_dtoa_r+0xb52>
 80054a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80054ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054b2:	2200      	movs	r2, #0
 80054b4:	2300      	movs	r3, #0
 80054b6:	f7fb fa77 	bl	80009a8 <__aeabi_dcmpeq>
 80054ba:	4607      	mov	r7, r0
 80054bc:	b158      	cbz	r0, 80054d6 <_dtoa_r+0xce>
 80054be:	2301      	movs	r3, #1
 80054c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054c6:	b113      	cbz	r3, 80054ce <_dtoa_r+0xc6>
 80054c8:	4b89      	ldr	r3, [pc, #548]	@ (80056f0 <_dtoa_r+0x2e8>)
 80054ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80056f4 <_dtoa_r+0x2ec>
 80054d2:	f000 bd44 	b.w	8005f5e <_dtoa_r+0xb56>
 80054d6:	ab14      	add	r3, sp, #80	@ 0x50
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	ab15      	add	r3, sp, #84	@ 0x54
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	4648      	mov	r0, r9
 80054e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80054e4:	f001 f8ce 	bl	8006684 <__d2b>
 80054e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80054ec:	9003      	str	r0, [sp, #12]
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d078      	beq.n	80055e4 <_dtoa_r+0x1dc>
 80054f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005500:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005504:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005508:	9712      	str	r7, [sp, #72]	@ 0x48
 800550a:	4619      	mov	r1, r3
 800550c:	2200      	movs	r2, #0
 800550e:	4b7a      	ldr	r3, [pc, #488]	@ (80056f8 <_dtoa_r+0x2f0>)
 8005510:	f7fa fe2a 	bl	8000168 <__aeabi_dsub>
 8005514:	a36c      	add	r3, pc, #432	@ (adr r3, 80056c8 <_dtoa_r+0x2c0>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fa ffdd 	bl	80004d8 <__aeabi_dmul>
 800551e:	a36c      	add	r3, pc, #432	@ (adr r3, 80056d0 <_dtoa_r+0x2c8>)
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f7fa fe22 	bl	800016c <__adddf3>
 8005528:	4604      	mov	r4, r0
 800552a:	4630      	mov	r0, r6
 800552c:	460d      	mov	r5, r1
 800552e:	f7fa ff69 	bl	8000404 <__aeabi_i2d>
 8005532:	a369      	add	r3, pc, #420	@ (adr r3, 80056d8 <_dtoa_r+0x2d0>)
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f7fa ffce 	bl	80004d8 <__aeabi_dmul>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4620      	mov	r0, r4
 8005542:	4629      	mov	r1, r5
 8005544:	f7fa fe12 	bl	800016c <__adddf3>
 8005548:	4604      	mov	r4, r0
 800554a:	460d      	mov	r5, r1
 800554c:	f7fb fa74 	bl	8000a38 <__aeabi_d2iz>
 8005550:	2200      	movs	r2, #0
 8005552:	4607      	mov	r7, r0
 8005554:	2300      	movs	r3, #0
 8005556:	4620      	mov	r0, r4
 8005558:	4629      	mov	r1, r5
 800555a:	f7fb fa2f 	bl	80009bc <__aeabi_dcmplt>
 800555e:	b140      	cbz	r0, 8005572 <_dtoa_r+0x16a>
 8005560:	4638      	mov	r0, r7
 8005562:	f7fa ff4f 	bl	8000404 <__aeabi_i2d>
 8005566:	4622      	mov	r2, r4
 8005568:	462b      	mov	r3, r5
 800556a:	f7fb fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800556e:	b900      	cbnz	r0, 8005572 <_dtoa_r+0x16a>
 8005570:	3f01      	subs	r7, #1
 8005572:	2f16      	cmp	r7, #22
 8005574:	d854      	bhi.n	8005620 <_dtoa_r+0x218>
 8005576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800557a:	4b60      	ldr	r3, [pc, #384]	@ (80056fc <_dtoa_r+0x2f4>)
 800557c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005584:	f7fb fa1a 	bl	80009bc <__aeabi_dcmplt>
 8005588:	2800      	cmp	r0, #0
 800558a:	d04b      	beq.n	8005624 <_dtoa_r+0x21c>
 800558c:	2300      	movs	r3, #0
 800558e:	3f01      	subs	r7, #1
 8005590:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005592:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005594:	1b9b      	subs	r3, r3, r6
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	bf49      	itett	mi
 800559a:	f1c3 0301 	rsbmi	r3, r3, #1
 800559e:	2300      	movpl	r3, #0
 80055a0:	9304      	strmi	r3, [sp, #16]
 80055a2:	2300      	movmi	r3, #0
 80055a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80055a6:	bf54      	ite	pl
 80055a8:	9304      	strpl	r3, [sp, #16]
 80055aa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80055ac:	2f00      	cmp	r7, #0
 80055ae:	db3b      	blt.n	8005628 <_dtoa_r+0x220>
 80055b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055b2:	970e      	str	r7, [sp, #56]	@ 0x38
 80055b4:	443b      	add	r3, r7
 80055b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80055b8:	2300      	movs	r3, #0
 80055ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80055bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055be:	2b09      	cmp	r3, #9
 80055c0:	d865      	bhi.n	800568e <_dtoa_r+0x286>
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	bfc4      	itt	gt
 80055c6:	3b04      	subgt	r3, #4
 80055c8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80055ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055cc:	bfc8      	it	gt
 80055ce:	2400      	movgt	r4, #0
 80055d0:	f1a3 0302 	sub.w	r3, r3, #2
 80055d4:	bfd8      	it	le
 80055d6:	2401      	movle	r4, #1
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d864      	bhi.n	80056a6 <_dtoa_r+0x29e>
 80055dc:	e8df f003 	tbb	[pc, r3]
 80055e0:	2c385553 	.word	0x2c385553
 80055e4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80055e8:	441e      	add	r6, r3
 80055ea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	bfc1      	itttt	gt
 80055f2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055f6:	fa08 f803 	lslgt.w	r8, r8, r3
 80055fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005602:	bfd6      	itet	le
 8005604:	f1c3 0320 	rsble	r3, r3, #32
 8005608:	ea48 0003 	orrgt.w	r0, r8, r3
 800560c:	fa04 f003 	lslle.w	r0, r4, r3
 8005610:	f7fa fee8 	bl	80003e4 <__aeabi_ui2d>
 8005614:	2201      	movs	r2, #1
 8005616:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800561a:	3e01      	subs	r6, #1
 800561c:	9212      	str	r2, [sp, #72]	@ 0x48
 800561e:	e774      	b.n	800550a <_dtoa_r+0x102>
 8005620:	2301      	movs	r3, #1
 8005622:	e7b5      	b.n	8005590 <_dtoa_r+0x188>
 8005624:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005626:	e7b4      	b.n	8005592 <_dtoa_r+0x18a>
 8005628:	9b04      	ldr	r3, [sp, #16]
 800562a:	1bdb      	subs	r3, r3, r7
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	427b      	negs	r3, r7
 8005630:	930a      	str	r3, [sp, #40]	@ 0x28
 8005632:	2300      	movs	r3, #0
 8005634:	930e      	str	r3, [sp, #56]	@ 0x38
 8005636:	e7c1      	b.n	80055bc <_dtoa_r+0x1b4>
 8005638:	2301      	movs	r3, #1
 800563a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800563c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800563e:	eb07 0b03 	add.w	fp, r7, r3
 8005642:	f10b 0301 	add.w	r3, fp, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	9308      	str	r3, [sp, #32]
 800564a:	bfb8      	it	lt
 800564c:	2301      	movlt	r3, #1
 800564e:	e006      	b.n	800565e <_dtoa_r+0x256>
 8005650:	2301      	movs	r3, #1
 8005652:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005654:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005656:	2b00      	cmp	r3, #0
 8005658:	dd28      	ble.n	80056ac <_dtoa_r+0x2a4>
 800565a:	469b      	mov	fp, r3
 800565c:	9308      	str	r3, [sp, #32]
 800565e:	2100      	movs	r1, #0
 8005660:	2204      	movs	r2, #4
 8005662:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005666:	f102 0514 	add.w	r5, r2, #20
 800566a:	429d      	cmp	r5, r3
 800566c:	d926      	bls.n	80056bc <_dtoa_r+0x2b4>
 800566e:	6041      	str	r1, [r0, #4]
 8005670:	4648      	mov	r0, r9
 8005672:	f000 fce5 	bl	8006040 <_Balloc>
 8005676:	4682      	mov	sl, r0
 8005678:	2800      	cmp	r0, #0
 800567a:	d143      	bne.n	8005704 <_dtoa_r+0x2fc>
 800567c:	4602      	mov	r2, r0
 800567e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005682:	4b1f      	ldr	r3, [pc, #124]	@ (8005700 <_dtoa_r+0x2f8>)
 8005684:	e6d4      	b.n	8005430 <_dtoa_r+0x28>
 8005686:	2300      	movs	r3, #0
 8005688:	e7e3      	b.n	8005652 <_dtoa_r+0x24a>
 800568a:	2300      	movs	r3, #0
 800568c:	e7d5      	b.n	800563a <_dtoa_r+0x232>
 800568e:	2401      	movs	r4, #1
 8005690:	2300      	movs	r3, #0
 8005692:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005694:	9320      	str	r3, [sp, #128]	@ 0x80
 8005696:	f04f 3bff 	mov.w	fp, #4294967295
 800569a:	2200      	movs	r2, #0
 800569c:	2312      	movs	r3, #18
 800569e:	f8cd b020 	str.w	fp, [sp, #32]
 80056a2:	9221      	str	r2, [sp, #132]	@ 0x84
 80056a4:	e7db      	b.n	800565e <_dtoa_r+0x256>
 80056a6:	2301      	movs	r3, #1
 80056a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056aa:	e7f4      	b.n	8005696 <_dtoa_r+0x28e>
 80056ac:	f04f 0b01 	mov.w	fp, #1
 80056b0:	465b      	mov	r3, fp
 80056b2:	f8cd b020 	str.w	fp, [sp, #32]
 80056b6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80056ba:	e7d0      	b.n	800565e <_dtoa_r+0x256>
 80056bc:	3101      	adds	r1, #1
 80056be:	0052      	lsls	r2, r2, #1
 80056c0:	e7d1      	b.n	8005666 <_dtoa_r+0x25e>
 80056c2:	bf00      	nop
 80056c4:	f3af 8000 	nop.w
 80056c8:	636f4361 	.word	0x636f4361
 80056cc:	3fd287a7 	.word	0x3fd287a7
 80056d0:	8b60c8b3 	.word	0x8b60c8b3
 80056d4:	3fc68a28 	.word	0x3fc68a28
 80056d8:	509f79fb 	.word	0x509f79fb
 80056dc:	3fd34413 	.word	0x3fd34413
 80056e0:	080099bd 	.word	0x080099bd
 80056e4:	080099d4 	.word	0x080099d4
 80056e8:	7ff00000 	.word	0x7ff00000
 80056ec:	080099b9 	.word	0x080099b9
 80056f0:	0800998d 	.word	0x0800998d
 80056f4:	0800998c 	.word	0x0800998c
 80056f8:	3ff80000 	.word	0x3ff80000
 80056fc:	08009b28 	.word	0x08009b28
 8005700:	08009a2c 	.word	0x08009a2c
 8005704:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005708:	6018      	str	r0, [r3, #0]
 800570a:	9b08      	ldr	r3, [sp, #32]
 800570c:	2b0e      	cmp	r3, #14
 800570e:	f200 80a1 	bhi.w	8005854 <_dtoa_r+0x44c>
 8005712:	2c00      	cmp	r4, #0
 8005714:	f000 809e 	beq.w	8005854 <_dtoa_r+0x44c>
 8005718:	2f00      	cmp	r7, #0
 800571a:	dd33      	ble.n	8005784 <_dtoa_r+0x37c>
 800571c:	4b9c      	ldr	r3, [pc, #624]	@ (8005990 <_dtoa_r+0x588>)
 800571e:	f007 020f 	and.w	r2, r7, #15
 8005722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005726:	05f8      	lsls	r0, r7, #23
 8005728:	e9d3 3400 	ldrd	r3, r4, [r3]
 800572c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005730:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005734:	d516      	bpl.n	8005764 <_dtoa_r+0x35c>
 8005736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800573a:	4b96      	ldr	r3, [pc, #600]	@ (8005994 <_dtoa_r+0x58c>)
 800573c:	2603      	movs	r6, #3
 800573e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005742:	f7fa fff3 	bl	800072c <__aeabi_ddiv>
 8005746:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800574a:	f004 040f 	and.w	r4, r4, #15
 800574e:	4d91      	ldr	r5, [pc, #580]	@ (8005994 <_dtoa_r+0x58c>)
 8005750:	b954      	cbnz	r4, 8005768 <_dtoa_r+0x360>
 8005752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800575a:	f7fa ffe7 	bl	800072c <__aeabi_ddiv>
 800575e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005762:	e028      	b.n	80057b6 <_dtoa_r+0x3ae>
 8005764:	2602      	movs	r6, #2
 8005766:	e7f2      	b.n	800574e <_dtoa_r+0x346>
 8005768:	07e1      	lsls	r1, r4, #31
 800576a:	d508      	bpl.n	800577e <_dtoa_r+0x376>
 800576c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005770:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005774:	f7fa feb0 	bl	80004d8 <__aeabi_dmul>
 8005778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800577c:	3601      	adds	r6, #1
 800577e:	1064      	asrs	r4, r4, #1
 8005780:	3508      	adds	r5, #8
 8005782:	e7e5      	b.n	8005750 <_dtoa_r+0x348>
 8005784:	f000 80af 	beq.w	80058e6 <_dtoa_r+0x4de>
 8005788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800578c:	427c      	negs	r4, r7
 800578e:	4b80      	ldr	r3, [pc, #512]	@ (8005990 <_dtoa_r+0x588>)
 8005790:	f004 020f 	and.w	r2, r4, #15
 8005794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa fe9c 	bl	80004d8 <__aeabi_dmul>
 80057a0:	2602      	movs	r6, #2
 80057a2:	2300      	movs	r3, #0
 80057a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057a8:	4d7a      	ldr	r5, [pc, #488]	@ (8005994 <_dtoa_r+0x58c>)
 80057aa:	1124      	asrs	r4, r4, #4
 80057ac:	2c00      	cmp	r4, #0
 80057ae:	f040 808f 	bne.w	80058d0 <_dtoa_r+0x4c8>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1d3      	bne.n	800575e <_dtoa_r+0x356>
 80057b6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80057ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8094 	beq.w	80058ea <_dtoa_r+0x4e2>
 80057c2:	2200      	movs	r2, #0
 80057c4:	4620      	mov	r0, r4
 80057c6:	4629      	mov	r1, r5
 80057c8:	4b73      	ldr	r3, [pc, #460]	@ (8005998 <_dtoa_r+0x590>)
 80057ca:	f7fb f8f7 	bl	80009bc <__aeabi_dcmplt>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f000 808b 	beq.w	80058ea <_dtoa_r+0x4e2>
 80057d4:	9b08      	ldr	r3, [sp, #32]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 8087 	beq.w	80058ea <_dtoa_r+0x4e2>
 80057dc:	f1bb 0f00 	cmp.w	fp, #0
 80057e0:	dd34      	ble.n	800584c <_dtoa_r+0x444>
 80057e2:	4620      	mov	r0, r4
 80057e4:	2200      	movs	r2, #0
 80057e6:	4629      	mov	r1, r5
 80057e8:	4b6c      	ldr	r3, [pc, #432]	@ (800599c <_dtoa_r+0x594>)
 80057ea:	f7fa fe75 	bl	80004d8 <__aeabi_dmul>
 80057ee:	465c      	mov	r4, fp
 80057f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057f4:	f107 38ff 	add.w	r8, r7, #4294967295
 80057f8:	3601      	adds	r6, #1
 80057fa:	4630      	mov	r0, r6
 80057fc:	f7fa fe02 	bl	8000404 <__aeabi_i2d>
 8005800:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005804:	f7fa fe68 	bl	80004d8 <__aeabi_dmul>
 8005808:	2200      	movs	r2, #0
 800580a:	4b65      	ldr	r3, [pc, #404]	@ (80059a0 <_dtoa_r+0x598>)
 800580c:	f7fa fcae 	bl	800016c <__adddf3>
 8005810:	4605      	mov	r5, r0
 8005812:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005816:	2c00      	cmp	r4, #0
 8005818:	d16a      	bne.n	80058f0 <_dtoa_r+0x4e8>
 800581a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800581e:	2200      	movs	r2, #0
 8005820:	4b60      	ldr	r3, [pc, #384]	@ (80059a4 <_dtoa_r+0x59c>)
 8005822:	f7fa fca1 	bl	8000168 <__aeabi_dsub>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800582e:	462a      	mov	r2, r5
 8005830:	4633      	mov	r3, r6
 8005832:	f7fb f8e1 	bl	80009f8 <__aeabi_dcmpgt>
 8005836:	2800      	cmp	r0, #0
 8005838:	f040 8298 	bne.w	8005d6c <_dtoa_r+0x964>
 800583c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005840:	462a      	mov	r2, r5
 8005842:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005846:	f7fb f8b9 	bl	80009bc <__aeabi_dcmplt>
 800584a:	bb38      	cbnz	r0, 800589c <_dtoa_r+0x494>
 800584c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005850:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005854:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005856:	2b00      	cmp	r3, #0
 8005858:	f2c0 8157 	blt.w	8005b0a <_dtoa_r+0x702>
 800585c:	2f0e      	cmp	r7, #14
 800585e:	f300 8154 	bgt.w	8005b0a <_dtoa_r+0x702>
 8005862:	4b4b      	ldr	r3, [pc, #300]	@ (8005990 <_dtoa_r+0x588>)
 8005864:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005868:	e9d3 3400 	ldrd	r3, r4, [r3]
 800586c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005870:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005872:	2b00      	cmp	r3, #0
 8005874:	f280 80e5 	bge.w	8005a42 <_dtoa_r+0x63a>
 8005878:	9b08      	ldr	r3, [sp, #32]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f300 80e1 	bgt.w	8005a42 <_dtoa_r+0x63a>
 8005880:	d10c      	bne.n	800589c <_dtoa_r+0x494>
 8005882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005886:	2200      	movs	r2, #0
 8005888:	4b46      	ldr	r3, [pc, #280]	@ (80059a4 <_dtoa_r+0x59c>)
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005892:	f7fb f8a7 	bl	80009e4 <__aeabi_dcmpge>
 8005896:	2800      	cmp	r0, #0
 8005898:	f000 8266 	beq.w	8005d68 <_dtoa_r+0x960>
 800589c:	2400      	movs	r4, #0
 800589e:	4625      	mov	r5, r4
 80058a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058a2:	4656      	mov	r6, sl
 80058a4:	ea6f 0803 	mvn.w	r8, r3
 80058a8:	2700      	movs	r7, #0
 80058aa:	4621      	mov	r1, r4
 80058ac:	4648      	mov	r0, r9
 80058ae:	f000 fc07 	bl	80060c0 <_Bfree>
 80058b2:	2d00      	cmp	r5, #0
 80058b4:	f000 80bd 	beq.w	8005a32 <_dtoa_r+0x62a>
 80058b8:	b12f      	cbz	r7, 80058c6 <_dtoa_r+0x4be>
 80058ba:	42af      	cmp	r7, r5
 80058bc:	d003      	beq.n	80058c6 <_dtoa_r+0x4be>
 80058be:	4639      	mov	r1, r7
 80058c0:	4648      	mov	r0, r9
 80058c2:	f000 fbfd 	bl	80060c0 <_Bfree>
 80058c6:	4629      	mov	r1, r5
 80058c8:	4648      	mov	r0, r9
 80058ca:	f000 fbf9 	bl	80060c0 <_Bfree>
 80058ce:	e0b0      	b.n	8005a32 <_dtoa_r+0x62a>
 80058d0:	07e2      	lsls	r2, r4, #31
 80058d2:	d505      	bpl.n	80058e0 <_dtoa_r+0x4d8>
 80058d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058d8:	f7fa fdfe 	bl	80004d8 <__aeabi_dmul>
 80058dc:	2301      	movs	r3, #1
 80058de:	3601      	adds	r6, #1
 80058e0:	1064      	asrs	r4, r4, #1
 80058e2:	3508      	adds	r5, #8
 80058e4:	e762      	b.n	80057ac <_dtoa_r+0x3a4>
 80058e6:	2602      	movs	r6, #2
 80058e8:	e765      	b.n	80057b6 <_dtoa_r+0x3ae>
 80058ea:	46b8      	mov	r8, r7
 80058ec:	9c08      	ldr	r4, [sp, #32]
 80058ee:	e784      	b.n	80057fa <_dtoa_r+0x3f2>
 80058f0:	4b27      	ldr	r3, [pc, #156]	@ (8005990 <_dtoa_r+0x588>)
 80058f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058fc:	4454      	add	r4, sl
 80058fe:	2900      	cmp	r1, #0
 8005900:	d054      	beq.n	80059ac <_dtoa_r+0x5a4>
 8005902:	2000      	movs	r0, #0
 8005904:	4928      	ldr	r1, [pc, #160]	@ (80059a8 <_dtoa_r+0x5a0>)
 8005906:	f7fa ff11 	bl	800072c <__aeabi_ddiv>
 800590a:	4633      	mov	r3, r6
 800590c:	462a      	mov	r2, r5
 800590e:	f7fa fc2b 	bl	8000168 <__aeabi_dsub>
 8005912:	4656      	mov	r6, sl
 8005914:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800591c:	f7fb f88c 	bl	8000a38 <__aeabi_d2iz>
 8005920:	4605      	mov	r5, r0
 8005922:	f7fa fd6f 	bl	8000404 <__aeabi_i2d>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800592e:	f7fa fc1b 	bl	8000168 <__aeabi_dsub>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	3530      	adds	r5, #48	@ 0x30
 8005938:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800593c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005940:	f806 5b01 	strb.w	r5, [r6], #1
 8005944:	f7fb f83a 	bl	80009bc <__aeabi_dcmplt>
 8005948:	2800      	cmp	r0, #0
 800594a:	d172      	bne.n	8005a32 <_dtoa_r+0x62a>
 800594c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005950:	2000      	movs	r0, #0
 8005952:	4911      	ldr	r1, [pc, #68]	@ (8005998 <_dtoa_r+0x590>)
 8005954:	f7fa fc08 	bl	8000168 <__aeabi_dsub>
 8005958:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800595c:	f7fb f82e 	bl	80009bc <__aeabi_dcmplt>
 8005960:	2800      	cmp	r0, #0
 8005962:	f040 80b4 	bne.w	8005ace <_dtoa_r+0x6c6>
 8005966:	42a6      	cmp	r6, r4
 8005968:	f43f af70 	beq.w	800584c <_dtoa_r+0x444>
 800596c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005970:	2200      	movs	r2, #0
 8005972:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <_dtoa_r+0x594>)
 8005974:	f7fa fdb0 	bl	80004d8 <__aeabi_dmul>
 8005978:	2200      	movs	r2, #0
 800597a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800597e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005982:	4b06      	ldr	r3, [pc, #24]	@ (800599c <_dtoa_r+0x594>)
 8005984:	f7fa fda8 	bl	80004d8 <__aeabi_dmul>
 8005988:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800598c:	e7c4      	b.n	8005918 <_dtoa_r+0x510>
 800598e:	bf00      	nop
 8005990:	08009b28 	.word	0x08009b28
 8005994:	08009b00 	.word	0x08009b00
 8005998:	3ff00000 	.word	0x3ff00000
 800599c:	40240000 	.word	0x40240000
 80059a0:	401c0000 	.word	0x401c0000
 80059a4:	40140000 	.word	0x40140000
 80059a8:	3fe00000 	.word	0x3fe00000
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	f7fa fd92 	bl	80004d8 <__aeabi_dmul>
 80059b4:	4656      	mov	r6, sl
 80059b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059ba:	9413      	str	r4, [sp, #76]	@ 0x4c
 80059bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059c0:	f7fb f83a 	bl	8000a38 <__aeabi_d2iz>
 80059c4:	4605      	mov	r5, r0
 80059c6:	f7fa fd1d 	bl	8000404 <__aeabi_i2d>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059d2:	f7fa fbc9 	bl	8000168 <__aeabi_dsub>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	3530      	adds	r5, #48	@ 0x30
 80059dc:	f806 5b01 	strb.w	r5, [r6], #1
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	d124      	bne.n	8005a36 <_dtoa_r+0x62e>
 80059ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059f0:	4bae      	ldr	r3, [pc, #696]	@ (8005cac <_dtoa_r+0x8a4>)
 80059f2:	f7fa fbbb 	bl	800016c <__adddf3>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059fe:	f7fa fffb 	bl	80009f8 <__aeabi_dcmpgt>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d163      	bne.n	8005ace <_dtoa_r+0x6c6>
 8005a06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	49a7      	ldr	r1, [pc, #668]	@ (8005cac <_dtoa_r+0x8a4>)
 8005a0e:	f7fa fbab 	bl	8000168 <__aeabi_dsub>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a1a:	f7fa ffcf 	bl	80009bc <__aeabi_dcmplt>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f43f af14 	beq.w	800584c <_dtoa_r+0x444>
 8005a24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a26:	1e73      	subs	r3, r6, #1
 8005a28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a2e:	2b30      	cmp	r3, #48	@ 0x30
 8005a30:	d0f8      	beq.n	8005a24 <_dtoa_r+0x61c>
 8005a32:	4647      	mov	r7, r8
 8005a34:	e03b      	b.n	8005aae <_dtoa_r+0x6a6>
 8005a36:	4b9e      	ldr	r3, [pc, #632]	@ (8005cb0 <_dtoa_r+0x8a8>)
 8005a38:	f7fa fd4e 	bl	80004d8 <__aeabi_dmul>
 8005a3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a40:	e7bc      	b.n	80059bc <_dtoa_r+0x5b4>
 8005a42:	4656      	mov	r6, sl
 8005a44:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fe6c 	bl	800072c <__aeabi_ddiv>
 8005a54:	f7fa fff0 	bl	8000a38 <__aeabi_d2iz>
 8005a58:	4680      	mov	r8, r0
 8005a5a:	f7fa fcd3 	bl	8000404 <__aeabi_i2d>
 8005a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a62:	f7fa fd39 	bl	80004d8 <__aeabi_dmul>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	f7fa fb7b 	bl	8000168 <__aeabi_dsub>
 8005a72:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a76:	9d08      	ldr	r5, [sp, #32]
 8005a78:	f806 4b01 	strb.w	r4, [r6], #1
 8005a7c:	eba6 040a 	sub.w	r4, r6, sl
 8005a80:	42a5      	cmp	r5, r4
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	d133      	bne.n	8005af0 <_dtoa_r+0x6e8>
 8005a88:	f7fa fb70 	bl	800016c <__adddf3>
 8005a8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a90:	4604      	mov	r4, r0
 8005a92:	460d      	mov	r5, r1
 8005a94:	f7fa ffb0 	bl	80009f8 <__aeabi_dcmpgt>
 8005a98:	b9c0      	cbnz	r0, 8005acc <_dtoa_r+0x6c4>
 8005a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7fa ff81 	bl	80009a8 <__aeabi_dcmpeq>
 8005aa6:	b110      	cbz	r0, 8005aae <_dtoa_r+0x6a6>
 8005aa8:	f018 0f01 	tst.w	r8, #1
 8005aac:	d10e      	bne.n	8005acc <_dtoa_r+0x6c4>
 8005aae:	4648      	mov	r0, r9
 8005ab0:	9903      	ldr	r1, [sp, #12]
 8005ab2:	f000 fb05 	bl	80060c0 <_Bfree>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	7033      	strb	r3, [r6, #0]
 8005aba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005abc:	3701      	adds	r7, #1
 8005abe:	601f      	str	r7, [r3, #0]
 8005ac0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 824b 	beq.w	8005f5e <_dtoa_r+0xb56>
 8005ac8:	601e      	str	r6, [r3, #0]
 8005aca:	e248      	b.n	8005f5e <_dtoa_r+0xb56>
 8005acc:	46b8      	mov	r8, r7
 8005ace:	4633      	mov	r3, r6
 8005ad0:	461e      	mov	r6, r3
 8005ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ad6:	2a39      	cmp	r2, #57	@ 0x39
 8005ad8:	d106      	bne.n	8005ae8 <_dtoa_r+0x6e0>
 8005ada:	459a      	cmp	sl, r3
 8005adc:	d1f8      	bne.n	8005ad0 <_dtoa_r+0x6c8>
 8005ade:	2230      	movs	r2, #48	@ 0x30
 8005ae0:	f108 0801 	add.w	r8, r8, #1
 8005ae4:	f88a 2000 	strb.w	r2, [sl]
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	3201      	adds	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e7a0      	b.n	8005a32 <_dtoa_r+0x62a>
 8005af0:	2200      	movs	r2, #0
 8005af2:	4b6f      	ldr	r3, [pc, #444]	@ (8005cb0 <_dtoa_r+0x8a8>)
 8005af4:	f7fa fcf0 	bl	80004d8 <__aeabi_dmul>
 8005af8:	2200      	movs	r2, #0
 8005afa:	2300      	movs	r3, #0
 8005afc:	4604      	mov	r4, r0
 8005afe:	460d      	mov	r5, r1
 8005b00:	f7fa ff52 	bl	80009a8 <__aeabi_dcmpeq>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d09f      	beq.n	8005a48 <_dtoa_r+0x640>
 8005b08:	e7d1      	b.n	8005aae <_dtoa_r+0x6a6>
 8005b0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b0c:	2a00      	cmp	r2, #0
 8005b0e:	f000 80ea 	beq.w	8005ce6 <_dtoa_r+0x8de>
 8005b12:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b14:	2a01      	cmp	r2, #1
 8005b16:	f300 80cd 	bgt.w	8005cb4 <_dtoa_r+0x8ac>
 8005b1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	f000 80c1 	beq.w	8005ca4 <_dtoa_r+0x89c>
 8005b22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b28:	9e04      	ldr	r6, [sp, #16]
 8005b2a:	9a04      	ldr	r2, [sp, #16]
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	441a      	add	r2, r3
 8005b30:	9204      	str	r2, [sp, #16]
 8005b32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b34:	4648      	mov	r0, r9
 8005b36:	441a      	add	r2, r3
 8005b38:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b3a:	f000 fb75 	bl	8006228 <__i2b>
 8005b3e:	4605      	mov	r5, r0
 8005b40:	b166      	cbz	r6, 8005b5c <_dtoa_r+0x754>
 8005b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	dd09      	ble.n	8005b5c <_dtoa_r+0x754>
 8005b48:	42b3      	cmp	r3, r6
 8005b4a:	bfa8      	it	ge
 8005b4c:	4633      	movge	r3, r6
 8005b4e:	9a04      	ldr	r2, [sp, #16]
 8005b50:	1af6      	subs	r6, r6, r3
 8005b52:	1ad2      	subs	r2, r2, r3
 8005b54:	9204      	str	r2, [sp, #16]
 8005b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b5e:	b30b      	cbz	r3, 8005ba4 <_dtoa_r+0x79c>
 8005b60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80c6 	beq.w	8005cf4 <_dtoa_r+0x8ec>
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	f000 80c0 	beq.w	8005cee <_dtoa_r+0x8e6>
 8005b6e:	4629      	mov	r1, r5
 8005b70:	4622      	mov	r2, r4
 8005b72:	4648      	mov	r0, r9
 8005b74:	f000 fc10 	bl	8006398 <__pow5mult>
 8005b78:	9a03      	ldr	r2, [sp, #12]
 8005b7a:	4601      	mov	r1, r0
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	4648      	mov	r0, r9
 8005b80:	f000 fb68 	bl	8006254 <__multiply>
 8005b84:	9903      	ldr	r1, [sp, #12]
 8005b86:	4680      	mov	r8, r0
 8005b88:	4648      	mov	r0, r9
 8005b8a:	f000 fa99 	bl	80060c0 <_Bfree>
 8005b8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b90:	1b1b      	subs	r3, r3, r4
 8005b92:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b94:	f000 80b1 	beq.w	8005cfa <_dtoa_r+0x8f2>
 8005b98:	4641      	mov	r1, r8
 8005b9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b9c:	4648      	mov	r0, r9
 8005b9e:	f000 fbfb 	bl	8006398 <__pow5mult>
 8005ba2:	9003      	str	r0, [sp, #12]
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4648      	mov	r0, r9
 8005ba8:	f000 fb3e 	bl	8006228 <__i2b>
 8005bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bae:	4604      	mov	r4, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 81d8 	beq.w	8005f66 <_dtoa_r+0xb5e>
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4601      	mov	r1, r0
 8005bba:	4648      	mov	r0, r9
 8005bbc:	f000 fbec 	bl	8006398 <__pow5mult>
 8005bc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	f300 809f 	bgt.w	8005d08 <_dtoa_r+0x900>
 8005bca:	9b06      	ldr	r3, [sp, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f040 8097 	bne.w	8005d00 <_dtoa_r+0x8f8>
 8005bd2:	9b07      	ldr	r3, [sp, #28]
 8005bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f040 8093 	bne.w	8005d04 <_dtoa_r+0x8fc>
 8005bde:	9b07      	ldr	r3, [sp, #28]
 8005be0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005be4:	0d1b      	lsrs	r3, r3, #20
 8005be6:	051b      	lsls	r3, r3, #20
 8005be8:	b133      	cbz	r3, 8005bf8 <_dtoa_r+0x7f0>
 8005bea:	9b04      	ldr	r3, [sp, #16]
 8005bec:	3301      	adds	r3, #1
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 81b8 	beq.w	8005f72 <_dtoa_r+0xb6a>
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c08:	6918      	ldr	r0, [r3, #16]
 8005c0a:	f000 fac1 	bl	8006190 <__hi0bits>
 8005c0e:	f1c0 0020 	rsb	r0, r0, #32
 8005c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c14:	4418      	add	r0, r3
 8005c16:	f010 001f 	ands.w	r0, r0, #31
 8005c1a:	f000 8082 	beq.w	8005d22 <_dtoa_r+0x91a>
 8005c1e:	f1c0 0320 	rsb	r3, r0, #32
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	dd73      	ble.n	8005d0e <_dtoa_r+0x906>
 8005c26:	9b04      	ldr	r3, [sp, #16]
 8005c28:	f1c0 001c 	rsb	r0, r0, #28
 8005c2c:	4403      	add	r3, r0
 8005c2e:	9304      	str	r3, [sp, #16]
 8005c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c32:	4406      	add	r6, r0
 8005c34:	4403      	add	r3, r0
 8005c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c38:	9b04      	ldr	r3, [sp, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	dd05      	ble.n	8005c4a <_dtoa_r+0x842>
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4648      	mov	r0, r9
 8005c42:	9903      	ldr	r1, [sp, #12]
 8005c44:	f000 fc02 	bl	800644c <__lshift>
 8005c48:	9003      	str	r0, [sp, #12]
 8005c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	dd05      	ble.n	8005c5c <_dtoa_r+0x854>
 8005c50:	4621      	mov	r1, r4
 8005c52:	461a      	mov	r2, r3
 8005c54:	4648      	mov	r0, r9
 8005c56:	f000 fbf9 	bl	800644c <__lshift>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d061      	beq.n	8005d26 <_dtoa_r+0x91e>
 8005c62:	4621      	mov	r1, r4
 8005c64:	9803      	ldr	r0, [sp, #12]
 8005c66:	f000 fc5d 	bl	8006524 <__mcmp>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	da5b      	bge.n	8005d26 <_dtoa_r+0x91e>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	220a      	movs	r2, #10
 8005c72:	4648      	mov	r0, r9
 8005c74:	9903      	ldr	r1, [sp, #12]
 8005c76:	f000 fa45 	bl	8006104 <__multadd>
 8005c7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c7c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005c80:	9003      	str	r0, [sp, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8177 	beq.w	8005f76 <_dtoa_r+0xb6e>
 8005c88:	4629      	mov	r1, r5
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	220a      	movs	r2, #10
 8005c8e:	4648      	mov	r0, r9
 8005c90:	f000 fa38 	bl	8006104 <__multadd>
 8005c94:	f1bb 0f00 	cmp.w	fp, #0
 8005c98:	4605      	mov	r5, r0
 8005c9a:	dc6f      	bgt.n	8005d7c <_dtoa_r+0x974>
 8005c9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	dc49      	bgt.n	8005d36 <_dtoa_r+0x92e>
 8005ca2:	e06b      	b.n	8005d7c <_dtoa_r+0x974>
 8005ca4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ca6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005caa:	e73c      	b.n	8005b26 <_dtoa_r+0x71e>
 8005cac:	3fe00000 	.word	0x3fe00000
 8005cb0:	40240000 	.word	0x40240000
 8005cb4:	9b08      	ldr	r3, [sp, #32]
 8005cb6:	1e5c      	subs	r4, r3, #1
 8005cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cba:	42a3      	cmp	r3, r4
 8005cbc:	db09      	blt.n	8005cd2 <_dtoa_r+0x8ca>
 8005cbe:	1b1c      	subs	r4, r3, r4
 8005cc0:	9b08      	ldr	r3, [sp, #32]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f6bf af30 	bge.w	8005b28 <_dtoa_r+0x720>
 8005cc8:	9b04      	ldr	r3, [sp, #16]
 8005cca:	9a08      	ldr	r2, [sp, #32]
 8005ccc:	1a9e      	subs	r6, r3, r2
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e72b      	b.n	8005b2a <_dtoa_r+0x722>
 8005cd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cd6:	1ae3      	subs	r3, r4, r3
 8005cd8:	441a      	add	r2, r3
 8005cda:	940a      	str	r4, [sp, #40]	@ 0x28
 8005cdc:	9e04      	ldr	r6, [sp, #16]
 8005cde:	2400      	movs	r4, #0
 8005ce0:	9b08      	ldr	r3, [sp, #32]
 8005ce2:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ce4:	e721      	b.n	8005b2a <_dtoa_r+0x722>
 8005ce6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ce8:	9e04      	ldr	r6, [sp, #16]
 8005cea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005cec:	e728      	b.n	8005b40 <_dtoa_r+0x738>
 8005cee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005cf2:	e751      	b.n	8005b98 <_dtoa_r+0x790>
 8005cf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cf6:	9903      	ldr	r1, [sp, #12]
 8005cf8:	e750      	b.n	8005b9c <_dtoa_r+0x794>
 8005cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cfe:	e751      	b.n	8005ba4 <_dtoa_r+0x79c>
 8005d00:	2300      	movs	r3, #0
 8005d02:	e779      	b.n	8005bf8 <_dtoa_r+0x7f0>
 8005d04:	9b06      	ldr	r3, [sp, #24]
 8005d06:	e777      	b.n	8005bf8 <_dtoa_r+0x7f0>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d0c:	e779      	b.n	8005c02 <_dtoa_r+0x7fa>
 8005d0e:	d093      	beq.n	8005c38 <_dtoa_r+0x830>
 8005d10:	9a04      	ldr	r2, [sp, #16]
 8005d12:	331c      	adds	r3, #28
 8005d14:	441a      	add	r2, r3
 8005d16:	9204      	str	r2, [sp, #16]
 8005d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d1a:	441e      	add	r6, r3
 8005d1c:	441a      	add	r2, r3
 8005d1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d20:	e78a      	b.n	8005c38 <_dtoa_r+0x830>
 8005d22:	4603      	mov	r3, r0
 8005d24:	e7f4      	b.n	8005d10 <_dtoa_r+0x908>
 8005d26:	9b08      	ldr	r3, [sp, #32]
 8005d28:	46b8      	mov	r8, r7
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dc20      	bgt.n	8005d70 <_dtoa_r+0x968>
 8005d2e:	469b      	mov	fp, r3
 8005d30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	dd1e      	ble.n	8005d74 <_dtoa_r+0x96c>
 8005d36:	f1bb 0f00 	cmp.w	fp, #0
 8005d3a:	f47f adb1 	bne.w	80058a0 <_dtoa_r+0x498>
 8005d3e:	4621      	mov	r1, r4
 8005d40:	465b      	mov	r3, fp
 8005d42:	2205      	movs	r2, #5
 8005d44:	4648      	mov	r0, r9
 8005d46:	f000 f9dd 	bl	8006104 <__multadd>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	9803      	ldr	r0, [sp, #12]
 8005d50:	f000 fbe8 	bl	8006524 <__mcmp>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	f77f ada3 	ble.w	80058a0 <_dtoa_r+0x498>
 8005d5a:	4656      	mov	r6, sl
 8005d5c:	2331      	movs	r3, #49	@ 0x31
 8005d5e:	f108 0801 	add.w	r8, r8, #1
 8005d62:	f806 3b01 	strb.w	r3, [r6], #1
 8005d66:	e59f      	b.n	80058a8 <_dtoa_r+0x4a0>
 8005d68:	46b8      	mov	r8, r7
 8005d6a:	9c08      	ldr	r4, [sp, #32]
 8005d6c:	4625      	mov	r5, r4
 8005d6e:	e7f4      	b.n	8005d5a <_dtoa_r+0x952>
 8005d70:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005d74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8101 	beq.w	8005f7e <_dtoa_r+0xb76>
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	dd05      	ble.n	8005d8c <_dtoa_r+0x984>
 8005d80:	4629      	mov	r1, r5
 8005d82:	4632      	mov	r2, r6
 8005d84:	4648      	mov	r0, r9
 8005d86:	f000 fb61 	bl	800644c <__lshift>
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d05c      	beq.n	8005e4c <_dtoa_r+0xa44>
 8005d92:	4648      	mov	r0, r9
 8005d94:	6869      	ldr	r1, [r5, #4]
 8005d96:	f000 f953 	bl	8006040 <_Balloc>
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	b928      	cbnz	r0, 8005daa <_dtoa_r+0x9a2>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005da4:	4b80      	ldr	r3, [pc, #512]	@ (8005fa8 <_dtoa_r+0xba0>)
 8005da6:	f7ff bb43 	b.w	8005430 <_dtoa_r+0x28>
 8005daa:	692a      	ldr	r2, [r5, #16]
 8005dac:	f105 010c 	add.w	r1, r5, #12
 8005db0:	3202      	adds	r2, #2
 8005db2:	0092      	lsls	r2, r2, #2
 8005db4:	300c      	adds	r0, #12
 8005db6:	f7ff fa8e 	bl	80052d6 <memcpy>
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4648      	mov	r0, r9
 8005dc0:	f000 fb44 	bl	800644c <__lshift>
 8005dc4:	462f      	mov	r7, r5
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	f10a 0301 	add.w	r3, sl, #1
 8005dcc:	9304      	str	r3, [sp, #16]
 8005dce:	eb0a 030b 	add.w	r3, sl, fp
 8005dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dd4:	9b06      	ldr	r3, [sp, #24]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ddc:	9b04      	ldr	r3, [sp, #16]
 8005dde:	4621      	mov	r1, r4
 8005de0:	9803      	ldr	r0, [sp, #12]
 8005de2:	f103 3bff 	add.w	fp, r3, #4294967295
 8005de6:	f7ff fa84 	bl	80052f2 <quorem>
 8005dea:	4603      	mov	r3, r0
 8005dec:	4639      	mov	r1, r7
 8005dee:	3330      	adds	r3, #48	@ 0x30
 8005df0:	9006      	str	r0, [sp, #24]
 8005df2:	9803      	ldr	r0, [sp, #12]
 8005df4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005df6:	f000 fb95 	bl	8006524 <__mcmp>
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	9008      	str	r0, [sp, #32]
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4648      	mov	r0, r9
 8005e02:	f000 fbab 	bl	800655c <__mdiff>
 8005e06:	68c2      	ldr	r2, [r0, #12]
 8005e08:	4606      	mov	r6, r0
 8005e0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e0c:	bb02      	cbnz	r2, 8005e50 <_dtoa_r+0xa48>
 8005e0e:	4601      	mov	r1, r0
 8005e10:	9803      	ldr	r0, [sp, #12]
 8005e12:	f000 fb87 	bl	8006524 <__mcmp>
 8005e16:	4602      	mov	r2, r0
 8005e18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4648      	mov	r0, r9
 8005e1e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005e22:	f000 f94d 	bl	80060c0 <_Bfree>
 8005e26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e2a:	9e04      	ldr	r6, [sp, #16]
 8005e2c:	ea42 0103 	orr.w	r1, r2, r3
 8005e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e32:	4319      	orrs	r1, r3
 8005e34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e36:	d10d      	bne.n	8005e54 <_dtoa_r+0xa4c>
 8005e38:	2b39      	cmp	r3, #57	@ 0x39
 8005e3a:	d027      	beq.n	8005e8c <_dtoa_r+0xa84>
 8005e3c:	9a08      	ldr	r2, [sp, #32]
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	dd01      	ble.n	8005e46 <_dtoa_r+0xa3e>
 8005e42:	9b06      	ldr	r3, [sp, #24]
 8005e44:	3331      	adds	r3, #49	@ 0x31
 8005e46:	f88b 3000 	strb.w	r3, [fp]
 8005e4a:	e52e      	b.n	80058aa <_dtoa_r+0x4a2>
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	e7b9      	b.n	8005dc4 <_dtoa_r+0x9bc>
 8005e50:	2201      	movs	r2, #1
 8005e52:	e7e2      	b.n	8005e1a <_dtoa_r+0xa12>
 8005e54:	9908      	ldr	r1, [sp, #32]
 8005e56:	2900      	cmp	r1, #0
 8005e58:	db04      	blt.n	8005e64 <_dtoa_r+0xa5c>
 8005e5a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005e5c:	4301      	orrs	r1, r0
 8005e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e60:	4301      	orrs	r1, r0
 8005e62:	d120      	bne.n	8005ea6 <_dtoa_r+0xa9e>
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	ddee      	ble.n	8005e46 <_dtoa_r+0xa3e>
 8005e68:	2201      	movs	r2, #1
 8005e6a:	9903      	ldr	r1, [sp, #12]
 8005e6c:	4648      	mov	r0, r9
 8005e6e:	9304      	str	r3, [sp, #16]
 8005e70:	f000 faec 	bl	800644c <__lshift>
 8005e74:	4621      	mov	r1, r4
 8005e76:	9003      	str	r0, [sp, #12]
 8005e78:	f000 fb54 	bl	8006524 <__mcmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	9b04      	ldr	r3, [sp, #16]
 8005e80:	dc02      	bgt.n	8005e88 <_dtoa_r+0xa80>
 8005e82:	d1e0      	bne.n	8005e46 <_dtoa_r+0xa3e>
 8005e84:	07da      	lsls	r2, r3, #31
 8005e86:	d5de      	bpl.n	8005e46 <_dtoa_r+0xa3e>
 8005e88:	2b39      	cmp	r3, #57	@ 0x39
 8005e8a:	d1da      	bne.n	8005e42 <_dtoa_r+0xa3a>
 8005e8c:	2339      	movs	r3, #57	@ 0x39
 8005e8e:	f88b 3000 	strb.w	r3, [fp]
 8005e92:	4633      	mov	r3, r6
 8005e94:	461e      	mov	r6, r3
 8005e96:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	2a39      	cmp	r2, #57	@ 0x39
 8005e9e:	d04e      	beq.n	8005f3e <_dtoa_r+0xb36>
 8005ea0:	3201      	adds	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e501      	b.n	80058aa <_dtoa_r+0x4a2>
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	dd03      	ble.n	8005eb2 <_dtoa_r+0xaaa>
 8005eaa:	2b39      	cmp	r3, #57	@ 0x39
 8005eac:	d0ee      	beq.n	8005e8c <_dtoa_r+0xa84>
 8005eae:	3301      	adds	r3, #1
 8005eb0:	e7c9      	b.n	8005e46 <_dtoa_r+0xa3e>
 8005eb2:	9a04      	ldr	r2, [sp, #16]
 8005eb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005eb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005eba:	428a      	cmp	r2, r1
 8005ebc:	d028      	beq.n	8005f10 <_dtoa_r+0xb08>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	220a      	movs	r2, #10
 8005ec2:	9903      	ldr	r1, [sp, #12]
 8005ec4:	4648      	mov	r0, r9
 8005ec6:	f000 f91d 	bl	8006104 <__multadd>
 8005eca:	42af      	cmp	r7, r5
 8005ecc:	9003      	str	r0, [sp, #12]
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	f04f 020a 	mov.w	r2, #10
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	4648      	mov	r0, r9
 8005eda:	d107      	bne.n	8005eec <_dtoa_r+0xae4>
 8005edc:	f000 f912 	bl	8006104 <__multadd>
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	9304      	str	r3, [sp, #16]
 8005eea:	e777      	b.n	8005ddc <_dtoa_r+0x9d4>
 8005eec:	f000 f90a 	bl	8006104 <__multadd>
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	4648      	mov	r0, r9
 8005efa:	f000 f903 	bl	8006104 <__multadd>
 8005efe:	4605      	mov	r5, r0
 8005f00:	e7f0      	b.n	8005ee4 <_dtoa_r+0xadc>
 8005f02:	f1bb 0f00 	cmp.w	fp, #0
 8005f06:	bfcc      	ite	gt
 8005f08:	465e      	movgt	r6, fp
 8005f0a:	2601      	movle	r6, #1
 8005f0c:	2700      	movs	r7, #0
 8005f0e:	4456      	add	r6, sl
 8005f10:	2201      	movs	r2, #1
 8005f12:	9903      	ldr	r1, [sp, #12]
 8005f14:	4648      	mov	r0, r9
 8005f16:	9304      	str	r3, [sp, #16]
 8005f18:	f000 fa98 	bl	800644c <__lshift>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	9003      	str	r0, [sp, #12]
 8005f20:	f000 fb00 	bl	8006524 <__mcmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	dcb4      	bgt.n	8005e92 <_dtoa_r+0xa8a>
 8005f28:	d102      	bne.n	8005f30 <_dtoa_r+0xb28>
 8005f2a:	9b04      	ldr	r3, [sp, #16]
 8005f2c:	07db      	lsls	r3, r3, #31
 8005f2e:	d4b0      	bmi.n	8005e92 <_dtoa_r+0xa8a>
 8005f30:	4633      	mov	r3, r6
 8005f32:	461e      	mov	r6, r3
 8005f34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f38:	2a30      	cmp	r2, #48	@ 0x30
 8005f3a:	d0fa      	beq.n	8005f32 <_dtoa_r+0xb2a>
 8005f3c:	e4b5      	b.n	80058aa <_dtoa_r+0x4a2>
 8005f3e:	459a      	cmp	sl, r3
 8005f40:	d1a8      	bne.n	8005e94 <_dtoa_r+0xa8c>
 8005f42:	2331      	movs	r3, #49	@ 0x31
 8005f44:	f108 0801 	add.w	r8, r8, #1
 8005f48:	f88a 3000 	strb.w	r3, [sl]
 8005f4c:	e4ad      	b.n	80058aa <_dtoa_r+0x4a2>
 8005f4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005fac <_dtoa_r+0xba4>
 8005f54:	b11b      	cbz	r3, 8005f5e <_dtoa_r+0xb56>
 8005f56:	f10a 0308 	add.w	r3, sl, #8
 8005f5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	4650      	mov	r0, sl
 8005f60:	b017      	add	sp, #92	@ 0x5c
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	f77f ae2e 	ble.w	8005bca <_dtoa_r+0x7c2>
 8005f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f72:	2001      	movs	r0, #1
 8005f74:	e64d      	b.n	8005c12 <_dtoa_r+0x80a>
 8005f76:	f1bb 0f00 	cmp.w	fp, #0
 8005f7a:	f77f aed9 	ble.w	8005d30 <_dtoa_r+0x928>
 8005f7e:	4656      	mov	r6, sl
 8005f80:	4621      	mov	r1, r4
 8005f82:	9803      	ldr	r0, [sp, #12]
 8005f84:	f7ff f9b5 	bl	80052f2 <quorem>
 8005f88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005f8c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f90:	eba6 020a 	sub.w	r2, r6, sl
 8005f94:	4593      	cmp	fp, r2
 8005f96:	ddb4      	ble.n	8005f02 <_dtoa_r+0xafa>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	4648      	mov	r0, r9
 8005f9e:	9903      	ldr	r1, [sp, #12]
 8005fa0:	f000 f8b0 	bl	8006104 <__multadd>
 8005fa4:	9003      	str	r0, [sp, #12]
 8005fa6:	e7eb      	b.n	8005f80 <_dtoa_r+0xb78>
 8005fa8:	08009a2c 	.word	0x08009a2c
 8005fac:	080099b0 	.word	0x080099b0

08005fb0 <_free_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	d040      	beq.n	800603a <_free_r+0x8a>
 8005fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fbc:	1f0c      	subs	r4, r1, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bfb8      	it	lt
 8005fc2:	18e4      	addlt	r4, r4, r3
 8005fc4:	f7fe fb5c 	bl	8004680 <__malloc_lock>
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800603c <_free_r+0x8c>)
 8005fca:	6813      	ldr	r3, [r2, #0]
 8005fcc:	b933      	cbnz	r3, 8005fdc <_free_r+0x2c>
 8005fce:	6063      	str	r3, [r4, #4]
 8005fd0:	6014      	str	r4, [r2, #0]
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd8:	f7fe bb58 	b.w	800468c <__malloc_unlock>
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d908      	bls.n	8005ff2 <_free_r+0x42>
 8005fe0:	6820      	ldr	r0, [r4, #0]
 8005fe2:	1821      	adds	r1, r4, r0
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	bf01      	itttt	eq
 8005fe8:	6819      	ldreq	r1, [r3, #0]
 8005fea:	685b      	ldreq	r3, [r3, #4]
 8005fec:	1809      	addeq	r1, r1, r0
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	e7ed      	b.n	8005fce <_free_r+0x1e>
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	b10b      	cbz	r3, 8005ffc <_free_r+0x4c>
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	d9fa      	bls.n	8005ff2 <_free_r+0x42>
 8005ffc:	6811      	ldr	r1, [r2, #0]
 8005ffe:	1850      	adds	r0, r2, r1
 8006000:	42a0      	cmp	r0, r4
 8006002:	d10b      	bne.n	800601c <_free_r+0x6c>
 8006004:	6820      	ldr	r0, [r4, #0]
 8006006:	4401      	add	r1, r0
 8006008:	1850      	adds	r0, r2, r1
 800600a:	4283      	cmp	r3, r0
 800600c:	6011      	str	r1, [r2, #0]
 800600e:	d1e0      	bne.n	8005fd2 <_free_r+0x22>
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4408      	add	r0, r1
 8006016:	6010      	str	r0, [r2, #0]
 8006018:	6053      	str	r3, [r2, #4]
 800601a:	e7da      	b.n	8005fd2 <_free_r+0x22>
 800601c:	d902      	bls.n	8006024 <_free_r+0x74>
 800601e:	230c      	movs	r3, #12
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	e7d6      	b.n	8005fd2 <_free_r+0x22>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	1821      	adds	r1, r4, r0
 8006028:	428b      	cmp	r3, r1
 800602a:	bf01      	itttt	eq
 800602c:	6819      	ldreq	r1, [r3, #0]
 800602e:	685b      	ldreq	r3, [r3, #4]
 8006030:	1809      	addeq	r1, r1, r0
 8006032:	6021      	streq	r1, [r4, #0]
 8006034:	6063      	str	r3, [r4, #4]
 8006036:	6054      	str	r4, [r2, #4]
 8006038:	e7cb      	b.n	8005fd2 <_free_r+0x22>
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	200007bc 	.word	0x200007bc

08006040 <_Balloc>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	69c6      	ldr	r6, [r0, #28]
 8006044:	4604      	mov	r4, r0
 8006046:	460d      	mov	r5, r1
 8006048:	b976      	cbnz	r6, 8006068 <_Balloc+0x28>
 800604a:	2010      	movs	r0, #16
 800604c:	f7fe fa66 	bl	800451c <malloc>
 8006050:	4602      	mov	r2, r0
 8006052:	61e0      	str	r0, [r4, #28]
 8006054:	b920      	cbnz	r0, 8006060 <_Balloc+0x20>
 8006056:	216b      	movs	r1, #107	@ 0x6b
 8006058:	4b17      	ldr	r3, [pc, #92]	@ (80060b8 <_Balloc+0x78>)
 800605a:	4818      	ldr	r0, [pc, #96]	@ (80060bc <_Balloc+0x7c>)
 800605c:	f000 fd84 	bl	8006b68 <__assert_func>
 8006060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006064:	6006      	str	r6, [r0, #0]
 8006066:	60c6      	str	r6, [r0, #12]
 8006068:	69e6      	ldr	r6, [r4, #28]
 800606a:	68f3      	ldr	r3, [r6, #12]
 800606c:	b183      	cbz	r3, 8006090 <_Balloc+0x50>
 800606e:	69e3      	ldr	r3, [r4, #28]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006076:	b9b8      	cbnz	r0, 80060a8 <_Balloc+0x68>
 8006078:	2101      	movs	r1, #1
 800607a:	fa01 f605 	lsl.w	r6, r1, r5
 800607e:	1d72      	adds	r2, r6, #5
 8006080:	4620      	mov	r0, r4
 8006082:	0092      	lsls	r2, r2, #2
 8006084:	f000 fd8e 	bl	8006ba4 <_calloc_r>
 8006088:	b160      	cbz	r0, 80060a4 <_Balloc+0x64>
 800608a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800608e:	e00e      	b.n	80060ae <_Balloc+0x6e>
 8006090:	2221      	movs	r2, #33	@ 0x21
 8006092:	2104      	movs	r1, #4
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fd85 	bl	8006ba4 <_calloc_r>
 800609a:	69e3      	ldr	r3, [r4, #28]
 800609c:	60f0      	str	r0, [r6, #12]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e4      	bne.n	800606e <_Balloc+0x2e>
 80060a4:	2000      	movs	r0, #0
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	6802      	ldr	r2, [r0, #0]
 80060aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060ae:	2300      	movs	r3, #0
 80060b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060b4:	e7f7      	b.n	80060a6 <_Balloc+0x66>
 80060b6:	bf00      	nop
 80060b8:	080099bd 	.word	0x080099bd
 80060bc:	08009a3d 	.word	0x08009a3d

080060c0 <_Bfree>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	69c6      	ldr	r6, [r0, #28]
 80060c4:	4605      	mov	r5, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	b976      	cbnz	r6, 80060e8 <_Bfree+0x28>
 80060ca:	2010      	movs	r0, #16
 80060cc:	f7fe fa26 	bl	800451c <malloc>
 80060d0:	4602      	mov	r2, r0
 80060d2:	61e8      	str	r0, [r5, #28]
 80060d4:	b920      	cbnz	r0, 80060e0 <_Bfree+0x20>
 80060d6:	218f      	movs	r1, #143	@ 0x8f
 80060d8:	4b08      	ldr	r3, [pc, #32]	@ (80060fc <_Bfree+0x3c>)
 80060da:	4809      	ldr	r0, [pc, #36]	@ (8006100 <_Bfree+0x40>)
 80060dc:	f000 fd44 	bl	8006b68 <__assert_func>
 80060e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060e4:	6006      	str	r6, [r0, #0]
 80060e6:	60c6      	str	r6, [r0, #12]
 80060e8:	b13c      	cbz	r4, 80060fa <_Bfree+0x3a>
 80060ea:	69eb      	ldr	r3, [r5, #28]
 80060ec:	6862      	ldr	r2, [r4, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060f4:	6021      	str	r1, [r4, #0]
 80060f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	080099bd 	.word	0x080099bd
 8006100:	08009a3d 	.word	0x08009a3d

08006104 <__multadd>:
 8006104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006108:	4607      	mov	r7, r0
 800610a:	460c      	mov	r4, r1
 800610c:	461e      	mov	r6, r3
 800610e:	2000      	movs	r0, #0
 8006110:	690d      	ldr	r5, [r1, #16]
 8006112:	f101 0c14 	add.w	ip, r1, #20
 8006116:	f8dc 3000 	ldr.w	r3, [ip]
 800611a:	3001      	adds	r0, #1
 800611c:	b299      	uxth	r1, r3
 800611e:	fb02 6101 	mla	r1, r2, r1, r6
 8006122:	0c1e      	lsrs	r6, r3, #16
 8006124:	0c0b      	lsrs	r3, r1, #16
 8006126:	fb02 3306 	mla	r3, r2, r6, r3
 800612a:	b289      	uxth	r1, r1
 800612c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006130:	4285      	cmp	r5, r0
 8006132:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006136:	f84c 1b04 	str.w	r1, [ip], #4
 800613a:	dcec      	bgt.n	8006116 <__multadd+0x12>
 800613c:	b30e      	cbz	r6, 8006182 <__multadd+0x7e>
 800613e:	68a3      	ldr	r3, [r4, #8]
 8006140:	42ab      	cmp	r3, r5
 8006142:	dc19      	bgt.n	8006178 <__multadd+0x74>
 8006144:	6861      	ldr	r1, [r4, #4]
 8006146:	4638      	mov	r0, r7
 8006148:	3101      	adds	r1, #1
 800614a:	f7ff ff79 	bl	8006040 <_Balloc>
 800614e:	4680      	mov	r8, r0
 8006150:	b928      	cbnz	r0, 800615e <__multadd+0x5a>
 8006152:	4602      	mov	r2, r0
 8006154:	21ba      	movs	r1, #186	@ 0xba
 8006156:	4b0c      	ldr	r3, [pc, #48]	@ (8006188 <__multadd+0x84>)
 8006158:	480c      	ldr	r0, [pc, #48]	@ (800618c <__multadd+0x88>)
 800615a:	f000 fd05 	bl	8006b68 <__assert_func>
 800615e:	6922      	ldr	r2, [r4, #16]
 8006160:	f104 010c 	add.w	r1, r4, #12
 8006164:	3202      	adds	r2, #2
 8006166:	0092      	lsls	r2, r2, #2
 8006168:	300c      	adds	r0, #12
 800616a:	f7ff f8b4 	bl	80052d6 <memcpy>
 800616e:	4621      	mov	r1, r4
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ffa5 	bl	80060c0 <_Bfree>
 8006176:	4644      	mov	r4, r8
 8006178:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800617c:	3501      	adds	r5, #1
 800617e:	615e      	str	r6, [r3, #20]
 8006180:	6125      	str	r5, [r4, #16]
 8006182:	4620      	mov	r0, r4
 8006184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006188:	08009a2c 	.word	0x08009a2c
 800618c:	08009a3d 	.word	0x08009a3d

08006190 <__hi0bits>:
 8006190:	4603      	mov	r3, r0
 8006192:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006196:	bf3a      	itte	cc
 8006198:	0403      	lslcc	r3, r0, #16
 800619a:	2010      	movcc	r0, #16
 800619c:	2000      	movcs	r0, #0
 800619e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061a2:	bf3c      	itt	cc
 80061a4:	021b      	lslcc	r3, r3, #8
 80061a6:	3008      	addcc	r0, #8
 80061a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ac:	bf3c      	itt	cc
 80061ae:	011b      	lslcc	r3, r3, #4
 80061b0:	3004      	addcc	r0, #4
 80061b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b6:	bf3c      	itt	cc
 80061b8:	009b      	lslcc	r3, r3, #2
 80061ba:	3002      	addcc	r0, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	db05      	blt.n	80061cc <__hi0bits+0x3c>
 80061c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80061c4:	f100 0001 	add.w	r0, r0, #1
 80061c8:	bf08      	it	eq
 80061ca:	2020      	moveq	r0, #32
 80061cc:	4770      	bx	lr

080061ce <__lo0bits>:
 80061ce:	6803      	ldr	r3, [r0, #0]
 80061d0:	4602      	mov	r2, r0
 80061d2:	f013 0007 	ands.w	r0, r3, #7
 80061d6:	d00b      	beq.n	80061f0 <__lo0bits+0x22>
 80061d8:	07d9      	lsls	r1, r3, #31
 80061da:	d421      	bmi.n	8006220 <__lo0bits+0x52>
 80061dc:	0798      	lsls	r0, r3, #30
 80061de:	bf49      	itett	mi
 80061e0:	085b      	lsrmi	r3, r3, #1
 80061e2:	089b      	lsrpl	r3, r3, #2
 80061e4:	2001      	movmi	r0, #1
 80061e6:	6013      	strmi	r3, [r2, #0]
 80061e8:	bf5c      	itt	pl
 80061ea:	2002      	movpl	r0, #2
 80061ec:	6013      	strpl	r3, [r2, #0]
 80061ee:	4770      	bx	lr
 80061f0:	b299      	uxth	r1, r3
 80061f2:	b909      	cbnz	r1, 80061f8 <__lo0bits+0x2a>
 80061f4:	2010      	movs	r0, #16
 80061f6:	0c1b      	lsrs	r3, r3, #16
 80061f8:	b2d9      	uxtb	r1, r3
 80061fa:	b909      	cbnz	r1, 8006200 <__lo0bits+0x32>
 80061fc:	3008      	adds	r0, #8
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	0719      	lsls	r1, r3, #28
 8006202:	bf04      	itt	eq
 8006204:	091b      	lsreq	r3, r3, #4
 8006206:	3004      	addeq	r0, #4
 8006208:	0799      	lsls	r1, r3, #30
 800620a:	bf04      	itt	eq
 800620c:	089b      	lsreq	r3, r3, #2
 800620e:	3002      	addeq	r0, #2
 8006210:	07d9      	lsls	r1, r3, #31
 8006212:	d403      	bmi.n	800621c <__lo0bits+0x4e>
 8006214:	085b      	lsrs	r3, r3, #1
 8006216:	f100 0001 	add.w	r0, r0, #1
 800621a:	d003      	beq.n	8006224 <__lo0bits+0x56>
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	4770      	bx	lr
 8006220:	2000      	movs	r0, #0
 8006222:	4770      	bx	lr
 8006224:	2020      	movs	r0, #32
 8006226:	4770      	bx	lr

08006228 <__i2b>:
 8006228:	b510      	push	{r4, lr}
 800622a:	460c      	mov	r4, r1
 800622c:	2101      	movs	r1, #1
 800622e:	f7ff ff07 	bl	8006040 <_Balloc>
 8006232:	4602      	mov	r2, r0
 8006234:	b928      	cbnz	r0, 8006242 <__i2b+0x1a>
 8006236:	f240 1145 	movw	r1, #325	@ 0x145
 800623a:	4b04      	ldr	r3, [pc, #16]	@ (800624c <__i2b+0x24>)
 800623c:	4804      	ldr	r0, [pc, #16]	@ (8006250 <__i2b+0x28>)
 800623e:	f000 fc93 	bl	8006b68 <__assert_func>
 8006242:	2301      	movs	r3, #1
 8006244:	6144      	str	r4, [r0, #20]
 8006246:	6103      	str	r3, [r0, #16]
 8006248:	bd10      	pop	{r4, pc}
 800624a:	bf00      	nop
 800624c:	08009a2c 	.word	0x08009a2c
 8006250:	08009a3d 	.word	0x08009a3d

08006254 <__multiply>:
 8006254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006258:	4617      	mov	r7, r2
 800625a:	690a      	ldr	r2, [r1, #16]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4689      	mov	r9, r1
 8006260:	429a      	cmp	r2, r3
 8006262:	bfa2      	ittt	ge
 8006264:	463b      	movge	r3, r7
 8006266:	460f      	movge	r7, r1
 8006268:	4699      	movge	r9, r3
 800626a:	693d      	ldr	r5, [r7, #16]
 800626c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	eb05 060a 	add.w	r6, r5, sl
 8006278:	42b3      	cmp	r3, r6
 800627a:	b085      	sub	sp, #20
 800627c:	bfb8      	it	lt
 800627e:	3101      	addlt	r1, #1
 8006280:	f7ff fede 	bl	8006040 <_Balloc>
 8006284:	b930      	cbnz	r0, 8006294 <__multiply+0x40>
 8006286:	4602      	mov	r2, r0
 8006288:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800628c:	4b40      	ldr	r3, [pc, #256]	@ (8006390 <__multiply+0x13c>)
 800628e:	4841      	ldr	r0, [pc, #260]	@ (8006394 <__multiply+0x140>)
 8006290:	f000 fc6a 	bl	8006b68 <__assert_func>
 8006294:	f100 0414 	add.w	r4, r0, #20
 8006298:	4623      	mov	r3, r4
 800629a:	2200      	movs	r2, #0
 800629c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80062a0:	4573      	cmp	r3, lr
 80062a2:	d320      	bcc.n	80062e6 <__multiply+0x92>
 80062a4:	f107 0814 	add.w	r8, r7, #20
 80062a8:	f109 0114 	add.w	r1, r9, #20
 80062ac:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80062b0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80062b4:	9302      	str	r3, [sp, #8]
 80062b6:	1beb      	subs	r3, r5, r7
 80062b8:	3b15      	subs	r3, #21
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	3304      	adds	r3, #4
 80062c0:	3715      	adds	r7, #21
 80062c2:	42bd      	cmp	r5, r7
 80062c4:	bf38      	it	cc
 80062c6:	2304      	movcc	r3, #4
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	9b02      	ldr	r3, [sp, #8]
 80062cc:	9103      	str	r1, [sp, #12]
 80062ce:	428b      	cmp	r3, r1
 80062d0:	d80c      	bhi.n	80062ec <__multiply+0x98>
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	dd03      	ble.n	80062de <__multiply+0x8a>
 80062d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d055      	beq.n	800638a <__multiply+0x136>
 80062de:	6106      	str	r6, [r0, #16]
 80062e0:	b005      	add	sp, #20
 80062e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e6:	f843 2b04 	str.w	r2, [r3], #4
 80062ea:	e7d9      	b.n	80062a0 <__multiply+0x4c>
 80062ec:	f8b1 a000 	ldrh.w	sl, [r1]
 80062f0:	f1ba 0f00 	cmp.w	sl, #0
 80062f4:	d01f      	beq.n	8006336 <__multiply+0xe2>
 80062f6:	46c4      	mov	ip, r8
 80062f8:	46a1      	mov	r9, r4
 80062fa:	2700      	movs	r7, #0
 80062fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006300:	f8d9 3000 	ldr.w	r3, [r9]
 8006304:	fa1f fb82 	uxth.w	fp, r2
 8006308:	b29b      	uxth	r3, r3
 800630a:	fb0a 330b 	mla	r3, sl, fp, r3
 800630e:	443b      	add	r3, r7
 8006310:	f8d9 7000 	ldr.w	r7, [r9]
 8006314:	0c12      	lsrs	r2, r2, #16
 8006316:	0c3f      	lsrs	r7, r7, #16
 8006318:	fb0a 7202 	mla	r2, sl, r2, r7
 800631c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006320:	b29b      	uxth	r3, r3
 8006322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006326:	4565      	cmp	r5, ip
 8006328:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800632c:	f849 3b04 	str.w	r3, [r9], #4
 8006330:	d8e4      	bhi.n	80062fc <__multiply+0xa8>
 8006332:	9b01      	ldr	r3, [sp, #4]
 8006334:	50e7      	str	r7, [r4, r3]
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	3104      	adds	r1, #4
 800633a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800633e:	f1b9 0f00 	cmp.w	r9, #0
 8006342:	d020      	beq.n	8006386 <__multiply+0x132>
 8006344:	4647      	mov	r7, r8
 8006346:	46a4      	mov	ip, r4
 8006348:	f04f 0a00 	mov.w	sl, #0
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	f8b7 b000 	ldrh.w	fp, [r7]
 8006352:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006356:	b29b      	uxth	r3, r3
 8006358:	fb09 220b 	mla	r2, r9, fp, r2
 800635c:	4452      	add	r2, sl
 800635e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006362:	f84c 3b04 	str.w	r3, [ip], #4
 8006366:	f857 3b04 	ldr.w	r3, [r7], #4
 800636a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800636e:	f8bc 3000 	ldrh.w	r3, [ip]
 8006372:	42bd      	cmp	r5, r7
 8006374:	fb09 330a 	mla	r3, r9, sl, r3
 8006378:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800637c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006380:	d8e5      	bhi.n	800634e <__multiply+0xfa>
 8006382:	9a01      	ldr	r2, [sp, #4]
 8006384:	50a3      	str	r3, [r4, r2]
 8006386:	3404      	adds	r4, #4
 8006388:	e79f      	b.n	80062ca <__multiply+0x76>
 800638a:	3e01      	subs	r6, #1
 800638c:	e7a1      	b.n	80062d2 <__multiply+0x7e>
 800638e:	bf00      	nop
 8006390:	08009a2c 	.word	0x08009a2c
 8006394:	08009a3d 	.word	0x08009a3d

08006398 <__pow5mult>:
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800639c:	4615      	mov	r5, r2
 800639e:	f012 0203 	ands.w	r2, r2, #3
 80063a2:	4607      	mov	r7, r0
 80063a4:	460e      	mov	r6, r1
 80063a6:	d007      	beq.n	80063b8 <__pow5mult+0x20>
 80063a8:	4c25      	ldr	r4, [pc, #148]	@ (8006440 <__pow5mult+0xa8>)
 80063aa:	3a01      	subs	r2, #1
 80063ac:	2300      	movs	r3, #0
 80063ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063b2:	f7ff fea7 	bl	8006104 <__multadd>
 80063b6:	4606      	mov	r6, r0
 80063b8:	10ad      	asrs	r5, r5, #2
 80063ba:	d03d      	beq.n	8006438 <__pow5mult+0xa0>
 80063bc:	69fc      	ldr	r4, [r7, #28]
 80063be:	b97c      	cbnz	r4, 80063e0 <__pow5mult+0x48>
 80063c0:	2010      	movs	r0, #16
 80063c2:	f7fe f8ab 	bl	800451c <malloc>
 80063c6:	4602      	mov	r2, r0
 80063c8:	61f8      	str	r0, [r7, #28]
 80063ca:	b928      	cbnz	r0, 80063d8 <__pow5mult+0x40>
 80063cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80063d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006444 <__pow5mult+0xac>)
 80063d2:	481d      	ldr	r0, [pc, #116]	@ (8006448 <__pow5mult+0xb0>)
 80063d4:	f000 fbc8 	bl	8006b68 <__assert_func>
 80063d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063dc:	6004      	str	r4, [r0, #0]
 80063de:	60c4      	str	r4, [r0, #12]
 80063e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80063e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063e8:	b94c      	cbnz	r4, 80063fe <__pow5mult+0x66>
 80063ea:	f240 2171 	movw	r1, #625	@ 0x271
 80063ee:	4638      	mov	r0, r7
 80063f0:	f7ff ff1a 	bl	8006228 <__i2b>
 80063f4:	2300      	movs	r3, #0
 80063f6:	4604      	mov	r4, r0
 80063f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80063fc:	6003      	str	r3, [r0, #0]
 80063fe:	f04f 0900 	mov.w	r9, #0
 8006402:	07eb      	lsls	r3, r5, #31
 8006404:	d50a      	bpl.n	800641c <__pow5mult+0x84>
 8006406:	4631      	mov	r1, r6
 8006408:	4622      	mov	r2, r4
 800640a:	4638      	mov	r0, r7
 800640c:	f7ff ff22 	bl	8006254 <__multiply>
 8006410:	4680      	mov	r8, r0
 8006412:	4631      	mov	r1, r6
 8006414:	4638      	mov	r0, r7
 8006416:	f7ff fe53 	bl	80060c0 <_Bfree>
 800641a:	4646      	mov	r6, r8
 800641c:	106d      	asrs	r5, r5, #1
 800641e:	d00b      	beq.n	8006438 <__pow5mult+0xa0>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	b938      	cbnz	r0, 8006434 <__pow5mult+0x9c>
 8006424:	4622      	mov	r2, r4
 8006426:	4621      	mov	r1, r4
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ff13 	bl	8006254 <__multiply>
 800642e:	6020      	str	r0, [r4, #0]
 8006430:	f8c0 9000 	str.w	r9, [r0]
 8006434:	4604      	mov	r4, r0
 8006436:	e7e4      	b.n	8006402 <__pow5mult+0x6a>
 8006438:	4630      	mov	r0, r6
 800643a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800643e:	bf00      	nop
 8006440:	08009af0 	.word	0x08009af0
 8006444:	080099bd 	.word	0x080099bd
 8006448:	08009a3d 	.word	0x08009a3d

0800644c <__lshift>:
 800644c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	460c      	mov	r4, r1
 8006452:	4607      	mov	r7, r0
 8006454:	4691      	mov	r9, r2
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	6849      	ldr	r1, [r1, #4]
 800645a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006464:	f108 0601 	add.w	r6, r8, #1
 8006468:	42b3      	cmp	r3, r6
 800646a:	db0b      	blt.n	8006484 <__lshift+0x38>
 800646c:	4638      	mov	r0, r7
 800646e:	f7ff fde7 	bl	8006040 <_Balloc>
 8006472:	4605      	mov	r5, r0
 8006474:	b948      	cbnz	r0, 800648a <__lshift+0x3e>
 8006476:	4602      	mov	r2, r0
 8006478:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800647c:	4b27      	ldr	r3, [pc, #156]	@ (800651c <__lshift+0xd0>)
 800647e:	4828      	ldr	r0, [pc, #160]	@ (8006520 <__lshift+0xd4>)
 8006480:	f000 fb72 	bl	8006b68 <__assert_func>
 8006484:	3101      	adds	r1, #1
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	e7ee      	b.n	8006468 <__lshift+0x1c>
 800648a:	2300      	movs	r3, #0
 800648c:	f100 0114 	add.w	r1, r0, #20
 8006490:	f100 0210 	add.w	r2, r0, #16
 8006494:	4618      	mov	r0, r3
 8006496:	4553      	cmp	r3, sl
 8006498:	db33      	blt.n	8006502 <__lshift+0xb6>
 800649a:	6920      	ldr	r0, [r4, #16]
 800649c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064a0:	f104 0314 	add.w	r3, r4, #20
 80064a4:	f019 091f 	ands.w	r9, r9, #31
 80064a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064b0:	d02b      	beq.n	800650a <__lshift+0xbe>
 80064b2:	468a      	mov	sl, r1
 80064b4:	2200      	movs	r2, #0
 80064b6:	f1c9 0e20 	rsb	lr, r9, #32
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	fa00 f009 	lsl.w	r0, r0, r9
 80064c0:	4310      	orrs	r0, r2
 80064c2:	f84a 0b04 	str.w	r0, [sl], #4
 80064c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ca:	459c      	cmp	ip, r3
 80064cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80064d0:	d8f3      	bhi.n	80064ba <__lshift+0x6e>
 80064d2:	ebac 0304 	sub.w	r3, ip, r4
 80064d6:	3b15      	subs	r3, #21
 80064d8:	f023 0303 	bic.w	r3, r3, #3
 80064dc:	3304      	adds	r3, #4
 80064de:	f104 0015 	add.w	r0, r4, #21
 80064e2:	4560      	cmp	r0, ip
 80064e4:	bf88      	it	hi
 80064e6:	2304      	movhi	r3, #4
 80064e8:	50ca      	str	r2, [r1, r3]
 80064ea:	b10a      	cbz	r2, 80064f0 <__lshift+0xa4>
 80064ec:	f108 0602 	add.w	r6, r8, #2
 80064f0:	3e01      	subs	r6, #1
 80064f2:	4638      	mov	r0, r7
 80064f4:	4621      	mov	r1, r4
 80064f6:	612e      	str	r6, [r5, #16]
 80064f8:	f7ff fde2 	bl	80060c0 <_Bfree>
 80064fc:	4628      	mov	r0, r5
 80064fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006502:	f842 0f04 	str.w	r0, [r2, #4]!
 8006506:	3301      	adds	r3, #1
 8006508:	e7c5      	b.n	8006496 <__lshift+0x4a>
 800650a:	3904      	subs	r1, #4
 800650c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006510:	459c      	cmp	ip, r3
 8006512:	f841 2f04 	str.w	r2, [r1, #4]!
 8006516:	d8f9      	bhi.n	800650c <__lshift+0xc0>
 8006518:	e7ea      	b.n	80064f0 <__lshift+0xa4>
 800651a:	bf00      	nop
 800651c:	08009a2c 	.word	0x08009a2c
 8006520:	08009a3d 	.word	0x08009a3d

08006524 <__mcmp>:
 8006524:	4603      	mov	r3, r0
 8006526:	690a      	ldr	r2, [r1, #16]
 8006528:	6900      	ldr	r0, [r0, #16]
 800652a:	b530      	push	{r4, r5, lr}
 800652c:	1a80      	subs	r0, r0, r2
 800652e:	d10e      	bne.n	800654e <__mcmp+0x2a>
 8006530:	3314      	adds	r3, #20
 8006532:	3114      	adds	r1, #20
 8006534:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006538:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800653c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006540:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006544:	4295      	cmp	r5, r2
 8006546:	d003      	beq.n	8006550 <__mcmp+0x2c>
 8006548:	d205      	bcs.n	8006556 <__mcmp+0x32>
 800654a:	f04f 30ff 	mov.w	r0, #4294967295
 800654e:	bd30      	pop	{r4, r5, pc}
 8006550:	42a3      	cmp	r3, r4
 8006552:	d3f3      	bcc.n	800653c <__mcmp+0x18>
 8006554:	e7fb      	b.n	800654e <__mcmp+0x2a>
 8006556:	2001      	movs	r0, #1
 8006558:	e7f9      	b.n	800654e <__mcmp+0x2a>
	...

0800655c <__mdiff>:
 800655c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	4689      	mov	r9, r1
 8006562:	4606      	mov	r6, r0
 8006564:	4611      	mov	r1, r2
 8006566:	4648      	mov	r0, r9
 8006568:	4614      	mov	r4, r2
 800656a:	f7ff ffdb 	bl	8006524 <__mcmp>
 800656e:	1e05      	subs	r5, r0, #0
 8006570:	d112      	bne.n	8006598 <__mdiff+0x3c>
 8006572:	4629      	mov	r1, r5
 8006574:	4630      	mov	r0, r6
 8006576:	f7ff fd63 	bl	8006040 <_Balloc>
 800657a:	4602      	mov	r2, r0
 800657c:	b928      	cbnz	r0, 800658a <__mdiff+0x2e>
 800657e:	f240 2137 	movw	r1, #567	@ 0x237
 8006582:	4b3e      	ldr	r3, [pc, #248]	@ (800667c <__mdiff+0x120>)
 8006584:	483e      	ldr	r0, [pc, #248]	@ (8006680 <__mdiff+0x124>)
 8006586:	f000 faef 	bl	8006b68 <__assert_func>
 800658a:	2301      	movs	r3, #1
 800658c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006590:	4610      	mov	r0, r2
 8006592:	b003      	add	sp, #12
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006598:	bfbc      	itt	lt
 800659a:	464b      	movlt	r3, r9
 800659c:	46a1      	movlt	r9, r4
 800659e:	4630      	mov	r0, r6
 80065a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80065a4:	bfba      	itte	lt
 80065a6:	461c      	movlt	r4, r3
 80065a8:	2501      	movlt	r5, #1
 80065aa:	2500      	movge	r5, #0
 80065ac:	f7ff fd48 	bl	8006040 <_Balloc>
 80065b0:	4602      	mov	r2, r0
 80065b2:	b918      	cbnz	r0, 80065bc <__mdiff+0x60>
 80065b4:	f240 2145 	movw	r1, #581	@ 0x245
 80065b8:	4b30      	ldr	r3, [pc, #192]	@ (800667c <__mdiff+0x120>)
 80065ba:	e7e3      	b.n	8006584 <__mdiff+0x28>
 80065bc:	f100 0b14 	add.w	fp, r0, #20
 80065c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80065c4:	f109 0310 	add.w	r3, r9, #16
 80065c8:	60c5      	str	r5, [r0, #12]
 80065ca:	f04f 0c00 	mov.w	ip, #0
 80065ce:	f109 0514 	add.w	r5, r9, #20
 80065d2:	46d9      	mov	r9, fp
 80065d4:	6926      	ldr	r6, [r4, #16]
 80065d6:	f104 0e14 	add.w	lr, r4, #20
 80065da:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80065de:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80065ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80065ee:	b281      	uxth	r1, r0
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	fa1f f38a 	uxth.w	r3, sl
 80065f6:	1a5b      	subs	r3, r3, r1
 80065f8:	0c00      	lsrs	r0, r0, #16
 80065fa:	4463      	add	r3, ip
 80065fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006600:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006604:	b29b      	uxth	r3, r3
 8006606:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800660a:	4576      	cmp	r6, lr
 800660c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006610:	f849 3b04 	str.w	r3, [r9], #4
 8006614:	d8e6      	bhi.n	80065e4 <__mdiff+0x88>
 8006616:	1b33      	subs	r3, r6, r4
 8006618:	3b15      	subs	r3, #21
 800661a:	f023 0303 	bic.w	r3, r3, #3
 800661e:	3415      	adds	r4, #21
 8006620:	3304      	adds	r3, #4
 8006622:	42a6      	cmp	r6, r4
 8006624:	bf38      	it	cc
 8006626:	2304      	movcc	r3, #4
 8006628:	441d      	add	r5, r3
 800662a:	445b      	add	r3, fp
 800662c:	461e      	mov	r6, r3
 800662e:	462c      	mov	r4, r5
 8006630:	4544      	cmp	r4, r8
 8006632:	d30e      	bcc.n	8006652 <__mdiff+0xf6>
 8006634:	f108 0103 	add.w	r1, r8, #3
 8006638:	1b49      	subs	r1, r1, r5
 800663a:	f021 0103 	bic.w	r1, r1, #3
 800663e:	3d03      	subs	r5, #3
 8006640:	45a8      	cmp	r8, r5
 8006642:	bf38      	it	cc
 8006644:	2100      	movcc	r1, #0
 8006646:	440b      	add	r3, r1
 8006648:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800664c:	b199      	cbz	r1, 8006676 <__mdiff+0x11a>
 800664e:	6117      	str	r7, [r2, #16]
 8006650:	e79e      	b.n	8006590 <__mdiff+0x34>
 8006652:	46e6      	mov	lr, ip
 8006654:	f854 1b04 	ldr.w	r1, [r4], #4
 8006658:	fa1f fc81 	uxth.w	ip, r1
 800665c:	44f4      	add	ip, lr
 800665e:	0c08      	lsrs	r0, r1, #16
 8006660:	4471      	add	r1, lr
 8006662:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006666:	b289      	uxth	r1, r1
 8006668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800666c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006670:	f846 1b04 	str.w	r1, [r6], #4
 8006674:	e7dc      	b.n	8006630 <__mdiff+0xd4>
 8006676:	3f01      	subs	r7, #1
 8006678:	e7e6      	b.n	8006648 <__mdiff+0xec>
 800667a:	bf00      	nop
 800667c:	08009a2c 	.word	0x08009a2c
 8006680:	08009a3d 	.word	0x08009a3d

08006684 <__d2b>:
 8006684:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006688:	2101      	movs	r1, #1
 800668a:	4690      	mov	r8, r2
 800668c:	4699      	mov	r9, r3
 800668e:	9e08      	ldr	r6, [sp, #32]
 8006690:	f7ff fcd6 	bl	8006040 <_Balloc>
 8006694:	4604      	mov	r4, r0
 8006696:	b930      	cbnz	r0, 80066a6 <__d2b+0x22>
 8006698:	4602      	mov	r2, r0
 800669a:	f240 310f 	movw	r1, #783	@ 0x30f
 800669e:	4b23      	ldr	r3, [pc, #140]	@ (800672c <__d2b+0xa8>)
 80066a0:	4823      	ldr	r0, [pc, #140]	@ (8006730 <__d2b+0xac>)
 80066a2:	f000 fa61 	bl	8006b68 <__assert_func>
 80066a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066ae:	b10d      	cbz	r5, 80066b4 <__d2b+0x30>
 80066b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	f1b8 0300 	subs.w	r3, r8, #0
 80066ba:	d024      	beq.n	8006706 <__d2b+0x82>
 80066bc:	4668      	mov	r0, sp
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	f7ff fd85 	bl	80061ce <__lo0bits>
 80066c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066c8:	b1d8      	cbz	r0, 8006702 <__d2b+0x7e>
 80066ca:	f1c0 0320 	rsb	r3, r0, #32
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	430b      	orrs	r3, r1
 80066d4:	40c2      	lsrs	r2, r0
 80066d6:	6163      	str	r3, [r4, #20]
 80066d8:	9201      	str	r2, [sp, #4]
 80066da:	9b01      	ldr	r3, [sp, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bf0c      	ite	eq
 80066e0:	2201      	moveq	r2, #1
 80066e2:	2202      	movne	r2, #2
 80066e4:	61a3      	str	r3, [r4, #24]
 80066e6:	6122      	str	r2, [r4, #16]
 80066e8:	b1ad      	cbz	r5, 8006716 <__d2b+0x92>
 80066ea:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80066ee:	4405      	add	r5, r0
 80066f0:	6035      	str	r5, [r6, #0]
 80066f2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80066f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f8:	6018      	str	r0, [r3, #0]
 80066fa:	4620      	mov	r0, r4
 80066fc:	b002      	add	sp, #8
 80066fe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006702:	6161      	str	r1, [r4, #20]
 8006704:	e7e9      	b.n	80066da <__d2b+0x56>
 8006706:	a801      	add	r0, sp, #4
 8006708:	f7ff fd61 	bl	80061ce <__lo0bits>
 800670c:	9b01      	ldr	r3, [sp, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	6163      	str	r3, [r4, #20]
 8006712:	3020      	adds	r0, #32
 8006714:	e7e7      	b.n	80066e6 <__d2b+0x62>
 8006716:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800671a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800671e:	6030      	str	r0, [r6, #0]
 8006720:	6918      	ldr	r0, [r3, #16]
 8006722:	f7ff fd35 	bl	8006190 <__hi0bits>
 8006726:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800672a:	e7e4      	b.n	80066f6 <__d2b+0x72>
 800672c:	08009a2c 	.word	0x08009a2c
 8006730:	08009a3d 	.word	0x08009a3d

08006734 <__ssputs_r>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	461f      	mov	r7, r3
 800673a:	688e      	ldr	r6, [r1, #8]
 800673c:	4682      	mov	sl, r0
 800673e:	42be      	cmp	r6, r7
 8006740:	460c      	mov	r4, r1
 8006742:	4690      	mov	r8, r2
 8006744:	680b      	ldr	r3, [r1, #0]
 8006746:	d82d      	bhi.n	80067a4 <__ssputs_r+0x70>
 8006748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800674c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006750:	d026      	beq.n	80067a0 <__ssputs_r+0x6c>
 8006752:	6965      	ldr	r5, [r4, #20]
 8006754:	6909      	ldr	r1, [r1, #16]
 8006756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800675a:	eba3 0901 	sub.w	r9, r3, r1
 800675e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006762:	1c7b      	adds	r3, r7, #1
 8006764:	444b      	add	r3, r9
 8006766:	106d      	asrs	r5, r5, #1
 8006768:	429d      	cmp	r5, r3
 800676a:	bf38      	it	cc
 800676c:	461d      	movcc	r5, r3
 800676e:	0553      	lsls	r3, r2, #21
 8006770:	d527      	bpl.n	80067c2 <__ssputs_r+0x8e>
 8006772:	4629      	mov	r1, r5
 8006774:	f7fd ff04 	bl	8004580 <_malloc_r>
 8006778:	4606      	mov	r6, r0
 800677a:	b360      	cbz	r0, 80067d6 <__ssputs_r+0xa2>
 800677c:	464a      	mov	r2, r9
 800677e:	6921      	ldr	r1, [r4, #16]
 8006780:	f7fe fda9 	bl	80052d6 <memcpy>
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800678a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800678e:	81a3      	strh	r3, [r4, #12]
 8006790:	6126      	str	r6, [r4, #16]
 8006792:	444e      	add	r6, r9
 8006794:	6026      	str	r6, [r4, #0]
 8006796:	463e      	mov	r6, r7
 8006798:	6165      	str	r5, [r4, #20]
 800679a:	eba5 0509 	sub.w	r5, r5, r9
 800679e:	60a5      	str	r5, [r4, #8]
 80067a0:	42be      	cmp	r6, r7
 80067a2:	d900      	bls.n	80067a6 <__ssputs_r+0x72>
 80067a4:	463e      	mov	r6, r7
 80067a6:	4632      	mov	r2, r6
 80067a8:	4641      	mov	r1, r8
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	f000 f9c2 	bl	8006b34 <memmove>
 80067b0:	2000      	movs	r0, #0
 80067b2:	68a3      	ldr	r3, [r4, #8]
 80067b4:	1b9b      	subs	r3, r3, r6
 80067b6:	60a3      	str	r3, [r4, #8]
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	4433      	add	r3, r6
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c2:	462a      	mov	r2, r5
 80067c4:	f000 fa14 	bl	8006bf0 <_realloc_r>
 80067c8:	4606      	mov	r6, r0
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d1e0      	bne.n	8006790 <__ssputs_r+0x5c>
 80067ce:	4650      	mov	r0, sl
 80067d0:	6921      	ldr	r1, [r4, #16]
 80067d2:	f7ff fbed 	bl	8005fb0 <_free_r>
 80067d6:	230c      	movs	r3, #12
 80067d8:	f8ca 3000 	str.w	r3, [sl]
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	f04f 30ff 	mov.w	r0, #4294967295
 80067e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067e6:	81a3      	strh	r3, [r4, #12]
 80067e8:	e7e9      	b.n	80067be <__ssputs_r+0x8a>
	...

080067ec <_svfiprintf_r>:
 80067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f0:	4698      	mov	r8, r3
 80067f2:	898b      	ldrh	r3, [r1, #12]
 80067f4:	4607      	mov	r7, r0
 80067f6:	061b      	lsls	r3, r3, #24
 80067f8:	460d      	mov	r5, r1
 80067fa:	4614      	mov	r4, r2
 80067fc:	b09d      	sub	sp, #116	@ 0x74
 80067fe:	d510      	bpl.n	8006822 <_svfiprintf_r+0x36>
 8006800:	690b      	ldr	r3, [r1, #16]
 8006802:	b973      	cbnz	r3, 8006822 <_svfiprintf_r+0x36>
 8006804:	2140      	movs	r1, #64	@ 0x40
 8006806:	f7fd febb 	bl	8004580 <_malloc_r>
 800680a:	6028      	str	r0, [r5, #0]
 800680c:	6128      	str	r0, [r5, #16]
 800680e:	b930      	cbnz	r0, 800681e <_svfiprintf_r+0x32>
 8006810:	230c      	movs	r3, #12
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	b01d      	add	sp, #116	@ 0x74
 800681a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681e:	2340      	movs	r3, #64	@ 0x40
 8006820:	616b      	str	r3, [r5, #20]
 8006822:	2300      	movs	r3, #0
 8006824:	9309      	str	r3, [sp, #36]	@ 0x24
 8006826:	2320      	movs	r3, #32
 8006828:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800682c:	2330      	movs	r3, #48	@ 0x30
 800682e:	f04f 0901 	mov.w	r9, #1
 8006832:	f8cd 800c 	str.w	r8, [sp, #12]
 8006836:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80069d0 <_svfiprintf_r+0x1e4>
 800683a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800683e:	4623      	mov	r3, r4
 8006840:	469a      	mov	sl, r3
 8006842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006846:	b10a      	cbz	r2, 800684c <_svfiprintf_r+0x60>
 8006848:	2a25      	cmp	r2, #37	@ 0x25
 800684a:	d1f9      	bne.n	8006840 <_svfiprintf_r+0x54>
 800684c:	ebba 0b04 	subs.w	fp, sl, r4
 8006850:	d00b      	beq.n	800686a <_svfiprintf_r+0x7e>
 8006852:	465b      	mov	r3, fp
 8006854:	4622      	mov	r2, r4
 8006856:	4629      	mov	r1, r5
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff ff6b 	bl	8006734 <__ssputs_r>
 800685e:	3001      	adds	r0, #1
 8006860:	f000 80a7 	beq.w	80069b2 <_svfiprintf_r+0x1c6>
 8006864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006866:	445a      	add	r2, fp
 8006868:	9209      	str	r2, [sp, #36]	@ 0x24
 800686a:	f89a 3000 	ldrb.w	r3, [sl]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 809f 	beq.w	80069b2 <_svfiprintf_r+0x1c6>
 8006874:	2300      	movs	r3, #0
 8006876:	f04f 32ff 	mov.w	r2, #4294967295
 800687a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800687e:	f10a 0a01 	add.w	sl, sl, #1
 8006882:	9304      	str	r3, [sp, #16]
 8006884:	9307      	str	r3, [sp, #28]
 8006886:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800688a:	931a      	str	r3, [sp, #104]	@ 0x68
 800688c:	4654      	mov	r4, sl
 800688e:	2205      	movs	r2, #5
 8006890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006894:	484e      	ldr	r0, [pc, #312]	@ (80069d0 <_svfiprintf_r+0x1e4>)
 8006896:	f7fe fd10 	bl	80052ba <memchr>
 800689a:	9a04      	ldr	r2, [sp, #16]
 800689c:	b9d8      	cbnz	r0, 80068d6 <_svfiprintf_r+0xea>
 800689e:	06d0      	lsls	r0, r2, #27
 80068a0:	bf44      	itt	mi
 80068a2:	2320      	movmi	r3, #32
 80068a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068a8:	0711      	lsls	r1, r2, #28
 80068aa:	bf44      	itt	mi
 80068ac:	232b      	movmi	r3, #43	@ 0x2b
 80068ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068b2:	f89a 3000 	ldrb.w	r3, [sl]
 80068b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b8:	d015      	beq.n	80068e6 <_svfiprintf_r+0xfa>
 80068ba:	4654      	mov	r4, sl
 80068bc:	2000      	movs	r0, #0
 80068be:	f04f 0c0a 	mov.w	ip, #10
 80068c2:	9a07      	ldr	r2, [sp, #28]
 80068c4:	4621      	mov	r1, r4
 80068c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ca:	3b30      	subs	r3, #48	@ 0x30
 80068cc:	2b09      	cmp	r3, #9
 80068ce:	d94b      	bls.n	8006968 <_svfiprintf_r+0x17c>
 80068d0:	b1b0      	cbz	r0, 8006900 <_svfiprintf_r+0x114>
 80068d2:	9207      	str	r2, [sp, #28]
 80068d4:	e014      	b.n	8006900 <_svfiprintf_r+0x114>
 80068d6:	eba0 0308 	sub.w	r3, r0, r8
 80068da:	fa09 f303 	lsl.w	r3, r9, r3
 80068de:	4313      	orrs	r3, r2
 80068e0:	46a2      	mov	sl, r4
 80068e2:	9304      	str	r3, [sp, #16]
 80068e4:	e7d2      	b.n	800688c <_svfiprintf_r+0xa0>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	1d19      	adds	r1, r3, #4
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	9103      	str	r1, [sp, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bfbb      	ittet	lt
 80068f2:	425b      	neglt	r3, r3
 80068f4:	f042 0202 	orrlt.w	r2, r2, #2
 80068f8:	9307      	strge	r3, [sp, #28]
 80068fa:	9307      	strlt	r3, [sp, #28]
 80068fc:	bfb8      	it	lt
 80068fe:	9204      	strlt	r2, [sp, #16]
 8006900:	7823      	ldrb	r3, [r4, #0]
 8006902:	2b2e      	cmp	r3, #46	@ 0x2e
 8006904:	d10a      	bne.n	800691c <_svfiprintf_r+0x130>
 8006906:	7863      	ldrb	r3, [r4, #1]
 8006908:	2b2a      	cmp	r3, #42	@ 0x2a
 800690a:	d132      	bne.n	8006972 <_svfiprintf_r+0x186>
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	3402      	adds	r4, #2
 8006910:	1d1a      	adds	r2, r3, #4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	9203      	str	r2, [sp, #12]
 8006916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800691a:	9305      	str	r3, [sp, #20]
 800691c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80069d4 <_svfiprintf_r+0x1e8>
 8006920:	2203      	movs	r2, #3
 8006922:	4650      	mov	r0, sl
 8006924:	7821      	ldrb	r1, [r4, #0]
 8006926:	f7fe fcc8 	bl	80052ba <memchr>
 800692a:	b138      	cbz	r0, 800693c <_svfiprintf_r+0x150>
 800692c:	2240      	movs	r2, #64	@ 0x40
 800692e:	9b04      	ldr	r3, [sp, #16]
 8006930:	eba0 000a 	sub.w	r0, r0, sl
 8006934:	4082      	lsls	r2, r0
 8006936:	4313      	orrs	r3, r2
 8006938:	3401      	adds	r4, #1
 800693a:	9304      	str	r3, [sp, #16]
 800693c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006940:	2206      	movs	r2, #6
 8006942:	4825      	ldr	r0, [pc, #148]	@ (80069d8 <_svfiprintf_r+0x1ec>)
 8006944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006948:	f7fe fcb7 	bl	80052ba <memchr>
 800694c:	2800      	cmp	r0, #0
 800694e:	d036      	beq.n	80069be <_svfiprintf_r+0x1d2>
 8006950:	4b22      	ldr	r3, [pc, #136]	@ (80069dc <_svfiprintf_r+0x1f0>)
 8006952:	bb1b      	cbnz	r3, 800699c <_svfiprintf_r+0x1b0>
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	3307      	adds	r3, #7
 8006958:	f023 0307 	bic.w	r3, r3, #7
 800695c:	3308      	adds	r3, #8
 800695e:	9303      	str	r3, [sp, #12]
 8006960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006962:	4433      	add	r3, r6
 8006964:	9309      	str	r3, [sp, #36]	@ 0x24
 8006966:	e76a      	b.n	800683e <_svfiprintf_r+0x52>
 8006968:	460c      	mov	r4, r1
 800696a:	2001      	movs	r0, #1
 800696c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006970:	e7a8      	b.n	80068c4 <_svfiprintf_r+0xd8>
 8006972:	2300      	movs	r3, #0
 8006974:	f04f 0c0a 	mov.w	ip, #10
 8006978:	4619      	mov	r1, r3
 800697a:	3401      	adds	r4, #1
 800697c:	9305      	str	r3, [sp, #20]
 800697e:	4620      	mov	r0, r4
 8006980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006984:	3a30      	subs	r2, #48	@ 0x30
 8006986:	2a09      	cmp	r2, #9
 8006988:	d903      	bls.n	8006992 <_svfiprintf_r+0x1a6>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0c6      	beq.n	800691c <_svfiprintf_r+0x130>
 800698e:	9105      	str	r1, [sp, #20]
 8006990:	e7c4      	b.n	800691c <_svfiprintf_r+0x130>
 8006992:	4604      	mov	r4, r0
 8006994:	2301      	movs	r3, #1
 8006996:	fb0c 2101 	mla	r1, ip, r1, r2
 800699a:	e7f0      	b.n	800697e <_svfiprintf_r+0x192>
 800699c:	ab03      	add	r3, sp, #12
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	462a      	mov	r2, r5
 80069a2:	4638      	mov	r0, r7
 80069a4:	4b0e      	ldr	r3, [pc, #56]	@ (80069e0 <_svfiprintf_r+0x1f4>)
 80069a6:	a904      	add	r1, sp, #16
 80069a8:	f7fd ff14 	bl	80047d4 <_printf_float>
 80069ac:	1c42      	adds	r2, r0, #1
 80069ae:	4606      	mov	r6, r0
 80069b0:	d1d6      	bne.n	8006960 <_svfiprintf_r+0x174>
 80069b2:	89ab      	ldrh	r3, [r5, #12]
 80069b4:	065b      	lsls	r3, r3, #25
 80069b6:	f53f af2d 	bmi.w	8006814 <_svfiprintf_r+0x28>
 80069ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069bc:	e72c      	b.n	8006818 <_svfiprintf_r+0x2c>
 80069be:	ab03      	add	r3, sp, #12
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	462a      	mov	r2, r5
 80069c4:	4638      	mov	r0, r7
 80069c6:	4b06      	ldr	r3, [pc, #24]	@ (80069e0 <_svfiprintf_r+0x1f4>)
 80069c8:	a904      	add	r1, sp, #16
 80069ca:	f7fe f9a1 	bl	8004d10 <_printf_i>
 80069ce:	e7ed      	b.n	80069ac <_svfiprintf_r+0x1c0>
 80069d0:	08009a96 	.word	0x08009a96
 80069d4:	08009a9c 	.word	0x08009a9c
 80069d8:	08009aa0 	.word	0x08009aa0
 80069dc:	080047d5 	.word	0x080047d5
 80069e0:	08006735 	.word	0x08006735

080069e4 <__sflush_r>:
 80069e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	0716      	lsls	r6, r2, #28
 80069ec:	4605      	mov	r5, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	d454      	bmi.n	8006a9c <__sflush_r+0xb8>
 80069f2:	684b      	ldr	r3, [r1, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dc02      	bgt.n	80069fe <__sflush_r+0x1a>
 80069f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	dd48      	ble.n	8006a90 <__sflush_r+0xac>
 80069fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a00:	2e00      	cmp	r6, #0
 8006a02:	d045      	beq.n	8006a90 <__sflush_r+0xac>
 8006a04:	2300      	movs	r3, #0
 8006a06:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a0a:	682f      	ldr	r7, [r5, #0]
 8006a0c:	6a21      	ldr	r1, [r4, #32]
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	d030      	beq.n	8006a74 <__sflush_r+0x90>
 8006a12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	0759      	lsls	r1, r3, #29
 8006a18:	d505      	bpl.n	8006a26 <__sflush_r+0x42>
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	1ad2      	subs	r2, r2, r3
 8006a1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a20:	b10b      	cbz	r3, 8006a26 <__sflush_r+0x42>
 8006a22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a24:	1ad2      	subs	r2, r2, r3
 8006a26:	2300      	movs	r3, #0
 8006a28:	4628      	mov	r0, r5
 8006a2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	47b0      	blx	r6
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	d106      	bne.n	8006a44 <__sflush_r+0x60>
 8006a36:	6829      	ldr	r1, [r5, #0]
 8006a38:	291d      	cmp	r1, #29
 8006a3a:	d82b      	bhi.n	8006a94 <__sflush_r+0xb0>
 8006a3c:	4a28      	ldr	r2, [pc, #160]	@ (8006ae0 <__sflush_r+0xfc>)
 8006a3e:	40ca      	lsrs	r2, r1
 8006a40:	07d6      	lsls	r6, r2, #31
 8006a42:	d527      	bpl.n	8006a94 <__sflush_r+0xb0>
 8006a44:	2200      	movs	r2, #0
 8006a46:	6062      	str	r2, [r4, #4]
 8006a48:	6922      	ldr	r2, [r4, #16]
 8006a4a:	04d9      	lsls	r1, r3, #19
 8006a4c:	6022      	str	r2, [r4, #0]
 8006a4e:	d504      	bpl.n	8006a5a <__sflush_r+0x76>
 8006a50:	1c42      	adds	r2, r0, #1
 8006a52:	d101      	bne.n	8006a58 <__sflush_r+0x74>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	b903      	cbnz	r3, 8006a5a <__sflush_r+0x76>
 8006a58:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a5c:	602f      	str	r7, [r5, #0]
 8006a5e:	b1b9      	cbz	r1, 8006a90 <__sflush_r+0xac>
 8006a60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a64:	4299      	cmp	r1, r3
 8006a66:	d002      	beq.n	8006a6e <__sflush_r+0x8a>
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f7ff faa1 	bl	8005fb0 <_free_r>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a72:	e00d      	b.n	8006a90 <__sflush_r+0xac>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4628      	mov	r0, r5
 8006a78:	47b0      	blx	r6
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	1c50      	adds	r0, r2, #1
 8006a7e:	d1c9      	bne.n	8006a14 <__sflush_r+0x30>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0c6      	beq.n	8006a14 <__sflush_r+0x30>
 8006a86:	2b1d      	cmp	r3, #29
 8006a88:	d001      	beq.n	8006a8e <__sflush_r+0xaa>
 8006a8a:	2b16      	cmp	r3, #22
 8006a8c:	d11d      	bne.n	8006aca <__sflush_r+0xe6>
 8006a8e:	602f      	str	r7, [r5, #0]
 8006a90:	2000      	movs	r0, #0
 8006a92:	e021      	b.n	8006ad8 <__sflush_r+0xf4>
 8006a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a98:	b21b      	sxth	r3, r3
 8006a9a:	e01a      	b.n	8006ad2 <__sflush_r+0xee>
 8006a9c:	690f      	ldr	r7, [r1, #16]
 8006a9e:	2f00      	cmp	r7, #0
 8006aa0:	d0f6      	beq.n	8006a90 <__sflush_r+0xac>
 8006aa2:	0793      	lsls	r3, r2, #30
 8006aa4:	bf18      	it	ne
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	680e      	ldr	r6, [r1, #0]
 8006aaa:	bf08      	it	eq
 8006aac:	694b      	ldreq	r3, [r1, #20]
 8006aae:	1bf6      	subs	r6, r6, r7
 8006ab0:	600f      	str	r7, [r1, #0]
 8006ab2:	608b      	str	r3, [r1, #8]
 8006ab4:	2e00      	cmp	r6, #0
 8006ab6:	ddeb      	ble.n	8006a90 <__sflush_r+0xac>
 8006ab8:	4633      	mov	r3, r6
 8006aba:	463a      	mov	r2, r7
 8006abc:	4628      	mov	r0, r5
 8006abe:	6a21      	ldr	r1, [r4, #32]
 8006ac0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ac4:	47e0      	blx	ip
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	dc07      	bgt.n	8006ada <__sflush_r+0xf6>
 8006aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ada:	4407      	add	r7, r0
 8006adc:	1a36      	subs	r6, r6, r0
 8006ade:	e7e9      	b.n	8006ab4 <__sflush_r+0xd0>
 8006ae0:	20400001 	.word	0x20400001

08006ae4 <_fflush_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	690b      	ldr	r3, [r1, #16]
 8006ae8:	4605      	mov	r5, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	b913      	cbnz	r3, 8006af4 <_fflush_r+0x10>
 8006aee:	2500      	movs	r5, #0
 8006af0:	4628      	mov	r0, r5
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	b118      	cbz	r0, 8006afe <_fflush_r+0x1a>
 8006af6:	6a03      	ldr	r3, [r0, #32]
 8006af8:	b90b      	cbnz	r3, 8006afe <_fflush_r+0x1a>
 8006afa:	f7fe fab3 	bl	8005064 <__sinit>
 8006afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f3      	beq.n	8006aee <_fflush_r+0xa>
 8006b06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b08:	07d0      	lsls	r0, r2, #31
 8006b0a:	d404      	bmi.n	8006b16 <_fflush_r+0x32>
 8006b0c:	0599      	lsls	r1, r3, #22
 8006b0e:	d402      	bmi.n	8006b16 <_fflush_r+0x32>
 8006b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b12:	f7fe fbd0 	bl	80052b6 <__retarget_lock_acquire_recursive>
 8006b16:	4628      	mov	r0, r5
 8006b18:	4621      	mov	r1, r4
 8006b1a:	f7ff ff63 	bl	80069e4 <__sflush_r>
 8006b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b20:	4605      	mov	r5, r0
 8006b22:	07da      	lsls	r2, r3, #31
 8006b24:	d4e4      	bmi.n	8006af0 <_fflush_r+0xc>
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	059b      	lsls	r3, r3, #22
 8006b2a:	d4e1      	bmi.n	8006af0 <_fflush_r+0xc>
 8006b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b2e:	f7fe fbc3 	bl	80052b8 <__retarget_lock_release_recursive>
 8006b32:	e7dd      	b.n	8006af0 <_fflush_r+0xc>

08006b34 <memmove>:
 8006b34:	4288      	cmp	r0, r1
 8006b36:	b510      	push	{r4, lr}
 8006b38:	eb01 0402 	add.w	r4, r1, r2
 8006b3c:	d902      	bls.n	8006b44 <memmove+0x10>
 8006b3e:	4284      	cmp	r4, r0
 8006b40:	4623      	mov	r3, r4
 8006b42:	d807      	bhi.n	8006b54 <memmove+0x20>
 8006b44:	1e43      	subs	r3, r0, #1
 8006b46:	42a1      	cmp	r1, r4
 8006b48:	d008      	beq.n	8006b5c <memmove+0x28>
 8006b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b52:	e7f8      	b.n	8006b46 <memmove+0x12>
 8006b54:	4601      	mov	r1, r0
 8006b56:	4402      	add	r2, r0
 8006b58:	428a      	cmp	r2, r1
 8006b5a:	d100      	bne.n	8006b5e <memmove+0x2a>
 8006b5c:	bd10      	pop	{r4, pc}
 8006b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b66:	e7f7      	b.n	8006b58 <memmove+0x24>

08006b68 <__assert_func>:
 8006b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b6a:	4614      	mov	r4, r2
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4b09      	ldr	r3, [pc, #36]	@ (8006b94 <__assert_func+0x2c>)
 8006b70:	4605      	mov	r5, r0
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68d8      	ldr	r0, [r3, #12]
 8006b76:	b14c      	cbz	r4, 8006b8c <__assert_func+0x24>
 8006b78:	4b07      	ldr	r3, [pc, #28]	@ (8006b98 <__assert_func+0x30>)
 8006b7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b7e:	9100      	str	r1, [sp, #0]
 8006b80:	462b      	mov	r3, r5
 8006b82:	4906      	ldr	r1, [pc, #24]	@ (8006b9c <__assert_func+0x34>)
 8006b84:	f000 f870 	bl	8006c68 <fiprintf>
 8006b88:	f000 f880 	bl	8006c8c <abort>
 8006b8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ba0 <__assert_func+0x38>)
 8006b8e:	461c      	mov	r4, r3
 8006b90:	e7f3      	b.n	8006b7a <__assert_func+0x12>
 8006b92:	bf00      	nop
 8006b94:	2000001c 	.word	0x2000001c
 8006b98:	08009ab1 	.word	0x08009ab1
 8006b9c:	08009abe 	.word	0x08009abe
 8006ba0:	08009aec 	.word	0x08009aec

08006ba4 <_calloc_r>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	fba1 5402 	umull	r5, r4, r1, r2
 8006baa:	b934      	cbnz	r4, 8006bba <_calloc_r+0x16>
 8006bac:	4629      	mov	r1, r5
 8006bae:	f7fd fce7 	bl	8004580 <_malloc_r>
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	b928      	cbnz	r0, 8006bc2 <_calloc_r+0x1e>
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	bd70      	pop	{r4, r5, r6, pc}
 8006bba:	220c      	movs	r2, #12
 8006bbc:	2600      	movs	r6, #0
 8006bbe:	6002      	str	r2, [r0, #0]
 8006bc0:	e7f9      	b.n	8006bb6 <_calloc_r+0x12>
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	f7fe fae8 	bl	800519a <memset>
 8006bca:	e7f4      	b.n	8006bb6 <_calloc_r+0x12>

08006bcc <__ascii_mbtowc>:
 8006bcc:	b082      	sub	sp, #8
 8006bce:	b901      	cbnz	r1, 8006bd2 <__ascii_mbtowc+0x6>
 8006bd0:	a901      	add	r1, sp, #4
 8006bd2:	b142      	cbz	r2, 8006be6 <__ascii_mbtowc+0x1a>
 8006bd4:	b14b      	cbz	r3, 8006bea <__ascii_mbtowc+0x1e>
 8006bd6:	7813      	ldrb	r3, [r2, #0]
 8006bd8:	600b      	str	r3, [r1, #0]
 8006bda:	7812      	ldrb	r2, [r2, #0]
 8006bdc:	1e10      	subs	r0, r2, #0
 8006bde:	bf18      	it	ne
 8006be0:	2001      	movne	r0, #1
 8006be2:	b002      	add	sp, #8
 8006be4:	4770      	bx	lr
 8006be6:	4610      	mov	r0, r2
 8006be8:	e7fb      	b.n	8006be2 <__ascii_mbtowc+0x16>
 8006bea:	f06f 0001 	mvn.w	r0, #1
 8006bee:	e7f8      	b.n	8006be2 <__ascii_mbtowc+0x16>

08006bf0 <_realloc_r>:
 8006bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	4614      	mov	r4, r2
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	b921      	cbnz	r1, 8006c06 <_realloc_r+0x16>
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c02:	f7fd bcbd 	b.w	8004580 <_malloc_r>
 8006c06:	b92a      	cbnz	r2, 8006c14 <_realloc_r+0x24>
 8006c08:	f7ff f9d2 	bl	8005fb0 <_free_r>
 8006c0c:	4625      	mov	r5, r4
 8006c0e:	4628      	mov	r0, r5
 8006c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c14:	f000 f841 	bl	8006c9a <_malloc_usable_size_r>
 8006c18:	4284      	cmp	r4, r0
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	d802      	bhi.n	8006c24 <_realloc_r+0x34>
 8006c1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c22:	d8f4      	bhi.n	8006c0e <_realloc_r+0x1e>
 8006c24:	4621      	mov	r1, r4
 8006c26:	4638      	mov	r0, r7
 8006c28:	f7fd fcaa 	bl	8004580 <_malloc_r>
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	b908      	cbnz	r0, 8006c34 <_realloc_r+0x44>
 8006c30:	4645      	mov	r5, r8
 8006c32:	e7ec      	b.n	8006c0e <_realloc_r+0x1e>
 8006c34:	42b4      	cmp	r4, r6
 8006c36:	4622      	mov	r2, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	bf28      	it	cs
 8006c3c:	4632      	movcs	r2, r6
 8006c3e:	f7fe fb4a 	bl	80052d6 <memcpy>
 8006c42:	4629      	mov	r1, r5
 8006c44:	4638      	mov	r0, r7
 8006c46:	f7ff f9b3 	bl	8005fb0 <_free_r>
 8006c4a:	e7f1      	b.n	8006c30 <_realloc_r+0x40>

08006c4c <__ascii_wctomb>:
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	4608      	mov	r0, r1
 8006c50:	b141      	cbz	r1, 8006c64 <__ascii_wctomb+0x18>
 8006c52:	2aff      	cmp	r2, #255	@ 0xff
 8006c54:	d904      	bls.n	8006c60 <__ascii_wctomb+0x14>
 8006c56:	228a      	movs	r2, #138	@ 0x8a
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	4770      	bx	lr
 8006c60:	2001      	movs	r0, #1
 8006c62:	700a      	strb	r2, [r1, #0]
 8006c64:	4770      	bx	lr
	...

08006c68 <fiprintf>:
 8006c68:	b40e      	push	{r1, r2, r3}
 8006c6a:	b503      	push	{r0, r1, lr}
 8006c6c:	4601      	mov	r1, r0
 8006c6e:	ab03      	add	r3, sp, #12
 8006c70:	4805      	ldr	r0, [pc, #20]	@ (8006c88 <fiprintf+0x20>)
 8006c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c76:	6800      	ldr	r0, [r0, #0]
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	f000 f83d 	bl	8006cf8 <_vfiprintf_r>
 8006c7e:	b002      	add	sp, #8
 8006c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c84:	b003      	add	sp, #12
 8006c86:	4770      	bx	lr
 8006c88:	2000001c 	.word	0x2000001c

08006c8c <abort>:
 8006c8c:	2006      	movs	r0, #6
 8006c8e:	b508      	push	{r3, lr}
 8006c90:	f000 fa06 	bl	80070a0 <raise>
 8006c94:	2001      	movs	r0, #1
 8006c96:	f7fd fb6a 	bl	800436e <_exit>

08006c9a <_malloc_usable_size_r>:
 8006c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9e:	1f18      	subs	r0, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bfbc      	itt	lt
 8006ca4:	580b      	ldrlt	r3, [r1, r0]
 8006ca6:	18c0      	addlt	r0, r0, r3
 8006ca8:	4770      	bx	lr

08006caa <__sfputc_r>:
 8006caa:	6893      	ldr	r3, [r2, #8]
 8006cac:	b410      	push	{r4}
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	6093      	str	r3, [r2, #8]
 8006cb4:	da07      	bge.n	8006cc6 <__sfputc_r+0x1c>
 8006cb6:	6994      	ldr	r4, [r2, #24]
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	db01      	blt.n	8006cc0 <__sfputc_r+0x16>
 8006cbc:	290a      	cmp	r1, #10
 8006cbe:	d102      	bne.n	8006cc6 <__sfputc_r+0x1c>
 8006cc0:	bc10      	pop	{r4}
 8006cc2:	f000 b931 	b.w	8006f28 <__swbuf_r>
 8006cc6:	6813      	ldr	r3, [r2, #0]
 8006cc8:	1c58      	adds	r0, r3, #1
 8006cca:	6010      	str	r0, [r2, #0]
 8006ccc:	7019      	strb	r1, [r3, #0]
 8006cce:	4608      	mov	r0, r1
 8006cd0:	bc10      	pop	{r4}
 8006cd2:	4770      	bx	lr

08006cd4 <__sfputs_r>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	460f      	mov	r7, r1
 8006cda:	4614      	mov	r4, r2
 8006cdc:	18d5      	adds	r5, r2, r3
 8006cde:	42ac      	cmp	r4, r5
 8006ce0:	d101      	bne.n	8006ce6 <__sfputs_r+0x12>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e007      	b.n	8006cf6 <__sfputs_r+0x22>
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cee:	f7ff ffdc 	bl	8006caa <__sfputc_r>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	d1f3      	bne.n	8006cde <__sfputs_r+0xa>
 8006cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006cf8 <_vfiprintf_r>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	4614      	mov	r4, r2
 8006d00:	4698      	mov	r8, r3
 8006d02:	4606      	mov	r6, r0
 8006d04:	b09d      	sub	sp, #116	@ 0x74
 8006d06:	b118      	cbz	r0, 8006d10 <_vfiprintf_r+0x18>
 8006d08:	6a03      	ldr	r3, [r0, #32]
 8006d0a:	b90b      	cbnz	r3, 8006d10 <_vfiprintf_r+0x18>
 8006d0c:	f7fe f9aa 	bl	8005064 <__sinit>
 8006d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d12:	07d9      	lsls	r1, r3, #31
 8006d14:	d405      	bmi.n	8006d22 <_vfiprintf_r+0x2a>
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	059a      	lsls	r2, r3, #22
 8006d1a:	d402      	bmi.n	8006d22 <_vfiprintf_r+0x2a>
 8006d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d1e:	f7fe faca 	bl	80052b6 <__retarget_lock_acquire_recursive>
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	071b      	lsls	r3, r3, #28
 8006d26:	d501      	bpl.n	8006d2c <_vfiprintf_r+0x34>
 8006d28:	692b      	ldr	r3, [r5, #16]
 8006d2a:	b99b      	cbnz	r3, 8006d54 <_vfiprintf_r+0x5c>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f000 f938 	bl	8006fa4 <__swsetup_r>
 8006d34:	b170      	cbz	r0, 8006d54 <_vfiprintf_r+0x5c>
 8006d36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d38:	07dc      	lsls	r4, r3, #31
 8006d3a:	d504      	bpl.n	8006d46 <_vfiprintf_r+0x4e>
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	b01d      	add	sp, #116	@ 0x74
 8006d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d46:	89ab      	ldrh	r3, [r5, #12]
 8006d48:	0598      	lsls	r0, r3, #22
 8006d4a:	d4f7      	bmi.n	8006d3c <_vfiprintf_r+0x44>
 8006d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d4e:	f7fe fab3 	bl	80052b8 <__retarget_lock_release_recursive>
 8006d52:	e7f3      	b.n	8006d3c <_vfiprintf_r+0x44>
 8006d54:	2300      	movs	r3, #0
 8006d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d58:	2320      	movs	r3, #32
 8006d5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d5e:	2330      	movs	r3, #48	@ 0x30
 8006d60:	f04f 0901 	mov.w	r9, #1
 8006d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d68:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006f14 <_vfiprintf_r+0x21c>
 8006d6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d70:	4623      	mov	r3, r4
 8006d72:	469a      	mov	sl, r3
 8006d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d78:	b10a      	cbz	r2, 8006d7e <_vfiprintf_r+0x86>
 8006d7a:	2a25      	cmp	r2, #37	@ 0x25
 8006d7c:	d1f9      	bne.n	8006d72 <_vfiprintf_r+0x7a>
 8006d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d82:	d00b      	beq.n	8006d9c <_vfiprintf_r+0xa4>
 8006d84:	465b      	mov	r3, fp
 8006d86:	4622      	mov	r2, r4
 8006d88:	4629      	mov	r1, r5
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f7ff ffa2 	bl	8006cd4 <__sfputs_r>
 8006d90:	3001      	adds	r0, #1
 8006d92:	f000 80a7 	beq.w	8006ee4 <_vfiprintf_r+0x1ec>
 8006d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d98:	445a      	add	r2, fp
 8006d9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 809f 	beq.w	8006ee4 <_vfiprintf_r+0x1ec>
 8006da6:	2300      	movs	r3, #0
 8006da8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006db0:	f10a 0a01 	add.w	sl, sl, #1
 8006db4:	9304      	str	r3, [sp, #16]
 8006db6:	9307      	str	r3, [sp, #28]
 8006db8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dbe:	4654      	mov	r4, sl
 8006dc0:	2205      	movs	r2, #5
 8006dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc6:	4853      	ldr	r0, [pc, #332]	@ (8006f14 <_vfiprintf_r+0x21c>)
 8006dc8:	f7fe fa77 	bl	80052ba <memchr>
 8006dcc:	9a04      	ldr	r2, [sp, #16]
 8006dce:	b9d8      	cbnz	r0, 8006e08 <_vfiprintf_r+0x110>
 8006dd0:	06d1      	lsls	r1, r2, #27
 8006dd2:	bf44      	itt	mi
 8006dd4:	2320      	movmi	r3, #32
 8006dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dda:	0713      	lsls	r3, r2, #28
 8006ddc:	bf44      	itt	mi
 8006dde:	232b      	movmi	r3, #43	@ 0x2b
 8006de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006de4:	f89a 3000 	ldrb.w	r3, [sl]
 8006de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dea:	d015      	beq.n	8006e18 <_vfiprintf_r+0x120>
 8006dec:	4654      	mov	r4, sl
 8006dee:	2000      	movs	r0, #0
 8006df0:	f04f 0c0a 	mov.w	ip, #10
 8006df4:	9a07      	ldr	r2, [sp, #28]
 8006df6:	4621      	mov	r1, r4
 8006df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dfc:	3b30      	subs	r3, #48	@ 0x30
 8006dfe:	2b09      	cmp	r3, #9
 8006e00:	d94b      	bls.n	8006e9a <_vfiprintf_r+0x1a2>
 8006e02:	b1b0      	cbz	r0, 8006e32 <_vfiprintf_r+0x13a>
 8006e04:	9207      	str	r2, [sp, #28]
 8006e06:	e014      	b.n	8006e32 <_vfiprintf_r+0x13a>
 8006e08:	eba0 0308 	sub.w	r3, r0, r8
 8006e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e10:	4313      	orrs	r3, r2
 8006e12:	46a2      	mov	sl, r4
 8006e14:	9304      	str	r3, [sp, #16]
 8006e16:	e7d2      	b.n	8006dbe <_vfiprintf_r+0xc6>
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	1d19      	adds	r1, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	9103      	str	r1, [sp, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	bfbb      	ittet	lt
 8006e24:	425b      	neglt	r3, r3
 8006e26:	f042 0202 	orrlt.w	r2, r2, #2
 8006e2a:	9307      	strge	r3, [sp, #28]
 8006e2c:	9307      	strlt	r3, [sp, #28]
 8006e2e:	bfb8      	it	lt
 8006e30:	9204      	strlt	r2, [sp, #16]
 8006e32:	7823      	ldrb	r3, [r4, #0]
 8006e34:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e36:	d10a      	bne.n	8006e4e <_vfiprintf_r+0x156>
 8006e38:	7863      	ldrb	r3, [r4, #1]
 8006e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e3c:	d132      	bne.n	8006ea4 <_vfiprintf_r+0x1ac>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	3402      	adds	r4, #2
 8006e42:	1d1a      	adds	r2, r3, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	9203      	str	r2, [sp, #12]
 8006e48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006f18 <_vfiprintf_r+0x220>
 8006e52:	2203      	movs	r2, #3
 8006e54:	4650      	mov	r0, sl
 8006e56:	7821      	ldrb	r1, [r4, #0]
 8006e58:	f7fe fa2f 	bl	80052ba <memchr>
 8006e5c:	b138      	cbz	r0, 8006e6e <_vfiprintf_r+0x176>
 8006e5e:	2240      	movs	r2, #64	@ 0x40
 8006e60:	9b04      	ldr	r3, [sp, #16]
 8006e62:	eba0 000a 	sub.w	r0, r0, sl
 8006e66:	4082      	lsls	r2, r0
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	3401      	adds	r4, #1
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e72:	2206      	movs	r2, #6
 8006e74:	4829      	ldr	r0, [pc, #164]	@ (8006f1c <_vfiprintf_r+0x224>)
 8006e76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e7a:	f7fe fa1e 	bl	80052ba <memchr>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d03f      	beq.n	8006f02 <_vfiprintf_r+0x20a>
 8006e82:	4b27      	ldr	r3, [pc, #156]	@ (8006f20 <_vfiprintf_r+0x228>)
 8006e84:	bb1b      	cbnz	r3, 8006ece <_vfiprintf_r+0x1d6>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	3307      	adds	r3, #7
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	3308      	adds	r3, #8
 8006e90:	9303      	str	r3, [sp, #12]
 8006e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e94:	443b      	add	r3, r7
 8006e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e98:	e76a      	b.n	8006d70 <_vfiprintf_r+0x78>
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	2001      	movs	r0, #1
 8006e9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ea2:	e7a8      	b.n	8006df6 <_vfiprintf_r+0xfe>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f04f 0c0a 	mov.w	ip, #10
 8006eaa:	4619      	mov	r1, r3
 8006eac:	3401      	adds	r4, #1
 8006eae:	9305      	str	r3, [sp, #20]
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb6:	3a30      	subs	r2, #48	@ 0x30
 8006eb8:	2a09      	cmp	r2, #9
 8006eba:	d903      	bls.n	8006ec4 <_vfiprintf_r+0x1cc>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0c6      	beq.n	8006e4e <_vfiprintf_r+0x156>
 8006ec0:	9105      	str	r1, [sp, #20]
 8006ec2:	e7c4      	b.n	8006e4e <_vfiprintf_r+0x156>
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ecc:	e7f0      	b.n	8006eb0 <_vfiprintf_r+0x1b8>
 8006ece:	ab03      	add	r3, sp, #12
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	462a      	mov	r2, r5
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	4b13      	ldr	r3, [pc, #76]	@ (8006f24 <_vfiprintf_r+0x22c>)
 8006ed8:	a904      	add	r1, sp, #16
 8006eda:	f7fd fc7b 	bl	80047d4 <_printf_float>
 8006ede:	4607      	mov	r7, r0
 8006ee0:	1c78      	adds	r0, r7, #1
 8006ee2:	d1d6      	bne.n	8006e92 <_vfiprintf_r+0x19a>
 8006ee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ee6:	07d9      	lsls	r1, r3, #31
 8006ee8:	d405      	bmi.n	8006ef6 <_vfiprintf_r+0x1fe>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	059a      	lsls	r2, r3, #22
 8006eee:	d402      	bmi.n	8006ef6 <_vfiprintf_r+0x1fe>
 8006ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ef2:	f7fe f9e1 	bl	80052b8 <__retarget_lock_release_recursive>
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	065b      	lsls	r3, r3, #25
 8006efa:	f53f af1f 	bmi.w	8006d3c <_vfiprintf_r+0x44>
 8006efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f00:	e71e      	b.n	8006d40 <_vfiprintf_r+0x48>
 8006f02:	ab03      	add	r3, sp, #12
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	462a      	mov	r2, r5
 8006f08:	4630      	mov	r0, r6
 8006f0a:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <_vfiprintf_r+0x22c>)
 8006f0c:	a904      	add	r1, sp, #16
 8006f0e:	f7fd feff 	bl	8004d10 <_printf_i>
 8006f12:	e7e4      	b.n	8006ede <_vfiprintf_r+0x1e6>
 8006f14:	08009a96 	.word	0x08009a96
 8006f18:	08009a9c 	.word	0x08009a9c
 8006f1c:	08009aa0 	.word	0x08009aa0
 8006f20:	080047d5 	.word	0x080047d5
 8006f24:	08006cd5 	.word	0x08006cd5

08006f28 <__swbuf_r>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	460e      	mov	r6, r1
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	4605      	mov	r5, r0
 8006f30:	b118      	cbz	r0, 8006f3a <__swbuf_r+0x12>
 8006f32:	6a03      	ldr	r3, [r0, #32]
 8006f34:	b90b      	cbnz	r3, 8006f3a <__swbuf_r+0x12>
 8006f36:	f7fe f895 	bl	8005064 <__sinit>
 8006f3a:	69a3      	ldr	r3, [r4, #24]
 8006f3c:	60a3      	str	r3, [r4, #8]
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	071a      	lsls	r2, r3, #28
 8006f42:	d501      	bpl.n	8006f48 <__swbuf_r+0x20>
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	b943      	cbnz	r3, 8006f5a <__swbuf_r+0x32>
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f000 f82a 	bl	8006fa4 <__swsetup_r>
 8006f50:	b118      	cbz	r0, 8006f5a <__swbuf_r+0x32>
 8006f52:	f04f 37ff 	mov.w	r7, #4294967295
 8006f56:	4638      	mov	r0, r7
 8006f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	6922      	ldr	r2, [r4, #16]
 8006f5e:	b2f6      	uxtb	r6, r6
 8006f60:	1a98      	subs	r0, r3, r2
 8006f62:	6963      	ldr	r3, [r4, #20]
 8006f64:	4637      	mov	r7, r6
 8006f66:	4283      	cmp	r3, r0
 8006f68:	dc05      	bgt.n	8006f76 <__swbuf_r+0x4e>
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f7ff fdb9 	bl	8006ae4 <_fflush_r>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d1ed      	bne.n	8006f52 <__swbuf_r+0x2a>
 8006f76:	68a3      	ldr	r3, [r4, #8]
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	60a3      	str	r3, [r4, #8]
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	6022      	str	r2, [r4, #0]
 8006f82:	701e      	strb	r6, [r3, #0]
 8006f84:	6962      	ldr	r2, [r4, #20]
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d004      	beq.n	8006f96 <__swbuf_r+0x6e>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	07db      	lsls	r3, r3, #31
 8006f90:	d5e1      	bpl.n	8006f56 <__swbuf_r+0x2e>
 8006f92:	2e0a      	cmp	r6, #10
 8006f94:	d1df      	bne.n	8006f56 <__swbuf_r+0x2e>
 8006f96:	4621      	mov	r1, r4
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f7ff fda3 	bl	8006ae4 <_fflush_r>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d0d9      	beq.n	8006f56 <__swbuf_r+0x2e>
 8006fa2:	e7d6      	b.n	8006f52 <__swbuf_r+0x2a>

08006fa4 <__swsetup_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4b29      	ldr	r3, [pc, #164]	@ (800704c <__swsetup_r+0xa8>)
 8006fa8:	4605      	mov	r5, r0
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	460c      	mov	r4, r1
 8006fae:	b118      	cbz	r0, 8006fb8 <__swsetup_r+0x14>
 8006fb0:	6a03      	ldr	r3, [r0, #32]
 8006fb2:	b90b      	cbnz	r3, 8006fb8 <__swsetup_r+0x14>
 8006fb4:	f7fe f856 	bl	8005064 <__sinit>
 8006fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fbc:	0719      	lsls	r1, r3, #28
 8006fbe:	d422      	bmi.n	8007006 <__swsetup_r+0x62>
 8006fc0:	06da      	lsls	r2, r3, #27
 8006fc2:	d407      	bmi.n	8006fd4 <__swsetup_r+0x30>
 8006fc4:	2209      	movs	r2, #9
 8006fc6:	602a      	str	r2, [r5, #0]
 8006fc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	e033      	b.n	800703c <__swsetup_r+0x98>
 8006fd4:	0758      	lsls	r0, r3, #29
 8006fd6:	d512      	bpl.n	8006ffe <__swsetup_r+0x5a>
 8006fd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fda:	b141      	cbz	r1, 8006fee <__swsetup_r+0x4a>
 8006fdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	d002      	beq.n	8006fea <__swsetup_r+0x46>
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f7fe ffe3 	bl	8005fb0 <_free_r>
 8006fea:	2300      	movs	r3, #0
 8006fec:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	f043 0308 	orr.w	r3, r3, #8
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	b94b      	cbnz	r3, 800701e <__swsetup_r+0x7a>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007014:	d003      	beq.n	800701e <__swsetup_r+0x7a>
 8007016:	4621      	mov	r1, r4
 8007018:	4628      	mov	r0, r5
 800701a:	f000 f882 	bl	8007122 <__smakebuf_r>
 800701e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007022:	f013 0201 	ands.w	r2, r3, #1
 8007026:	d00a      	beq.n	800703e <__swsetup_r+0x9a>
 8007028:	2200      	movs	r2, #0
 800702a:	60a2      	str	r2, [r4, #8]
 800702c:	6962      	ldr	r2, [r4, #20]
 800702e:	4252      	negs	r2, r2
 8007030:	61a2      	str	r2, [r4, #24]
 8007032:	6922      	ldr	r2, [r4, #16]
 8007034:	b942      	cbnz	r2, 8007048 <__swsetup_r+0xa4>
 8007036:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800703a:	d1c5      	bne.n	8006fc8 <__swsetup_r+0x24>
 800703c:	bd38      	pop	{r3, r4, r5, pc}
 800703e:	0799      	lsls	r1, r3, #30
 8007040:	bf58      	it	pl
 8007042:	6962      	ldrpl	r2, [r4, #20]
 8007044:	60a2      	str	r2, [r4, #8]
 8007046:	e7f4      	b.n	8007032 <__swsetup_r+0x8e>
 8007048:	2000      	movs	r0, #0
 800704a:	e7f7      	b.n	800703c <__swsetup_r+0x98>
 800704c:	2000001c 	.word	0x2000001c

08007050 <_raise_r>:
 8007050:	291f      	cmp	r1, #31
 8007052:	b538      	push	{r3, r4, r5, lr}
 8007054:	4605      	mov	r5, r0
 8007056:	460c      	mov	r4, r1
 8007058:	d904      	bls.n	8007064 <_raise_r+0x14>
 800705a:	2316      	movs	r3, #22
 800705c:	6003      	str	r3, [r0, #0]
 800705e:	f04f 30ff 	mov.w	r0, #4294967295
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007066:	b112      	cbz	r2, 800706e <_raise_r+0x1e>
 8007068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800706c:	b94b      	cbnz	r3, 8007082 <_raise_r+0x32>
 800706e:	4628      	mov	r0, r5
 8007070:	f000 f830 	bl	80070d4 <_getpid_r>
 8007074:	4622      	mov	r2, r4
 8007076:	4601      	mov	r1, r0
 8007078:	4628      	mov	r0, r5
 800707a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800707e:	f000 b817 	b.w	80070b0 <_kill_r>
 8007082:	2b01      	cmp	r3, #1
 8007084:	d00a      	beq.n	800709c <_raise_r+0x4c>
 8007086:	1c59      	adds	r1, r3, #1
 8007088:	d103      	bne.n	8007092 <_raise_r+0x42>
 800708a:	2316      	movs	r3, #22
 800708c:	6003      	str	r3, [r0, #0]
 800708e:	2001      	movs	r0, #1
 8007090:	e7e7      	b.n	8007062 <_raise_r+0x12>
 8007092:	2100      	movs	r1, #0
 8007094:	4620      	mov	r0, r4
 8007096:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800709a:	4798      	blx	r3
 800709c:	2000      	movs	r0, #0
 800709e:	e7e0      	b.n	8007062 <_raise_r+0x12>

080070a0 <raise>:
 80070a0:	4b02      	ldr	r3, [pc, #8]	@ (80070ac <raise+0xc>)
 80070a2:	4601      	mov	r1, r0
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	f7ff bfd3 	b.w	8007050 <_raise_r>
 80070aa:	bf00      	nop
 80070ac:	2000001c 	.word	0x2000001c

080070b0 <_kill_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	2300      	movs	r3, #0
 80070b4:	4d06      	ldr	r5, [pc, #24]	@ (80070d0 <_kill_r+0x20>)
 80070b6:	4604      	mov	r4, r0
 80070b8:	4608      	mov	r0, r1
 80070ba:	4611      	mov	r1, r2
 80070bc:	602b      	str	r3, [r5, #0]
 80070be:	f7fd f946 	bl	800434e <_kill>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	d102      	bne.n	80070cc <_kill_r+0x1c>
 80070c6:	682b      	ldr	r3, [r5, #0]
 80070c8:	b103      	cbz	r3, 80070cc <_kill_r+0x1c>
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	bd38      	pop	{r3, r4, r5, pc}
 80070ce:	bf00      	nop
 80070d0:	200008fc 	.word	0x200008fc

080070d4 <_getpid_r>:
 80070d4:	f7fd b934 	b.w	8004340 <_getpid>

080070d8 <__swhatbuf_r>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	460c      	mov	r4, r1
 80070dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e0:	4615      	mov	r5, r2
 80070e2:	2900      	cmp	r1, #0
 80070e4:	461e      	mov	r6, r3
 80070e6:	b096      	sub	sp, #88	@ 0x58
 80070e8:	da0c      	bge.n	8007104 <__swhatbuf_r+0x2c>
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	2100      	movs	r1, #0
 80070ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80070f2:	bf14      	ite	ne
 80070f4:	2340      	movne	r3, #64	@ 0x40
 80070f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80070fa:	2000      	movs	r0, #0
 80070fc:	6031      	str	r1, [r6, #0]
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	b016      	add	sp, #88	@ 0x58
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	466a      	mov	r2, sp
 8007106:	f000 f849 	bl	800719c <_fstat_r>
 800710a:	2800      	cmp	r0, #0
 800710c:	dbed      	blt.n	80070ea <__swhatbuf_r+0x12>
 800710e:	9901      	ldr	r1, [sp, #4]
 8007110:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007114:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007118:	4259      	negs	r1, r3
 800711a:	4159      	adcs	r1, r3
 800711c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007120:	e7eb      	b.n	80070fa <__swhatbuf_r+0x22>

08007122 <__smakebuf_r>:
 8007122:	898b      	ldrh	r3, [r1, #12]
 8007124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007126:	079d      	lsls	r5, r3, #30
 8007128:	4606      	mov	r6, r0
 800712a:	460c      	mov	r4, r1
 800712c:	d507      	bpl.n	800713e <__smakebuf_r+0x1c>
 800712e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	6123      	str	r3, [r4, #16]
 8007136:	2301      	movs	r3, #1
 8007138:	6163      	str	r3, [r4, #20]
 800713a:	b003      	add	sp, #12
 800713c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800713e:	466a      	mov	r2, sp
 8007140:	ab01      	add	r3, sp, #4
 8007142:	f7ff ffc9 	bl	80070d8 <__swhatbuf_r>
 8007146:	9f00      	ldr	r7, [sp, #0]
 8007148:	4605      	mov	r5, r0
 800714a:	4639      	mov	r1, r7
 800714c:	4630      	mov	r0, r6
 800714e:	f7fd fa17 	bl	8004580 <_malloc_r>
 8007152:	b948      	cbnz	r0, 8007168 <__smakebuf_r+0x46>
 8007154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007158:	059a      	lsls	r2, r3, #22
 800715a:	d4ee      	bmi.n	800713a <__smakebuf_r+0x18>
 800715c:	f023 0303 	bic.w	r3, r3, #3
 8007160:	f043 0302 	orr.w	r3, r3, #2
 8007164:	81a3      	strh	r3, [r4, #12]
 8007166:	e7e2      	b.n	800712e <__smakebuf_r+0xc>
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800716e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	9b01      	ldr	r3, [sp, #4]
 8007176:	6020      	str	r0, [r4, #0]
 8007178:	b15b      	cbz	r3, 8007192 <__smakebuf_r+0x70>
 800717a:	4630      	mov	r0, r6
 800717c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007180:	f000 f81e 	bl	80071c0 <_isatty_r>
 8007184:	b128      	cbz	r0, 8007192 <__smakebuf_r+0x70>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	f023 0303 	bic.w	r3, r3, #3
 800718c:	f043 0301 	orr.w	r3, r3, #1
 8007190:	81a3      	strh	r3, [r4, #12]
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	431d      	orrs	r5, r3
 8007196:	81a5      	strh	r5, [r4, #12]
 8007198:	e7cf      	b.n	800713a <__smakebuf_r+0x18>
	...

0800719c <_fstat_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	2300      	movs	r3, #0
 80071a0:	4d06      	ldr	r5, [pc, #24]	@ (80071bc <_fstat_r+0x20>)
 80071a2:	4604      	mov	r4, r0
 80071a4:	4608      	mov	r0, r1
 80071a6:	4611      	mov	r1, r2
 80071a8:	602b      	str	r3, [r5, #0]
 80071aa:	f7fd f92f 	bl	800440c <_fstat>
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	d102      	bne.n	80071b8 <_fstat_r+0x1c>
 80071b2:	682b      	ldr	r3, [r5, #0]
 80071b4:	b103      	cbz	r3, 80071b8 <_fstat_r+0x1c>
 80071b6:	6023      	str	r3, [r4, #0]
 80071b8:	bd38      	pop	{r3, r4, r5, pc}
 80071ba:	bf00      	nop
 80071bc:	200008fc 	.word	0x200008fc

080071c0 <_isatty_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	2300      	movs	r3, #0
 80071c4:	4d05      	ldr	r5, [pc, #20]	@ (80071dc <_isatty_r+0x1c>)
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	f7fd f92d 	bl	800442a <_isatty>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_isatty_r+0x1a>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b103      	cbz	r3, 80071da <_isatty_r+0x1a>
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	200008fc 	.word	0x200008fc

080071e0 <_init>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	bf00      	nop
 80071e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e6:	bc08      	pop	{r3}
 80071e8:	469e      	mov	lr, r3
 80071ea:	4770      	bx	lr

080071ec <_fini>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr
