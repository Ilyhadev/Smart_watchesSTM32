
SmartWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da98  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027cc  0800dba8  0800dba8  0000eba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010374  08010374  000121d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010374  08010374  00011374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801037c  0801037c  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801037c  0801037c  0001137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010380  08010380  00011380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08010384  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019dc  200001d8  0801055c  000121d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  0801055c  00012bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b788  00000000  00000000  00012201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004806  00000000  00000000  0002d989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  00032190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001418  00000000  00000000  00033b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccc7  00000000  00000000  00034fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f2d6  00000000  00000000  00051c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba8d  00000000  00000000  00070f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c9da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082c0  00000000  00000000  0010ca20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00114ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800db90 	.word	0x0800db90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800db90 	.word	0x0800db90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_uldivmod>:
 8001110:	b953      	cbnz	r3, 8001128 <__aeabi_uldivmod+0x18>
 8001112:	b94a      	cbnz	r2, 8001128 <__aeabi_uldivmod+0x18>
 8001114:	2900      	cmp	r1, #0
 8001116:	bf08      	it	eq
 8001118:	2800      	cmpeq	r0, #0
 800111a:	bf1c      	itt	ne
 800111c:	f04f 31ff 	movne.w	r1, #4294967295
 8001120:	f04f 30ff 	movne.w	r0, #4294967295
 8001124:	f000 b9c2 	b.w	80014ac <__aeabi_idiv0>
 8001128:	f1ad 0c08 	sub.w	ip, sp, #8
 800112c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001130:	f000 f83c 	bl	80011ac <__udivmoddi4>
 8001134:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800113c:	b004      	add	sp, #16
 800113e:	4770      	bx	lr

08001140 <__aeabi_d2lz>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x1c>
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4620      	mov	r0, r4
 800115e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <__udivmoddi4>:
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b0:	9d08      	ldr	r5, [sp, #32]
 80011b2:	468e      	mov	lr, r1
 80011b4:	4604      	mov	r4, r0
 80011b6:	4688      	mov	r8, r1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d14a      	bne.n	8001252 <__udivmoddi4+0xa6>
 80011bc:	428a      	cmp	r2, r1
 80011be:	4617      	mov	r7, r2
 80011c0:	d962      	bls.n	8001288 <__udivmoddi4+0xdc>
 80011c2:	fab2 f682 	clz	r6, r2
 80011c6:	b14e      	cbz	r6, 80011dc <__udivmoddi4+0x30>
 80011c8:	f1c6 0320 	rsb	r3, r6, #32
 80011cc:	fa01 f806 	lsl.w	r8, r1, r6
 80011d0:	fa20 f303 	lsr.w	r3, r0, r3
 80011d4:	40b7      	lsls	r7, r6
 80011d6:	ea43 0808 	orr.w	r8, r3, r8
 80011da:	40b4      	lsls	r4, r6
 80011dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80011e4:	fa1f fc87 	uxth.w	ip, r7
 80011e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80011ec:	fb01 f20c 	mul.w	r2, r1, ip
 80011f0:	0c23      	lsrs	r3, r4, #16
 80011f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d909      	bls.n	800120e <__udivmoddi4+0x62>
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	f101 30ff 	add.w	r0, r1, #4294967295
 8001200:	f080 80eb 	bcs.w	80013da <__udivmoddi4+0x22e>
 8001204:	429a      	cmp	r2, r3
 8001206:	f240 80e8 	bls.w	80013da <__udivmoddi4+0x22e>
 800120a:	3902      	subs	r1, #2
 800120c:	443b      	add	r3, r7
 800120e:	1a9a      	subs	r2, r3, r2
 8001210:	fbb2 f0fe 	udiv	r0, r2, lr
 8001214:	fb0e 2210 	mls	r2, lr, r0, r2
 8001218:	fb00 fc0c 	mul.w	ip, r0, ip
 800121c:	b2a3      	uxth	r3, r4
 800121e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001222:	459c      	cmp	ip, r3
 8001224:	d909      	bls.n	800123a <__udivmoddi4+0x8e>
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	f100 32ff 	add.w	r2, r0, #4294967295
 800122c:	f080 80d7 	bcs.w	80013de <__udivmoddi4+0x232>
 8001230:	459c      	cmp	ip, r3
 8001232:	f240 80d4 	bls.w	80013de <__udivmoddi4+0x232>
 8001236:	443b      	add	r3, r7
 8001238:	3802      	subs	r0, #2
 800123a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800123e:	2100      	movs	r1, #0
 8001240:	eba3 030c 	sub.w	r3, r3, ip
 8001244:	b11d      	cbz	r5, 800124e <__udivmoddi4+0xa2>
 8001246:	2200      	movs	r2, #0
 8001248:	40f3      	lsrs	r3, r6
 800124a:	e9c5 3200 	strd	r3, r2, [r5]
 800124e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001252:	428b      	cmp	r3, r1
 8001254:	d905      	bls.n	8001262 <__udivmoddi4+0xb6>
 8001256:	b10d      	cbz	r5, 800125c <__udivmoddi4+0xb0>
 8001258:	e9c5 0100 	strd	r0, r1, [r5]
 800125c:	2100      	movs	r1, #0
 800125e:	4608      	mov	r0, r1
 8001260:	e7f5      	b.n	800124e <__udivmoddi4+0xa2>
 8001262:	fab3 f183 	clz	r1, r3
 8001266:	2900      	cmp	r1, #0
 8001268:	d146      	bne.n	80012f8 <__udivmoddi4+0x14c>
 800126a:	4573      	cmp	r3, lr
 800126c:	d302      	bcc.n	8001274 <__udivmoddi4+0xc8>
 800126e:	4282      	cmp	r2, r0
 8001270:	f200 8108 	bhi.w	8001484 <__udivmoddi4+0x2d8>
 8001274:	1a84      	subs	r4, r0, r2
 8001276:	eb6e 0203 	sbc.w	r2, lr, r3
 800127a:	2001      	movs	r0, #1
 800127c:	4690      	mov	r8, r2
 800127e:	2d00      	cmp	r5, #0
 8001280:	d0e5      	beq.n	800124e <__udivmoddi4+0xa2>
 8001282:	e9c5 4800 	strd	r4, r8, [r5]
 8001286:	e7e2      	b.n	800124e <__udivmoddi4+0xa2>
 8001288:	2a00      	cmp	r2, #0
 800128a:	f000 8091 	beq.w	80013b0 <__udivmoddi4+0x204>
 800128e:	fab2 f682 	clz	r6, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	f040 80a5 	bne.w	80013e2 <__udivmoddi4+0x236>
 8001298:	1a8a      	subs	r2, r1, r2
 800129a:	2101      	movs	r1, #1
 800129c:	0c03      	lsrs	r3, r0, #16
 800129e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012a2:	b280      	uxth	r0, r0
 80012a4:	b2bc      	uxth	r4, r7
 80012a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80012aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80012ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012b2:	fb04 f20c 	mul.w	r2, r4, ip
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d907      	bls.n	80012ca <__udivmoddi4+0x11e>
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80012c0:	d202      	bcs.n	80012c8 <__udivmoddi4+0x11c>
 80012c2:	429a      	cmp	r2, r3
 80012c4:	f200 80e3 	bhi.w	800148e <__udivmoddi4+0x2e2>
 80012c8:	46c4      	mov	ip, r8
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80012d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80012d4:	fb02 f404 	mul.w	r4, r2, r4
 80012d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012dc:	429c      	cmp	r4, r3
 80012de:	d907      	bls.n	80012f0 <__udivmoddi4+0x144>
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	f102 30ff 	add.w	r0, r2, #4294967295
 80012e6:	d202      	bcs.n	80012ee <__udivmoddi4+0x142>
 80012e8:	429c      	cmp	r4, r3
 80012ea:	f200 80cd 	bhi.w	8001488 <__udivmoddi4+0x2dc>
 80012ee:	4602      	mov	r2, r0
 80012f0:	1b1b      	subs	r3, r3, r4
 80012f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80012f6:	e7a5      	b.n	8001244 <__udivmoddi4+0x98>
 80012f8:	f1c1 0620 	rsb	r6, r1, #32
 80012fc:	408b      	lsls	r3, r1
 80012fe:	fa22 f706 	lsr.w	r7, r2, r6
 8001302:	431f      	orrs	r7, r3
 8001304:	fa2e fa06 	lsr.w	sl, lr, r6
 8001308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800130c:	fbba f8f9 	udiv	r8, sl, r9
 8001310:	fa0e fe01 	lsl.w	lr, lr, r1
 8001314:	fa20 f306 	lsr.w	r3, r0, r6
 8001318:	fb09 aa18 	mls	sl, r9, r8, sl
 800131c:	fa1f fc87 	uxth.w	ip, r7
 8001320:	ea43 030e 	orr.w	r3, r3, lr
 8001324:	fa00 fe01 	lsl.w	lr, r0, r1
 8001328:	fb08 f00c 	mul.w	r0, r8, ip
 800132c:	0c1c      	lsrs	r4, r3, #16
 800132e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001332:	42a0      	cmp	r0, r4
 8001334:	fa02 f201 	lsl.w	r2, r2, r1
 8001338:	d90a      	bls.n	8001350 <__udivmoddi4+0x1a4>
 800133a:	193c      	adds	r4, r7, r4
 800133c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001340:	f080 809e 	bcs.w	8001480 <__udivmoddi4+0x2d4>
 8001344:	42a0      	cmp	r0, r4
 8001346:	f240 809b 	bls.w	8001480 <__udivmoddi4+0x2d4>
 800134a:	f1a8 0802 	sub.w	r8, r8, #2
 800134e:	443c      	add	r4, r7
 8001350:	1a24      	subs	r4, r4, r0
 8001352:	b298      	uxth	r0, r3
 8001354:	fbb4 f3f9 	udiv	r3, r4, r9
 8001358:	fb09 4413 	mls	r4, r9, r3, r4
 800135c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001364:	45a4      	cmp	ip, r4
 8001366:	d909      	bls.n	800137c <__udivmoddi4+0x1d0>
 8001368:	193c      	adds	r4, r7, r4
 800136a:	f103 30ff 	add.w	r0, r3, #4294967295
 800136e:	f080 8085 	bcs.w	800147c <__udivmoddi4+0x2d0>
 8001372:	45a4      	cmp	ip, r4
 8001374:	f240 8082 	bls.w	800147c <__udivmoddi4+0x2d0>
 8001378:	3b02      	subs	r3, #2
 800137a:	443c      	add	r4, r7
 800137c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001380:	eba4 040c 	sub.w	r4, r4, ip
 8001384:	fba0 8c02 	umull	r8, ip, r0, r2
 8001388:	4564      	cmp	r4, ip
 800138a:	4643      	mov	r3, r8
 800138c:	46e1      	mov	r9, ip
 800138e:	d364      	bcc.n	800145a <__udivmoddi4+0x2ae>
 8001390:	d061      	beq.n	8001456 <__udivmoddi4+0x2aa>
 8001392:	b15d      	cbz	r5, 80013ac <__udivmoddi4+0x200>
 8001394:	ebbe 0203 	subs.w	r2, lr, r3
 8001398:	eb64 0409 	sbc.w	r4, r4, r9
 800139c:	fa04 f606 	lsl.w	r6, r4, r6
 80013a0:	fa22 f301 	lsr.w	r3, r2, r1
 80013a4:	431e      	orrs	r6, r3
 80013a6:	40cc      	lsrs	r4, r1
 80013a8:	e9c5 6400 	strd	r6, r4, [r5]
 80013ac:	2100      	movs	r1, #0
 80013ae:	e74e      	b.n	800124e <__udivmoddi4+0xa2>
 80013b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80013b4:	0c01      	lsrs	r1, r0, #16
 80013b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013ba:	b280      	uxth	r0, r0
 80013bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013c0:	463b      	mov	r3, r7
 80013c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80013c6:	4638      	mov	r0, r7
 80013c8:	463c      	mov	r4, r7
 80013ca:	46b8      	mov	r8, r7
 80013cc:	46be      	mov	lr, r7
 80013ce:	2620      	movs	r6, #32
 80013d0:	eba2 0208 	sub.w	r2, r2, r8
 80013d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013d8:	e765      	b.n	80012a6 <__udivmoddi4+0xfa>
 80013da:	4601      	mov	r1, r0
 80013dc:	e717      	b.n	800120e <__udivmoddi4+0x62>
 80013de:	4610      	mov	r0, r2
 80013e0:	e72b      	b.n	800123a <__udivmoddi4+0x8e>
 80013e2:	f1c6 0120 	rsb	r1, r6, #32
 80013e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80013ea:	40b7      	lsls	r7, r6
 80013ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80013f0:	fa20 f101 	lsr.w	r1, r0, r1
 80013f4:	ea41 010e 	orr.w	r1, r1, lr
 80013f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013fc:	fbbc f8fe 	udiv	r8, ip, lr
 8001400:	b2bc      	uxth	r4, r7
 8001402:	fb0e cc18 	mls	ip, lr, r8, ip
 8001406:	fb08 f904 	mul.w	r9, r8, r4
 800140a:	0c0a      	lsrs	r2, r1, #16
 800140c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001410:	40b0      	lsls	r0, r6
 8001412:	4591      	cmp	r9, r2
 8001414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001418:	b280      	uxth	r0, r0
 800141a:	d93e      	bls.n	800149a <__udivmoddi4+0x2ee>
 800141c:	18ba      	adds	r2, r7, r2
 800141e:	f108 3cff 	add.w	ip, r8, #4294967295
 8001422:	d201      	bcs.n	8001428 <__udivmoddi4+0x27c>
 8001424:	4591      	cmp	r9, r2
 8001426:	d81f      	bhi.n	8001468 <__udivmoddi4+0x2bc>
 8001428:	eba2 0209 	sub.w	r2, r2, r9
 800142c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001430:	fb09 f804 	mul.w	r8, r9, r4
 8001434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001438:	b28a      	uxth	r2, r1
 800143a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800143e:	4542      	cmp	r2, r8
 8001440:	d229      	bcs.n	8001496 <__udivmoddi4+0x2ea>
 8001442:	18ba      	adds	r2, r7, r2
 8001444:	f109 31ff 	add.w	r1, r9, #4294967295
 8001448:	d2c2      	bcs.n	80013d0 <__udivmoddi4+0x224>
 800144a:	4542      	cmp	r2, r8
 800144c:	d2c0      	bcs.n	80013d0 <__udivmoddi4+0x224>
 800144e:	f1a9 0102 	sub.w	r1, r9, #2
 8001452:	443a      	add	r2, r7
 8001454:	e7bc      	b.n	80013d0 <__udivmoddi4+0x224>
 8001456:	45c6      	cmp	lr, r8
 8001458:	d29b      	bcs.n	8001392 <__udivmoddi4+0x1e6>
 800145a:	ebb8 0302 	subs.w	r3, r8, r2
 800145e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001462:	3801      	subs	r0, #1
 8001464:	46e1      	mov	r9, ip
 8001466:	e794      	b.n	8001392 <__udivmoddi4+0x1e6>
 8001468:	eba7 0909 	sub.w	r9, r7, r9
 800146c:	444a      	add	r2, r9
 800146e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001472:	f1a8 0c02 	sub.w	ip, r8, #2
 8001476:	fb09 f804 	mul.w	r8, r9, r4
 800147a:	e7db      	b.n	8001434 <__udivmoddi4+0x288>
 800147c:	4603      	mov	r3, r0
 800147e:	e77d      	b.n	800137c <__udivmoddi4+0x1d0>
 8001480:	46d0      	mov	r8, sl
 8001482:	e765      	b.n	8001350 <__udivmoddi4+0x1a4>
 8001484:	4608      	mov	r0, r1
 8001486:	e6fa      	b.n	800127e <__udivmoddi4+0xd2>
 8001488:	443b      	add	r3, r7
 800148a:	3a02      	subs	r2, #2
 800148c:	e730      	b.n	80012f0 <__udivmoddi4+0x144>
 800148e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001492:	443b      	add	r3, r7
 8001494:	e719      	b.n	80012ca <__udivmoddi4+0x11e>
 8001496:	4649      	mov	r1, r9
 8001498:	e79a      	b.n	80013d0 <__udivmoddi4+0x224>
 800149a:	eba2 0209 	sub.w	r2, r2, r9
 800149e:	fbb2 f9fe 	udiv	r9, r2, lr
 80014a2:	46c4      	mov	ip, r8
 80014a4:	fb09 f804 	mul.w	r8, r9, r4
 80014a8:	e7c4      	b.n	8001434 <__udivmoddi4+0x288>
 80014aa:	bf00      	nop

080014ac <__aeabi_idiv0>:
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_Init+0x28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <HAL_Init+0x28>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f8f5 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	200f      	movs	r0, #15
 80014c8:	f007 fd2c 	bl	8008f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f007 fbf4 	bl	8008cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_IncTick+0x1c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_IncTick+0x20>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a03      	ldr	r2, [pc, #12]	@ (80014fc <HAL_IncTick+0x20>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000004 	.word	0x20000004
 80014fc:	200001f4 	.word	0x200001f4

08001500 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b02      	ldr	r3, [pc, #8]	@ (8001510 <HAL_GetTick+0x10>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	200001f4 	.word	0x200001f4

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff fff0 	bl	8001500 <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <HAL_Delay+0x44>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffe0 	bl	8001500 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000004 	.word	0x20000004

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4906      	ldr	r1, [pc, #24]	@ (80015f4 <__NVIC_EnableIRQ+0x34>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff4f 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff64 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ffb2 	bl	800164c <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff81 	bl	80015f8 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff57 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d008      	beq.n	8001744 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2204      	movs	r2, #4
 8001736:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e020      	b.n	8001786 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 020e 	bic.w	r2, r2, #14
 8001752:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d005      	beq.n	80017b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2204      	movs	r2, #4
 80017ac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e051      	b.n	8001858 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 020e 	bic.w	r2, r2, #14
 80017c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a22      	ldr	r2, [pc, #136]	@ (8001864 <HAL_DMA_Abort_IT+0xd4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d029      	beq.n	8001832 <HAL_DMA_Abort_IT+0xa2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a21      	ldr	r2, [pc, #132]	@ (8001868 <HAL_DMA_Abort_IT+0xd8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d022      	beq.n	800182e <HAL_DMA_Abort_IT+0x9e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1f      	ldr	r2, [pc, #124]	@ (800186c <HAL_DMA_Abort_IT+0xdc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d01a      	beq.n	8001828 <HAL_DMA_Abort_IT+0x98>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001870 <HAL_DMA_Abort_IT+0xe0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d012      	beq.n	8001822 <HAL_DMA_Abort_IT+0x92>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1c      	ldr	r2, [pc, #112]	@ (8001874 <HAL_DMA_Abort_IT+0xe4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00a      	beq.n	800181c <HAL_DMA_Abort_IT+0x8c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1b      	ldr	r2, [pc, #108]	@ (8001878 <HAL_DMA_Abort_IT+0xe8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d102      	bne.n	8001816 <HAL_DMA_Abort_IT+0x86>
 8001810:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001814:	e00e      	b.n	8001834 <HAL_DMA_Abort_IT+0xa4>
 8001816:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800181a:	e00b      	b.n	8001834 <HAL_DMA_Abort_IT+0xa4>
 800181c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001820:	e008      	b.n	8001834 <HAL_DMA_Abort_IT+0xa4>
 8001822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001826:	e005      	b.n	8001834 <HAL_DMA_Abort_IT+0xa4>
 8001828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800182c:	e002      	b.n	8001834 <HAL_DMA_Abort_IT+0xa4>
 800182e:	2310      	movs	r3, #16
 8001830:	e000      	b.n	8001834 <HAL_DMA_Abort_IT+0xa4>
 8001832:	2301      	movs	r3, #1
 8001834:	4a11      	ldr	r2, [pc, #68]	@ (800187c <HAL_DMA_Abort_IT+0xec>)
 8001836:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
    } 
  }
  return status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020008 	.word	0x40020008
 8001868:	4002001c 	.word	0x4002001c
 800186c:	40020030 	.word	0x40020030
 8001870:	40020044 	.word	0x40020044
 8001874:	40020058 	.word	0x40020058
 8001878:	4002006c 	.word	0x4002006c
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	@ 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e169      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001894:	2201      	movs	r2, #1
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8158 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a9a      	ldr	r2, [pc, #616]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d05e      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018bc:	4a98      	ldr	r2, [pc, #608]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d875      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018c2:	4a98      	ldr	r2, [pc, #608]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d058      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018c8:	4a96      	ldr	r2, [pc, #600]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d86f      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018ce:	4a96      	ldr	r2, [pc, #600]	@ (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d052      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018d4:	4a94      	ldr	r2, [pc, #592]	@ (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d869      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018da:	4a94      	ldr	r2, [pc, #592]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04c      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018e0:	4a92      	ldr	r2, [pc, #584]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d863      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018e6:	4a92      	ldr	r2, [pc, #584]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d046      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018ec:	4a90      	ldr	r2, [pc, #576]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d85d      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d82a      	bhi.n	800194c <HAL_GPIO_Init+0xcc>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d859      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <HAL_GPIO_Init+0x80>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	0800197b 	.word	0x0800197b
 8001904:	08001955 	.word	0x08001955
 8001908:	08001967 	.word	0x08001967
 800190c:	080019a9 	.word	0x080019a9
 8001910:	080019af 	.word	0x080019af
 8001914:	080019af 	.word	0x080019af
 8001918:	080019af 	.word	0x080019af
 800191c:	080019af 	.word	0x080019af
 8001920:	080019af 	.word	0x080019af
 8001924:	080019af 	.word	0x080019af
 8001928:	080019af 	.word	0x080019af
 800192c:	080019af 	.word	0x080019af
 8001930:	080019af 	.word	0x080019af
 8001934:	080019af 	.word	0x080019af
 8001938:	080019af 	.word	0x080019af
 800193c:	080019af 	.word	0x080019af
 8001940:	080019af 	.word	0x080019af
 8001944:	0800195d 	.word	0x0800195d
 8001948:	08001971 	.word	0x08001971
 800194c:	4a79      	ldr	r2, [pc, #484]	@ (8001b34 <HAL_GPIO_Init+0x2b4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001952:	e02c      	b.n	80019ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e029      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e024      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3308      	adds	r3, #8
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e01f      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	330c      	adds	r3, #12
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e01a      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	2304      	movs	r3, #4
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e013      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	611a      	str	r2, [r3, #16]
          break;
 800199a:	e009      	b.n	80019b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
          break;
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          break;
 80019ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	@ 0xff
 80019b4:	d801      	bhi.n	80019ba <HAL_GPIO_Init+0x13a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_Init+0x13e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2bff      	cmp	r3, #255	@ 0xff
 80019c4:	d802      	bhi.n	80019cc <HAL_GPIO_Init+0x14c>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x152>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	3b08      	subs	r3, #8
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	210f      	movs	r1, #15
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80b1 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a00:	4b4d      	ldr	r3, [pc, #308]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a18:	4a48      	ldr	r2, [pc, #288]	@ (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a40      	ldr	r2, [pc, #256]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x1ec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3f      	ldr	r2, [pc, #252]	@ (8001b44 <HAL_GPIO_Init+0x2c4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1e8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	@ (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7e:	492f      	ldr	r1, [pc, #188]	@ (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a98:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	492c      	ldr	r1, [pc, #176]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4928      	ldr	r1, [pc, #160]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4922      	ldr	r1, [pc, #136]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491e      	ldr	r1, [pc, #120]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4918      	ldr	r1, [pc, #96]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4914      	ldr	r1, [pc, #80]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d021      	beq.n	8001b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	490e      	ldr	r1, [pc, #56]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e021      	b.n	8001b62 <HAL_GPIO_Init+0x2e2>
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40011400 	.word	0x40011400
 8001b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4909      	ldr	r1, [pc, #36]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f ae8e 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	372c      	adds	r7, #44	@ 0x2c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b9e:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f005 fdbc 	bl	8007724 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e12b      	b.n	8001e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f007 f8a2 	bl	8008d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2224      	movs	r2, #36	@ 0x24
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c1c:	f002 f8c2 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8001c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4a81      	ldr	r2, [pc, #516]	@ (8001e2c <HAL_I2C_Init+0x274>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d807      	bhi.n	8001c3c <HAL_I2C_Init+0x84>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4a80      	ldr	r2, [pc, #512]	@ (8001e30 <HAL_I2C_Init+0x278>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	bf94      	ite	ls
 8001c34:	2301      	movls	r3, #1
 8001c36:	2300      	movhi	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e006      	b.n	8001c4a <HAL_I2C_Init+0x92>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e34 <HAL_I2C_Init+0x27c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	bf94      	ite	ls
 8001c44:	2301      	movls	r3, #1
 8001c46:	2300      	movhi	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0e7      	b.n	8001e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4a78      	ldr	r2, [pc, #480]	@ (8001e38 <HAL_I2C_Init+0x280>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0c9b      	lsrs	r3, r3, #18
 8001c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a6a      	ldr	r2, [pc, #424]	@ (8001e2c <HAL_I2C_Init+0x274>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d802      	bhi.n	8001c8c <HAL_I2C_Init+0xd4>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	e009      	b.n	8001ca0 <HAL_I2C_Init+0xe8>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	4a69      	ldr	r2, [pc, #420]	@ (8001e3c <HAL_I2C_Init+0x284>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	495c      	ldr	r1, [pc, #368]	@ (8001e2c <HAL_I2C_Init+0x274>)
 8001cbc:	428b      	cmp	r3, r1
 8001cbe:	d819      	bhi.n	8001cf4 <HAL_I2C_Init+0x13c>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1e59      	subs	r1, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cce:	1c59      	adds	r1, r3, #1
 8001cd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_I2C_Init+0x138>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e59      	subs	r1, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cee:	e051      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	e04f      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <HAL_I2C_Init+0x168>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1e58      	subs	r0, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	e012      	b.n	8001d46 <HAL_I2C_Init+0x18e>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e58      	subs	r0, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	0099      	lsls	r1, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Init+0x196>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e022      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10e      	bne.n	8001d74 <HAL_I2C_Init+0x1bc>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1e58      	subs	r0, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	440b      	add	r3, r1
 8001d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d72:	e00f      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1e58      	subs	r0, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	0099      	lsls	r1, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	6809      	ldr	r1, [r1, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6911      	ldr	r1, [r2, #16]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68d2      	ldr	r2, [r2, #12]
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	000186a0 	.word	0x000186a0
 8001e30:	001e847f 	.word	0x001e847f
 8001e34:	003d08ff 	.word	0x003d08ff
 8001e38:	431bde83 	.word	0x431bde83
 8001e3c:	10624dd3 	.word	0x10624dd3

08001e40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	817b      	strh	r3, [r7, #10]
 8001e50:	4613      	mov	r3, r2
 8001e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fb54 	bl	8001500 <HAL_GetTick>
 8001e58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	f040 80e0 	bne.w	8002028 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2319      	movs	r3, #25
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4970      	ldr	r1, [pc, #448]	@ (8002034 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f001 f98a 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e0d3      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_I2C_Master_Transmit+0x50>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e0cc      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d007      	beq.n	8001eb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2221      	movs	r2, #33	@ 0x21
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	893a      	ldrh	r2, [r7, #8]
 8001ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	@ (8002038 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ef8:	8979      	ldrh	r1, [r7, #10]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 fe76 	bl	8002bf0 <I2C_MasterRequestWrite>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e08d      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f24:	e066      	b.n	8001ff4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	6a39      	ldr	r1, [r7, #32]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f001 fa48 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00d      	beq.n	8001f52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d107      	bne.n	8001f4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06b      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_I2C_Master_Transmit+0x188>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d017      	beq.n	8001fc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	6a39      	ldr	r1, [r7, #32]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f001 fa3f 	bl	8003450 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d107      	bne.n	8001ff0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e01a      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d194      	bne.n	8001f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800200a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	00100002 	.word	0x00100002
 8002038:	ffff0000 	.word	0xffff0000

0800203c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	@ 0x30
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	461a      	mov	r2, r3
 8002048:	460b      	mov	r3, r1
 800204a:	817b      	strh	r3, [r7, #10]
 800204c:	4613      	mov	r3, r2
 800204e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fa54 	bl	8001500 <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	f040 824b 	bne.w	80024fe <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2319      	movs	r3, #25
 800206e:	2201      	movs	r2, #1
 8002070:	497f      	ldr	r1, [pc, #508]	@ (8002270 <HAL_I2C_Master_Receive+0x234>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f001 f88a 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	e23e      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Receive+0x54>
 800208c:	2302      	movs	r3, #2
 800208e:	e237      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d007      	beq.n	80020b6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2222      	movs	r2, #34	@ 0x22
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2210      	movs	r2, #16
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002274 <HAL_I2C_Master_Receive+0x238>)
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fdf8 	bl	8002cf4 <I2C_MasterRequestRead>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1f8      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	2b00      	cmp	r3, #0
 8002114:	d113      	bne.n	800213e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e1cc      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002142:	2b01      	cmp	r3, #1
 8002144:	d11e      	bne.n	8002184 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002154:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002156:	b672      	cpsid	i
}
 8002158:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800217e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002180:	b662      	cpsie	i
}
 8002182:	e035      	b.n	80021f0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002188:	2b02      	cmp	r3, #2
 800218a:	d11e      	bne.n	80021ca <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800219a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800219c:	b672      	cpsid	i
}
 800219e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c6:	b662      	cpsie	i
}
 80021c8:	e012      	b.n	80021f0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021f0:	e172      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	f200 811f 	bhi.w	800243a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	2b01      	cmp	r3, #1
 8002202:	d123      	bne.n	800224c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002206:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f001 f969 	bl	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e173      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800224a:	e145      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002250:	2b02      	cmp	r3, #2
 8002252:	d152      	bne.n	80022fa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	2200      	movs	r2, #0
 800225c:	4906      	ldr	r1, [pc, #24]	@ (8002278 <HAL_I2C_Master_Receive+0x23c>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 ff94 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e148      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
 800226e:	bf00      	nop
 8002270:	00100002 	.word	0x00100002
 8002274:	ffff0000 	.word	0xffff0000
 8002278:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022c2:	b662      	cpsie	i
}
 80022c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022f8:	e0ee      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002300:	2200      	movs	r2, #0
 8002302:	4981      	ldr	r1, [pc, #516]	@ (8002508 <HAL_I2C_Master_Receive+0x4cc>)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 ff41 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0f5      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002322:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800235a:	4b6c      	ldr	r3, [pc, #432]	@ (800250c <HAL_I2C_Master_Receive+0x4d0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	08db      	lsrs	r3, r3, #3
 8002360:	4a6b      	ldr	r2, [pc, #428]	@ (8002510 <HAL_I2C_Master_Receive+0x4d4>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0a1a      	lsrs	r2, r3, #8
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00da      	lsls	r2, r3, #3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	3b01      	subs	r3, #1
 8002378:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d118      	bne.n	80023b2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f043 0220 	orr.w	r2, r3, #32
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023a2:	b662      	cpsie	i
}
 80023a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0a6      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d1d9      	bne.n	8002374 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002402:	b662      	cpsie	i
}
 8002404:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002438:	e04e      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f001 f84e 	bl	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e058      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b04      	cmp	r3, #4
 800248c:	d124      	bne.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002492:	2b03      	cmp	r3, #3
 8002494:	d107      	bne.n	80024a6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f ae88 	bne.w	80021f2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	3728      	adds	r7, #40	@ 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00010004 	.word	0x00010004
 800250c:	2000000c 	.word	0x2000000c
 8002510:	14f8b589 	.word	0x14f8b589

08002514 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	4608      	mov	r0, r1
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	4603      	mov	r3, r0
 8002524:	817b      	strh	r3, [r7, #10]
 8002526:	460b      	mov	r3, r1
 8002528:	813b      	strh	r3, [r7, #8]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800252e:	f7fe ffe7 	bl	8001500 <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b20      	cmp	r3, #32
 800253e:	f040 80d9 	bne.w	80026f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2319      	movs	r3, #25
 8002548:	2201      	movs	r2, #1
 800254a:	496d      	ldr	r1, [pc, #436]	@ (8002700 <HAL_I2C_Mem_Write+0x1ec>)
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fe1d 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
 800255a:	e0cc      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_I2C_Mem_Write+0x56>
 8002566:	2302      	movs	r3, #2
 8002568:	e0c5      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d007      	beq.n	8002590 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800259e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2221      	movs	r2, #33	@ 0x21
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2240      	movs	r2, #64	@ 0x40
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002704 <HAL_I2C_Mem_Write+0x1f0>)
 80025d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025d2:	88f8      	ldrh	r0, [r7, #6]
 80025d4:	893a      	ldrh	r2, [r7, #8]
 80025d6:	8979      	ldrh	r1, [r7, #10]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4603      	mov	r3, r0
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fc54 	bl	8002e90 <I2C_RequestMemoryWrite>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d052      	beq.n	8002694 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e081      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fee2 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00d      	beq.n	800261e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2b04      	cmp	r3, #4
 8002608:	d107      	bne.n	800261a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002618:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06b      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b04      	cmp	r3, #4
 800265a:	d11b      	bne.n	8002694 <HAL_I2C_Mem_Write+0x180>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	2b00      	cmp	r3, #0
 8002662:	d017      	beq.n	8002694 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1aa      	bne.n	80025f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fed5 	bl	8003450 <I2C_WaitOnBTFFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d107      	bne.n	80026c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e016      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e000      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
  }
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	00100002 	.word	0x00100002
 8002704:	ffff0000 	.word	0xffff0000

08002708 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	@ 0x30
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4603      	mov	r3, r0
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	460b      	mov	r3, r1
 800271c:	813b      	strh	r3, [r7, #8]
 800271e:	4613      	mov	r3, r2
 8002720:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002726:	f7fe feeb 	bl	8001500 <HAL_GetTick>
 800272a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b20      	cmp	r3, #32
 8002736:	f040 8250 	bne.w	8002bda <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2319      	movs	r3, #25
 8002740:	2201      	movs	r2, #1
 8002742:	4982      	ldr	r1, [pc, #520]	@ (800294c <HAL_I2C_Mem_Read+0x244>)
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fd21 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002750:	2302      	movs	r3, #2
 8002752:	e243      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_I2C_Mem_Read+0x5a>
 800275e:	2302      	movs	r3, #2
 8002760:	e23c      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d007      	beq.n	8002788 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2222      	movs	r2, #34	@ 0x22
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2240      	movs	r2, #64	@ 0x40
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80027b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a62      	ldr	r2, [pc, #392]	@ (8002950 <HAL_I2C_Mem_Read+0x248>)
 80027c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ca:	88f8      	ldrh	r0, [r7, #6]
 80027cc:	893a      	ldrh	r2, [r7, #8]
 80027ce:	8979      	ldrh	r1, [r7, #10]
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	4603      	mov	r3, r0
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fbee 	bl	8002fbc <I2C_RequestMemoryRead>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e1f8      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d113      	bne.n	800281a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e1cc      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281e:	2b01      	cmp	r3, #1
 8002820:	d11e      	bne.n	8002860 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002830:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002832:	b672      	cpsid	i
}
 8002834:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800285a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800285c:	b662      	cpsie	i
}
 800285e:	e035      	b.n	80028cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	2b02      	cmp	r3, #2
 8002866:	d11e      	bne.n	80028a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002876:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028a2:	b662      	cpsie	i
}
 80028a4:	e012      	b.n	80028cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80028cc:	e172      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	f200 811f 	bhi.w	8002b16 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d123      	bne.n	8002928 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fdfb 	bl	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e173      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002926:	e145      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	2b02      	cmp	r3, #2
 800292e:	d152      	bne.n	80029d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002936:	2200      	movs	r2, #0
 8002938:	4906      	ldr	r1, [pc, #24]	@ (8002954 <HAL_I2C_Mem_Read+0x24c>)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fc26 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e148      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
 800294a:	bf00      	nop
 800294c:	00100002 	.word	0x00100002
 8002950:	ffff0000 	.word	0xffff0000
 8002954:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800299e:	b662      	cpsie	i
}
 80029a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029d4:	e0ee      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029dc:	2200      	movs	r2, #0
 80029de:	4981      	ldr	r1, [pc, #516]	@ (8002be4 <HAL_I2C_Mem_Read+0x4dc>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fbd3 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0f5      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a00:	b672      	cpsid	i
}
 8002a02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a36:	4b6c      	ldr	r3, [pc, #432]	@ (8002be8 <HAL_I2C_Mem_Read+0x4e0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	08db      	lsrs	r3, r3, #3
 8002a3c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bec <HAL_I2C_Mem_Read+0x4e4>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0a1a      	lsrs	r2, r3, #8
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00da      	lsls	r2, r3, #3
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d118      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a7e:	b662      	cpsie	i
}
 8002a80:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0a6      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d1d9      	bne.n	8002a50 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ade:	b662      	cpsie	i
}
 8002ae0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b14:	e04e      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fce0 	bl	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e058      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d124      	bne.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d107      	bne.n	8002b82 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b80:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f ae88 	bne.w	80028ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3728      	adds	r7, #40	@ 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	00010004 	.word	0x00010004
 8002be8:	2000000c 	.word	0x2000000c
 8002bec:	14f8b589 	.word	0x14f8b589

08002bf0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d006      	beq.n	8002c1a <I2C_MasterRequestWrite+0x2a>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d003      	beq.n	8002c1a <I2C_MasterRequestWrite+0x2a>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c18:	d108      	bne.n	8002c2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e00b      	b.n	8002c44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	2b12      	cmp	r3, #18
 8002c32:	d107      	bne.n	8002c44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fa9b 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c6a:	d103      	bne.n	8002c74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e035      	b.n	8002ce4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c80:	d108      	bne.n	8002c94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	e01b      	b.n	8002ccc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	11db      	asrs	r3, r3, #7
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 0306 	and.w	r3, r3, #6
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f063 030f 	orn	r3, r3, #15
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	490e      	ldr	r1, [pc, #56]	@ (8002cec <I2C_MasterRequestWrite+0xfc>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fae4 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e010      	b.n	8002ce4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cc2:	897b      	ldrh	r3, [r7, #10]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4907      	ldr	r1, [pc, #28]	@ (8002cf0 <I2C_MasterRequestWrite+0x100>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fad4 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	00010008 	.word	0x00010008
 8002cf0:	00010002 	.word	0x00010002

08002cf4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	460b      	mov	r3, r1
 8002d02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d006      	beq.n	8002d2e <I2C_MasterRequestRead+0x3a>
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d003      	beq.n	8002d2e <I2C_MasterRequestRead+0x3a>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d2c:	d108      	bne.n	8002d40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e00b      	b.n	8002d58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d44:	2b11      	cmp	r3, #17
 8002d46:	d107      	bne.n	8002d58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fa11 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d7e:	d103      	bne.n	8002d88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e079      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d94:	d108      	bne.n	8002da8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	611a      	str	r2, [r3, #16]
 8002da6:	e05f      	b.n	8002e68 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002da8:	897b      	ldrh	r3, [r7, #10]
 8002daa:	11db      	asrs	r3, r3, #7
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0306 	and.w	r3, r3, #6
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f063 030f 	orn	r3, r3, #15
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4930      	ldr	r1, [pc, #192]	@ (8002e88 <I2C_MasterRequestRead+0x194>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fa5a 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e054      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4929      	ldr	r1, [pc, #164]	@ (8002e8c <I2C_MasterRequestRead+0x198>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa4a 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e044      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f9af 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e42:	d103      	bne.n	8002e4c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e017      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e50:	897b      	ldrh	r3, [r7, #10]
 8002e52:	11db      	asrs	r3, r3, #7
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f003 0306 	and.w	r3, r3, #6
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f063 030e 	orn	r3, r3, #14
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4907      	ldr	r1, [pc, #28]	@ (8002e8c <I2C_MasterRequestRead+0x198>)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fa06 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	00010008 	.word	0x00010008
 8002e8c:	00010002 	.word	0x00010002

08002e90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	4608      	mov	r0, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	817b      	strh	r3, [r7, #10]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	813b      	strh	r3, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f960 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00d      	beq.n	8002eee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ee0:	d103      	bne.n	8002eea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e05f      	b.n	8002fae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eee:	897b      	ldrh	r3, [r7, #10]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002efc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	6a3a      	ldr	r2, [r7, #32]
 8002f02:	492d      	ldr	r1, [pc, #180]	@ (8002fb8 <I2C_RequestMemoryWrite+0x128>)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f9bb 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e04c      	b.n	8002fae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2c:	6a39      	ldr	r1, [r7, #32]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fa46 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00d      	beq.n	8002f56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d107      	bne.n	8002f52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e02b      	b.n	8002fae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f5c:	893b      	ldrh	r3, [r7, #8]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	611a      	str	r2, [r3, #16]
 8002f66:	e021      	b.n	8002fac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f68:	893b      	ldrh	r3, [r7, #8]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f78:	6a39      	ldr	r1, [r7, #32]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fa20 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d107      	bne.n	8002f9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e005      	b.n	8002fae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa2:	893b      	ldrh	r3, [r7, #8]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	00010002 	.word	0x00010002

08002fbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	817b      	strh	r3, [r7, #10]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	813b      	strh	r3, [r7, #8]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fe4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f8c2 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301c:	d103      	bne.n	8003026 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003024:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0aa      	b.n	8003180 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800302a:	897b      	ldrh	r3, [r7, #10]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003038:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	4952      	ldr	r1, [pc, #328]	@ (8003188 <I2C_RequestMemoryRead+0x1cc>)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f91d 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e097      	b.n	8003180 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003068:	6a39      	ldr	r1, [r7, #32]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f9a8 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	2b04      	cmp	r3, #4
 800307c:	d107      	bne.n	800308e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e076      	b.n	8003180 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003098:	893b      	ldrh	r3, [r7, #8]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	611a      	str	r2, [r3, #16]
 80030a2:	e021      	b.n	80030e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030a4:	893b      	ldrh	r3, [r7, #8]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b4:	6a39      	ldr	r1, [r7, #32]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f982 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d107      	bne.n	80030da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e050      	b.n	8003180 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030de:	893b      	ldrh	r3, [r7, #8]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ea:	6a39      	ldr	r1, [r7, #32]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f967 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d107      	bne.n	8003110 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e035      	b.n	8003180 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003122:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2200      	movs	r2, #0
 800312c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f82b 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00d      	beq.n	8003158 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800314a:	d103      	bne.n	8003154 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e013      	b.n	8003180 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003158:	897b      	ldrh	r3, [r7, #10]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	6a3a      	ldr	r2, [r7, #32]
 800316c:	4906      	ldr	r1, [pc, #24]	@ (8003188 <I2C_RequestMemoryRead+0x1cc>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f886 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	00010002 	.word	0x00010002

0800318c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319c:	e048      	b.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d044      	beq.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fe f9ab 	bl	8001500 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d139      	bne.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	0c1b      	lsrs	r3, r3, #16
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10d      	bne.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	43da      	mvns	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	e00c      	b.n	80031fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d116      	bne.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e023      	b.n	8003278 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	0c1b      	lsrs	r3, r3, #16
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10d      	bne.n	8003256 <I2C_WaitOnFlagUntilTimeout+0xca>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	43da      	mvns	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4013      	ands	r3, r2
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	e00c      	b.n	8003270 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	43da      	mvns	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	429a      	cmp	r2, r3
 8003274:	d093      	beq.n	800319e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328e:	e071      	b.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329e:	d123      	bne.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e067      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d041      	beq.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7fe f906 	bl	8001500 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d136      	bne.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10c      	bne.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e00b      	b.n	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	43da      	mvns	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e021      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	0c1b      	lsrs	r3, r3, #16
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d10c      	bne.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	43da      	mvns	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4013      	ands	r3, r2
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e00b      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf14      	ite	ne
 80033aa:	2301      	movne	r3, #1
 80033ac:	2300      	moveq	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f af6d 	bne.w	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033cc:	e034      	b.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f8e3 	bl	800359a <I2C_IsAcknowledgeFailed>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e034      	b.n	8003448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d028      	beq.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe f88b 	bl	8001500 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11d      	bne.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b80      	cmp	r3, #128	@ 0x80
 8003408:	d016      	beq.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d1c3      	bne.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800345c:	e034      	b.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f89b 	bl	800359a <I2C_IsAcknowledgeFailed>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e034      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d028      	beq.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe f843 	bl	8001500 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11d      	bne.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d016      	beq.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d1c3      	bne.n	800345e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034ec:	e049      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d119      	bne.n	8003530 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0210 	mvn.w	r2, #16
 8003504:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e030      	b.n	8003592 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7fd ffe6 	bl	8001500 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11d      	bne.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003550:	2b40      	cmp	r3, #64	@ 0x40
 8003552:	d016      	beq.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e007      	b.n	8003592 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d1ae      	bne.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b0:	d11b      	bne.n	80035ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f043 0204 	orr.w	r2, r3, #4
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80035fc:	4b03      	ldr	r3, [pc, #12]	@ (800360c <HAL_PWR_EnableBkUpAccess+0x14>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]
}
 8003602:	bf00      	nop
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	420e0020 	.word	0x420e0020

08003610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e272      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8087 	beq.w	800373e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003630:	4b92      	ldr	r3, [pc, #584]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b04      	cmp	r3, #4
 800363a:	d00c      	beq.n	8003656 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800363c:	4b8f      	ldr	r3, [pc, #572]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b08      	cmp	r3, #8
 8003646:	d112      	bne.n	800366e <HAL_RCC_OscConfig+0x5e>
 8003648:	4b8c      	ldr	r3, [pc, #560]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003654:	d10b      	bne.n	800366e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003656:	4b89      	ldr	r3, [pc, #548]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d06c      	beq.n	800373c <HAL_RCC_OscConfig+0x12c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d168      	bne.n	800373c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e24c      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003676:	d106      	bne.n	8003686 <HAL_RCC_OscConfig+0x76>
 8003678:	4b80      	ldr	r3, [pc, #512]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a7f      	ldr	r2, [pc, #508]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 800367e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	e02e      	b.n	80036e4 <HAL_RCC_OscConfig+0xd4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x98>
 800368e:	4b7b      	ldr	r3, [pc, #492]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a7a      	ldr	r2, [pc, #488]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b78      	ldr	r3, [pc, #480]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a77      	ldr	r2, [pc, #476]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80036a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e01d      	b.n	80036e4 <HAL_RCC_OscConfig+0xd4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0xbc>
 80036b2:	4b72      	ldr	r3, [pc, #456]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a71      	ldr	r2, [pc, #452]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80036b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b6f      	ldr	r3, [pc, #444]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a6e      	ldr	r2, [pc, #440]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e00b      	b.n	80036e4 <HAL_RCC_OscConfig+0xd4>
 80036cc:	4b6b      	ldr	r3, [pc, #428]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6a      	ldr	r2, [pc, #424]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b68      	ldr	r3, [pc, #416]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a67      	ldr	r2, [pc, #412]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fd ff08 	bl	8001500 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fd ff04 	bl	8001500 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	@ 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e200      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	4b5d      	ldr	r3, [pc, #372]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0xe4>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fd fef4 	bl	8001500 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fd fef0 	bl	8001500 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	@ 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e1ec      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	4b53      	ldr	r3, [pc, #332]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x10c>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d063      	beq.n	8003812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800374a:	4b4c      	ldr	r3, [pc, #304]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003756:	4b49      	ldr	r3, [pc, #292]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b08      	cmp	r3, #8
 8003760:	d11c      	bne.n	800379c <HAL_RCC_OscConfig+0x18c>
 8003762:	4b46      	ldr	r3, [pc, #280]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d116      	bne.n	800379c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376e:	4b43      	ldr	r3, [pc, #268]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_RCC_OscConfig+0x176>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e1c0      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003786:	4b3d      	ldr	r3, [pc, #244]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4939      	ldr	r1, [pc, #228]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	e03a      	b.n	8003812 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d020      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a4:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <HAL_RCC_OscConfig+0x270>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037aa:	f7fd fea9 	bl	8001500 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b2:	f7fd fea5 	bl	8001500 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e1a1      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b2a      	ldr	r3, [pc, #168]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4927      	ldr	r1, [pc, #156]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]
 80037e4:	e015      	b.n	8003812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <HAL_RCC_OscConfig+0x270>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fd fe88 	bl	8001500 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f4:	f7fd fe84 	bl	8001500 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e180      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	4b1d      	ldr	r3, [pc, #116]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d03a      	beq.n	8003894 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d019      	beq.n	800385a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003826:	4b17      	ldr	r3, [pc, #92]	@ (8003884 <HAL_RCC_OscConfig+0x274>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382c:	f7fd fe68 	bl	8001500 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003834:	f7fd fe64 	bl	8001500 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e160      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <HAL_RCC_OscConfig+0x26c>)
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003852:	2001      	movs	r0, #1
 8003854:	f000 fafe 	bl	8003e54 <RCC_Delay>
 8003858:	e01c      	b.n	8003894 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385a:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <HAL_RCC_OscConfig+0x274>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003860:	f7fd fe4e 	bl	8001500 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003866:	e00f      	b.n	8003888 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003868:	f7fd fe4a 	bl	8001500 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d908      	bls.n	8003888 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e146      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	42420000 	.word	0x42420000
 8003884:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003888:	4b92      	ldr	r3, [pc, #584]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e9      	bne.n	8003868 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a6 	beq.w	80039ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a2:	2300      	movs	r3, #0
 80038a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10d      	bne.n	80038ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b88      	ldr	r3, [pc, #544]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	4a87      	ldr	r2, [pc, #540]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	61d3      	str	r3, [r2, #28]
 80038be:	4b85      	ldr	r3, [pc, #532]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	4b82      	ldr	r3, [pc, #520]	@ (8003ad8 <HAL_RCC_OscConfig+0x4c8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d118      	bne.n	800390c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038da:	4b7f      	ldr	r3, [pc, #508]	@ (8003ad8 <HAL_RCC_OscConfig+0x4c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7e      	ldr	r2, [pc, #504]	@ (8003ad8 <HAL_RCC_OscConfig+0x4c8>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7fd fe0b 	bl	8001500 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ee:	f7fd fe07 	bl	8001500 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b64      	cmp	r3, #100	@ 0x64
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e103      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	4b75      	ldr	r3, [pc, #468]	@ (8003ad8 <HAL_RCC_OscConfig+0x4c8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x312>
 8003914:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6213      	str	r3, [r2, #32]
 8003920:	e02d      	b.n	800397e <HAL_RCC_OscConfig+0x36e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x334>
 800392a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a69      	ldr	r2, [pc, #420]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6213      	str	r3, [r2, #32]
 8003936:	4b67      	ldr	r3, [pc, #412]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4a66      	ldr	r2, [pc, #408]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	6213      	str	r3, [r2, #32]
 8003942:	e01c      	b.n	800397e <HAL_RCC_OscConfig+0x36e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b05      	cmp	r3, #5
 800394a:	d10c      	bne.n	8003966 <HAL_RCC_OscConfig+0x356>
 800394c:	4b61      	ldr	r3, [pc, #388]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4a60      	ldr	r2, [pc, #384]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	f043 0304 	orr.w	r3, r3, #4
 8003956:	6213      	str	r3, [r2, #32]
 8003958:	4b5e      	ldr	r3, [pc, #376]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6213      	str	r3, [r2, #32]
 8003964:	e00b      	b.n	800397e <HAL_RCC_OscConfig+0x36e>
 8003966:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6213      	str	r3, [r2, #32]
 8003972:	4b58      	ldr	r3, [pc, #352]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4a57      	ldr	r2, [pc, #348]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d015      	beq.n	80039b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003986:	f7fd fdbb 	bl	8001500 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fd fdb7 	bl	8001500 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0b1      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ee      	beq.n	800398e <HAL_RCC_OscConfig+0x37e>
 80039b0:	e014      	b.n	80039dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b2:	f7fd fda5 	bl	8001500 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fd fda1 	bl	8001500 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e09b      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	4b40      	ldr	r3, [pc, #256]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ee      	bne.n	80039ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d105      	bne.n	80039ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8087 	beq.w	8003b06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f8:	4b36      	ldr	r3, [pc, #216]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d061      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d146      	bne.n	8003a9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0c:	4b33      	ldr	r3, [pc, #204]	@ (8003adc <HAL_RCC_OscConfig+0x4cc>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a12:	f7fd fd75 	bl	8001500 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7fd fd71 	bl	8001500 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e06d      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2c:	4b29      	ldr	r3, [pc, #164]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a40:	d108      	bne.n	8003a54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a42:	4b24      	ldr	r3, [pc, #144]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4921      	ldr	r1, [pc, #132]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a54:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a19      	ldr	r1, [r3, #32]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	430b      	orrs	r3, r1
 8003a66:	491b      	ldr	r1, [pc, #108]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <HAL_RCC_OscConfig+0x4cc>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a72:	f7fd fd45 	bl	8001500 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7a:	f7fd fd41 	bl	8001500 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e03d      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a8c:	4b11      	ldr	r3, [pc, #68]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x46a>
 8003a98:	e035      	b.n	8003b06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <HAL_RCC_OscConfig+0x4cc>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fd fd2e 	bl	8001500 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fd fd2a 	bl	8001500 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e026      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x498>
 8003ac6:	e01e      	b.n	8003b06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e019      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <HAL_RCC_OscConfig+0x500>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000

08003b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0d0      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d910      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b67      	ldr	r3, [pc, #412]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0207 	bic.w	r2, r3, #7
 8003b3e:	4965      	ldr	r1, [pc, #404]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b63      	ldr	r3, [pc, #396]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0b8      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b70:	4b59      	ldr	r3, [pc, #356]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a58      	ldr	r2, [pc, #352]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b88:	4b53      	ldr	r3, [pc, #332]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a52      	ldr	r2, [pc, #328]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b50      	ldr	r3, [pc, #320]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	494d      	ldr	r1, [pc, #308]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d040      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b47      	ldr	r3, [pc, #284]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d115      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e073      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06b      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4936      	ldr	r1, [pc, #216]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7fd fc7c 	bl	8001500 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fd fc78 	bl	8001500 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e053      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 020c 	and.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1eb      	bne.n	8003c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b27      	ldr	r3, [pc, #156]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d210      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b24      	ldr	r3, [pc, #144]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	4922      	ldr	r1, [pc, #136]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e032      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b19      	ldr	r3, [pc, #100]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4916      	ldr	r1, [pc, #88]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c8e:	4b12      	ldr	r3, [pc, #72]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	490e      	ldr	r1, [pc, #56]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ca2:	f000 f821 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	490a      	ldr	r1, [pc, #40]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c8>)
 8003cb4:	5ccb      	ldrb	r3, [r1, r3]
 8003cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cba:	4a09      	ldr	r2, [pc, #36]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8003cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cbe:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f005 f92e 	bl	8008f24 <HAL_InitTick>

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	0800ff34 	.word	0x0800ff34
 8003ce0:	2000000c 	.word	0x2000000c
 8003ce4:	20000000 	.word	0x20000000

08003ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d02:	4b1e      	ldr	r3, [pc, #120]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d002      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x30>
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x36>
 8003d16:	e027      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d18:	4b19      	ldr	r3, [pc, #100]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d1a:	613b      	str	r3, [r7, #16]
      break;
 8003d1c:	e027      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	0c9b      	lsrs	r3, r3, #18
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	4a17      	ldr	r2, [pc, #92]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d28:	5cd3      	ldrb	r3, [r2, r3]
 8003d2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d010      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d36:	4b11      	ldr	r3, [pc, #68]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	0c5b      	lsrs	r3, r3, #17
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	4a11      	ldr	r2, [pc, #68]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
 8003d44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a0d      	ldr	r2, [pc, #52]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d4a:	fb03 f202 	mul.w	r2, r3, r2
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e004      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	613b      	str	r3, [r7, #16]
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d6a:	613b      	str	r3, [r7, #16]
      break;
 8003d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6e:	693b      	ldr	r3, [r7, #16]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	007a1200 	.word	0x007a1200
 8003d84:	0800dc68 	.word	0x0800dc68
 8003d88:	0800dc78 	.word	0x0800dc78
 8003d8c:	003d0900 	.word	0x003d0900

08003d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b02      	ldr	r3, [pc, #8]	@ (8003da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	2000000c 	.word	0x2000000c

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003da8:	f7ff fff2 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	@ (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	0800ff44 	.word	0x0800ff44

08003dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd0:	f7ff ffde 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	0adb      	lsrs	r3, r3, #11
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4903      	ldr	r1, [pc, #12]	@ (8003df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	0800ff44 	.word	0x0800ff44

08003df4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	220f      	movs	r2, #15
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <HAL_RCC_GetClockConfig+0x58>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0203 	and.w	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e10:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <HAL_RCC_GetClockConfig+0x58>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_RCC_GetClockConfig+0x58>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e28:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <HAL_RCC_GetClockConfig+0x58>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	08db      	lsrs	r3, r3, #3
 8003e2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_RCC_GetClockConfig+0x5c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0207 	and.w	r2, r3, #7
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40022000 	.word	0x40022000

08003e54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <RCC_Delay+0x34>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	@ (8003e8c <RCC_Delay+0x38>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0a5b      	lsrs	r3, r3, #9
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e70:	bf00      	nop
  }
  while (Delay --);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1e5a      	subs	r2, r3, #1
 8003e76:	60fa      	str	r2, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f9      	bne.n	8003e70 <RCC_Delay+0x1c>
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	10624dd3 	.word	0x10624dd3

08003e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d07d      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003eac:	2300      	movs	r3, #0
 8003eae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10d      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	61d3      	str	r3, [r2, #28]
 8003ec8:	4b49      	ldr	r3, [pc, #292]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed8:	4b46      	ldr	r3, [pc, #280]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d118      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee4:	4b43      	ldr	r3, [pc, #268]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a42      	ldr	r2, [pc, #264]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fb06 	bl	8001500 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef6:	e008      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef8:	f7fd fb02 	bl	8001500 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	@ 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e06d      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f16:	4b36      	ldr	r3, [pc, #216]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02e      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d027      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f34:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f44:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f4a:	4a29      	ldr	r2, [pc, #164]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d014      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fd fad1 	bl	8001500 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fd facd 	bl	8001500 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e036      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f78:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ee      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f84:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4917      	ldr	r1, [pc, #92]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4a13      	ldr	r2, [pc, #76]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	490b      	ldr	r1, [pc, #44]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fd2:	4b07      	ldr	r3, [pc, #28]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4904      	ldr	r1, [pc, #16]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	42420440 	.word	0x42420440

08003ffc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	2300      	movs	r3, #0
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b10      	cmp	r3, #16
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b10      	cmp	r3, #16
 8004022:	f200 808a 	bhi.w	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d045      	beq.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d075      	beq.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004032:	e082      	b.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004034:	4b46      	ldr	r3, [pc, #280]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800403a:	4b45      	ldr	r3, [pc, #276]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d07b      	beq.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	0c9b      	lsrs	r3, r3, #18
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	4a41      	ldr	r2, [pc, #260]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004050:	5cd3      	ldrb	r3, [r2, r3]
 8004052:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800405e:	4b3c      	ldr	r3, [pc, #240]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	0c5b      	lsrs	r3, r3, #17
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	4a3b      	ldr	r2, [pc, #236]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800406a:	5cd3      	ldrb	r3, [r2, r3]
 800406c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004078:	4a38      	ldr	r2, [pc, #224]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e004      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4a34      	ldr	r2, [pc, #208]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004094:	4b2e      	ldr	r3, [pc, #184]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040a0:	d102      	bne.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	61bb      	str	r3, [r7, #24]
      break;
 80040a6:	e04a      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	61bb      	str	r3, [r7, #24]
      break;
 80040b6:	e042      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80040b8:	4b25      	ldr	r3, [pc, #148]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c8:	d108      	bne.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80040d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e01f      	b.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e6:	d109      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80040e8:	4b19      	ldr	r3, [pc, #100]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80040f4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e00f      	b.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004106:	d11c      	bne.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004108:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d016      	beq.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004114:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004118:	61bb      	str	r3, [r7, #24]
      break;
 800411a:	e012      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800411c:	e011      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800411e:	f7ff fe55 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8004122:	4602      	mov	r2, r0
 8004124:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	0b9b      	lsrs	r3, r3, #14
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	3301      	adds	r3, #1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	61bb      	str	r3, [r7, #24]
      break;
 8004138:	e004      	b.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004142:	bf00      	nop
    }
  }
  return (frequency);
 8004144:	69bb      	ldr	r3, [r7, #24]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
 8004154:	0800dc7c 	.word	0x0800dc7c
 8004158:	0800dc8c 	.word	0x0800dc8c
 800415c:	007a1200 	.word	0x007a1200
 8004160:	003d0900 	.word	0x003d0900
 8004164:	aaaaaaab 	.word	0xaaaaaaab

08004168 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e07a      	b.n	8004274 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7c5b      	ldrb	r3, [r3, #17]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f004 fe08 	bl	8008da4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fb1d 	bl	80047da <HAL_RTC_WaitForSynchro>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e061      	b.n	8004274 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fbd6 	bl	8004962 <RTC_EnterInitMode>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2204      	movs	r2, #4
 80041c0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e056      	b.n	8004274 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0207 	bic.w	r2, r2, #7
 80041d4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80041de:	4b27      	ldr	r3, [pc, #156]	@ (800427c <HAL_RTC_Init+0x114>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	4a26      	ldr	r2, [pc, #152]	@ (800427c <HAL_RTC_Init+0x114>)
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80041ea:	4b24      	ldr	r3, [pc, #144]	@ (800427c <HAL_RTC_Init+0x114>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	4921      	ldr	r1, [pc, #132]	@ (800427c <HAL_RTC_Init+0x114>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d003      	beq.n	800420e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e00e      	b.n	800422c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800420e:	2001      	movs	r0, #1
 8004210:	f7ff fef4 	bl	8003ffc <HAL_RCCEx_GetPeriphCLKFreq>
 8004214:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d104      	bne.n	8004226 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2204      	movs	r2, #4
 8004220:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e026      	b.n	8004274 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b01      	subs	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	0c1a      	lsrs	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f002 020f 	and.w	r2, r2, #15
 8004238:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	b292      	uxth	r2, r2
 8004242:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fbb4 	bl	80049b2 <RTC_ExitInitMode>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2204      	movs	r2, #4
 8004254:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e00c      	b.n	8004274 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40006c00 	.word	0x40006c00

08004280 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_RTC_SetTime+0x20>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e080      	b.n	80043a6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	7c1b      	ldrb	r3, [r3, #16]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_RTC_SetTime+0x30>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e07a      	b.n	80043a6 <HAL_RTC_SetTime+0x126>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2202      	movs	r2, #2
 80042ba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d113      	bne.n	80042ea <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80042cc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	4619      	mov	r1, r3
 80042d6:	460b      	mov	r3, r1
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a5b      	subs	r3, r3, r1
 80042dc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80042de:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80042e4:	4413      	add	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e01e      	b.n	8004328 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fba4 	bl	8004a3c <RTC_Bcd2ToByte>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80042fc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	785b      	ldrb	r3, [r3, #1]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fb99 	bl	8004a3c <RTC_Bcd2ToByte>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004316:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	789b      	ldrb	r3, [r3, #2]
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fb8d 	bl	8004a3c <RTC_Bcd2ToByte>
 8004322:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004324:	4423      	add	r3, r4
 8004326:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004328:	6979      	ldr	r1, [r7, #20]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fab2 	bl	8004894 <RTC_WriteTimeCounter>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2204      	movs	r2, #4
 800433a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e02f      	b.n	80043a6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0205 	bic.w	r2, r2, #5
 8004354:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fac3 	bl	80048e2 <RTC_ReadAlarmCounter>
 800435c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d018      	beq.n	8004398 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	429a      	cmp	r2, r3
 800436c:	d214      	bcs.n	8004398 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004374:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004378:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800437a:	6939      	ldr	r1, [r7, #16]
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fac9 	bl	8004914 <RTC_WriteAlarmCounter>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2204      	movs	r2, #4
 800438c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e006      	b.n	80043a6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80043a4:	2300      	movs	r3, #0
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd90      	pop	{r4, r7, pc}
	...

080043b0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_RTC_GetTime+0x28>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0b5      	b.n	8004548 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0ac      	b.n	8004548 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fa20 	bl	8004834 <RTC_ReadTimeCounter>
 80043f4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4a55      	ldr	r2, [pc, #340]	@ (8004550 <HAL_RTC_GetTime+0x1a0>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	0adb      	lsrs	r3, r3, #11
 8004400:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4b52      	ldr	r3, [pc, #328]	@ (8004550 <HAL_RTC_GetTime+0x1a0>)
 8004406:	fba3 1302 	umull	r1, r3, r3, r2
 800440a:	0adb      	lsrs	r3, r3, #11
 800440c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	4a4f      	ldr	r2, [pc, #316]	@ (8004554 <HAL_RTC_GetTime+0x1a4>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	b2da      	uxtb	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	4a4a      	ldr	r2, [pc, #296]	@ (8004550 <HAL_RTC_GetTime+0x1a0>)
 8004428:	fba2 1203 	umull	r1, r2, r2, r3
 800442c:	0ad2      	lsrs	r2, r2, #11
 800442e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8004432:	fb01 f202 	mul.w	r2, r1, r2
 8004436:	1a9a      	subs	r2, r3, r2
 8004438:	4b46      	ldr	r3, [pc, #280]	@ (8004554 <HAL_RTC_GetTime+0x1a4>)
 800443a:	fba3 1302 	umull	r1, r3, r3, r2
 800443e:	0959      	lsrs	r1, r3, #5
 8004440:	460b      	mov	r3, r1
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a5b      	subs	r3, r3, r1
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	1ad1      	subs	r1, r2, r3
 800444a:	b2ca      	uxtb	r2, r1
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b17      	cmp	r3, #23
 8004454:	d955      	bls.n	8004502 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4a3f      	ldr	r2, [pc, #252]	@ (8004558 <HAL_RTC_GetTime+0x1a8>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004462:	6939      	ldr	r1, [r7, #16]
 8004464:	4b3c      	ldr	r3, [pc, #240]	@ (8004558 <HAL_RTC_GetTime+0x1a8>)
 8004466:	fba3 2301 	umull	r2, r3, r3, r1
 800446a:	091a      	lsrs	r2, r3, #4
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	1aca      	subs	r2, r1, r3
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fa30 	bl	80048e2 <RTC_ReadAlarmCounter>
 8004482:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d008      	beq.n	800449e <HAL_RTC_GetTime+0xee>
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	429a      	cmp	r2, r3
 8004492:	d904      	bls.n	800449e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	e002      	b.n	80044a4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	4a2d      	ldr	r2, [pc, #180]	@ (800455c <HAL_RTC_GetTime+0x1ac>)
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f9ed 	bl	8004894 <RTC_WriteTimeCounter>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e041      	b.n	8004548 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d00c      	beq.n	80044e6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	4413      	add	r3, r2
 80044d2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa1c 	bl	8004914 <RTC_WriteAlarmCounter>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e030      	b.n	8004548 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044e6:	69f9      	ldr	r1, [r7, #28]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fa13 	bl	8004914 <RTC_WriteAlarmCounter>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e027      	b.n	8004548 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80044f8:	6979      	ldr	r1, [r7, #20]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fabb 	bl	8004a76 <RTC_DateUpdate>
 8004500:	e003      	b.n	800450a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fa74 	bl	8004a02 <RTC_ByteToBcd2>
 800451a:	4603      	mov	r3, r0
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fa6b 	bl	8004a02 <RTC_ByteToBcd2>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	789b      	ldrb	r3, [r3, #2]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fa62 	bl	8004a02 <RTC_ByteToBcd2>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3720      	adds	r7, #32
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	91a2b3c5 	.word	0x91a2b3c5
 8004554:	88888889 	.word	0x88888889
 8004558:	aaaaaaab 	.word	0xaaaaaaab
 800455c:	00015180 	.word	0x00015180

08004560 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_RTC_SetDate+0x24>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e097      	b.n	80046b8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	7c1b      	ldrb	r3, [r3, #16]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_RTC_SetDate+0x34>
 8004590:	2302      	movs	r3, #2
 8004592:	e091      	b.n	80046b8 <HAL_RTC_SetDate+0x158>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2202      	movs	r2, #2
 800459e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10c      	bne.n	80045c0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	78da      	ldrb	r2, [r3, #3]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	785a      	ldrb	r2, [r3, #1]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	789a      	ldrb	r2, [r3, #2]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	739a      	strb	r2, [r3, #14]
 80045be:	e01a      	b.n	80045f6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	78db      	ldrb	r3, [r3, #3]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fa39 	bl	8004a3c <RTC_Bcd2ToByte>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	785b      	ldrb	r3, [r3, #1]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fa30 	bl	8004a3c <RTC_Bcd2ToByte>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	789b      	ldrb	r3, [r3, #2]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fa27 	bl	8004a3c <RTC_Bcd2ToByte>
 80045ee:	4603      	mov	r3, r0
 80045f0:	461a      	mov	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	7bdb      	ldrb	r3, [r3, #15]
 80045fa:	4618      	mov	r0, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	7b59      	ldrb	r1, [r3, #13]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	7b9b      	ldrb	r3, [r3, #14]
 8004604:	461a      	mov	r2, r3
 8004606:	f000 fb11 	bl	8004c2c <RTC_WeekDayNum>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	7b1a      	ldrb	r2, [r3, #12]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f90a 	bl	8004834 <RTC_ReadTimeCounter>
 8004620:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	4a26      	ldr	r2, [pc, #152]	@ (80046c0 <HAL_RTC_SetDate+0x160>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	0adb      	lsrs	r3, r3, #11
 800462c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b18      	cmp	r3, #24
 8004632:	d93a      	bls.n	80046aa <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4a23      	ldr	r2, [pc, #140]	@ (80046c4 <HAL_RTC_SetDate+0x164>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	4a22      	ldr	r2, [pc, #136]	@ (80046c8 <HAL_RTC_SetDate+0x168>)
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800464a:	69f9      	ldr	r1, [r7, #28]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f921 	bl	8004894 <RTC_WriteTimeCounter>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2204      	movs	r2, #4
 800465c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e027      	b.n	80046b8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f93a 	bl	80048e2 <RTC_ReadAlarmCounter>
 800466e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d018      	beq.n	80046aa <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	429a      	cmp	r2, r3
 800467e:	d214      	bcs.n	80046aa <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004686:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800468a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800468c:	69b9      	ldr	r1, [r7, #24]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f940 	bl	8004914 <RTC_WriteAlarmCounter>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2204      	movs	r2, #4
 800469e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e006      	b.n	80046b8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	91a2b3c5 	.word	0x91a2b3c5
 80046c4:	aaaaaaab 	.word	0xaaaaaaab
 80046c8:	00015180 	.word	0x00015180

080046cc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80046d8:	f107 0314 	add.w	r3, r7, #20
 80046dc:	2100      	movs	r1, #0
 80046de:	460a      	mov	r2, r1
 80046e0:	801a      	strh	r2, [r3, #0]
 80046e2:	460a      	mov	r2, r1
 80046e4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_RTC_GetDate+0x26>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e03a      	b.n	800476c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80046f6:	f107 0314 	add.w	r3, r7, #20
 80046fa:	2200      	movs	r2, #0
 80046fc:	4619      	mov	r1, r3
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff fe56 	bl	80043b0 <HAL_RTC_GetTime>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e02e      	b.n	800476c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	7b1a      	ldrb	r2, [r3, #12]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	7bda      	ldrb	r2, [r3, #15]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	7b5a      	ldrb	r2, [r3, #13]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	7b9a      	ldrb	r2, [r3, #14]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01a      	beq.n	800476a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	78db      	ldrb	r3, [r3, #3]
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f962 	bl	8004a02 <RTC_ByteToBcd2>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f959 	bl	8004a02 <RTC_ByteToBcd2>
 8004750:	4603      	mov	r3, r0
 8004752:	461a      	mov	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	789b      	ldrb	r3, [r3, #2]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f950 	bl	8004a02 <RTC_ByteToBcd2>
 8004762:	4603      	mov	r3, r0
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d011      	beq.n	80047ae <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f815 	bl	80047c8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0202 	bic.w	r2, r2, #2
 80047ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80047ae:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <HAL_RTC_AlarmIRQHandler+0x50>)
 80047b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047b4:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	745a      	strb	r2, [r3, #17]
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40010400 	.word	0x40010400

080047c8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e01d      	b.n	800482c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0208 	bic.w	r2, r2, #8
 80047fe:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004800:	f7fc fe7e 	bl	8001500 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004806:	e009      	b.n	800481c <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004808:	f7fc fe7a 	bl	8001500 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004816:	d901      	bls.n	800481c <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e007      	b.n	800482c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0ee      	beq.n	8004808 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	827b      	strh	r3, [r7, #18]
 8004840:	2300      	movs	r3, #0
 8004842:	823b      	strh	r3, [r7, #16]
 8004844:	2300      	movs	r3, #0
 8004846:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004864:	8a7a      	ldrh	r2, [r7, #18]
 8004866:	8a3b      	ldrh	r3, [r7, #16]
 8004868:	429a      	cmp	r2, r3
 800486a:	d008      	beq.n	800487e <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800486c:	8a3b      	ldrh	r3, [r7, #16]
 800486e:	041a      	lsls	r2, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	b29b      	uxth	r3, r3
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e004      	b.n	8004888 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800487e:	8a7b      	ldrh	r3, [r7, #18]
 8004880:	041a      	lsls	r2, r3, #16
 8004882:	89fb      	ldrh	r3, [r7, #14]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004888:	697b      	ldr	r3, [r7, #20]
}
 800488a:	4618      	mov	r0, r3
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f85d 	bl	8004962 <RTC_EnterInitMode>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	e011      	b.n	80048d8 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	0c12      	lsrs	r2, r2, #16
 80048bc:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	b292      	uxth	r2, r2
 80048c6:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f872 	bl	80049b2 <RTC_ExitInitMode>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	81fb      	strh	r3, [r7, #14]
 80048ee:	2300      	movs	r3, #0
 80048f0:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004902:	89fb      	ldrh	r3, [r7, #14]
 8004904:	041a      	lsls	r2, r3, #16
 8004906:	89bb      	ldrh	r3, [r7, #12]
 8004908:	4313      	orrs	r3, r2
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f81d 	bl	8004962 <RTC_EnterInitMode>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
 8004932:	e011      	b.n	8004958 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	0c12      	lsrs	r2, r2, #16
 800493c:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	b292      	uxth	r2, r2
 8004946:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f832 	bl	80049b2 <RTC_ExitInitMode>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800496e:	f7fc fdc7 	bl	8001500 <HAL_GetTick>
 8004972:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004974:	e009      	b.n	800498a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004976:	f7fc fdc3 	bl	8001500 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004984:	d901      	bls.n	800498a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00f      	b.n	80049aa <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0ee      	beq.n	8004976 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0210 	orr.w	r2, r2, #16
 80049a6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0210 	bic.w	r2, r2, #16
 80049cc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80049ce:	f7fc fd97 	bl	8001500 <HAL_GetTick>
 80049d2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049d4:	e009      	b.n	80049ea <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80049d6:	f7fc fd93 	bl	8001500 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049e4:	d901      	bls.n	80049ea <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e007      	b.n	80049fa <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ee      	beq.n	80049d6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	4603      	mov	r3, r0
 8004a0a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004a10:	e005      	b.n	8004a1e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3301      	adds	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	3b0a      	subs	r3, #10
 8004a1c:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	2b09      	cmp	r3, #9
 8004a22:	d8f6      	bhi.n	8004a12 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	b2db      	uxtb	r3, r3
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	b2db      	uxtb	r3, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7bdb      	ldrb	r3, [r3, #15]
 8004a94:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	7b5b      	ldrb	r3, [r3, #13]
 8004a9a:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	7b9b      	ldrb	r3, [r3, #14]
 8004aa0:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	e06f      	b.n	8004b88 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d011      	beq.n	8004ad2 <RTC_DateUpdate+0x5c>
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d00e      	beq.n	8004ad2 <RTC_DateUpdate+0x5c>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d00b      	beq.n	8004ad2 <RTC_DateUpdate+0x5c>
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	d008      	beq.n	8004ad2 <RTC_DateUpdate+0x5c>
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d005      	beq.n	8004ad2 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b0a      	cmp	r3, #10
 8004aca:	d002      	beq.n	8004ad2 <RTC_DateUpdate+0x5c>
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b0c      	cmp	r3, #12
 8004ad0:	d117      	bne.n	8004b02 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b1e      	cmp	r3, #30
 8004ad6:	d803      	bhi.n	8004ae0 <RTC_DateUpdate+0x6a>
      {
        day++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3301      	adds	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004ade:	e050      	b.n	8004b82 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2b0c      	cmp	r3, #12
 8004ae4:	d005      	beq.n	8004af2 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004aec:	2301      	movs	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004af0:	e047      	b.n	8004b82 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004af2:	2301      	movs	r3, #1
 8004af4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004af6:	2301      	movs	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
          year++;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	3301      	adds	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004b00:	e03f      	b.n	8004b82 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d008      	beq.n	8004b1a <RTC_DateUpdate+0xa4>
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d005      	beq.n	8004b1a <RTC_DateUpdate+0xa4>
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b09      	cmp	r3, #9
 8004b12:	d002      	beq.n	8004b1a <RTC_DateUpdate+0xa4>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b0b      	cmp	r3, #11
 8004b18:	d10c      	bne.n	8004b34 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b1d      	cmp	r3, #29
 8004b1e:	d803      	bhi.n	8004b28 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004b26:	e02c      	b.n	8004b82 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004b32:	e026      	b.n	8004b82 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d123      	bne.n	8004b82 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b1b      	cmp	r3, #27
 8004b3e:	d803      	bhi.n	8004b48 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e01c      	b.n	8004b82 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b1c      	cmp	r3, #28
 8004b4c:	d111      	bne.n	8004b72 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f838 	bl	8004bc8 <RTC_IsLeapYear>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3301      	adds	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e00d      	b.n	8004b82 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e007      	b.n	8004b82 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b1d      	cmp	r3, #29
 8004b76:	d104      	bne.n	8004b82 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d38b      	bcc.n	8004aa8 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6978      	ldr	r0, [r7, #20]
 8004bb4:	f000 f83a 	bl	8004c2c <RTC_WeekDayNum>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	731a      	strb	r2, [r3, #12]
}
 8004bc0:	bf00      	nop
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e01d      	b.n	8004c1e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	4a10      	ldr	r2, [pc, #64]	@ (8004c28 <RTC_IsLeapYear+0x60>)
 8004be6:	fba2 1203 	umull	r1, r2, r2, r3
 8004bea:	0952      	lsrs	r2, r2, #5
 8004bec:	2164      	movs	r1, #100	@ 0x64
 8004bee:	fb01 f202 	mul.w	r2, r1, r2
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e00f      	b.n	8004c1e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	4a09      	ldr	r2, [pc, #36]	@ (8004c28 <RTC_IsLeapYear+0x60>)
 8004c02:	fba2 1203 	umull	r1, r2, r2, r3
 8004c06:	09d2      	lsrs	r2, r2, #7
 8004c08:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004c0c:	fb01 f202 	mul.w	r2, r1, r2
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004c1c:	2300      	movs	r3, #0
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr
 8004c28:	51eb851f 	.word	0x51eb851f

08004c2c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004c4a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d82d      	bhi.n	8004cae <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	4613      	mov	r3, r2
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	4413      	add	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d10 <RTC_WeekDayNum+0xe4>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	085a      	lsrs	r2, r3, #1
 8004c66:	78bb      	ldrb	r3, [r7, #2]
 8004c68:	441a      	add	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	089b      	lsrs	r3, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	4926      	ldr	r1, [pc, #152]	@ (8004d14 <RTC_WeekDayNum+0xe8>)
 8004c7c:	fba1 1303 	umull	r1, r3, r1, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	1ad2      	subs	r2, r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	4922      	ldr	r1, [pc, #136]	@ (8004d14 <RTC_WeekDayNum+0xe8>)
 8004c8a:	fba1 1303 	umull	r1, r3, r1, r3
 8004c8e:	09db      	lsrs	r3, r3, #7
 8004c90:	4413      	add	r3, r2
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <RTC_WeekDayNum+0xec>)
 8004c96:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9a:	1ad1      	subs	r1, r2, r3
 8004c9c:	0849      	lsrs	r1, r1, #1
 8004c9e:	440b      	add	r3, r1
 8004ca0:	0899      	lsrs	r1, r3, #2
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	1a5b      	subs	r3, r3, r1
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	e029      	b.n	8004d02 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	4a15      	ldr	r2, [pc, #84]	@ (8004d10 <RTC_WeekDayNum+0xe4>)
 8004cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc0:	085a      	lsrs	r2, r3, #1
 8004cc2:	78bb      	ldrb	r3, [r7, #2]
 8004cc4:	441a      	add	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	441a      	add	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4910      	ldr	r1, [pc, #64]	@ (8004d14 <RTC_WeekDayNum+0xe8>)
 8004cd4:	fba1 1303 	umull	r1, r3, r1, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	1ad2      	subs	r2, r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	490d      	ldr	r1, [pc, #52]	@ (8004d14 <RTC_WeekDayNum+0xe8>)
 8004ce0:	fba1 1303 	umull	r1, r3, r1, r3
 8004ce4:	09db      	lsrs	r3, r3, #7
 8004ce6:	4413      	add	r3, r2
 8004ce8:	1c9a      	adds	r2, r3, #2
 8004cea:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <RTC_WeekDayNum+0xec>)
 8004cec:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf0:	1ad1      	subs	r1, r2, r3
 8004cf2:	0849      	lsrs	r1, r1, #1
 8004cf4:	440b      	add	r3, r1
 8004cf6:	0899      	lsrs	r1, r3, #2
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	1a5b      	subs	r3, r3, r1
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	b2db      	uxtb	r3, r3
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr
 8004d10:	38e38e39 	.word	0x38e38e39
 8004d14:	51eb851f 	.word	0x51eb851f
 8004d18:	24924925 	.word	0x24924925

08004d1c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8004d2c:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <HAL_RTCEx_BKUPWrite+0x30>)
 8004d2e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4413      	add	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	b292      	uxth	r2, r2
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	40006c00 	.word	0x40006c00

08004d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e041      	b.n	8004de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f839 	bl	8004dee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f000 f99c 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d001      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e03a      	b.n	8004e8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a18      	ldr	r2, [pc, #96]	@ (8004e98 <HAL_TIM_Base_Start_IT+0x98>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x58>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e42:	d009      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x58>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a14      	ldr	r2, [pc, #80]	@ (8004e9c <HAL_TIM_Base_Start_IT+0x9c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x58>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a13      	ldr	r2, [pc, #76]	@ (8004ea0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d111      	bne.n	8004e7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b06      	cmp	r3, #6
 8004e68:	d010      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	e007      	b.n	8004e8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800

08004ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d020      	beq.n	8004f08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01b      	beq.n	8004f08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0202 	mvn.w	r2, #2
 8004ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f8d1 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8c4 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f8d3 	bl	80050a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d020      	beq.n	8004f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01b      	beq.n	8004f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0204 	mvn.w	r2, #4
 8004f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8ab 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004f40:	e005      	b.n	8004f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f89e 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f8ad 	bl	80050a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d020      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01b      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0208 	mvn.w	r2, #8
 8004f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2204      	movs	r2, #4
 8004f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f885 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f878 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f887 	bl	80050a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d020      	beq.n	8004fec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01b      	beq.n	8004fec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0210 	mvn.w	r2, #16
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f85f 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f852 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f861 	bl	80050a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0201 	mvn.w	r2, #1
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f002 fbde 	bl	80077cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00c      	beq.n	8005034 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005020:	2b00      	cmp	r3, #0
 8005022:	d007      	beq.n	8005034 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800502c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f8c3 	bl	80051ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f831 	bl	80050ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00c      	beq.n	800507c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0220 	mvn.w	r2, #32
 8005074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f896 	bl	80051a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800507c:	bf00      	nop
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr

080050ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a2f      	ldr	r2, [pc, #188]	@ (800519c <TIM_Base_SetConfig+0xd0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x30>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x30>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a2c      	ldr	r2, [pc, #176]	@ (80051a0 <TIM_Base_SetConfig+0xd4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x30>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a2b      	ldr	r2, [pc, #172]	@ (80051a4 <TIM_Base_SetConfig+0xd8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a22      	ldr	r2, [pc, #136]	@ (800519c <TIM_Base_SetConfig+0xd0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0x62>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0x62>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1f      	ldr	r2, [pc, #124]	@ (80051a0 <TIM_Base_SetConfig+0xd4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0x62>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1e      	ldr	r2, [pc, #120]	@ (80051a4 <TIM_Base_SetConfig+0xd8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a0d      	ldr	r2, [pc, #52]	@ (800519c <TIM_Base_SetConfig+0xd0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f023 0201 	bic.w	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	611a      	str	r2, [r3, #16]
  }
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40000400 	.word	0x40000400
 80051a4:	40000800 	.word	0x40000800

080051a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e042      	b.n	8005264 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f003 fe02 	bl	8008dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2224      	movs	r2, #36	@ 0x24
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800520e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fdb7 	bl	8005d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	@ 0x28
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b20      	cmp	r3, #32
 800528a:	d175      	bne.n	8005378 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_UART_Transmit+0x2c>
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e06e      	b.n	800537a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2221      	movs	r2, #33	@ 0x21
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052aa:	f7fc f929 	bl	8001500 <HAL_GetTick>
 80052ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	88fa      	ldrh	r2, [r7, #6]
 80052ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c4:	d108      	bne.n	80052d8 <HAL_UART_Transmit+0x6c>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	e003      	b.n	80052e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052e0:	e02e      	b.n	8005340 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	2180      	movs	r1, #128	@ 0x80
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fb1c 	bl	800592a <UART_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e03a      	b.n	800537a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005318:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	3302      	adds	r3, #2
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e007      	b.n	8005332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1cb      	bne.n	80052e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2200      	movs	r2, #0
 8005352:	2140      	movs	r1, #64	@ 0x40
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fae8 	bl	800592a <UART_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e006      	b.n	800537a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	e000      	b.n	800537a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005378:	2302      	movs	r3, #2
  }
}
 800537a:	4618      	mov	r0, r3
 800537c:	3720      	adds	r7, #32
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	4613      	mov	r3, r2
 800538e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b20      	cmp	r3, #32
 800539a:	d112      	bne.n	80053c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_UART_Receive_IT+0x26>
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e00b      	b.n	80053c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	461a      	mov	r2, r3
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fb0f 	bl	80059dc <UART_Start_Receive_IT>
 80053be:	4603      	mov	r3, r0
 80053c0:	e000      	b.n	80053c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b0ba      	sub	sp, #232	@ 0xe8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800540a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_UART_IRQHandler+0x66>
 800541e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fbec 	bl	8005c08 <UART_Receive_IT>
      return;
 8005430:	e25b      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 80de 	beq.w	80055f8 <HAL_UART_IRQHandler+0x22c>
 800543c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80d1 	beq.w	80055f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <HAL_UART_IRQHandler+0xae>
 8005462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f043 0201 	orr.w	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_UART_IRQHandler+0xd2>
 8005486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005496:	f043 0202 	orr.w	r2, r3, #2
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800549e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <HAL_UART_IRQHandler+0xf6>
 80054aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	f043 0204 	orr.w	r2, r3, #4
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d011      	beq.n	80054f2 <HAL_UART_IRQHandler+0x126>
 80054ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d105      	bne.n	80054e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f043 0208 	orr.w	r2, r3, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 81f2 	beq.w	80058e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_UART_IRQHandler+0x14e>
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb77 	bl	8005c08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <HAL_UART_IRQHandler+0x17a>
 800553e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d04f      	beq.n	80055e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa81 	bl	8005a4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d041      	beq.n	80055de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3314      	adds	r3, #20
 8005560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3314      	adds	r3, #20
 8005582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005586:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800558a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800559e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1d9      	bne.n	800555a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d013      	beq.n	80055d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b2:	4a7e      	ldr	r2, [pc, #504]	@ (80057ac <HAL_UART_IRQHandler+0x3e0>)
 80055b4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fc f8e8 	bl	8001790 <HAL_DMA_Abort_IT>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	e00e      	b.n	80055f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f993 	bl	8005902 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	e00a      	b.n	80055f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f98f 	bl	8005902 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	e006      	b.n	80055f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f98b 	bl	8005902 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055f2:	e175      	b.n	80058e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	bf00      	nop
    return;
 80055f6:	e173      	b.n	80058e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	f040 814f 	bne.w	80058a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8148 	beq.w	80058a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8141 	beq.w	80058a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80b6 	beq.w	80057b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8145 	beq.w	80058e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800565e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005662:	429a      	cmp	r2, r3
 8005664:	f080 813e 	bcs.w	80058e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800566e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b20      	cmp	r3, #32
 8005678:	f000 8088 	beq.w	800578c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005692:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005696:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800569a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056a8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1d9      	bne.n	800567c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056da:	f023 0301 	bic.w	r3, r3, #1
 80056de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3314      	adds	r3, #20
 80056e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e1      	bne.n	80056c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005714:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800571a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005728:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800572a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800572e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005736:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e3      	bne.n	8005704 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800575a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800575c:	f023 0310 	bic.w	r3, r3, #16
 8005760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800576e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005770:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005774:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800577c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e3      	bne.n	800574a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005786:	4618      	mov	r0, r3
 8005788:	f7fb ffc7 	bl	800171a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800579a:	b29b      	uxth	r3, r3
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	b29b      	uxth	r3, r3
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f8b6 	bl	8005914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057a8:	e09c      	b.n	80058e4 <HAL_UART_IRQHandler+0x518>
 80057aa:	bf00      	nop
 80057ac:	08005b13 	.word	0x08005b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 808e 	beq.w	80058e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8089 	beq.w	80058e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80057fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005800:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e3      	bne.n	80057d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	623b      	str	r3, [r7, #32]
   return(result);
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005832:	633a      	str	r2, [r7, #48]	@ 0x30
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e3      	bne.n	800580e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60fb      	str	r3, [r7, #12]
   return(result);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005878:	61fa      	str	r2, [r7, #28]
 800587a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	69b9      	ldr	r1, [r7, #24]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	617b      	str	r3, [r7, #20]
   return(result);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e3      	bne.n	8005854 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f83b 	bl	8005914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800589e:	e023      	b.n	80058e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d009      	beq.n	80058c0 <HAL_UART_IRQHandler+0x4f4>
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f93e 	bl	8005b3a <UART_Transmit_IT>
    return;
 80058be:	e014      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <HAL_UART_IRQHandler+0x51e>
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f97d 	bl	8005bd8 <UART_EndTransmit_IT>
    return;
 80058de:	e004      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
    return;
 80058e0:	bf00      	nop
 80058e2:	e002      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
      return;
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
      return;
 80058e8:	bf00      	nop
  }
}
 80058ea:	37e8      	adds	r7, #232	@ 0xe8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr

08005902 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr

0800592a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b086      	sub	sp, #24
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	4613      	mov	r3, r2
 8005938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800593a:	e03b      	b.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005942:	d037      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005944:	f7fb fddc 	bl	8001500 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	6a3a      	ldr	r2, [r7, #32]
 8005950:	429a      	cmp	r2, r3
 8005952:	d302      	bcc.n	800595a <UART_WaitOnFlagUntilTimeout+0x30>
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e03a      	b.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d023      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b80      	cmp	r3, #128	@ 0x80
 8005970:	d020      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b40      	cmp	r3, #64	@ 0x40
 8005976:	d01d      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b08      	cmp	r3, #8
 8005984:	d116      	bne.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f856 	bl	8005a4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2208      	movs	r2, #8
 80059a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e00f      	b.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4013      	ands	r3, r2
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d0b4      	beq.n	800593c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2222      	movs	r2, #34	@ 0x22
 8005a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695a      	ldr	r2, [r3, #20]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0220 	orr.w	r2, r2, #32
 8005a40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b095      	sub	sp, #84	@ 0x54
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a76:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e5      	bne.n	8005a56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3314      	adds	r3, #20
 8005a90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e5      	bne.n	8005a8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d119      	bne.n	8005afa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f023 0310 	bic.w	r3, r3, #16
 8005adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ae6:	61ba      	str	r2, [r7, #24]
 8005ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6979      	ldr	r1, [r7, #20]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	613b      	str	r3, [r7, #16]
   return(result);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b08:	bf00      	nop
 8005b0a:	3754      	adds	r7, #84	@ 0x54
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff fee8 	bl	8005902 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b21      	cmp	r3, #33	@ 0x21
 8005b4c:	d13e      	bne.n	8005bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b56:	d114      	bne.n	8005b82 <UART_Transmit_IT+0x48>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d110      	bne.n	8005b82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	1c9a      	adds	r2, r3, #2
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	621a      	str	r2, [r3, #32]
 8005b80:	e008      	b.n	8005b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6211      	str	r1, [r2, #32]
 8005b8c:	781a      	ldrb	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10f      	bne.n	8005bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e000      	b.n	8005bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
  }
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff fe79 	bl	80058f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08c      	sub	sp, #48	@ 0x30
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b22      	cmp	r3, #34	@ 0x22
 8005c1a:	f040 80ae 	bne.w	8005d7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c26:	d117      	bne.n	8005c58 <UART_Receive_IT+0x50>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d113      	bne.n	8005c58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c50:	1c9a      	adds	r2, r3, #2
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c56:	e026      	b.n	8005ca6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6a:	d007      	beq.n	8005c7c <UART_Receive_IT+0x74>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <UART_Receive_IT+0x82>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	e008      	b.n	8005c9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d15d      	bne.n	8005d76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0220 	bic.w	r2, r2, #32
 8005cc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d135      	bne.n	8005d6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	613b      	str	r3, [r7, #16]
   return(result);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f023 0310 	bic.w	r3, r3, #16
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d26:	623a      	str	r2, [r7, #32]
 8005d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	69f9      	ldr	r1, [r7, #28]
 8005d2c:	6a3a      	ldr	r2, [r7, #32]
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e5      	bne.n	8005d06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d10a      	bne.n	8005d5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff fdd5 	bl	8005914 <HAL_UARTEx_RxEventCallback>
 8005d6a:	e002      	b.n	8005d72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f001 fc81 	bl	8007674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e002      	b.n	8005d7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e000      	b.n	8005d7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d7a:	2302      	movs	r3, #2
  }
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3730      	adds	r7, #48	@ 0x30
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005dbe:	f023 030c 	bic.w	r3, r3, #12
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2c      	ldr	r2, [pc, #176]	@ (8005e98 <UART_SetConfig+0x114>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d103      	bne.n	8005df4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dec:	f7fd ffee 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	e002      	b.n	8005dfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7fd ffd6 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005df8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009a      	lsls	r2, r3, #2
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	4a22      	ldr	r2, [pc, #136]	@ (8005e9c <UART_SetConfig+0x118>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	0119      	lsls	r1, r3, #4
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	009a      	lsls	r2, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e30:	4b1a      	ldr	r3, [pc, #104]	@ (8005e9c <UART_SetConfig+0x118>)
 8005e32:	fba3 0302 	umull	r0, r3, r3, r2
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	2064      	movs	r0, #100	@ 0x64
 8005e3a:	fb00 f303 	mul.w	r3, r0, r3
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	3332      	adds	r3, #50	@ 0x32
 8005e44:	4a15      	ldr	r2, [pc, #84]	@ (8005e9c <UART_SetConfig+0x118>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e50:	4419      	add	r1, r3
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009a      	lsls	r2, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e68:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <UART_SetConfig+0x118>)
 8005e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	2064      	movs	r0, #100	@ 0x64
 8005e72:	fb00 f303 	mul.w	r3, r0, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	3332      	adds	r3, #50	@ 0x32
 8005e7c:	4a07      	ldr	r2, [pc, #28]	@ (8005e9c <UART_SetConfig+0x118>)
 8005e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	f003 020f 	and.w	r2, r3, #15
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40013800 	.word	0x40013800
 8005e9c:	51eb851f 	.word	0x51eb851f

08005ea0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eb2:	2b84      	cmp	r3, #132	@ 0x84
 8005eb4:	d005      	beq.n	8005ec2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005eb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3303      	adds	r3, #3
 8005ec0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr

08005ece <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ed2:	f000 fadf 	bl	8006494 <vTaskStartScheduler>
  
  return osOK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	bd80      	pop	{r7, pc}

08005edc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ede:	b089      	sub	sp, #36	@ 0x24
 8005ee0:	af04      	add	r7, sp, #16
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d020      	beq.n	8005f30 <osThreadCreate+0x54>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01c      	beq.n	8005f30 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685c      	ldr	r4, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691e      	ldr	r6, [r3, #16]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff ffc9 	bl	8005ea0 <makeFreeRtosPriority>
 8005f0e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f18:	9202      	str	r2, [sp, #8]
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	9100      	str	r1, [sp, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	4632      	mov	r2, r6
 8005f22:	4629      	mov	r1, r5
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 f8e8 	bl	80060fa <xTaskCreateStatic>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e01c      	b.n	8005f6a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685c      	ldr	r4, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f3c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff ffab 	bl	8005ea0 <makeFreeRtosPriority>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	f107 030c 	add.w	r3, r7, #12
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	9200      	str	r2, [sp, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	4632      	mov	r2, r6
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 f92d 	bl	80061ba <xTaskCreate>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d001      	beq.n	8005f6a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e000      	b.n	8005f6c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <osDelay+0x16>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	e000      	b.n	8005f8c <osDelay+0x18>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fa4b 	bl	8006428 <vTaskDelay>
  
  return osOK;
 8005f92:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f103 0208 	add.w	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f103 0208 	add.w	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f103 0208 	add.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr

08005fda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr

08006038 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604e:	d103      	bne.n	8006058 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	e00c      	b.n	8006072 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3308      	adds	r3, #8
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	e002      	b.n	8006066 <vListInsert+0x2e>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d2f6      	bcs.n	8006060 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6892      	ldr	r2, [r2, #8]
 80060be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6852      	ldr	r2, [r2, #4]
 80060c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d103      	bne.n	80060dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	1e5a      	subs	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b08e      	sub	sp, #56	@ 0x38
 80060fe:	af04      	add	r7, sp, #16
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	e7fd      	b.n	8006122 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <xTaskCreateStatic+0x4a>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	61fb      	str	r3, [r7, #28]
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006144:	2354      	movs	r3, #84	@ 0x54
 8006146:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b54      	cmp	r3, #84	@ 0x54
 800614c:	d00b      	beq.n	8006166 <xTaskCreateStatic+0x6c>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	61bb      	str	r3, [r7, #24]
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006166:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01e      	beq.n	80061ac <xTaskCreateStatic+0xb2>
 800616e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800617c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	2202      	movs	r2, #2
 8006182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006186:	2300      	movs	r3, #0
 8006188:	9303      	str	r3, [sp, #12]
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	9302      	str	r3, [sp, #8]
 800618e:	f107 0314 	add.w	r3, r7, #20
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f850 	bl	8006244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061a6:	f000 f8d5 	bl	8006354 <prvAddNewTaskToReadyList>
 80061aa:	e001      	b.n	80061b0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061b0:	697b      	ldr	r3, [r7, #20]
	}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3728      	adds	r7, #40	@ 0x28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b08c      	sub	sp, #48	@ 0x30
 80061be:	af04      	add	r7, sp, #16
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fe76 	bl	8006ec0 <pvPortMalloc>
 80061d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00e      	beq.n	80061fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061dc:	2054      	movs	r0, #84	@ 0x54
 80061de:	f000 fe6f 	bl	8006ec0 <pvPortMalloc>
 80061e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80061f0:	e005      	b.n	80061fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061f2:	6978      	ldr	r0, [r7, #20]
 80061f4:	f000 ff32 	bl	800705c <vPortFree>
 80061f8:	e001      	b.n	80061fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d017      	beq.n	8006234 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800620c:	88fa      	ldrh	r2, [r7, #6]
 800620e:	2300      	movs	r3, #0
 8006210:	9303      	str	r3, [sp, #12]
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	9302      	str	r3, [sp, #8]
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f80e 	bl	8006244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006228:	69f8      	ldr	r0, [r7, #28]
 800622a:	f000 f893 	bl	8006354 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800622e:	2301      	movs	r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	e002      	b.n	800623a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006234:	f04f 33ff 	mov.w	r3, #4294967295
 8006238:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800623a:	69bb      	ldr	r3, [r7, #24]
	}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800625c:	3b01      	subs	r3, #1
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	617b      	str	r3, [r7, #20]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01f      	beq.n	80062d4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	e012      	b.n	80062c0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	4413      	add	r3, r2
 80062a0:	7819      	ldrb	r1, [r3, #0]
 80062a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	3334      	adds	r3, #52	@ 0x34
 80062aa:	460a      	mov	r2, r1
 80062ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	4413      	add	r3, r2
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d006      	beq.n	80062c8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	3301      	adds	r3, #1
 80062be:	61fb      	str	r3, [r7, #28]
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	2b0f      	cmp	r3, #15
 80062c4:	d9e9      	bls.n	800629a <prvInitialiseNewTask+0x56>
 80062c6:	e000      	b.n	80062ca <prvInitialiseNewTask+0x86>
			{
				break;
 80062c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062d2:	e003      	b.n	80062dc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062de:	2b06      	cmp	r3, #6
 80062e0:	d901      	bls.n	80062e6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062e2:	2306      	movs	r3, #6
 80062e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062f0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	2200      	movs	r2, #0
 80062f6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	3304      	adds	r3, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fe6c 	bl	8005fda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	3318      	adds	r3, #24
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fe67 	bl	8005fda <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800630c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006310:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	f1c3 0207 	rsb	r2, r3, #7
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006320:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	2200      	movs	r2, #0
 8006326:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	69b8      	ldr	r0, [r7, #24]
 8006336:	f000 fc0d 	bl	8006b54 <pxPortInitialiseStack>
 800633a:	4602      	mov	r2, r0
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800634a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634c:	bf00      	nop
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800635c:	f000 fcee 	bl	8006d3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006360:	4b2a      	ldr	r3, [pc, #168]	@ (800640c <prvAddNewTaskToReadyList+0xb8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	4a29      	ldr	r2, [pc, #164]	@ (800640c <prvAddNewTaskToReadyList+0xb8>)
 8006368:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800636a:	4b29      	ldr	r3, [pc, #164]	@ (8006410 <prvAddNewTaskToReadyList+0xbc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006372:	4a27      	ldr	r2, [pc, #156]	@ (8006410 <prvAddNewTaskToReadyList+0xbc>)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006378:	4b24      	ldr	r3, [pc, #144]	@ (800640c <prvAddNewTaskToReadyList+0xb8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d110      	bne.n	80063a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006380:	f000 fac4 	bl	800690c <prvInitialiseTaskLists>
 8006384:	e00d      	b.n	80063a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006386:	4b23      	ldr	r3, [pc, #140]	@ (8006414 <prvAddNewTaskToReadyList+0xc0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800638e:	4b20      	ldr	r3, [pc, #128]	@ (8006410 <prvAddNewTaskToReadyList+0xbc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	429a      	cmp	r2, r3
 800639a:	d802      	bhi.n	80063a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800639c:	4a1c      	ldr	r2, [pc, #112]	@ (8006410 <prvAddNewTaskToReadyList+0xbc>)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006418 <prvAddNewTaskToReadyList+0xc4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3301      	adds	r3, #1
 80063a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006418 <prvAddNewTaskToReadyList+0xc4>)
 80063aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b0:	2201      	movs	r2, #1
 80063b2:	409a      	lsls	r2, r3
 80063b4:	4b19      	ldr	r3, [pc, #100]	@ (800641c <prvAddNewTaskToReadyList+0xc8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	4a18      	ldr	r2, [pc, #96]	@ (800641c <prvAddNewTaskToReadyList+0xc8>)
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4a15      	ldr	r2, [pc, #84]	@ (8006420 <prvAddNewTaskToReadyList+0xcc>)
 80063cc:	441a      	add	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f7ff fe0c 	bl	8005ff2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063da:	f000 fcdf 	bl	8006d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063de:	4b0d      	ldr	r3, [pc, #52]	@ (8006414 <prvAddNewTaskToReadyList+0xc0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00e      	beq.n	8006404 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006410 <prvAddNewTaskToReadyList+0xbc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d207      	bcs.n	8006404 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006424 <prvAddNewTaskToReadyList+0xd0>)
 80063f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200002f8 	.word	0x200002f8
 8006410:	200001f8 	.word	0x200001f8
 8006414:	20000304 	.word	0x20000304
 8006418:	20000314 	.word	0x20000314
 800641c:	20000300 	.word	0x20000300
 8006420:	200001fc 	.word	0x200001fc
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d018      	beq.n	800646c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800643a:	4b14      	ldr	r3, [pc, #80]	@ (800648c <vTaskDelay+0x64>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <vTaskDelay+0x32>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60bb      	str	r3, [r7, #8]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800645a:	f000 f87d 	bl	8006558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800645e:	2100      	movs	r1, #0
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fb11 	bl	8006a88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006466:	f000 f885 	bl	8006574 <xTaskResumeAll>
 800646a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006472:	4b07      	ldr	r3, [pc, #28]	@ (8006490 <vTaskDelay+0x68>)
 8006474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000320 	.word	0x20000320
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	@ 0x28
 8006498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064a2:	463a      	mov	r2, r7
 80064a4:	1d39      	adds	r1, r7, #4
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fef4 	bl	8007298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	9202      	str	r2, [sp, #8]
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	2300      	movs	r3, #0
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	2300      	movs	r3, #0
 80064c0:	460a      	mov	r2, r1
 80064c2:	491f      	ldr	r1, [pc, #124]	@ (8006540 <vTaskStartScheduler+0xac>)
 80064c4:	481f      	ldr	r0, [pc, #124]	@ (8006544 <vTaskStartScheduler+0xb0>)
 80064c6:	f7ff fe18 	bl	80060fa <xTaskCreateStatic>
 80064ca:	4603      	mov	r3, r0
 80064cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006548 <vTaskStartScheduler+0xb4>)
 80064ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006548 <vTaskStartScheduler+0xb4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064d8:	2301      	movs	r3, #1
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	e001      	b.n	80064e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d116      	bne.n	8006516 <vTaskStartScheduler+0x82>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	613b      	str	r3, [r7, #16]
}
 80064fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064fc:	4b13      	ldr	r3, [pc, #76]	@ (800654c <vTaskStartScheduler+0xb8>)
 80064fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006502:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006504:	4b12      	ldr	r3, [pc, #72]	@ (8006550 <vTaskStartScheduler+0xbc>)
 8006506:	2201      	movs	r2, #1
 8006508:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800650a:	4b12      	ldr	r3, [pc, #72]	@ (8006554 <vTaskStartScheduler+0xc0>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006510:	f000 fba2 	bl	8006c58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006514:	e00f      	b.n	8006536 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d10b      	bne.n	8006536 <vTaskStartScheduler+0xa2>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60fb      	str	r3, [r7, #12]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <vTaskStartScheduler+0x9e>
}
 8006536:	bf00      	nop
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	0800dba8 	.word	0x0800dba8
 8006544:	080068dd 	.word	0x080068dd
 8006548:	2000031c 	.word	0x2000031c
 800654c:	20000318 	.word	0x20000318
 8006550:	20000304 	.word	0x20000304
 8006554:	200002fc 	.word	0x200002fc

08006558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800655c:	4b04      	ldr	r3, [pc, #16]	@ (8006570 <vTaskSuspendAll+0x18>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3301      	adds	r3, #1
 8006562:	4a03      	ldr	r2, [pc, #12]	@ (8006570 <vTaskSuspendAll+0x18>)
 8006564:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006566:	bf00      	nop
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000320 	.word	0x20000320

08006574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800657e:	2300      	movs	r3, #0
 8006580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006582:	4b42      	ldr	r3, [pc, #264]	@ (800668c <xTaskResumeAll+0x118>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	603b      	str	r3, [r7, #0]
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	e7fd      	b.n	800659e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065a2:	f000 fbcb 	bl	8006d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065a6:	4b39      	ldr	r3, [pc, #228]	@ (800668c <xTaskResumeAll+0x118>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	4a37      	ldr	r2, [pc, #220]	@ (800668c <xTaskResumeAll+0x118>)
 80065ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b0:	4b36      	ldr	r3, [pc, #216]	@ (800668c <xTaskResumeAll+0x118>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d161      	bne.n	800667c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065b8:	4b35      	ldr	r3, [pc, #212]	@ (8006690 <xTaskResumeAll+0x11c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d05d      	beq.n	800667c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065c0:	e02e      	b.n	8006620 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c2:	4b34      	ldr	r3, [pc, #208]	@ (8006694 <xTaskResumeAll+0x120>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3318      	adds	r3, #24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fd6a 	bl	80060a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fd65 	bl	80060a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	2201      	movs	r2, #1
 80065e4:	409a      	lsls	r2, r3
 80065e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006698 <xTaskResumeAll+0x124>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006698 <xTaskResumeAll+0x124>)
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f4:	4613      	mov	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4a27      	ldr	r2, [pc, #156]	@ (800669c <xTaskResumeAll+0x128>)
 80065fe:	441a      	add	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3304      	adds	r3, #4
 8006604:	4619      	mov	r1, r3
 8006606:	4610      	mov	r0, r2
 8006608:	f7ff fcf3 	bl	8005ff2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006610:	4b23      	ldr	r3, [pc, #140]	@ (80066a0 <xTaskResumeAll+0x12c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800661a:	4b22      	ldr	r3, [pc, #136]	@ (80066a4 <xTaskResumeAll+0x130>)
 800661c:	2201      	movs	r2, #1
 800661e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006620:	4b1c      	ldr	r3, [pc, #112]	@ (8006694 <xTaskResumeAll+0x120>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1cc      	bne.n	80065c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800662e:	f000 fa0b 	bl	8006a48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006632:	4b1d      	ldr	r3, [pc, #116]	@ (80066a8 <xTaskResumeAll+0x134>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d010      	beq.n	8006660 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800663e:	f000 f837 	bl	80066b0 <xTaskIncrementTick>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006648:	4b16      	ldr	r3, [pc, #88]	@ (80066a4 <xTaskResumeAll+0x130>)
 800664a:	2201      	movs	r2, #1
 800664c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3b01      	subs	r3, #1
 8006652:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f1      	bne.n	800663e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800665a:	4b13      	ldr	r3, [pc, #76]	@ (80066a8 <xTaskResumeAll+0x134>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006660:	4b10      	ldr	r3, [pc, #64]	@ (80066a4 <xTaskResumeAll+0x130>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800666c:	4b0f      	ldr	r3, [pc, #60]	@ (80066ac <xTaskResumeAll+0x138>)
 800666e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800667c:	f000 fb8e 	bl	8006d9c <vPortExitCritical>

	return xAlreadyYielded;
 8006680:	68bb      	ldr	r3, [r7, #8]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000320 	.word	0x20000320
 8006690:	200002f8 	.word	0x200002f8
 8006694:	200002b8 	.word	0x200002b8
 8006698:	20000300 	.word	0x20000300
 800669c:	200001fc 	.word	0x200001fc
 80066a0:	200001f8 	.word	0x200001f8
 80066a4:	2000030c 	.word	0x2000030c
 80066a8:	20000308 	.word	0x20000308
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ba:	4b4f      	ldr	r3, [pc, #316]	@ (80067f8 <xTaskIncrementTick+0x148>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f040 808f 	bne.w	80067e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066c4:	4b4d      	ldr	r3, [pc, #308]	@ (80067fc <xTaskIncrementTick+0x14c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066cc:	4a4b      	ldr	r2, [pc, #300]	@ (80067fc <xTaskIncrementTick+0x14c>)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d121      	bne.n	800671c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80066d8:	4b49      	ldr	r3, [pc, #292]	@ (8006800 <xTaskIncrementTick+0x150>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	603b      	str	r3, [r7, #0]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <xTaskIncrementTick+0x46>
 80066fa:	4b41      	ldr	r3, [pc, #260]	@ (8006800 <xTaskIncrementTick+0x150>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	4b40      	ldr	r3, [pc, #256]	@ (8006804 <xTaskIncrementTick+0x154>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a3e      	ldr	r2, [pc, #248]	@ (8006800 <xTaskIncrementTick+0x150>)
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	4a3e      	ldr	r2, [pc, #248]	@ (8006804 <xTaskIncrementTick+0x154>)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	4b3e      	ldr	r3, [pc, #248]	@ (8006808 <xTaskIncrementTick+0x158>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3301      	adds	r3, #1
 8006714:	4a3c      	ldr	r2, [pc, #240]	@ (8006808 <xTaskIncrementTick+0x158>)
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	f000 f996 	bl	8006a48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800671c:	4b3b      	ldr	r3, [pc, #236]	@ (800680c <xTaskIncrementTick+0x15c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	429a      	cmp	r2, r3
 8006724:	d348      	bcc.n	80067b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006726:	4b36      	ldr	r3, [pc, #216]	@ (8006800 <xTaskIncrementTick+0x150>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006730:	4b36      	ldr	r3, [pc, #216]	@ (800680c <xTaskIncrementTick+0x15c>)
 8006732:	f04f 32ff 	mov.w	r2, #4294967295
 8006736:	601a      	str	r2, [r3, #0]
					break;
 8006738:	e03e      	b.n	80067b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800673a:	4b31      	ldr	r3, [pc, #196]	@ (8006800 <xTaskIncrementTick+0x150>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d203      	bcs.n	800675a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006752:	4a2e      	ldr	r2, [pc, #184]	@ (800680c <xTaskIncrementTick+0x15c>)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006758:	e02e      	b.n	80067b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	3304      	adds	r3, #4
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fca2 	bl	80060a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	3318      	adds	r3, #24
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fc99 	bl	80060a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677a:	2201      	movs	r2, #1
 800677c:	409a      	lsls	r2, r3
 800677e:	4b24      	ldr	r3, [pc, #144]	@ (8006810 <xTaskIncrementTick+0x160>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	4a22      	ldr	r2, [pc, #136]	@ (8006810 <xTaskIncrementTick+0x160>)
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4a1f      	ldr	r2, [pc, #124]	@ (8006814 <xTaskIncrementTick+0x164>)
 8006796:	441a      	add	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	3304      	adds	r3, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f7ff fc27 	bl	8005ff2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006818 <xTaskIncrementTick+0x168>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d3b9      	bcc.n	8006726 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b6:	e7b6      	b.n	8006726 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067b8:	4b17      	ldr	r3, [pc, #92]	@ (8006818 <xTaskIncrementTick+0x168>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067be:	4915      	ldr	r1, [pc, #84]	@ (8006814 <xTaskIncrementTick+0x164>)
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	440b      	add	r3, r1
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d901      	bls.n	80067d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80067d0:	2301      	movs	r3, #1
 80067d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067d4:	4b11      	ldr	r3, [pc, #68]	@ (800681c <xTaskIncrementTick+0x16c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	e004      	b.n	80067ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006820 <xTaskIncrementTick+0x170>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006820 <xTaskIncrementTick+0x170>)
 80067ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067ec:	697b      	ldr	r3, [r7, #20]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000320 	.word	0x20000320
 80067fc:	200002fc 	.word	0x200002fc
 8006800:	200002b0 	.word	0x200002b0
 8006804:	200002b4 	.word	0x200002b4
 8006808:	20000310 	.word	0x20000310
 800680c:	20000318 	.word	0x20000318
 8006810:	20000300 	.word	0x20000300
 8006814:	200001fc 	.word	0x200001fc
 8006818:	200001f8 	.word	0x200001f8
 800681c:	2000030c 	.word	0x2000030c
 8006820:	20000308 	.word	0x20000308

08006824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800682a:	4b27      	ldr	r3, [pc, #156]	@ (80068c8 <vTaskSwitchContext+0xa4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006832:	4b26      	ldr	r3, [pc, #152]	@ (80068cc <vTaskSwitchContext+0xa8>)
 8006834:	2201      	movs	r2, #1
 8006836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006838:	e040      	b.n	80068bc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800683a:	4b24      	ldr	r3, [pc, #144]	@ (80068cc <vTaskSwitchContext+0xa8>)
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006840:	4b23      	ldr	r3, [pc, #140]	@ (80068d0 <vTaskSwitchContext+0xac>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	fab3 f383 	clz	r3, r3
 800684c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	f1c3 031f 	rsb	r3, r3, #31
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	491f      	ldr	r1, [pc, #124]	@ (80068d4 <vTaskSwitchContext+0xb0>)
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10b      	bne.n	8006882 <vTaskSwitchContext+0x5e>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	607b      	str	r3, [r7, #4]
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	e7fd      	b.n	800687e <vTaskSwitchContext+0x5a>
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4a11      	ldr	r2, [pc, #68]	@ (80068d4 <vTaskSwitchContext+0xb0>)
 800688e:	4413      	add	r3, r2
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	3308      	adds	r3, #8
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d104      	bne.n	80068b2 <vTaskSwitchContext+0x8e>
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	605a      	str	r2, [r3, #4]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4a07      	ldr	r2, [pc, #28]	@ (80068d8 <vTaskSwitchContext+0xb4>)
 80068ba:	6013      	str	r3, [r2, #0]
}
 80068bc:	bf00      	nop
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	20000320 	.word	0x20000320
 80068cc:	2000030c 	.word	0x2000030c
 80068d0:	20000300 	.word	0x20000300
 80068d4:	200001fc 	.word	0x200001fc
 80068d8:	200001f8 	.word	0x200001f8

080068dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068e4:	f000 f852 	bl	800698c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068e8:	4b06      	ldr	r3, [pc, #24]	@ (8006904 <prvIdleTask+0x28>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d9f9      	bls.n	80068e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068f0:	4b05      	ldr	r3, [pc, #20]	@ (8006908 <prvIdleTask+0x2c>)
 80068f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006900:	e7f0      	b.n	80068e4 <prvIdleTask+0x8>
 8006902:	bf00      	nop
 8006904:	200001fc 	.word	0x200001fc
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	e00c      	b.n	8006932 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4a12      	ldr	r2, [pc, #72]	@ (800696c <prvInitialiseTaskLists+0x60>)
 8006924:	4413      	add	r3, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fb38 	bl	8005f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3301      	adds	r3, #1
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b06      	cmp	r3, #6
 8006936:	d9ef      	bls.n	8006918 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006938:	480d      	ldr	r0, [pc, #52]	@ (8006970 <prvInitialiseTaskLists+0x64>)
 800693a:	f7ff fb2f 	bl	8005f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800693e:	480d      	ldr	r0, [pc, #52]	@ (8006974 <prvInitialiseTaskLists+0x68>)
 8006940:	f7ff fb2c 	bl	8005f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006944:	480c      	ldr	r0, [pc, #48]	@ (8006978 <prvInitialiseTaskLists+0x6c>)
 8006946:	f7ff fb29 	bl	8005f9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800694a:	480c      	ldr	r0, [pc, #48]	@ (800697c <prvInitialiseTaskLists+0x70>)
 800694c:	f7ff fb26 	bl	8005f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006950:	480b      	ldr	r0, [pc, #44]	@ (8006980 <prvInitialiseTaskLists+0x74>)
 8006952:	f7ff fb23 	bl	8005f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006956:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <prvInitialiseTaskLists+0x78>)
 8006958:	4a05      	ldr	r2, [pc, #20]	@ (8006970 <prvInitialiseTaskLists+0x64>)
 800695a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800695c:	4b0a      	ldr	r3, [pc, #40]	@ (8006988 <prvInitialiseTaskLists+0x7c>)
 800695e:	4a05      	ldr	r2, [pc, #20]	@ (8006974 <prvInitialiseTaskLists+0x68>)
 8006960:	601a      	str	r2, [r3, #0]
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	200001fc 	.word	0x200001fc
 8006970:	20000288 	.word	0x20000288
 8006974:	2000029c 	.word	0x2000029c
 8006978:	200002b8 	.word	0x200002b8
 800697c:	200002cc 	.word	0x200002cc
 8006980:	200002e4 	.word	0x200002e4
 8006984:	200002b0 	.word	0x200002b0
 8006988:	200002b4 	.word	0x200002b4

0800698c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006992:	e019      	b.n	80069c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006994:	f000 f9d2 	bl	8006d3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006998:	4b10      	ldr	r3, [pc, #64]	@ (80069dc <prvCheckTasksWaitingTermination+0x50>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff fb7f 	bl	80060a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069aa:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <prvCheckTasksWaitingTermination+0x54>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	4a0b      	ldr	r2, [pc, #44]	@ (80069e0 <prvCheckTasksWaitingTermination+0x54>)
 80069b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069b4:	4b0b      	ldr	r3, [pc, #44]	@ (80069e4 <prvCheckTasksWaitingTermination+0x58>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	4a0a      	ldr	r2, [pc, #40]	@ (80069e4 <prvCheckTasksWaitingTermination+0x58>)
 80069bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069be:	f000 f9ed 	bl	8006d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f810 	bl	80069e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069c8:	4b06      	ldr	r3, [pc, #24]	@ (80069e4 <prvCheckTasksWaitingTermination+0x58>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e1      	bne.n	8006994 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200002cc 	.word	0x200002cc
 80069e0:	200002f8 	.word	0x200002f8
 80069e4:	200002e0 	.word	0x200002e0

080069e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d108      	bne.n	8006a0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fb2c 	bl	800705c <vPortFree>
				vPortFree( pxTCB );
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fb29 	bl	800705c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a0a:	e019      	b.n	8006a40 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d103      	bne.n	8006a1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fb20 	bl	800705c <vPortFree>
	}
 8006a1c:	e010      	b.n	8006a40 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d00b      	beq.n	8006a40 <prvDeleteTCB+0x58>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	60fb      	str	r3, [r7, #12]
}
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	e7fd      	b.n	8006a3c <prvDeleteTCB+0x54>
	}
 8006a40:	bf00      	nop
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a80 <prvResetNextTaskUnblockTime+0x38>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a58:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <prvResetNextTaskUnblockTime+0x3c>)
 8006a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a60:	e008      	b.n	8006a74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a62:	4b07      	ldr	r3, [pc, #28]	@ (8006a80 <prvResetNextTaskUnblockTime+0x38>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	4a04      	ldr	r2, [pc, #16]	@ (8006a84 <prvResetNextTaskUnblockTime+0x3c>)
 8006a72:	6013      	str	r3, [r2, #0]
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	200002b0 	.word	0x200002b0
 8006a84:	20000318 	.word	0x20000318

08006a88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a92:	4b29      	ldr	r3, [pc, #164]	@ (8006b38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a98:	4b28      	ldr	r3, [pc, #160]	@ (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fb02 	bl	80060a8 <uxListRemove>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10b      	bne.n	8006ac2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006aaa:	4b24      	ldr	r3, [pc, #144]	@ (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43da      	mvns	r2, r3
 8006ab8:	4b21      	ldr	r3, [pc, #132]	@ (8006b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4013      	ands	r3, r2
 8006abe:	4a20      	ldr	r2, [pc, #128]	@ (8006b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ac0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d10a      	bne.n	8006ae0 <prvAddCurrentTaskToDelayedList+0x58>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d007      	beq.n	8006ae0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	481a      	ldr	r0, [pc, #104]	@ (8006b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006ada:	f7ff fa8a 	bl	8005ff2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ade:	e026      	b.n	8006b2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ae8:	4b14      	ldr	r3, [pc, #80]	@ (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d209      	bcs.n	8006b0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af8:	4b13      	ldr	r3, [pc, #76]	@ (8006b48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4b0f      	ldr	r3, [pc, #60]	@ (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7ff fa97 	bl	8006038 <vListInsert>
}
 8006b0a:	e010      	b.n	8006b2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	4b0a      	ldr	r3, [pc, #40]	@ (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f7ff fa8d 	bl	8006038 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d202      	bcs.n	8006b2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b28:	4a09      	ldr	r2, [pc, #36]	@ (8006b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6013      	str	r3, [r2, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	200002fc 	.word	0x200002fc
 8006b3c:	200001f8 	.word	0x200001f8
 8006b40:	20000300 	.word	0x20000300
 8006b44:	200002e4 	.word	0x200002e4
 8006b48:	200002b4 	.word	0x200002b4
 8006b4c:	200002b0 	.word	0x200002b0
 8006b50:	20000318 	.word	0x20000318

08006b54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3b04      	subs	r3, #4
 8006b64:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3b04      	subs	r3, #4
 8006b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f023 0201 	bic.w	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b84:	4a08      	ldr	r2, [pc, #32]	@ (8006ba8 <pxPortInitialiseStack+0x54>)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3b14      	subs	r3, #20
 8006b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3b20      	subs	r3, #32
 8006b9a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr
 8006ba8:	08006bad 	.word	0x08006bad

08006bac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bb6:	4b12      	ldr	r3, [pc, #72]	@ (8006c00 <prvTaskExitError+0x54>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbe:	d00b      	beq.n	8006bd8 <prvTaskExitError+0x2c>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	60fb      	str	r3, [r7, #12]
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	e7fd      	b.n	8006bd4 <prvTaskExitError+0x28>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	60bb      	str	r3, [r7, #8]
}
 8006bea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bec:	bf00      	nop
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0fc      	beq.n	8006bee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr
 8006c00:	20000008 	.word	0x20000008
	...

08006c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c10:	4b07      	ldr	r3, [pc, #28]	@ (8006c30 <pxCurrentTCBConst2>)
 8006c12:	6819      	ldr	r1, [r3, #0]
 8006c14:	6808      	ldr	r0, [r1, #0]
 8006c16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c1a:	f380 8809 	msr	PSP, r0
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f04f 0000 	mov.w	r0, #0
 8006c26:	f380 8811 	msr	BASEPRI, r0
 8006c2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c2e:	4770      	bx	lr

08006c30 <pxCurrentTCBConst2>:
 8006c30:	200001f8 	.word	0x200001f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop

08006c38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006c38:	4806      	ldr	r0, [pc, #24]	@ (8006c54 <prvPortStartFirstTask+0x1c>)
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	6800      	ldr	r0, [r0, #0]
 8006c3e:	f380 8808 	msr	MSP, r0
 8006c42:	b662      	cpsie	i
 8006c44:	b661      	cpsie	f
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	df00      	svc	0
 8006c50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c52:	bf00      	nop
 8006c54:	e000ed08 	.word	0xe000ed08

08006c58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c5e:	4b32      	ldr	r3, [pc, #200]	@ (8006d28 <xPortStartScheduler+0xd0>)
 8006c60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	22ff      	movs	r2, #255	@ 0xff
 8006c6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	4b2a      	ldr	r3, [pc, #168]	@ (8006d2c <xPortStartScheduler+0xd4>)
 8006c84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c86:	4b2a      	ldr	r3, [pc, #168]	@ (8006d30 <xPortStartScheduler+0xd8>)
 8006c88:	2207      	movs	r2, #7
 8006c8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c8c:	e009      	b.n	8006ca2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c8e:	4b28      	ldr	r3, [pc, #160]	@ (8006d30 <xPortStartScheduler+0xd8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	4a26      	ldr	r2, [pc, #152]	@ (8006d30 <xPortStartScheduler+0xd8>)
 8006c96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006caa:	2b80      	cmp	r3, #128	@ 0x80
 8006cac:	d0ef      	beq.n	8006c8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cae:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <xPortStartScheduler+0xd8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f1c3 0307 	rsb	r3, r3, #7
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d00b      	beq.n	8006cd2 <xPortStartScheduler+0x7a>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	60bb      	str	r3, [r7, #8]
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	e7fd      	b.n	8006cce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cd2:	4b17      	ldr	r3, [pc, #92]	@ (8006d30 <xPortStartScheduler+0xd8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	4a15      	ldr	r2, [pc, #84]	@ (8006d30 <xPortStartScheduler+0xd8>)
 8006cda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cdc:	4b14      	ldr	r3, [pc, #80]	@ (8006d30 <xPortStartScheduler+0xd8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ce4:	4a12      	ldr	r2, [pc, #72]	@ (8006d30 <xPortStartScheduler+0xd8>)
 8006ce6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cf0:	4b10      	ldr	r3, [pc, #64]	@ (8006d34 <xPortStartScheduler+0xdc>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8006d34 <xPortStartScheduler+0xdc>)
 8006cf6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006cfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006d34 <xPortStartScheduler+0xdc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a0c      	ldr	r2, [pc, #48]	@ (8006d34 <xPortStartScheduler+0xdc>)
 8006d02:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006d06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d08:	f000 f8b8 	bl	8006e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d38 <xPortStartScheduler+0xe0>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d12:	f7ff ff91 	bl	8006c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d16:	f7ff fd85 	bl	8006824 <vTaskSwitchContext>
	prvTaskExitError();
 8006d1a:	f7ff ff47 	bl	8006bac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	e000e400 	.word	0xe000e400
 8006d2c:	20000324 	.word	0x20000324
 8006d30:	20000328 	.word	0x20000328
 8006d34:	e000ed20 	.word	0xe000ed20
 8006d38:	20000008 	.word	0x20000008

08006d3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	607b      	str	r3, [r7, #4]
}
 8006d54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d56:	4b0f      	ldr	r3, [pc, #60]	@ (8006d94 <vPortEnterCritical+0x58>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d94 <vPortEnterCritical+0x58>)
 8006d5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d60:	4b0c      	ldr	r3, [pc, #48]	@ (8006d94 <vPortEnterCritical+0x58>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d110      	bne.n	8006d8a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d68:	4b0b      	ldr	r3, [pc, #44]	@ (8006d98 <vPortEnterCritical+0x5c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <vPortEnterCritical+0x4e>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	603b      	str	r3, [r7, #0]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <vPortEnterCritical+0x4a>
	}
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr
 8006d94:	20000008 	.word	0x20000008
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006da2:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <vPortExitCritical+0x50>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <vPortExitCritical+0x26>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	607b      	str	r3, [r7, #4]
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	e7fd      	b.n	8006dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <vPortExitCritical+0x50>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4a08      	ldr	r2, [pc, #32]	@ (8006dec <vPortExitCritical+0x50>)
 8006dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dcc:	4b07      	ldr	r3, [pc, #28]	@ (8006dec <vPortExitCritical+0x50>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <vPortExitCritical+0x44>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000008 	.word	0x20000008

08006df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006df0:	f3ef 8009 	mrs	r0, PSP
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4b0d      	ldr	r3, [pc, #52]	@ (8006e30 <pxCurrentTCBConst>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e00:	6010      	str	r0, [r2, #0]
 8006e02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e06:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e0a:	f380 8811 	msr	BASEPRI, r0
 8006e0e:	f7ff fd09 	bl	8006824 <vTaskSwitchContext>
 8006e12:	f04f 0000 	mov.w	r0, #0
 8006e16:	f380 8811 	msr	BASEPRI, r0
 8006e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e1e:	6819      	ldr	r1, [r3, #0]
 8006e20:	6808      	ldr	r0, [r1, #0]
 8006e22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e26:	f380 8809 	msr	PSP, r0
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	4770      	bx	lr

08006e30 <pxCurrentTCBConst>:
 8006e30:	200001f8 	.word	0x200001f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop

08006e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	607b      	str	r3, [r7, #4]
}
 8006e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e52:	f7ff fc2d 	bl	80066b0 <xTaskIncrementTick>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e5c:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <SysTick_Handler+0x40>)
 8006e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	2300      	movs	r3, #0
 8006e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f383 8811 	msr	BASEPRI, r3
}
 8006e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	e000ed04 	.word	0xe000ed04

08006e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e80:	4b0a      	ldr	r3, [pc, #40]	@ (8006eac <vPortSetupTimerInterrupt+0x30>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e86:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb0 <vPortSetupTimerInterrupt+0x34>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e8c:	4b09      	ldr	r3, [pc, #36]	@ (8006eb4 <vPortSetupTimerInterrupt+0x38>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a09      	ldr	r2, [pc, #36]	@ (8006eb8 <vPortSetupTimerInterrupt+0x3c>)
 8006e92:	fba2 2303 	umull	r2, r3, r2, r3
 8006e96:	099b      	lsrs	r3, r3, #6
 8006e98:	4a08      	ldr	r2, [pc, #32]	@ (8006ebc <vPortSetupTimerInterrupt+0x40>)
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e9e:	4b03      	ldr	r3, [pc, #12]	@ (8006eac <vPortSetupTimerInterrupt+0x30>)
 8006ea0:	2207      	movs	r2, #7
 8006ea2:	601a      	str	r2, [r3, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr
 8006eac:	e000e010 	.word	0xe000e010
 8006eb0:	e000e018 	.word	0xe000e018
 8006eb4:	2000000c 	.word	0x2000000c
 8006eb8:	10624dd3 	.word	0x10624dd3
 8006ebc:	e000e014 	.word	0xe000e014

08006ec0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	@ 0x28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ecc:	f7ff fb44 	bl	8006558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ed0:	4b5c      	ldr	r3, [pc, #368]	@ (8007044 <pvPortMalloc+0x184>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ed8:	f000 f924 	bl	8007124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006edc:	4b5a      	ldr	r3, [pc, #360]	@ (8007048 <pvPortMalloc+0x188>)
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 8095 	bne.w	8007014 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01e      	beq.n	8006f2e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006ef0:	2208      	movs	r2, #8
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d015      	beq.n	8006f2e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f023 0307 	bic.w	r3, r3, #7
 8006f08:	3308      	adds	r3, #8
 8006f0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <pvPortMalloc+0x6e>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	617b      	str	r3, [r7, #20]
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d06f      	beq.n	8007014 <pvPortMalloc+0x154>
 8006f34:	4b45      	ldr	r3, [pc, #276]	@ (800704c <pvPortMalloc+0x18c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d86a      	bhi.n	8007014 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f3e:	4b44      	ldr	r3, [pc, #272]	@ (8007050 <pvPortMalloc+0x190>)
 8006f40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f42:	4b43      	ldr	r3, [pc, #268]	@ (8007050 <pvPortMalloc+0x190>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f48:	e004      	b.n	8006f54 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d903      	bls.n	8006f66 <pvPortMalloc+0xa6>
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f1      	bne.n	8006f4a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f66:	4b37      	ldr	r3, [pc, #220]	@ (8007044 <pvPortMalloc+0x184>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d051      	beq.n	8007014 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2208      	movs	r2, #8
 8006f76:	4413      	add	r3, r2
 8006f78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	1ad2      	subs	r2, r2, r3
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d920      	bls.n	8006fd4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4413      	add	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <pvPortMalloc+0xfc>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	613b      	str	r3, [r7, #16]
}
 8006fb6:	bf00      	nop
 8006fb8:	bf00      	nop
 8006fba:	e7fd      	b.n	8006fb8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	1ad2      	subs	r2, r2, r3
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fce:	69b8      	ldr	r0, [r7, #24]
 8006fd0:	f000 f90a 	bl	80071e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800704c <pvPortMalloc+0x18c>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	4a1b      	ldr	r2, [pc, #108]	@ (800704c <pvPortMalloc+0x18c>)
 8006fe0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800704c <pvPortMalloc+0x18c>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8007054 <pvPortMalloc+0x194>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d203      	bcs.n	8006ff6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fee:	4b17      	ldr	r3, [pc, #92]	@ (800704c <pvPortMalloc+0x18c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a18      	ldr	r2, [pc, #96]	@ (8007054 <pvPortMalloc+0x194>)
 8006ff4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	4b13      	ldr	r3, [pc, #76]	@ (8007048 <pvPortMalloc+0x188>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800700a:	4b13      	ldr	r3, [pc, #76]	@ (8007058 <pvPortMalloc+0x198>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3301      	adds	r3, #1
 8007010:	4a11      	ldr	r2, [pc, #68]	@ (8007058 <pvPortMalloc+0x198>)
 8007012:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007014:	f7ff faae 	bl	8006574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00b      	beq.n	800703a <pvPortMalloc+0x17a>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	60fb      	str	r3, [r7, #12]
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	e7fd      	b.n	8007036 <pvPortMalloc+0x176>
	return pvReturn;
 800703a:	69fb      	ldr	r3, [r7, #28]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3728      	adds	r7, #40	@ 0x28
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000f34 	.word	0x20000f34
 8007048:	20000f48 	.word	0x20000f48
 800704c:	20000f38 	.word	0x20000f38
 8007050:	20000f2c 	.word	0x20000f2c
 8007054:	20000f3c 	.word	0x20000f3c
 8007058:	20000f40 	.word	0x20000f40

0800705c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d04f      	beq.n	800710e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800706e:	2308      	movs	r3, #8
 8007070:	425b      	negs	r3, r3
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4413      	add	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	4b25      	ldr	r3, [pc, #148]	@ (8007118 <vPortFree+0xbc>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4013      	ands	r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <vPortFree+0x46>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	60fb      	str	r3, [r7, #12]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <vPortFree+0x66>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	60bb      	str	r3, [r7, #8]
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4b14      	ldr	r3, [pc, #80]	@ (8007118 <vPortFree+0xbc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01e      	beq.n	800710e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11a      	bne.n	800710e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007118 <vPortFree+0xbc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	401a      	ands	r2, r3
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070e8:	f7ff fa36 	bl	8006558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	4b0a      	ldr	r3, [pc, #40]	@ (800711c <vPortFree+0xc0>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4413      	add	r3, r2
 80070f6:	4a09      	ldr	r2, [pc, #36]	@ (800711c <vPortFree+0xc0>)
 80070f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f000 f874 	bl	80071e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007100:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <vPortFree+0xc4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	4a06      	ldr	r2, [pc, #24]	@ (8007120 <vPortFree+0xc4>)
 8007108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800710a:	f7ff fa33 	bl	8006574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800710e:	bf00      	nop
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20000f48 	.word	0x20000f48
 800711c:	20000f38 	.word	0x20000f38
 8007120:	20000f44 	.word	0x20000f44

08007124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800712a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800712e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007130:	4b27      	ldr	r3, [pc, #156]	@ (80071d0 <prvHeapInit+0xac>)
 8007132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00c      	beq.n	8007158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3307      	adds	r3, #7
 8007142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0307 	bic.w	r3, r3, #7
 800714a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	4a1f      	ldr	r2, [pc, #124]	@ (80071d0 <prvHeapInit+0xac>)
 8007154:	4413      	add	r3, r2
 8007156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800715c:	4a1d      	ldr	r2, [pc, #116]	@ (80071d4 <prvHeapInit+0xb0>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007162:	4b1c      	ldr	r3, [pc, #112]	@ (80071d4 <prvHeapInit+0xb0>)
 8007164:	2200      	movs	r2, #0
 8007166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	4413      	add	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007170:	2208      	movs	r2, #8
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0307 	bic.w	r3, r3, #7
 800717e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4a15      	ldr	r2, [pc, #84]	@ (80071d8 <prvHeapInit+0xb4>)
 8007184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007186:	4b14      	ldr	r3, [pc, #80]	@ (80071d8 <prvHeapInit+0xb4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2200      	movs	r2, #0
 800718c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800718e:	4b12      	ldr	r3, [pc, #72]	@ (80071d8 <prvHeapInit+0xb4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071a4:	4b0c      	ldr	r3, [pc, #48]	@ (80071d8 <prvHeapInit+0xb4>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	@ (80071dc <prvHeapInit+0xb8>)
 80071b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4a09      	ldr	r2, [pc, #36]	@ (80071e0 <prvHeapInit+0xbc>)
 80071ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071bc:	4b09      	ldr	r3, [pc, #36]	@ (80071e4 <prvHeapInit+0xc0>)
 80071be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80071c2:	601a      	str	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	2000032c 	.word	0x2000032c
 80071d4:	20000f2c 	.word	0x20000f2c
 80071d8:	20000f34 	.word	0x20000f34
 80071dc:	20000f3c 	.word	0x20000f3c
 80071e0:	20000f38 	.word	0x20000f38
 80071e4:	20000f48 	.word	0x20000f48

080071e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071f0:	4b27      	ldr	r3, [pc, #156]	@ (8007290 <prvInsertBlockIntoFreeList+0xa8>)
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e002      	b.n	80071fc <prvInsertBlockIntoFreeList+0x14>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	429a      	cmp	r2, r3
 8007204:	d8f7      	bhi.n	80071f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	4413      	add	r3, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	429a      	cmp	r2, r3
 8007216:	d108      	bne.n	800722a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	441a      	add	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	441a      	add	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d118      	bne.n	8007270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	4b14      	ldr	r3, [pc, #80]	@ (8007294 <prvInsertBlockIntoFreeList+0xac>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d00d      	beq.n	8007266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	441a      	add	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e008      	b.n	8007278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007266:	4b0b      	ldr	r3, [pc, #44]	@ (8007294 <prvInsertBlockIntoFreeList+0xac>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e003      	b.n	8007278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	429a      	cmp	r2, r3
 800727e:	d002      	beq.n	8007286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr
 8007290:	20000f2c 	.word	0x20000f2c
 8007294:	20000f34 	.word	0x20000f34

08007298 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4a06      	ldr	r2, [pc, #24]	@ (80072c0 <vApplicationGetIdleTaskMemory+0x28>)
 80072a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4a05      	ldr	r2, [pc, #20]	@ (80072c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80072ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2280      	movs	r2, #128	@ 0x80
 80072b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80072b6:	bf00      	nop
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr
 80072c0:	20000f4c 	.word	0x20000f4c
 80072c4:	20000fa0 	.word	0x20000fa0

080072c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80072c8:	b5b0      	push	{r4, r5, r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80072ce:	f7fa f8ef 	bl	80014b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80072d2:	f000 f85b 	bl	800738c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80072d6:	f000 f97f 	bl	80075d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80072da:	f000 f8b1 	bl	8007440 <MX_I2C1_Init>
  MX_RTC_Init();
 80072de:	f000 f8dd 	bl	800749c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80072e2:	f000 f925 	bl	8007530 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80072e6:	f000 f94d 	bl	8007584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize MAX30102 and SSD1306
  ssd1306_Init();
 80072ea:	f001 fae3 	bl	80088b4 <ssd1306_Init>
  configure_MAX30102();
 80072ee:	f000 fd9d 	bl	8007e2c <configure_MAX30102>
  configure_MPU6050();
 80072f2:	f001 fa13 	bl	800871c <configure_MPU6050>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);  // Start first receive
 80072f6:	2201      	movs	r2, #1
 80072f8:	491d      	ldr	r1, [pc, #116]	@ (8007370 <main+0xa8>)
 80072fa:	481e      	ldr	r0, [pc, #120]	@ (8007374 <main+0xac>)
 80072fc:	f7fe f841 	bl	8005382 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, (uint8_t*)"Ready\n", 6, 100);  // Test message
 8007300:	2364      	movs	r3, #100	@ 0x64
 8007302:	2206      	movs	r2, #6
 8007304:	491c      	ldr	r1, [pc, #112]	@ (8007378 <main+0xb0>)
 8007306:	481d      	ldr	r0, [pc, #116]	@ (800737c <main+0xb4>)
 8007308:	f7fd ffb0 	bl	800526c <HAL_UART_Transmit>
  render_time();
 800730c:	f002 f854 	bl	80093b8 <render_time>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007310:	4b1b      	ldr	r3, [pc, #108]	@ (8007380 <main+0xb8>)
 8007312:	1d3c      	adds	r4, r7, #4
 8007314:	461d      	mov	r5, r3
 8007316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800731a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800731e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007322:	1d3b      	adds	r3, r7, #4
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fdd8 	bl	8005edc <osThreadCreate>
 800732c:	4603      	mov	r3, r0
 800732e:	4a15      	ldr	r2, [pc, #84]	@ (8007384 <main+0xbc>)
 8007330:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007332:	f7fe fdcc 	bl	8005ece <osKernelStart>
  __ASM volatile ("cpsid i" : : : "memory");
 8007336:	b672      	cpsid	i
}
 8007338:	bf00      	nop
    while (1)
    {
    	// Disable interrupts on moment of reading of the shared variable
    	// Avoid racing condition in case if two buttons pressed simultaneously
    	__disable_irq();
    	switch (ui_state) {
 800733a:	4b13      	ldr	r3, [pc, #76]	@ (8007388 <main+0xc0>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b02      	cmp	r3, #2
 8007340:	d00c      	beq.n	800735c <main+0x94>
 8007342:	2b02      	cmp	r3, #2
 8007344:	dc0d      	bgt.n	8007362 <main+0x9a>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <main+0x88>
 800734a:	2b01      	cmp	r3, #1
 800734c:	d003      	beq.n	8007356 <main+0x8e>
 800734e:	e008      	b.n	8007362 <main+0x9a>

    	case TIME:
    		render_time();
 8007350:	f002 f832 	bl	80093b8 <render_time>
    		break;
 8007354:	e005      	b.n	8007362 <main+0x9a>
    	case BPM:
    		render_bpm();
 8007356:	f000 fed1 	bl	80080fc <render_bpm>
    		break;
 800735a:	e002      	b.n	8007362 <main+0x9a>
    	case ACCEL:
    		render_accel();
 800735c:	f001 fa04 	bl	8008768 <render_accel>
    		break;
 8007360:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007362:	b662      	cpsie	i
}
 8007364:	bf00      	nop
    	}
    	__enable_irq();
        HAL_Delay(1);
 8007366:	2001      	movs	r0, #1
 8007368:	f7fa f8d4 	bl	8001514 <HAL_Delay>
    	__disable_irq();
 800736c:	e7e3      	b.n	8007336 <main+0x6e>
 800736e:	bf00      	nop
 8007370:	20001a58 	.word	0x20001a58
 8007374:	20001208 	.word	0x20001208
 8007378:	0800dbb0 	.word	0x0800dbb0
 800737c:	20001250 	.word	0x20001250
 8007380:	0800dbc4 	.word	0x0800dbc4
 8007384:	20001298 	.word	0x20001298
 8007388:	2000129c 	.word	0x2000129c

0800738c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b094      	sub	sp, #80	@ 0x50
 8007390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007392:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007396:	2228      	movs	r2, #40	@ 0x28
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f003 f8df 	bl	800a55e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073a0:	f107 0314 	add.w	r3, r7, #20
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	60da      	str	r2, [r3, #12]
 80073ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80073b0:	1d3b      	adds	r3, r7, #4
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	605a      	str	r2, [r3, #4]
 80073b8:	609a      	str	r2, [r3, #8]
 80073ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80073bc:	230a      	movs	r3, #10
 80073be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073c0:	2301      	movs	r3, #1
 80073c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80073c4:	2310      	movs	r3, #16
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80073c8:	2301      	movs	r3, #1
 80073ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073cc:	2302      	movs	r3, #2
 80073ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80073d0:	2300      	movs	r3, #0
 80073d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80073d4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80073d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fc f916 	bl	8003610 <HAL_RCC_OscConfig>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <SystemClock_Config+0x62>
  {
    Error_Handler();
 80073ea:	f000 fa01 	bl	80077f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073ee:	230f      	movs	r3, #15
 80073f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073f2:	2302      	movs	r3, #2
 80073f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80073fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007400:	2300      	movs	r3, #0
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007404:	f107 0314 	add.w	r3, r7, #20
 8007408:	2102      	movs	r1, #2
 800740a:	4618      	mov	r0, r3
 800740c:	f7fc fb82 	bl	8003b14 <HAL_RCC_ClockConfig>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8007416:	f000 f9eb 	bl	80077f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800741a:	2301      	movs	r3, #1
 800741c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800741e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007422:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	4618      	mov	r0, r3
 8007428:	f7fc fd32 	bl	8003e90 <HAL_RCCEx_PeriphCLKConfig>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8007432:	f000 f9dd 	bl	80077f0 <Error_Handler>
  }
}
 8007436:	bf00      	nop
 8007438:	3750      	adds	r7, #80	@ 0x50
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007444:	4b12      	ldr	r3, [pc, #72]	@ (8007490 <MX_I2C1_Init+0x50>)
 8007446:	4a13      	ldr	r2, [pc, #76]	@ (8007494 <MX_I2C1_Init+0x54>)
 8007448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800744a:	4b11      	ldr	r3, [pc, #68]	@ (8007490 <MX_I2C1_Init+0x50>)
 800744c:	4a12      	ldr	r2, [pc, #72]	@ (8007498 <MX_I2C1_Init+0x58>)
 800744e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007450:	4b0f      	ldr	r3, [pc, #60]	@ (8007490 <MX_I2C1_Init+0x50>)
 8007452:	2200      	movs	r2, #0
 8007454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007456:	4b0e      	ldr	r3, [pc, #56]	@ (8007490 <MX_I2C1_Init+0x50>)
 8007458:	2200      	movs	r2, #0
 800745a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800745c:	4b0c      	ldr	r3, [pc, #48]	@ (8007490 <MX_I2C1_Init+0x50>)
 800745e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007462:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007464:	4b0a      	ldr	r3, [pc, #40]	@ (8007490 <MX_I2C1_Init+0x50>)
 8007466:	2200      	movs	r2, #0
 8007468:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800746a:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <MX_I2C1_Init+0x50>)
 800746c:	2200      	movs	r2, #0
 800746e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007470:	4b07      	ldr	r3, [pc, #28]	@ (8007490 <MX_I2C1_Init+0x50>)
 8007472:	2200      	movs	r2, #0
 8007474:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007476:	4b06      	ldr	r3, [pc, #24]	@ (8007490 <MX_I2C1_Init+0x50>)
 8007478:	2200      	movs	r2, #0
 800747a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800747c:	4804      	ldr	r0, [pc, #16]	@ (8007490 <MX_I2C1_Init+0x50>)
 800747e:	f7fa fb9b 	bl	8001bb8 <HAL_I2C_Init>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007488:	f000 f9b2 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}
 8007490:	200011a0 	.word	0x200011a0
 8007494:	40005400 	.word	0x40005400
 8007498:	00061a80 	.word	0x00061a80

0800749c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	2100      	movs	r1, #0
 80074a6:	460a      	mov	r2, r1
 80074a8:	801a      	strh	r2, [r3, #0]
 80074aa:	460a      	mov	r2, r1
 80074ac:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80074ae:	2300      	movs	r3, #0
 80074b0:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80074b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <MX_RTC_Init+0x8c>)
 80074b4:	4a1d      	ldr	r2, [pc, #116]	@ (800752c <MX_RTC_Init+0x90>)
 80074b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80074b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007528 <MX_RTC_Init+0x8c>)
 80074ba:	f04f 32ff 	mov.w	r2, #4294967295
 80074be:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80074c0:	4b19      	ldr	r3, [pc, #100]	@ (8007528 <MX_RTC_Init+0x8c>)
 80074c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074c6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80074c8:	4817      	ldr	r0, [pc, #92]	@ (8007528 <MX_RTC_Init+0x8c>)
 80074ca:	f7fc fe4d 	bl	8004168 <HAL_RTC_Init>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80074d4:	f000 f98c 	bl	80077f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80074e4:	1d3b      	adds	r3, r7, #4
 80074e6:	2200      	movs	r2, #0
 80074e8:	4619      	mov	r1, r3
 80074ea:	480f      	ldr	r0, [pc, #60]	@ (8007528 <MX_RTC_Init+0x8c>)
 80074ec:	f7fc fec8 	bl	8004280 <HAL_RTC_SetTime>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80074f6:	f000 f97b 	bl	80077f0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80074fa:	2301      	movs	r3, #1
 80074fc:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80074fe:	2301      	movs	r3, #1
 8007500:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8007502:	2301      	movs	r3, #1
 8007504:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800750a:	463b      	mov	r3, r7
 800750c:	2200      	movs	r2, #0
 800750e:	4619      	mov	r1, r3
 8007510:	4805      	ldr	r0, [pc, #20]	@ (8007528 <MX_RTC_Init+0x8c>)
 8007512:	f7fd f825 	bl	8004560 <HAL_RTC_SetDate>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800751c:	f000 f968 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	200011f4 	.word	0x200011f4
 800752c:	40002800 	.word	0x40002800

08007530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007534:	4b11      	ldr	r3, [pc, #68]	@ (800757c <MX_USART1_UART_Init+0x4c>)
 8007536:	4a12      	ldr	r2, [pc, #72]	@ (8007580 <MX_USART1_UART_Init+0x50>)
 8007538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800753a:	4b10      	ldr	r3, [pc, #64]	@ (800757c <MX_USART1_UART_Init+0x4c>)
 800753c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8007540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007542:	4b0e      	ldr	r3, [pc, #56]	@ (800757c <MX_USART1_UART_Init+0x4c>)
 8007544:	2200      	movs	r2, #0
 8007546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007548:	4b0c      	ldr	r3, [pc, #48]	@ (800757c <MX_USART1_UART_Init+0x4c>)
 800754a:	2200      	movs	r2, #0
 800754c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800754e:	4b0b      	ldr	r3, [pc, #44]	@ (800757c <MX_USART1_UART_Init+0x4c>)
 8007550:	2200      	movs	r2, #0
 8007552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007554:	4b09      	ldr	r3, [pc, #36]	@ (800757c <MX_USART1_UART_Init+0x4c>)
 8007556:	220c      	movs	r2, #12
 8007558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800755a:	4b08      	ldr	r3, [pc, #32]	@ (800757c <MX_USART1_UART_Init+0x4c>)
 800755c:	2200      	movs	r2, #0
 800755e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007560:	4b06      	ldr	r3, [pc, #24]	@ (800757c <MX_USART1_UART_Init+0x4c>)
 8007562:	2200      	movs	r2, #0
 8007564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007566:	4805      	ldr	r0, [pc, #20]	@ (800757c <MX_USART1_UART_Init+0x4c>)
 8007568:	f7fd fe30 	bl	80051cc <HAL_UART_Init>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007572:	f000 f93d 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007576:	bf00      	nop
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20001208 	.word	0x20001208
 8007580:	40013800 	.word	0x40013800

08007584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007588:	4b11      	ldr	r3, [pc, #68]	@ (80075d0 <MX_USART2_UART_Init+0x4c>)
 800758a:	4a12      	ldr	r2, [pc, #72]	@ (80075d4 <MX_USART2_UART_Init+0x50>)
 800758c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800758e:	4b10      	ldr	r3, [pc, #64]	@ (80075d0 <MX_USART2_UART_Init+0x4c>)
 8007590:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8007594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007596:	4b0e      	ldr	r3, [pc, #56]	@ (80075d0 <MX_USART2_UART_Init+0x4c>)
 8007598:	2200      	movs	r2, #0
 800759a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800759c:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <MX_USART2_UART_Init+0x4c>)
 800759e:	2200      	movs	r2, #0
 80075a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80075a2:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <MX_USART2_UART_Init+0x4c>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80075a8:	4b09      	ldr	r3, [pc, #36]	@ (80075d0 <MX_USART2_UART_Init+0x4c>)
 80075aa:	220c      	movs	r2, #12
 80075ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075ae:	4b08      	ldr	r3, [pc, #32]	@ (80075d0 <MX_USART2_UART_Init+0x4c>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80075b4:	4b06      	ldr	r3, [pc, #24]	@ (80075d0 <MX_USART2_UART_Init+0x4c>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80075ba:	4805      	ldr	r0, [pc, #20]	@ (80075d0 <MX_USART2_UART_Init+0x4c>)
 80075bc:	f7fd fe06 	bl	80051cc <HAL_UART_Init>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80075c6:	f000 f913 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80075ca:	bf00      	nop
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20001250 	.word	0x20001250
 80075d4:	40004400 	.word	0x40004400

080075d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075de:	f107 0310 	add.w	r3, r7, #16
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	605a      	str	r2, [r3, #4]
 80075e8:	609a      	str	r2, [r3, #8]
 80075ea:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075ec:	4b1e      	ldr	r3, [pc, #120]	@ (8007668 <MX_GPIO_Init+0x90>)
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007668 <MX_GPIO_Init+0x90>)
 80075f2:	f043 0310 	orr.w	r3, r3, #16
 80075f6:	6193      	str	r3, [r2, #24]
 80075f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007668 <MX_GPIO_Init+0x90>)
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007604:	4b18      	ldr	r3, [pc, #96]	@ (8007668 <MX_GPIO_Init+0x90>)
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	4a17      	ldr	r2, [pc, #92]	@ (8007668 <MX_GPIO_Init+0x90>)
 800760a:	f043 0304 	orr.w	r3, r3, #4
 800760e:	6193      	str	r3, [r2, #24]
 8007610:	4b15      	ldr	r3, [pc, #84]	@ (8007668 <MX_GPIO_Init+0x90>)
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800761c:	4b12      	ldr	r3, [pc, #72]	@ (8007668 <MX_GPIO_Init+0x90>)
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	4a11      	ldr	r2, [pc, #68]	@ (8007668 <MX_GPIO_Init+0x90>)
 8007622:	f043 0308 	orr.w	r3, r3, #8
 8007626:	6193      	str	r3, [r2, #24]
 8007628:	4b0f      	ldr	r3, [pc, #60]	@ (8007668 <MX_GPIO_Init+0x90>)
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f003 0308 	and.w	r3, r3, #8
 8007630:	607b      	str	r3, [r7, #4]
 8007632:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Left_UI_Pin Right_UI_Pin */
  GPIO_InitStruct.Pin = Left_UI_Pin|Right_UI_Pin;
 8007634:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800763a:	4b0c      	ldr	r3, [pc, #48]	@ (800766c <MX_GPIO_Init+0x94>)
 800763c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763e:	2300      	movs	r3, #0
 8007640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007642:	f107 0310 	add.w	r3, r7, #16
 8007646:	4619      	mov	r1, r3
 8007648:	4809      	ldr	r0, [pc, #36]	@ (8007670 <MX_GPIO_Init+0x98>)
 800764a:	f7fa f919 	bl	8001880 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 9, 0);
 800764e:	2200      	movs	r2, #0
 8007650:	2109      	movs	r1, #9
 8007652:	2028      	movs	r0, #40	@ 0x28
 8007654:	f7fa f837 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007658:	2028      	movs	r0, #40	@ 0x28
 800765a:	f7fa f850 	bl	80016fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800765e:	bf00      	nop
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40021000 	.word	0x40021000
 800766c:	10110000 	.word	0x10110000
 8007670:	40010c00 	.word	0x40010c00

08007674 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART1) {
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a22      	ldr	r2, [pc, #136]	@ (800770c <HAL_UART_RxCpltCallback+0x98>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d13e      	bne.n	8007704 <HAL_UART_RxCpltCallback+0x90>
		 // Echo back for debugging (optional)
	        if (uart_rx_buf[0] == '\n') {
 8007686:	4b22      	ldr	r3, [pc, #136]	@ (8007710 <HAL_UART_RxCpltCallback+0x9c>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b0a      	cmp	r3, #10
 800768c:	d11e      	bne.n	80076cc <HAL_UART_RxCpltCallback+0x58>
	            // Only store if we're expecting more data
	            if (toFill < 7) {
 800768e:	4b21      	ldr	r3, [pc, #132]	@ (8007714 <HAL_UART_RxCpltCallback+0xa0>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b06      	cmp	r3, #6
 8007694:	d831      	bhi.n	80076fa <HAL_UART_RxCpltCallback+0x86>
	                hhmmss[toFill] = prevNum;
 8007696:	4b1f      	ldr	r3, [pc, #124]	@ (8007714 <HAL_UART_RxCpltCallback+0xa0>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	4b1e      	ldr	r3, [pc, #120]	@ (8007718 <HAL_UART_RxCpltCallback+0xa4>)
 800769e:	7819      	ldrb	r1, [r3, #0]
 80076a0:	4b1e      	ldr	r3, [pc, #120]	@ (800771c <HAL_UART_RxCpltCallback+0xa8>)
 80076a2:	5499      	strb	r1, [r3, r2]
	                toFill++;
 80076a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007714 <HAL_UART_RxCpltCallback+0xa0>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	4b19      	ldr	r3, [pc, #100]	@ (8007714 <HAL_UART_RxCpltCallback+0xa0>)
 80076ae:	701a      	strb	r2, [r3, #0]
	                prevNum = 0;
 80076b0:	4b19      	ldr	r3, [pc, #100]	@ (8007718 <HAL_UART_RxCpltCallback+0xa4>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]
	                if (toFill == 7) {
 80076b6:	4b17      	ldr	r3, [pc, #92]	@ (8007714 <HAL_UART_RxCpltCallback+0xa0>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b07      	cmp	r3, #7
 80076bc:	d11d      	bne.n	80076fa <HAL_UART_RxCpltCallback+0x86>
	                	parseTime(hhmmss);
 80076be:	4817      	ldr	r0, [pc, #92]	@ (800771c <HAL_UART_RxCpltCallback+0xa8>)
 80076c0:	f001 fe48 	bl	8009354 <parseTime>
	                	toFill = 0;
 80076c4:	4b13      	ldr	r3, [pc, #76]	@ (8007714 <HAL_UART_RxCpltCallback+0xa0>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	e016      	b.n	80076fa <HAL_UART_RxCpltCallback+0x86>
	                }
	            }
	        }
	        else if (uart_rx_buf[0] >= '0' && uart_rx_buf[0] <= '9') {
 80076cc:	4b10      	ldr	r3, [pc, #64]	@ (8007710 <HAL_UART_RxCpltCallback+0x9c>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80076d2:	d912      	bls.n	80076fa <HAL_UART_RxCpltCallback+0x86>
 80076d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007710 <HAL_UART_RxCpltCallback+0x9c>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b39      	cmp	r3, #57	@ 0x39
 80076da:	d80e      	bhi.n	80076fa <HAL_UART_RxCpltCallback+0x86>
	            prevNum = prevNum * 10 + (uart_rx_buf[0] - '0');
 80076dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007718 <HAL_UART_RxCpltCallback+0xa4>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	0092      	lsls	r2, r2, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <HAL_UART_RxCpltCallback+0x9c>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	4413      	add	r3, r2
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	3b30      	subs	r3, #48	@ 0x30
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	4b08      	ldr	r3, [pc, #32]	@ (8007718 <HAL_UART_RxCpltCallback+0xa4>)
 80076f8:	701a      	strb	r2, [r3, #0]
	        }

	        // Always restart UART receive
	        HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80076fa:	2201      	movs	r2, #1
 80076fc:	4904      	ldr	r1, [pc, #16]	@ (8007710 <HAL_UART_RxCpltCallback+0x9c>)
 80076fe:	4808      	ldr	r0, [pc, #32]	@ (8007720 <HAL_UART_RxCpltCallback+0xac>)
 8007700:	f7fd fe3f 	bl	8005382 <HAL_UART_Receive_IT>

	    }
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40013800 	.word	0x40013800
 8007710:	20001a58 	.word	0x20001a58
 8007714:	20001a65 	.word	0x20001a65
 8007718:	20001a66 	.word	0x20001a66
 800771c:	20001a5c 	.word	0x20001a5c
 8007720:	20001208 	.word	0x20001208

08007724 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin==Left_UI_Pin) {
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007734:	d10f      	bne.n	8007756 <HAL_GPIO_EXTI_Callback+0x32>
    ui_state = (ui_state + 1) % 3;
 8007736:	4b1e      	ldr	r3, [pc, #120]	@ (80077b0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	4b1d      	ldr	r3, [pc, #116]	@ (80077b4 <HAL_GPIO_EXTI_Callback+0x90>)
 800773e:	fb83 3102 	smull	r3, r1, r3, r2
 8007742:	17d3      	asrs	r3, r2, #31
 8007744:	1ac9      	subs	r1, r1, r3
 8007746:	460b      	mov	r3, r1
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	440b      	add	r3, r1
 800774c:	1ad1      	subs	r1, r2, r3
 800774e:	b2ca      	uxtb	r2, r1
 8007750:	4b17      	ldr	r3, [pc, #92]	@ (80077b0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007752:	701a      	strb	r2, [r3, #0]
 8007754:	e022      	b.n	800779c <HAL_GPIO_EXTI_Callback+0x78>
  } else if(GPIO_Pin==Right_UI_Pin) {
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800775c:	d11d      	bne.n	800779a <HAL_GPIO_EXTI_Callback+0x76>
	  if (ui_state == 0) {
 800775e:	4b14      	ldr	r3, [pc, #80]	@ (80077b0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <HAL_GPIO_EXTI_Callback+0x56>
		  // Then set to tail and return from callback
		  ui_state = 2;
 8007766:	4b12      	ldr	r3, [pc, #72]	@ (80077b0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007768:	2202      	movs	r2, #2
 800776a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &ui_state, 1, 10);
 800776c:	230a      	movs	r3, #10
 800776e:	2201      	movs	r2, #1
 8007770:	490f      	ldr	r1, [pc, #60]	@ (80077b0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007772:	4811      	ldr	r0, [pc, #68]	@ (80077b8 <HAL_GPIO_EXTI_Callback+0x94>)
 8007774:	f7fd fd7a 	bl	800526c <HAL_UART_Transmit>
		  return;
 8007778:	e016      	b.n	80077a8 <HAL_GPIO_EXTI_Callback+0x84>
	  }
    ui_state = (ui_state - 1) % 3;
 800777a:	4b0d      	ldr	r3, [pc, #52]	@ (80077b0 <HAL_GPIO_EXTI_Callback+0x8c>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	1e5a      	subs	r2, r3, #1
 8007780:	4b0c      	ldr	r3, [pc, #48]	@ (80077b4 <HAL_GPIO_EXTI_Callback+0x90>)
 8007782:	fb83 3102 	smull	r3, r1, r3, r2
 8007786:	17d3      	asrs	r3, r2, #31
 8007788:	1ac9      	subs	r1, r1, r3
 800778a:	460b      	mov	r3, r1
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	440b      	add	r3, r1
 8007790:	1ad1      	subs	r1, r2, r3
 8007792:	b2ca      	uxtb	r2, r1
 8007794:	4b06      	ldr	r3, [pc, #24]	@ (80077b0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	e000      	b.n	800779c <HAL_GPIO_EXTI_Callback+0x78>
  }else {
	  // Do nothing
	    __NOP();
 800779a:	bf00      	nop
	  }
  HAL_UART_Transmit(&huart2, &ui_state, 1, 10);
 800779c:	230a      	movs	r3, #10
 800779e:	2201      	movs	r2, #1
 80077a0:	4903      	ldr	r1, [pc, #12]	@ (80077b0 <HAL_GPIO_EXTI_Callback+0x8c>)
 80077a2:	4805      	ldr	r0, [pc, #20]	@ (80077b8 <HAL_GPIO_EXTI_Callback+0x94>)
 80077a4:	f7fd fd62 	bl	800526c <HAL_UART_Transmit>

}
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	2000129c 	.word	0x2000129c
 80077b4:	55555556 	.word	0x55555556
 80077b8:	20001250 	.word	0x20001250

080077bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80077c4:	2001      	movs	r0, #1
 80077c6:	f7fe fbd5 	bl	8005f74 <osDelay>
 80077ca:	e7fb      	b.n	80077c4 <StartDefaultTask+0x8>

080077cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a04      	ldr	r2, [pc, #16]	@ (80077ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d101      	bne.n	80077e2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80077de:	f7f9 fe7d 	bl	80014dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	40012c00 	.word	0x40012c00

080077f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80077f4:	b672      	cpsid	i
}
 80077f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <Error_Handler+0x8>

080077fc <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	2280      	movs	r2, #128	@ 0x80
 800782e:	2100      	movs	r1, #0
 8007830:	4618      	mov	r0, r3
 8007832:	f002 fe94 	bl	800a55e <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3384      	adds	r3, #132	@ 0x84
 800783a:	2280      	movs	r2, #128	@ 0x80
 800783c:	2100      	movs	r1, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f002 fe8d 	bl	800a55e <memset>
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af02      	add	r7, sp, #8
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	461a      	mov	r2, r3
 8007858:	460b      	mov	r3, r1
 800785a:	72fb      	strb	r3, [r7, #11]
 800785c:	4613      	mov	r3, r2
 800785e:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8007860:	893b      	ldrh	r3, [r7, #8]
 8007862:	3301      	adds	r3, #1
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fdfb 	bl	8009460 <malloc>
 800786a:	4603      	mov	r3, r0
 800786c:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	7afa      	ldrb	r2, [r7, #11]
 8007872:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <max30102_write+0x42>
 800787a:	893b      	ldrh	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	3301      	adds	r3, #1
 8007884:	893a      	ldrh	r2, [r7, #8]
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	4618      	mov	r0, r3
 800788a:	f002 ff06 	bl	800a69a <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	893b      	ldrh	r3, [r7, #8]
 8007894:	3301      	adds	r3, #1
 8007896:	b29b      	uxth	r3, r3
 8007898:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800789c:	9200      	str	r2, [sp, #0]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	21ae      	movs	r1, #174	@ 0xae
 80078a2:	f7fa facd 	bl	8001e40 <HAL_I2C_Master_Transmit>
    free(payload);
 80078a6:	6978      	ldr	r0, [r7, #20]
 80078a8:	f001 fde2 	bl	8009470 <free>
}
 80078ac:	bf00      	nop
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	461a      	mov	r2, r3
 80078c0:	460b      	mov	r3, r1
 80078c2:	72fb      	strb	r3, [r7, #11]
 80078c4:	4613      	mov	r3, r2
 80078c6:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6818      	ldr	r0, [r3, #0]
 80078d0:	f107 0217 	add.w	r2, r7, #23
 80078d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	2301      	movs	r3, #1
 80078dc:	21ae      	movs	r1, #174	@ 0xae
 80078de:	f7fa faaf 	bl	8001e40 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	893b      	ldrh	r3, [r7, #8]
 80078e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80078ec:	9200      	str	r2, [sp, #0]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	21ae      	movs	r1, #174	@ 0xae
 80078f2:	f7fa fba3 	bl	800203c <HAL_I2C_Master_Receive>
}
 80078f6:	bf00      	nop
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8007906:	2340      	movs	r3, #64	@ 0x40
 8007908:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 800790a:	f107 020f 	add.w	r2, r7, #15
 800790e:	2301      	movs	r3, #1
 8007910:	2109      	movs	r1, #9
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff ff9a 	bl	800784c <max30102_write>
}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8007930:	f107 020f 	add.w	r2, r7, #15
 8007934:	2301      	movs	r3, #1
 8007936:	2102      	movs	r1, #2
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff ffbb 	bl	80078b4 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007944:	b2db      	uxtb	r3, r3
 8007946:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8007948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800794c:	01db      	lsls	r3, r3, #7
 800794e:	b25a      	sxtb	r2, r3
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	b25b      	sxtb	r3, r3
 8007954:	4313      	orrs	r3, r2
 8007956:	b25b      	sxtb	r3, r3
 8007958:	b2db      	uxtb	r3, r3
 800795a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800795c:	f107 020f 	add.w	r2, r7, #15
 8007960:	2301      	movs	r3, #1
 8007962:	2102      	movs	r1, #2
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff ff71 	bl	800784c <max30102_write>
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <max30102_set_ppg_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_ppg_rdy(max30102_t *obj, uint8_t enable)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	460b      	mov	r3, r1
 800797c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8007982:	f107 020f 	add.w	r2, r7, #15
 8007986:	2301      	movs	r3, #1
 8007988:	2102      	movs	r1, #2
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff ff92 	bl	80078b4 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_PPG_RDY);
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007996:	b2db      	uxtb	r3, r3
 8007998:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_PPG_RDY);
 800799a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800799e:	019b      	lsls	r3, r3, #6
 80079a0:	b25b      	sxtb	r3, r3
 80079a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a6:	b25a      	sxtb	r2, r3
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	b25b      	sxtb	r3, r3
 80079ac:	4313      	orrs	r3, r2
 80079ae:	b25b      	sxtb	r3, r3
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80079b4:	f107 020f 	add.w	r2, r7, #15
 80079b8:	2301      	movs	r3, #1
 80079ba:	2102      	movs	r1, #2
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff45 	bl	800784c <max30102_write>
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 80079d6:	f107 020f 	add.w	r2, r7, #15
 80079da:	2301      	movs	r3, #1
 80079dc:	2109      	movs	r1, #9
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff ff68 	bl	80078b4 <max30102_read>
    config = (config & 0xf8) | mode;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	b25b      	sxtb	r3, r3
 80079e8:	f023 0307 	bic.w	r3, r3, #7
 80079ec:	b25a      	sxtb	r2, r3
 80079ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	b25b      	sxtb	r3, r3
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 80079fa:	f107 020f 	add.w	r2, r7, #15
 80079fe:	2301      	movs	r3, #1
 8007a00:	2109      	movs	r1, #9
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff ff22 	bl	800784c <max30102_write>
    max30102_clear_fifo(obj);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f909 	bl	8007c20 <max30102_clear_fifo>
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007a22:	f107 020f 	add.w	r2, r7, #15
 8007a26:	2301      	movs	r3, #1
 8007a28:	210a      	movs	r1, #10
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff ff42 	bl	80078b4 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	b25b      	sxtb	r3, r3
 8007a34:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 8007a38:	b25a      	sxtb	r2, r3
 8007a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	b25b      	sxtb	r3, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	b25b      	sxtb	r3, r3
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007a4a:	f107 020f 	add.w	r2, r7, #15
 8007a4e:	2301      	movs	r3, #1
 8007a50:	210a      	movs	r1, #10
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff fefa 	bl	800784c <max30102_write>
}
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007a6c:	f107 020f 	add.w	r2, r7, #15
 8007a70:	2301      	movs	r3, #1
 8007a72:	210a      	movs	r1, #10
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff ff1d 	bl	80078b4 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	b25b      	sxtb	r3, r3
 8007a7e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8007a82:	b25a      	sxtb	r2, r3
 8007a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	b25b      	sxtb	r3, r3
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007a90:	f107 020f 	add.w	r2, r7, #15
 8007a94:	2301      	movs	r3, #1
 8007a96:	210a      	movs	r1, #10
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff fed7 	bl	800784c <max30102_write>
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007ab2:	f107 020f 	add.w	r2, r7, #15
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	210a      	movs	r1, #10
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fefa 	bl	80078b4 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	b25b      	sxtb	r3, r3
 8007ac4:	f003 031f 	and.w	r3, r3, #31
 8007ac8:	b25a      	sxtb	r2, r3
 8007aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ace:	015b      	lsls	r3, r3, #5
 8007ad0:	b25b      	sxtb	r3, r3
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	b25b      	sxtb	r3, r3
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007ada:	f107 020f 	add.w	r2, r7, #15
 8007ade:	2301      	movs	r3, #1
 8007ae0:	210a      	movs	r1, #10
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff feb2 	bl	800784c <max30102_write>
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
	if (ma<51){
 8007afa:	4915      	ldr	r1, [pc, #84]	@ (8007b50 <max30102_set_led_current_1+0x60>)
 8007afc:	6838      	ldr	r0, [r7, #0]
 8007afe:	f7f9 fadf 	bl	80010c0 <__aeabi_fcmplt>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d100      	bne.n	8007b0a <max30102_set_led_current_1+0x1a>
		uint8_t pa = ma / 0.2;
		max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
	}
}
 8007b08:	e017      	b.n	8007b3a <max30102_set_led_current_1+0x4a>
		uint8_t pa = ma / 0.2;
 8007b0a:	6838      	ldr	r0, [r7, #0]
 8007b0c:	f7f8 fc8c 	bl	8000428 <__aeabi_f2d>
 8007b10:	a30d      	add	r3, pc, #52	@ (adr r3, 8007b48 <max30102_set_led_current_1+0x58>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fe09 	bl	800072c <__aeabi_ddiv>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	f7f8 ffb1 	bl	8000a88 <__aeabi_d2uiz>
 8007b26:	4603      	mov	r3, r0
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	73fb      	strb	r3, [r7, #15]
		max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8007b2c:	f107 020f 	add.w	r2, r7, #15
 8007b30:	2301      	movs	r3, #1
 8007b32:	210c      	movs	r1, #12
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff fe89 	bl	800784c <max30102_write>
}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	f3af 8000 	nop.w
 8007b48:	9999999a 	.word	0x9999999a
 8007b4c:	3fc99999 	.word	0x3fc99999
 8007b50:	424c0000 	.word	0x424c0000
 8007b54:	00000000 	.word	0x00000000

08007b58 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8007b62:	6838      	ldr	r0, [r7, #0]
 8007b64:	f7f8 fc60 	bl	8000428 <__aeabi_f2d>
 8007b68:	a30d      	add	r3, pc, #52	@ (adr r3, 8007ba0 <max30102_set_led_current_2+0x48>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fddd 	bl	800072c <__aeabi_ddiv>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f7f8 ff85 	bl	8000a88 <__aeabi_d2uiz>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8007b84:	f107 020f 	add.w	r2, r7, #15
 8007b88:	2301      	movs	r3, #1
 8007b8a:	210d      	movs	r1, #13
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fe5d 	bl	800784c <max30102_write>
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w
 8007ba0:	9999999a 	.word	0x9999999a
 8007ba4:	3fc99999 	.word	0x3fc99999

08007ba8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	70fb      	strb	r3, [r7, #3]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70bb      	strb	r3, [r7, #2]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8007bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bca:	015b      	lsls	r3, r3, #5
 8007bcc:	b25a      	sxtb	r2, r3
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	b25b      	sxtb	r3, r3
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	b25b      	sxtb	r3, r3
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8007bda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	b25b      	sxtb	r3, r3
 8007be2:	f003 0310 	and.w	r3, r3, #16
 8007be6:	b25a      	sxtb	r2, r3
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	b25b      	sxtb	r3, r3
 8007bec:	4313      	orrs	r3, r2
 8007bee:	b25b      	sxtb	r3, r3
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8007bf4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8007bf8:	f003 030f 	and.w	r3, r3, #15
 8007bfc:	b25a      	sxtb	r2, r3
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	b25b      	sxtb	r3, r3
 8007c02:	4313      	orrs	r3, r2
 8007c04:	b25b      	sxtb	r3, r3
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8007c0a:	f107 020f 	add.w	r2, r7, #15
 8007c0e:	2301      	movs	r3, #1
 8007c10:	2108      	movs	r1, #8
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fe1a 	bl	800784c <max30102_write>
}
 8007c18:	bf00      	nop
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8007c2c:	f107 020f 	add.w	r2, r7, #15
 8007c30:	2303      	movs	r3, #3
 8007c32:	2104      	movs	r1, #4
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff fe09 	bl	800784c <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8007c3a:	f107 020f 	add.w	r2, r7, #15
 8007c3e:	2303      	movs	r3, #3
 8007c40:	2106      	movs	r1, #6
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff fe02 	bl	800784c <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8007c48:	f107 020f 	add.w	r2, r7, #15
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	2105      	movs	r1, #5
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff fdfb 	bl	800784c <max30102_write>
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b088      	sub	sp, #32
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	74fb      	strb	r3, [r7, #19]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8007c6e:	f107 0213 	add.w	r2, r7, #19
 8007c72:	2301      	movs	r3, #1
 8007c74:	2104      	movs	r1, #4
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff fe1c 	bl	80078b4 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8007c7c:	f107 0212 	add.w	r2, r7, #18
 8007c80:	2301      	movs	r3, #1
 8007c82:	2106      	movs	r1, #6
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fe15 	bl	80078b4 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8007c8a:	7cfa      	ldrb	r2, [r7, #19]
 8007c8c:	7cbb      	ldrb	r3, [r7, #18]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8007c94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dc03      	bgt.n	8007ca4 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8007c9c:	7ffb      	ldrb	r3, [r7, #31]
 8007c9e:	3320      	adds	r3, #32
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77bb      	strb	r3, [r7, #30]
 8007ca8:	e033      	b.n	8007d12 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8007caa:	f107 020c 	add.w	r2, r7, #12
 8007cae:	2306      	movs	r3, #6
 8007cb0:	2107      	movs	r1, #7
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff fdfe 	bl	80078b4 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8007cb8:	7b3b      	ldrb	r3, [r7, #12]
 8007cba:	041a      	lsls	r2, r3, #16
 8007cbc:	7b7b      	ldrb	r3, [r7, #13]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	7bba      	ldrb	r2, [r7, #14]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8007cca:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	041a      	lsls	r2, r3, #16
 8007cd0:	7c3b      	ldrb	r3, [r7, #16]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	7c7a      	ldrb	r2, [r7, #17]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8007cde:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8007ce0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8007cee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	3320      	adds	r3, #32
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8007cfe:	6979      	ldr	r1, [r7, #20]
 8007d00:	69b8      	ldr	r0, [r7, #24]
 8007d02:	f7ff fd7b 	bl	80077fc <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8007d06:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	77bb      	strb	r3, [r7, #30]
 8007d12:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8007d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	dbc5      	blt.n	8007caa <max30102_read_fifo+0x4c>
    }
    obj->_sample_count = num_samples;
 8007d1e:	7ffa      	ldrb	r2, [r7, #31]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
}
 8007d26:	bf00      	nop
 8007d28:	3720      	adds	r7, #32
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <apply_moving_average>:
uint32_t startup_samples = 0;

// MAX30102 object
max30102_t max30102;

uint32_t apply_moving_average(uint32_t new_sample, uint32_t *filter_buffer, int *filter_index) {
 8007d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007d34:	b088      	sub	sp, #32
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
    filter_buffer[*filter_index] = new_sample;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	4413      	add	r3, r2
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	601a      	str	r2, [r3, #0]
    *filter_index = (*filter_index + 1) % FILTER_SIZE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	1c59      	adds	r1, r3, #1
 8007d52:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc8 <apply_moving_average+0x98>)
 8007d54:	fb83 2301 	smull	r2, r3, r3, r1
 8007d58:	105a      	asrs	r2, r3, #1
 8007d5a:	17cb      	asrs	r3, r1, #31
 8007d5c:	1ad2      	subs	r2, r2, r3
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	1aca      	subs	r2, r1, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]

    uint64_t sum = 0;
 8007d6a:	f04f 0200 	mov.w	r2, #0
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for(int i = 0; i < FILTER_SIZE; i++) {
 8007d76:	2300      	movs	r3, #0
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e012      	b.n	8007da2 <apply_moving_average+0x72>
        sum += filter_buffer[i];
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	4413      	add	r3, r2
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2200      	movs	r2, #0
 8007d88:	461c      	mov	r4, r3
 8007d8a:	4615      	mov	r5, r2
 8007d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d90:	eb12 0804 	adds.w	r8, r2, r4
 8007d94:	eb43 0905 	adc.w	r9, r3, r5
 8007d98:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(int i = 0; i < FILTER_SIZE; i++) {
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	dde9      	ble.n	8007d7c <apply_moving_average+0x4c>
    }
    return sum / FILTER_SIZE;
 8007da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007dac:	f04f 0205 	mov.w	r2, #5
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	f7f9 f9ac 	bl	8001110 <__aeabi_uldivmod>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4613      	mov	r3, r2
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007dc8:	66666667 	.word	0x66666667

08007dcc <calculate_bpm_average>:

float calculate_bpm_average(float *bpm_array, int count) {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
    if (count == 0) return 0.0;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <calculate_bpm_average+0x16>
 8007ddc:	f04f 0300 	mov.w	r3, #0
 8007de0:	e020      	b.n	8007e24 <calculate_bpm_average+0x58>

    float sum = 0.0;
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < count; i++) {
 8007de8:	2300      	movs	r3, #0
 8007dea:	60bb      	str	r3, [r7, #8]
 8007dec:	e00d      	b.n	8007e0a <calculate_bpm_average+0x3e>
        sum += bpm_array[i];
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	4413      	add	r3, r2
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7f8 feba 	bl	8000b74 <__addsf3>
 8007e00:	4603      	mov	r3, r0
 8007e02:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < count; i++) {
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	dbed      	blt.n	8007dee <calculate_bpm_average+0x22>
    }
    return sum / count;
 8007e12:	6838      	ldr	r0, [r7, #0]
 8007e14:	f7f8 ff62 	bl	8000cdc <__aeabi_i2f>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7f9 f865 	bl	8000eec <__aeabi_fdiv>
 8007e22:	4603      	mov	r3, r0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <configure_MAX30102>:

void configure_MAX30102 (void) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
	max30102_init(&max30102, &hi2c1);
 8007e32:	4923      	ldr	r1, [pc, #140]	@ (8007ec0 <configure_MAX30102+0x94>)
 8007e34:	4823      	ldr	r0, [pc, #140]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e36:	f7ff fceb 	bl	8007810 <max30102_init>
    max30102_reset(&max30102);
 8007e3a:	4822      	ldr	r0, [pc, #136]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e3c:	f7ff fd5f 	bl	80078fe <max30102_reset>
    HAL_Delay(100); // Allow reset to complete
 8007e40:	2064      	movs	r0, #100	@ 0x64
 8007e42:	f7f9 fb67 	bl	8001514 <HAL_Delay>
    max30102_clear_fifo(&max30102);
 8007e46:	481f      	ldr	r0, [pc, #124]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e48:	f7ff feea 	bl	8007c20 <max30102_clear_fifo>

    // FIFO configuration
    max30102_set_fifo_config(&max30102, max30102_smp_ave_4, 1, 15);
 8007e4c:	230f      	movs	r3, #15
 8007e4e:	2201      	movs	r2, #1
 8007e50:	2102      	movs	r1, #2
 8007e52:	481c      	ldr	r0, [pc, #112]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e54:	f7ff fea8 	bl	8007ba8 <max30102_set_fifo_config>

    // Sensor settings
    max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8007e58:	2101      	movs	r1, #1
 8007e5a:	481a      	ldr	r0, [pc, #104]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e5c:	f7ff fe00 	bl	8007a60 <max30102_set_led_pulse_width>
    max30102_set_adc_resolution(&max30102, max30102_adc_4096);
 8007e60:	2101      	movs	r1, #1
 8007e62:	4818      	ldr	r0, [pc, #96]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e64:	f7ff fe1f 	bl	8007aa6 <max30102_set_adc_resolution>
    max30102_set_sampling_rate(&max30102, max30102_sr_100);
 8007e68:	2101      	movs	r1, #1
 8007e6a:	4816      	ldr	r0, [pc, #88]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e6c:	f7ff fdd3 	bl	8007a16 <max30102_set_sampling_rate>

    // LED current settings
    max30102_set_led_current_1(&max30102, 10.0);
 8007e70:	4915      	ldr	r1, [pc, #84]	@ (8007ec8 <configure_MAX30102+0x9c>)
 8007e72:	4814      	ldr	r0, [pc, #80]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e74:	f7ff fe3c 	bl	8007af0 <max30102_set_led_current_1>
    max30102_set_led_current_2(&max30102, 10.0);
 8007e78:	4913      	ldr	r1, [pc, #76]	@ (8007ec8 <configure_MAX30102+0x9c>)
 8007e7a:	4812      	ldr	r0, [pc, #72]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e7c:	f7ff fe6c 	bl	8007b58 <max30102_set_led_current_2>

    // Enter SpO2 mode
    max30102_set_mode(&max30102, max30102_spo2);
 8007e80:	2103      	movs	r1, #3
 8007e82:	4810      	ldr	r0, [pc, #64]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e84:	f7ff fda1 	bl	80079ca <max30102_set_mode>
    max30102_set_a_full(&max30102, 1);
 8007e88:	2101      	movs	r1, #1
 8007e8a:	480e      	ldr	r0, [pc, #56]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e8c:	f7ff fd48 	bl	8007920 <max30102_set_a_full>
    max30102_set_ppg_rdy(&max30102, 1);
 8007e90:	2101      	movs	r1, #1
 8007e92:	480c      	ldr	r0, [pc, #48]	@ (8007ec4 <configure_MAX30102+0x98>)
 8007e94:	f7ff fd6d 	bl	8007972 <max30102_set_ppg_rdy>

    // Initialize BPM array
    for (int i = 0; i < BPM_AVERAGE_SIZE; i++) {
 8007e98:	2300      	movs	r3, #0
 8007e9a:	607b      	str	r3, [r7, #4]
 8007e9c:	e008      	b.n	8007eb0 <configure_MAX30102+0x84>
    	bpm_array[i] = 0.0;
 8007e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8007ecc <configure_MAX30102+0xa0>)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f04f 0100 	mov.w	r1, #0
 8007ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < BPM_AVERAGE_SIZE; i++) {
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3301      	adds	r3, #1
 8007eae:	607b      	str	r3, [r7, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b09      	cmp	r3, #9
 8007eb4:	ddf3      	ble.n	8007e9e <configure_MAX30102+0x72>
    }
}
 8007eb6:	bf00      	nop
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	200011a0 	.word	0x200011a0
 8007ec4:	20001494 	.word	0x20001494
 8007ec8:	41200000 	.word	0x41200000
 8007ecc:	20001460 	.word	0x20001460

08007ed0 <calc_curr_avg_bpm>:

float* calc_curr_avg_bpm (void) {
 8007ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007ed4:	b08a      	sub	sp, #40	@ 0x28
 8007ed6:	af00      	add	r7, sp, #0
	static float curr_avg_ir[3] = {0.0, 0.0, 0.0};
	// Read FIFO
	max30102_read_fifo(&max30102);
 8007ed8:	4877      	ldr	r0, [pc, #476]	@ (80080b8 <calc_curr_avg_bpm+0x1e8>)
 8007eda:	f7ff fec0 	bl	8007c5e <max30102_read_fifo>
	uint32_t ir_value = max30102._ir_samples[0];
 8007ede:	4b76      	ldr	r3, [pc, #472]	@ (80080b8 <calc_curr_avg_bpm+0x1e8>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	61bb      	str	r3, [r7, #24]

	// Apply moving average filter
	uint32_t filtered_value = apply_moving_average(ir_value, filtered_buffer, &filter_index);
 8007ee4:	4a75      	ldr	r2, [pc, #468]	@ (80080bc <calc_curr_avg_bpm+0x1ec>)
 8007ee6:	4976      	ldr	r1, [pc, #472]	@ (80080c0 <calc_curr_avg_bpm+0x1f0>)
 8007ee8:	69b8      	ldr	r0, [r7, #24]
 8007eea:	f7ff ff21 	bl	8007d30 <apply_moving_average>
 8007eee:	6178      	str	r0, [r7, #20]

	// Store in circular buffer for baseline calculation
	ir_buffer[buffer_index++] = filtered_value;
 8007ef0:	4b74      	ldr	r3, [pc, #464]	@ (80080c4 <calc_curr_avg_bpm+0x1f4>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	4973      	ldr	r1, [pc, #460]	@ (80080c4 <calc_curr_avg_bpm+0x1f4>)
 8007ef8:	600a      	str	r2, [r1, #0]
 8007efa:	4973      	ldr	r1, [pc, #460]	@ (80080c8 <calc_curr_avg_bpm+0x1f8>)
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (buffer_index >= BUFFER_SIZE) buffer_index = 0;
 8007f02:	4b70      	ldr	r3, [pc, #448]	@ (80080c4 <calc_curr_avg_bpm+0x1f4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b63      	cmp	r3, #99	@ 0x63
 8007f08:	dd02      	ble.n	8007f10 <calc_curr_avg_bpm+0x40>
 8007f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80080c4 <calc_curr_avg_bpm+0x1f4>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
		continue;
	}*/

	// Calculate baseline as average
	uint64_t sum = 0;
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61fb      	str	r3, [r7, #28]
 8007f20:	e011      	b.n	8007f46 <calc_curr_avg_bpm+0x76>
		sum += ir_buffer[i];
 8007f22:	4a69      	ldr	r2, [pc, #420]	@ (80080c8 <calc_curr_avg_bpm+0x1f8>)
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	461c      	mov	r4, r3
 8007f2e:	4615      	mov	r5, r2
 8007f30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f34:	eb12 0804 	adds.w	r8, r2, r4
 8007f38:	eb43 0905 	adc.w	r9, r3, r5
 8007f3c:	e9c7 8908 	strd	r8, r9, [r7, #32]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	3301      	adds	r3, #1
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	2b63      	cmp	r3, #99	@ 0x63
 8007f4a:	ddea      	ble.n	8007f22 <calc_curr_avg_bpm+0x52>
	}
	uint32_t baseline = sum / BUFFER_SIZE;
 8007f4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f50:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	f7f9 f8da 	bl	8001110 <__aeabi_uldivmod>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4613      	mov	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]

	// AC component (signal minus baseline)
	int32_t ir_ac = (int32_t)filtered_value - (int32_t)baseline;
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	60fb      	str	r3, [r7, #12]

	uint32_t current_time = HAL_GetTick();
 8007f6c:	f7f9 fac8 	bl	8001500 <HAL_GetTick>
 8007f70:	60b8      	str	r0, [r7, #8]

	// 3-point peak detection
	if (ir_ac > prev_signal && prev_signal > prev_prev_signal &&
 8007f72:	4b56      	ldr	r3, [pc, #344]	@ (80080cc <calc_curr_avg_bpm+0x1fc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	dd73      	ble.n	8008064 <calc_curr_avg_bpm+0x194>
 8007f7c:	4b53      	ldr	r3, [pc, #332]	@ (80080cc <calc_curr_avg_bpm+0x1fc>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b53      	ldr	r3, [pc, #332]	@ (80080d0 <calc_curr_avg_bpm+0x200>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	dd6d      	ble.n	8008064 <calc_curr_avg_bpm+0x194>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b1e      	cmp	r3, #30
 8007f8c:	dd6a      	ble.n	8008064 <calc_curr_avg_bpm+0x194>
			ir_ac > SIGNAL_THRESHOLD && !peak_found) {
 8007f8e:	4b51      	ldr	r3, [pc, #324]	@ (80080d4 <calc_curr_avg_bpm+0x204>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	f083 0301 	eor.w	r3, r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d063      	beq.n	8008064 <calc_curr_avg_bpm+0x194>

		// Peak detected at previous point
		if (current_time - last_peak_time > MIN_PEAK_DISTANCE) {
 8007f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80080d8 <calc_curr_avg_bpm+0x208>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	2bc8      	cmp	r3, #200	@ 0xc8
 8007fa6:	d965      	bls.n	8008074 <calc_curr_avg_bpm+0x1a4>

			// Calculate BPM
			if (last_peak_time > 0) {
 8007fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80080d8 <calc_curr_avg_bpm+0x208>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d052      	beq.n	8008056 <calc_curr_avg_bpm+0x186>
				uint32_t interval = current_time - last_peak_time;
 8007fb0:	4b49      	ldr	r3, [pc, #292]	@ (80080d8 <calc_curr_avg_bpm+0x208>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	607b      	str	r3, [r7, #4]
				current_bpm = 60000.0 / interval;
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7f8 fa12 	bl	80003e4 <__aeabi_ui2d>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	a13a      	add	r1, pc, #232	@ (adr r1, 80080b0 <calc_curr_avg_bpm+0x1e0>)
 8007fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fca:	f7f8 fbaf 	bl	800072c <__aeabi_ddiv>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	f7f8 fd77 	bl	8000ac8 <__aeabi_d2f>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80080dc <calc_curr_avg_bpm+0x20c>)
 8007fde:	6013      	str	r3, [r2, #0]

				// Validate BPM range (40-200 BPM)
				if (current_bpm >= 40 && current_bpm <= 200) {
 8007fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80080dc <calc_curr_avg_bpm+0x20c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	493e      	ldr	r1, [pc, #248]	@ (80080e0 <calc_curr_avg_bpm+0x210>)
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7f9 f87e 	bl	80010e8 <__aeabi_fcmpge>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d031      	beq.n	8008056 <calc_curr_avg_bpm+0x186>
 8007ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80080dc <calc_curr_avg_bpm+0x20c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	493b      	ldr	r1, [pc, #236]	@ (80080e4 <calc_curr_avg_bpm+0x214>)
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7f9 f86b 	bl	80010d4 <__aeabi_fcmple>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d028      	beq.n	8008056 <calc_curr_avg_bpm+0x186>

					// Add to BPM array for averaging
					bpm_array[bpm_counter] = current_bpm;
 8008004:	4b38      	ldr	r3, [pc, #224]	@ (80080e8 <calc_curr_avg_bpm+0x218>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a34      	ldr	r2, [pc, #208]	@ (80080dc <calc_curr_avg_bpm+0x20c>)
 800800a:	6812      	ldr	r2, [r2, #0]
 800800c:	4937      	ldr	r1, [pc, #220]	@ (80080ec <calc_curr_avg_bpm+0x21c>)
 800800e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					bpm_counter++;
 8008012:	4b35      	ldr	r3, [pc, #212]	@ (80080e8 <calc_curr_avg_bpm+0x218>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	4a33      	ldr	r2, [pc, #204]	@ (80080e8 <calc_curr_avg_bpm+0x218>)
 800801a:	6013      	str	r3, [r2, #0]

					// Check if array is full
					if (bpm_counter >= BPM_AVERAGE_SIZE) {
 800801c:	4b32      	ldr	r3, [pc, #200]	@ (80080e8 <calc_curr_avg_bpm+0x218>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b09      	cmp	r3, #9
 8008022:	dd05      	ble.n	8008030 <calc_curr_avg_bpm+0x160>
						bpm_counter = 0;
 8008024:	4b30      	ldr	r3, [pc, #192]	@ (80080e8 <calc_curr_avg_bpm+0x218>)
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
						array_filled = true;
 800802a:	4b31      	ldr	r3, [pc, #196]	@ (80080f0 <calc_curr_avg_bpm+0x220>)
 800802c:	2201      	movs	r2, #1
 800802e:	701a      	strb	r2, [r3, #0]
					}

					// Calculate average BPM
					int count_for_average = array_filled ? BPM_AVERAGE_SIZE : bpm_counter;
 8008030:	4b2f      	ldr	r3, [pc, #188]	@ (80080f0 <calc_curr_avg_bpm+0x220>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <calc_curr_avg_bpm+0x16c>
 8008038:	230a      	movs	r3, #10
 800803a:	e001      	b.n	8008040 <calc_curr_avg_bpm+0x170>
 800803c:	4b2a      	ldr	r3, [pc, #168]	@ (80080e8 <calc_curr_avg_bpm+0x218>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	603b      	str	r3, [r7, #0]
					if (count_for_average > 0) {
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	dd06      	ble.n	8008056 <calc_curr_avg_bpm+0x186>
						average_bpm = calculate_bpm_average(bpm_array, count_for_average);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	4828      	ldr	r0, [pc, #160]	@ (80080ec <calc_curr_avg_bpm+0x21c>)
 800804c:	f7ff febe 	bl	8007dcc <calculate_bpm_average>
 8008050:	4603      	mov	r3, r0
 8008052:	4a28      	ldr	r2, [pc, #160]	@ (80080f4 <calc_curr_avg_bpm+0x224>)
 8008054:	6013      	str	r3, [r2, #0]
					}
				}
			}
			last_peak_time = current_time;
 8008056:	4a20      	ldr	r2, [pc, #128]	@ (80080d8 <calc_curr_avg_bpm+0x208>)
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	6013      	str	r3, [r2, #0]
			peak_found = true;
 800805c:	4b1d      	ldr	r3, [pc, #116]	@ (80080d4 <calc_curr_avg_bpm+0x204>)
 800805e:	2201      	movs	r2, #1
 8008060:	701a      	strb	r2, [r3, #0]
		if (current_time - last_peak_time > MIN_PEAK_DISTANCE) {
 8008062:	e007      	b.n	8008074 <calc_curr_avg_bpm+0x1a4>
		}
	} else if (ir_ac < prev_signal) {
 8008064:	4b19      	ldr	r3, [pc, #100]	@ (80080cc <calc_curr_avg_bpm+0x1fc>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	429a      	cmp	r2, r3
 800806c:	da02      	bge.n	8008074 <calc_curr_avg_bpm+0x1a4>
		peak_found = false;
 800806e:	4b19      	ldr	r3, [pc, #100]	@ (80080d4 <calc_curr_avg_bpm+0x204>)
 8008070:	2200      	movs	r2, #0
 8008072:	701a      	strb	r2, [r3, #0]
	}

	// Update signal history
	prev_prev_signal = prev_signal;
 8008074:	4b15      	ldr	r3, [pc, #84]	@ (80080cc <calc_curr_avg_bpm+0x1fc>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a15      	ldr	r2, [pc, #84]	@ (80080d0 <calc_curr_avg_bpm+0x200>)
 800807a:	6013      	str	r3, [r2, #0]
	prev_signal = ir_ac;
 800807c:	4a13      	ldr	r2, [pc, #76]	@ (80080cc <calc_curr_avg_bpm+0x1fc>)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6013      	str	r3, [r2, #0]
	curr_avg_ir[0] = current_bpm;
 8008082:	4b16      	ldr	r3, [pc, #88]	@ (80080dc <calc_curr_avg_bpm+0x20c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1c      	ldr	r2, [pc, #112]	@ (80080f8 <calc_curr_avg_bpm+0x228>)
 8008088:	6013      	str	r3, [r2, #0]
	curr_avg_ir[1] = average_bpm;
 800808a:	4b1a      	ldr	r3, [pc, #104]	@ (80080f4 <calc_curr_avg_bpm+0x224>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a1a      	ldr	r2, [pc, #104]	@ (80080f8 <calc_curr_avg_bpm+0x228>)
 8008090:	6053      	str	r3, [r2, #4]
	curr_avg_ir[2] = ir_value;
 8008092:	69b8      	ldr	r0, [r7, #24]
 8008094:	f7f8 fe1e 	bl	8000cd4 <__aeabi_ui2f>
 8008098:	4603      	mov	r3, r0
 800809a:	4a17      	ldr	r2, [pc, #92]	@ (80080f8 <calc_curr_avg_bpm+0x228>)
 800809c:	6093      	str	r3, [r2, #8]
	return curr_avg_ir;
 800809e:	4b16      	ldr	r3, [pc, #88]	@ (80080f8 <calc_curr_avg_bpm+0x228>)
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3728      	adds	r7, #40	@ 0x28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80080aa:	bf00      	nop
 80080ac:	f3af 8000 	nop.w
 80080b0:	00000000 	.word	0x00000000
 80080b4:	40ed4c00 	.word	0x40ed4c00
 80080b8:	20001494 	.word	0x20001494
 80080bc:	20001448 	.word	0x20001448
 80080c0:	20001434 	.word	0x20001434
 80080c4:	20001430 	.word	0x20001430
 80080c8:	200012a0 	.word	0x200012a0
 80080cc:	20001454 	.word	0x20001454
 80080d0:	20001458 	.word	0x20001458
 80080d4:	2000145c 	.word	0x2000145c
 80080d8:	2000144c 	.word	0x2000144c
 80080dc:	20001450 	.word	0x20001450
 80080e0:	42200000 	.word	0x42200000
 80080e4:	43480000 	.word	0x43480000
 80080e8:	20001488 	.word	0x20001488
 80080ec:	20001460 	.word	0x20001460
 80080f0:	20001490 	.word	0x20001490
 80080f4:	2000148c 	.word	0x2000148c
 80080f8:	2000159c 	.word	0x2000159c

080080fc <render_bpm>:

float* render_bpm (void) {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08c      	sub	sp, #48	@ 0x30
 8008100:	af02      	add	r7, sp, #8
	float* curr_avg_ir;
	// Potentially dangerous
	curr_avg_ir = calc_curr_avg_bpm();
 8008102:	f7ff fee5 	bl	8007ed0 <calc_curr_avg_bpm>
 8008106:	6278      	str	r0, [r7, #36]	@ 0x24
	// Display on OLED
	ssd1306_Fill(0); // Clear screen
 8008108:	2000      	movs	r0, #0
 800810a:	f000 fc3d 	bl	8008988 <ssd1306_Fill>
	if (curr_avg_ir[2] < 10000) {
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	3308      	adds	r3, #8
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4930      	ldr	r1, [pc, #192]	@ (80081d8 <render_bpm+0xdc>)
 8008116:	4618      	mov	r0, r3
 8008118:	f7f8 ffd2 	bl	80010c0 <__aeabi_fcmplt>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00b      	beq.n	800813a <render_bpm+0x3e>
		ssd1306_SetCursor(0, 0);
 8008122:	2100      	movs	r1, #0
 8008124:	2000      	movs	r0, #0
 8008126:	f000 fd7d 	bl	8008c24 <ssd1306_SetCursor>
		ssd1306_WriteString("No finger detected!", Font_7x10, White);
 800812a:	4b2c      	ldr	r3, [pc, #176]	@ (80081dc <render_bpm+0xe0>)
 800812c:	2201      	movs	r2, #1
 800812e:	9200      	str	r2, [sp, #0]
 8008130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008132:	482b      	ldr	r0, [pc, #172]	@ (80081e0 <render_bpm+0xe4>)
 8008134:	f000 fd50 	bl	8008bd8 <ssd1306_WriteString>
 8008138:	e047      	b.n	80081ca <render_bpm+0xce>
	} else {
		// Display current BPM
		if (curr_avg_ir[0] > 0) {
 800813a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f04f 0100 	mov.w	r1, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f7f8 ffda 	bl	80010fc <__aeabi_fcmpgt>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d018      	beq.n	8008180 <render_bpm+0x84>
			char bpm_str[32];
			snprintf(bpm_str, sizeof(bpm_str), "BPM: %.0f", curr_avg_ir[0]);
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f7f8 f968 	bl	8000428 <__aeabi_f2d>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	1d38      	adds	r0, r7, #4
 800815e:	e9cd 2300 	strd	r2, r3, [sp]
 8008162:	4a20      	ldr	r2, [pc, #128]	@ (80081e4 <render_bpm+0xe8>)
 8008164:	2120      	movs	r1, #32
 8008166:	f002 f95f 	bl	800a428 <sniprintf>
			ssd1306_SetCursor(0, 15);
 800816a:	210f      	movs	r1, #15
 800816c:	2000      	movs	r0, #0
 800816e:	f000 fd59 	bl	8008c24 <ssd1306_SetCursor>
			ssd1306_WriteString(bpm_str, Font_7x10, White);
 8008172:	4b1a      	ldr	r3, [pc, #104]	@ (80081dc <render_bpm+0xe0>)
 8008174:	1d38      	adds	r0, r7, #4
 8008176:	2201      	movs	r2, #1
 8008178:	9200      	str	r2, [sp, #0]
 800817a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800817c:	f000 fd2c 	bl	8008bd8 <ssd1306_WriteString>
		}

		// Display average BPM
		if (curr_avg_ir[1] > 0) {
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	3304      	adds	r3, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f04f 0100 	mov.w	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f7f8 ffb6 	bl	80010fc <__aeabi_fcmpgt>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d019      	beq.n	80081ca <render_bpm+0xce>
			char avg_bpm_str[32];
			snprintf(avg_bpm_str, sizeof(avg_bpm_str), "Avg: %.1f", curr_avg_ir[1]);
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008198:	3304      	adds	r3, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f7f8 f943 	bl	8000428 <__aeabi_f2d>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	1d38      	adds	r0, r7, #4
 80081a8:	e9cd 2300 	strd	r2, r3, [sp]
 80081ac:	4a0e      	ldr	r2, [pc, #56]	@ (80081e8 <render_bpm+0xec>)
 80081ae:	2120      	movs	r1, #32
 80081b0:	f002 f93a 	bl	800a428 <sniprintf>
			ssd1306_SetCursor(0, 30);
 80081b4:	211e      	movs	r1, #30
 80081b6:	2000      	movs	r0, #0
 80081b8:	f000 fd34 	bl	8008c24 <ssd1306_SetCursor>
			ssd1306_WriteString(avg_bpm_str, Font_7x10, White);
 80081bc:	4b07      	ldr	r3, [pc, #28]	@ (80081dc <render_bpm+0xe0>)
 80081be:	1d38      	adds	r0, r7, #4
 80081c0:	2201      	movs	r2, #1
 80081c2:	9200      	str	r2, [sp, #0]
 80081c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081c6:	f000 fd07 	bl	8008bd8 <ssd1306_WriteString>
		}
	}

	ssd1306_UpdateScreen();
 80081ca:	f000 fbf5 	bl	80089b8 <ssd1306_UpdateScreen>
	return curr_avg_ir;
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3728      	adds	r7, #40	@ 0x28
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	461c4000 	.word	0x461c4000
 80081dc:	0800ff28 	.word	0x0800ff28
 80081e0:	0800dbe0 	.word	0x0800dbe0
 80081e4:	0800dbf4 	.word	0x0800dbf4
 80081e8:	0800dc00 	.word	0x0800dc00

080081ec <MPU6050_Init>:
#include <stdbool.h>
#include <string.h>


void MPU6050_Init (mpu6050_t *mpu6050, I2C_HandleTypeDef *hi2c1) // WHO AM I is to verify the identity of device
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	@ 0x28
 80081f0:	af04      	add	r7, sp, #16
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint8_t check;
  uint8_t Data;
  mpu6050->_I2C = hi2c1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  HAL_I2C_Mem_Read (hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);  // read WHO_AM_I
 80081fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008200:	9302      	str	r3, [sp, #8]
 8008202:	2301      	movs	r3, #1
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	f107 030f 	add.w	r3, r7, #15
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	2301      	movs	r3, #1
 800820e:	2275      	movs	r2, #117	@ 0x75
 8008210:	21d0      	movs	r1, #208	@ 0xd0
 8008212:	6838      	ldr	r0, [r7, #0]
 8008214:	f7fa fa78 	bl	8002708 <HAL_I2C_Mem_Read>

  HAL_Delay(100); // Small delay
 8008218:	2064      	movs	r0, #100	@ 0x64
 800821a:	f7f9 f97b 	bl	8001514 <HAL_Delay>

   if (check == MPU6050_ADDR_WO_SHIFT)  // 0x68 will be returned by the sensor if everything goes well
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	2b68      	cmp	r3, #104	@ 0x68
 8008222:	f040 808d 	bne.w	8008340 <MPU6050_Init+0x154>
  {
	  Data = 0x80; // Device reset
 8008226:	2380      	movs	r3, #128	@ 0x80
 8008228:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 800822a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800822e:	9302      	str	r3, [sp, #8]
 8008230:	2301      	movs	r3, #1
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	f107 030e 	add.w	r3, r7, #14
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	2301      	movs	r3, #1
 800823c:	226b      	movs	r2, #107	@ 0x6b
 800823e:	21d0      	movs	r1, #208	@ 0xd0
 8008240:	6838      	ldr	r0, [r7, #0]
 8008242:	f7fa f967 	bl	8002514 <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 8008246:	2064      	movs	r0, #100	@ 0x64
 8008248:	f7f9 f964 	bl	8001514 <HAL_Delay>

	  // Wake up and set clock source to PLL with X-axis gyro reference
	  Data = 0x01; // Use PLL with X-axis gyro, not internal oscillator
 800824c:	2301      	movs	r3, #1
 800824e:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8008250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008254:	9302      	str	r3, [sp, #8]
 8008256:	2301      	movs	r3, #1
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	f107 030e 	add.w	r3, r7, #14
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	2301      	movs	r3, #1
 8008262:	226b      	movs	r2, #107	@ 0x6b
 8008264:	21d0      	movs	r1, #208	@ 0xd0
 8008266:	6838      	ldr	r0, [r7, #0]
 8008268:	f7fa f954 	bl	8002514 <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 800826c:	2064      	movs	r0, #100	@ 0x64
 800826e:	f7f9 f951 	bl	8001514 <HAL_Delay>

	  // Ensure all sensors are enabled
	  Data = 0x00; // Enable all accelerometer and gyroscope axes
 8008272:	2300      	movs	r3, #0
 8008274:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_2, 1, &Data, 1, 1000);
 8008276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800827a:	9302      	str	r3, [sp, #8]
 800827c:	2301      	movs	r3, #1
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	f107 030e 	add.w	r3, r7, #14
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	2301      	movs	r3, #1
 8008288:	226c      	movs	r2, #108	@ 0x6c
 800828a:	21d0      	movs	r1, #208	@ 0xd0
 800828c:	6838      	ldr	r0, [r7, #0]
 800828e:	f7fa f941 	bl	8002514 <HAL_I2C_Mem_Write>
	  HAL_Delay(50);
 8008292:	2032      	movs	r0, #50	@ 0x32
 8008294:	f7f9 f93e 	bl	8001514 <HAL_Delay>

	  // Configure DLPF first (affects sample rate)
	  MPU6050_Configure_DLPF(hi2c1, 0x03); // 42Hz bandwidth instead of 0x01
 8008298:	2103      	movs	r1, #3
 800829a:	6838      	ldr	r0, [r7, #0]
 800829c:	f000 f880 	bl	80083a0 <MPU6050_Configure_DLPF>

	  // Set sample rate: Sample Rate = 1kHz / (1 + SMPLRT_DIV)
	  // For 100Hz: SMPLRT_DIV = 9
	  Data = 0x09; // 100Hz sample rate
 80082a0:	2309      	movs	r3, #9
 80082a2:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 80082a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80082a8:	9302      	str	r3, [sp, #8]
 80082aa:	2301      	movs	r3, #1
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	f107 030e 	add.w	r3, r7, #14
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	2301      	movs	r3, #1
 80082b6:	2219      	movs	r2, #25
 80082b8:	21d0      	movs	r1, #208	@ 0xd0
 80082ba:	6838      	ldr	r0, [r7, #0]
 80082bc:	f7fa f92a 	bl	8002514 <HAL_I2C_Mem_Write>

	  // Set accelerometer configuration in ACCEL_CONFIG Register
	  Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> <strong>±</strong> 2g
 80082c0:	2300      	movs	r3, #0
 80082c2:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80082c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80082c8:	9302      	str	r3, [sp, #8]
 80082ca:	2301      	movs	r3, #1
 80082cc:	9301      	str	r3, [sp, #4]
 80082ce:	f107 030e 	add.w	r3, r7, #14
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	2301      	movs	r3, #1
 80082d6:	221c      	movs	r2, #28
 80082d8:	21d0      	movs	r1, #208	@ 0xd0
 80082da:	6838      	ldr	r0, [r7, #0]
 80082dc:	f7fa f91a 	bl	8002514 <HAL_I2C_Mem_Write>

	  // Set Gyroscopic configuration in GYRO_CONFIG Register
	  Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> <strong>±</strong> 250 ̐/s
 80082e0:	2300      	movs	r3, #0
 80082e2:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80082e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80082e8:	9302      	str	r3, [sp, #8]
 80082ea:	2301      	movs	r3, #1
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	f107 030e 	add.w	r3, r7, #14
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2301      	movs	r3, #1
 80082f6:	221b      	movs	r2, #27
 80082f8:	21d0      	movs	r1, #208	@ 0xd0
 80082fa:	6838      	ldr	r0, [r7, #0]
 80082fc:	f7fa f90a 	bl	8002514 <HAL_I2C_Mem_Write>

	  for (int i = 0; i < 3; i++){
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e009      	b.n	800831a <MPU6050_Init+0x12e>
		  mpu6050->accelerometer.scaleXYZ[i] = LSB_SENSITIVITY_ACC_DEFAULT;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	3206      	adds	r2, #6
 800830c:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8008310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for (int i = 0; i < 3; i++){
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	3301      	adds	r3, #1
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b02      	cmp	r3, #2
 800831e:	ddf2      	ble.n	8008306 <MPU6050_Init+0x11a>
	  }

	  for (int i = 0; i < 3; i++){
 8008320:	2300      	movs	r3, #0
 8008322:	613b      	str	r3, [r7, #16]
 8008324:	e009      	b.n	800833a <MPU6050_Init+0x14e>
		  mpu6050->gyroscope.scaleXYZ[i] = LSB_SENSITIVITY_GYRO_DEFAULT;
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	330e      	adds	r3, #14
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	4a0e      	ldr	r2, [pc, #56]	@ (800836c <MPU6050_Init+0x180>)
 8008332:	605a      	str	r2, [r3, #4]
	  for (int i = 0; i < 3; i++){
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	3301      	adds	r3, #1
 8008338:	613b      	str	r3, [r7, #16]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b02      	cmp	r3, #2
 800833e:	ddf2      	ble.n	8008326 <MPU6050_Init+0x13a>
	  }

  }
   // FIFO init
   // TODO: check if it's sequence of functions actually necessary
   MPU6050_Reset_FIFO(mpu6050);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f844 	bl	80083ce <MPU6050_Reset_FIFO>
   HAL_Delay(50);
 8008346:	2032      	movs	r0, #50	@ 0x32
 8008348:	f7f9 f8e4 	bl	8001514 <HAL_Delay>
   MPU6050_configure_Fifo(mpu6050);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f8c9 	bl	80084e4 <MPU6050_configure_Fifo>
   HAL_Delay(50);
 8008352:	2032      	movs	r0, #50	@ 0x32
 8008354:	f7f9 f8de 	bl	8001514 <HAL_Delay>
   MPU6050_Enable_FIFO(mpu6050);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f897 	bl	800848c <MPU6050_Enable_FIFO>
   HAL_Delay(100); // Allow FIFO to fill
 800835e:	2064      	movs	r0, #100	@ 0x64
 8008360:	f7f9 f8d8 	bl	8001514 <HAL_Delay>
}
 8008364:	bf00      	nop
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	43030000 	.word	0x43030000

08008370 <MPU6050_Set_Accel_Offset_Scale>:
	}
}

// For six point calibration.
// Note: scale is the same as for sensitivity calibration. Generally this function is for purpose when user want to put different scales on each axis
void MPU6050_Set_Accel_Offset_Scale (mpu6050_t *mpu6050, float* offsetXYZ, float* scaleXYZ) {
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
	memcpy(mpu6050->accelerometer.offsetXYZ, offsetXYZ, 3*sizeof(float));
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	330c      	adds	r3, #12
 8008380:	220c      	movs	r2, #12
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	4618      	mov	r0, r3
 8008386:	f002 f988 	bl	800a69a <memcpy>
	memcpy(mpu6050->accelerometer.scaleXYZ, scaleXYZ, 3*sizeof(float));
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3318      	adds	r3, #24
 800838e:	220c      	movs	r2, #12
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4618      	mov	r0, r3
 8008394:	f002 f981 	bl	800a69a <memcpy>
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <MPU6050_Configure_DLPF>:
	memcpy(mpu6050->gyroscope.offsetXYZ, offsetXYZ, 3*sizeof(float));
	memcpy(mpu6050->gyroscope.scaleXYZ, scaleXYZ, 3*sizeof(float));
}

void MPU6050_Configure_DLPF(I2C_HandleTypeDef *hi2c1, uint8_t dlpf_value)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af04      	add	r7, sp, #16
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
    // Configure DLPF - Register 0x1A (CONFIG)
    // dlpf_value: 1=188Hz, 2=98Hz, 3=42Hz, 4=20Hz, 5=10Hz, 6=5Hz
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, CONFIG, 1, &dlpf_value, 1, 1000);
 80083ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80083b0:	9302      	str	r3, [sp, #8]
 80083b2:	2301      	movs	r3, #1
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	1cfb      	adds	r3, r7, #3
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	2301      	movs	r3, #1
 80083bc:	221a      	movs	r2, #26
 80083be:	21d0      	movs	r1, #208	@ 0xd0
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7fa f8a7 	bl	8002514 <HAL_I2C_Mem_Write>
}
 80083c6:	bf00      	nop
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <MPU6050_Reset_FIFO>:

void MPU6050_Reset_FIFO(mpu6050_t *mpu6050) {
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b088      	sub	sp, #32
 80083d2:	af04      	add	r7, sp, #16
 80083d4:	6078      	str	r0, [r7, #4]
    uint8_t current_value = 0x00;
 80083d6:	2300      	movs	r3, #0
 80083d8:	72fb      	strb	r3, [r7, #11]
    I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083de:	60fb      	str	r3, [r7, #12]
    // Read current USER_CTRL register
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 80083e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80083e4:	9302      	str	r3, [sp, #8]
 80083e6:	2301      	movs	r3, #1
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	f107 030b 	add.w	r3, r7, #11
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	2301      	movs	r3, #1
 80083f2:	226a      	movs	r2, #106	@ 0x6a
 80083f4:	21d0      	movs	r1, #208	@ 0xd0
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7fa f986 	bl	8002708 <HAL_I2C_Mem_Read>

    // Disable FIFO
    // In that way we remember what registers were on previously and "switch" only one bit
    current_value &= ~0x40; // Clear FIFO_EN bit
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008402:	b2db      	uxtb	r3, r3
 8008404:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8008406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800840a:	9302      	str	r3, [sp, #8]
 800840c:	2301      	movs	r3, #1
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	f107 030b 	add.w	r3, r7, #11
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	2301      	movs	r3, #1
 8008418:	226a      	movs	r2, #106	@ 0x6a
 800841a:	21d0      	movs	r1, #208	@ 0xd0
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f7fa f879 	bl	8002514 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8008422:	2001      	movs	r0, #1
 8008424:	f7f9 f876 	bl	8001514 <HAL_Delay>

    // Reset FIFO
    current_value |= 0x04; // Set FIFO_RESET bit
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	f043 0304 	orr.w	r3, r3, #4
 800842e:	b2db      	uxtb	r3, r3
 8008430:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8008432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008436:	9302      	str	r3, [sp, #8]
 8008438:	2301      	movs	r3, #1
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	f107 030b 	add.w	r3, r7, #11
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	2301      	movs	r3, #1
 8008444:	226a      	movs	r2, #106	@ 0x6a
 8008446:	21d0      	movs	r1, #208	@ 0xd0
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f7fa f863 	bl	8002514 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 800844e:	2001      	movs	r0, #1
 8008450:	f7f9 f860 	bl	8001514 <HAL_Delay>

    // Clear reset bit and re-enable FIFO
    // Here after we reseted FIFO we set this bit to 0 again but "remembering"  what value was stored
    current_value &= ~0x04; // Clear FIFO_RESET bit
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	f023 0304 	bic.w	r3, r3, #4
 800845a:	b2db      	uxtb	r3, r3
 800845c:	72fb      	strb	r3, [r7, #11]
    current_value |= 0x40;  // Set FIFO_EN bit
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008464:	b2db      	uxtb	r3, r3
 8008466:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8008468:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800846c:	9302      	str	r3, [sp, #8]
 800846e:	2301      	movs	r3, #1
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	f107 030b 	add.w	r3, r7, #11
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	2301      	movs	r3, #1
 800847a:	226a      	movs	r2, #106	@ 0x6a
 800847c:	21d0      	movs	r1, #208	@ 0xd0
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7fa f848 	bl	8002514 <HAL_I2C_Mem_Write>
}
 8008484:	bf00      	nop
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <MPU6050_Enable_FIFO>:
	float Gz = ((float)Gyro_Z_RAW - mpu6050->gyroscope.offsetXYZ[2])/mpu6050->gyroscope.scaleXYZ[2];
	mpu6050->gyroscope.Gxyz[2] = Gz;
	return Gz;
}

void MPU6050_Enable_FIFO(mpu6050_t *mpu6050) {
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af04      	add	r7, sp, #16
 8008492:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008498:	60fb      	str	r3, [r7, #12]
    uint8_t current_value;
    // Read current USER_CTRL register value
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 800849a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800849e:	9302      	str	r3, [sp, #8]
 80084a0:	2301      	movs	r3, #1
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	f107 030b 	add.w	r3, r7, #11
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	2301      	movs	r3, #1
 80084ac:	226a      	movs	r2, #106	@ 0x6a
 80084ae:	21d0      	movs	r1, #208	@ 0xd0
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f7fa f929 	bl	8002708 <HAL_I2C_Mem_Read>

    // Set FIFO_EN bit (bit 6) while preserving other bits
    current_value |= 0x40;
 80084b6:	7afb      	ldrb	r3, [r7, #11]
 80084b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 80084c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80084c4:	9302      	str	r3, [sp, #8]
 80084c6:	2301      	movs	r3, #1
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	f107 030b 	add.w	r3, r7, #11
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	2301      	movs	r3, #1
 80084d2:	226a      	movs	r2, #106	@ 0x6a
 80084d4:	21d0      	movs	r1, #208	@ 0xd0
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7fa f81c 	bl	8002514 <HAL_I2C_Mem_Write>
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <MPU6050_configure_Fifo>:

void MPU6050_configure_Fifo (mpu6050_t *mpu6050) // temperature is first 1, next 111 is enable gyroscope from Gx to Gz, and last 1 is for acceleration (000 is about i2c slaves - not relevant in my case)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af04      	add	r7, sp, #16
 80084ea:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f0:	60fb      	str	r3, [r7, #12]
	uint8_t Data = 0xF8; // To enable fifo on Temperature, gyro and accel (1111 1000)
 80084f2:	23f8      	movs	r3, #248	@ 0xf8
 80084f4:	72fb      	strb	r3, [r7, #11]
	// If want to change Data to read different in FIFO DON'T FORGET to change FIFO_SAMPLE_SIZE in mpu6050.h
	HAL_I2C_Mem_Write (hi2c1, MPU6050_ADDR, FIFO_ENABLE, 1, &Data, 1, 1000); // 1 byte to transmit
 80084f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80084fa:	9302      	str	r3, [sp, #8]
 80084fc:	2301      	movs	r3, #1
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	f107 030b 	add.w	r3, r7, #11
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	2301      	movs	r3, #1
 8008508:	2223      	movs	r2, #35	@ 0x23
 800850a:	21d0      	movs	r1, #208	@ 0xd0
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f7fa f801 	bl	8002514 <HAL_I2C_Mem_Write>
}
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <MPU6050_Get_FIFO_Count>:

uint16_t MPU6050_Get_FIFO_Count (mpu6050_t *mpu6050)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b088      	sub	sp, #32
 800851e:	af04      	add	r7, sp, #16
 8008520:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008526:	60fb      	str	r3, [r7, #12]
    uint8_t Data_H, Data_L;
    uint16_t FIFO_Count;

    // Read FIFO_COUNT_H first (this updates both registers)
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_COUNT_H, 1, &Data_H, 1, 1000);
 8008528:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800852c:	9302      	str	r3, [sp, #8]
 800852e:	2301      	movs	r3, #1
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	f107 0309 	add.w	r3, r7, #9
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	2301      	movs	r3, #1
 800853a:	2272      	movs	r2, #114	@ 0x72
 800853c:	21d0      	movs	r1, #208	@ 0xd0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7fa f8e2 	bl	8002708 <HAL_I2C_Mem_Read>
    // Then read FIFO_COUNT_L
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_COUNT_L, 1, &Data_L, 1, 1000);
 8008544:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008548:	9302      	str	r3, [sp, #8]
 800854a:	2301      	movs	r3, #1
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	f107 0308 	add.w	r3, r7, #8
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	2301      	movs	r3, #1
 8008556:	2273      	movs	r2, #115	@ 0x73
 8008558:	21d0      	movs	r1, #208	@ 0xd0
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f7fa f8d4 	bl	8002708 <HAL_I2C_Mem_Read>

    FIFO_Count = (Data_H << 8) | Data_L; // same trick with assembling data from low and high register
 8008560:	7a7b      	ldrb	r3, [r7, #9]
 8008562:	b21b      	sxth	r3, r3
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	b21a      	sxth	r2, r3
 8008568:	7a3b      	ldrb	r3, [r7, #8]
 800856a:	b21b      	sxth	r3, r3
 800856c:	4313      	orrs	r3, r2
 800856e:	b21b      	sxth	r3, r3
 8008570:	817b      	strh	r3, [r7, #10]
    return FIFO_Count;
 8008572:	897b      	ldrh	r3, [r7, #10]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <MPU6050_Read_Fifo>:

void MPU6050_Read_Fifo(mpu6050_t *mpu6050) {
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b095      	sub	sp, #84	@ 0x54
 8008580:	af04      	add	r7, sp, #16
 8008582:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008588:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t fifo_buffer[FIFO_SAMPLE_SIZE];
    uint16_t fifo_count = MPU6050_Get_FIFO_Count(mpu6050);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff ffc5 	bl	800851a <MPU6050_Get_FIFO_Count>
 8008590:	4603      	mov	r3, r0
 8008592:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    int16_t raw_data[FIFO_SAMPLE_SIZE / 2];
    // Check for FIFO overflow
    if (fifo_count >= 1024) {
 8008594:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800859a:	d306      	bcc.n	80085aa <MPU6050_Read_Fifo+0x2e>
        MPU6050_Reset_FIFO(mpu6050);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff ff16 	bl	80083ce <MPU6050_Reset_FIFO>
        HAL_Delay(100); // Allow time for new data
 80085a2:	2064      	movs	r0, #100	@ 0x64
 80085a4:	f7f8 ffb6 	bl	8001514 <HAL_Delay>
 80085a8:	e0b1      	b.n	800870e <MPU6050_Read_Fifo+0x192>
        return;
    }

    // Only read if we have at least one complete sample
    if (fifo_count >= FIFO_SAMPLE_SIZE) {
 80085aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80085ac:	2b0d      	cmp	r3, #13
 80085ae:	f240 80ae 	bls.w	800870e <MPU6050_Read_Fifo+0x192>
        // Read multiple samples if available to prevent overflow
        while (fifo_count >= FIFO_SAMPLE_SIZE && fifo_count < 1024) {
 80085b2:	e0a4      	b.n	80086fe <MPU6050_Read_Fifo+0x182>
            HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_R_W, 1,
 80085b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80085b8:	9302      	str	r3, [sp, #8]
 80085ba:	230e      	movs	r3, #14
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	f107 031c 	add.w	r3, r7, #28
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	2301      	movs	r3, #1
 80085c6:	2274      	movs	r2, #116	@ 0x74
 80085c8:	21d0      	movs	r1, #208	@ 0xd0
 80085ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085cc:	f7fa f89c 	bl	8002708 <HAL_I2C_Mem_Read>
                           fifo_buffer, FIFO_SAMPLE_SIZE, 1000);

            // Process the data (your existing processing code)
            for (int i = 0; i < FIFO_SAMPLE_SIZE / 2; i++) {
 80085d0:	2300      	movs	r3, #0
 80085d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085d4:	e01b      	b.n	800860e <MPU6050_Read_Fifo+0x92>
                raw_data[i] = (int16_t)((fifo_buffer[2 * i] << 8) |
 80085d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	3340      	adds	r3, #64	@ 0x40
 80085dc:	443b      	add	r3, r7
 80085de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80085e2:	b21b      	sxth	r3, r3
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	b21a      	sxth	r2, r3
                                      fifo_buffer[2 * i + 1]);
 80085e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	3301      	adds	r3, #1
 80085ee:	3340      	adds	r3, #64	@ 0x40
 80085f0:	443b      	add	r3, r7
 80085f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80085f6:	b21b      	sxth	r3, r3
                raw_data[i] = (int16_t)((fifo_buffer[2 * i] << 8) |
 80085f8:	4313      	orrs	r3, r2
 80085fa:	b21a      	sxth	r2, r3
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	3340      	adds	r3, #64	@ 0x40
 8008602:	443b      	add	r3, r7
 8008604:	f823 2c34 	strh.w	r2, [r3, #-52]
            for (int i = 0; i < FIFO_SAMPLE_SIZE / 2; i++) {
 8008608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860a:	3301      	adds	r3, #1
 800860c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800860e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008610:	2b06      	cmp	r3, #6
 8008612:	dde0      	ble.n	80085d6 <MPU6050_Read_Fifo+0x5a>
            }

            for (int i = 0; i < 3; i++) {
 8008614:	2300      	movs	r3, #0
 8008616:	637b      	str	r3, [r7, #52]	@ 0x34
 8008618:	e024      	b.n	8008664 <MPU6050_Read_Fifo+0xe8>
            	mpu6050->accelerometer.Axyz[i] = ((float)raw_data[i] - mpu6050->accelerometer.offsetXYZ[i]) / mpu6050->accelerometer.scaleXYZ[i];
 800861a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	3340      	adds	r3, #64	@ 0x40
 8008620:	443b      	add	r3, r7
 8008622:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8008626:	4618      	mov	r0, r3
 8008628:	f7f8 fb58 	bl	8000cdc <__aeabi_i2f>
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008630:	3302      	adds	r3, #2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4619      	mov	r1, r3
 800863a:	f7f8 fa99 	bl	8000b70 <__aeabi_fsub>
 800863e:	4603      	mov	r3, r0
 8008640:	4618      	mov	r0, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008646:	3206      	adds	r2, #6
 8008648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864c:	4619      	mov	r1, r3
 800864e:	f7f8 fc4d 	bl	8000eec <__aeabi_fdiv>
 8008652:	4603      	mov	r3, r0
 8008654:	4619      	mov	r1, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800865a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int i = 0; i < 3; i++) {
 800865e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008660:	3301      	adds	r3, #1
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
 8008664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008666:	2b02      	cmp	r3, #2
 8008668:	ddd7      	ble.n	800861a <MPU6050_Read_Fifo+0x9e>
            }

            mpu6050->temperature      = ((float)raw_data[3] / 340.0f) + 36.53f;
 800866a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800866e:	4618      	mov	r0, r3
 8008670:	f7f8 fb34 	bl	8000cdc <__aeabi_i2f>
 8008674:	4603      	mov	r3, r0
 8008676:	4927      	ldr	r1, [pc, #156]	@ (8008714 <MPU6050_Read_Fifo+0x198>)
 8008678:	4618      	mov	r0, r3
 800867a:	f7f8 fc37 	bl	8000eec <__aeabi_fdiv>
 800867e:	4603      	mov	r3, r0
 8008680:	4925      	ldr	r1, [pc, #148]	@ (8008718 <MPU6050_Read_Fifo+0x19c>)
 8008682:	4618      	mov	r0, r3
 8008684:	f7f8 fa76 	bl	8000b74 <__addsf3>
 8008688:	4603      	mov	r3, r0
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	649a      	str	r2, [r3, #72]	@ 0x48

            for (int i = 4; i < 7; i++) {
 8008690:	2304      	movs	r3, #4
 8008692:	633b      	str	r3, [r7, #48]	@ 0x30
 8008694:	e02b      	b.n	80086ee <MPU6050_Read_Fifo+0x172>
            	// "[i-4]" due to i beginning from 4 and offsetXYZ being size of 3 float elements
            	mpu6050->gyroscope.Gxyz[i - 4] = ((float)raw_data[i]- mpu6050->gyroscope.offsetXYZ[i - 4])/mpu6050->gyroscope.scaleXYZ[i - 4];
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	3340      	adds	r3, #64	@ 0x40
 800869c:	443b      	add	r3, r7
 800869e:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f8 fb1a 	bl	8000cdc <__aeabi_i2f>
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	3b04      	subs	r3, #4
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	330a      	adds	r3, #10
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	4619      	mov	r1, r3
 80086b8:	f7f8 fa5a 	bl	8000b70 <__aeabi_fsub>
 80086bc:	4603      	mov	r3, r0
 80086be:	4618      	mov	r0, r3
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	3b04      	subs	r3, #4
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	330e      	adds	r3, #14
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d0:	1f1c      	subs	r4, r3, #4
 80086d2:	4611      	mov	r1, r2
 80086d4:	f7f8 fc0a 	bl	8000eec <__aeabi_fdiv>
 80086d8:	4603      	mov	r3, r0
 80086da:	4619      	mov	r1, r3
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	f104 0308 	add.w	r3, r4, #8
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	6059      	str	r1, [r3, #4]
            for (int i = 4; i < 7; i++) {
 80086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ea:	3301      	adds	r3, #1
 80086ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	2b06      	cmp	r3, #6
 80086f2:	ddd0      	ble.n	8008696 <MPU6050_Read_Fifo+0x11a>
            }


            // Check remaining FIFO count
            fifo_count = MPU6050_Get_FIFO_Count(mpu6050);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff ff10 	bl	800851a <MPU6050_Get_FIFO_Count>
 80086fa:	4603      	mov	r3, r0
 80086fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        while (fifo_count >= FIFO_SAMPLE_SIZE && fifo_count < 1024) {
 80086fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008700:	2b0d      	cmp	r3, #13
 8008702:	d904      	bls.n	800870e <MPU6050_Read_Fifo+0x192>
 8008704:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800870a:	f4ff af53 	bcc.w	80085b4 <MPU6050_Read_Fifo+0x38>
        }
    }
}
 800870e:	3744      	adds	r7, #68	@ 0x44
 8008710:	46bd      	mov	sp, r7
 8008712:	bd90      	pop	{r4, r7, pc}
 8008714:	43aa0000 	.word	0x43aa0000
 8008718:	42121eb8 	.word	0x42121eb8

0800871c <configure_MPU6050>:
#include <stdio.h>

mpu6050_t mpu6050;

// Function exists to hide driver for main, so it won't get access to inner structure: mpu6050
void configure_MPU6050(void) {
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
	// hi2c1 is global
	MPU6050_Init(&mpu6050, &hi2c1);
 8008722:	490d      	ldr	r1, [pc, #52]	@ (8008758 <configure_MPU6050+0x3c>)
 8008724:	480d      	ldr	r0, [pc, #52]	@ (800875c <configure_MPU6050+0x40>)
 8008726:	f7ff fd61 	bl	80081ec <MPU6050_Init>
    float offsetXYZ[3] = {188.75, 240, 3361.5}; // enter your values
 800872a:	4a0d      	ldr	r2, [pc, #52]	@ (8008760 <configure_MPU6050+0x44>)
 800872c:	f107 030c 	add.w	r3, r7, #12
 8008730:	ca07      	ldmia	r2, {r0, r1, r2}
 8008732:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    float scaleXYZ[3] = {16358.75, 16312.67, 16721.5}; // enter your values
 8008736:	4a0b      	ldr	r2, [pc, #44]	@ (8008764 <configure_MPU6050+0x48>)
 8008738:	463b      	mov	r3, r7
 800873a:	ca07      	ldmia	r2, {r0, r1, r2}
 800873c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    MPU6050_Set_Accel_Offset_Scale(&mpu6050, offsetXYZ, scaleXYZ);
 8008740:	463a      	mov	r2, r7
 8008742:	f107 030c 	add.w	r3, r7, #12
 8008746:	4619      	mov	r1, r3
 8008748:	4804      	ldr	r0, [pc, #16]	@ (800875c <configure_MPU6050+0x40>)
 800874a:	f7ff fe11 	bl	8008370 <MPU6050_Set_Accel_Offset_Scale>
}
 800874e:	bf00      	nop
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200011a0 	.word	0x200011a0
 800875c:	200015a8 	.word	0x200015a8
 8008760:	0800dc0c 	.word	0x0800dc0c
 8008764:	0800dc18 	.word	0x0800dc18

08008768 <render_accel>:

float* render_accel (void) {
 8008768:	b580      	push	{r7, lr}
 800876a:	b09c      	sub	sp, #112	@ 0x70
 800876c:	af02      	add	r7, sp, #8
	static float accels[3];
	char buf[100];

	MPU6050_Read_Fifo(&mpu6050);
 800876e:	482f      	ldr	r0, [pc, #188]	@ (800882c <render_accel+0xc4>)
 8008770:	f7ff ff04 	bl	800857c <MPU6050_Read_Fifo>
	ssd1306_Fill(0);
 8008774:	2000      	movs	r0, #0
 8008776:	f000 f907 	bl	8008988 <ssd1306_Fill>

	ssd1306_SetCursor (0,0);
 800877a:	2100      	movs	r1, #0
 800877c:	2000      	movs	r0, #0
 800877e:	f000 fa51 	bl	8008c24 <ssd1306_SetCursor>
	accels[0] = mpu6050.accelerometer.Axyz[0];
 8008782:	4b2a      	ldr	r3, [pc, #168]	@ (800882c <render_accel+0xc4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a2a      	ldr	r2, [pc, #168]	@ (8008830 <render_accel+0xc8>)
 8008788:	6013      	str	r3, [r2, #0]
	sprintf (buf, "Ax: %.2f ", mpu6050.accelerometer.Axyz[0]);
 800878a:	4b28      	ldr	r3, [pc, #160]	@ (800882c <render_accel+0xc4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f7f7 fe4a 	bl	8000428 <__aeabi_f2d>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	1d38      	adds	r0, r7, #4
 800879a:	4926      	ldr	r1, [pc, #152]	@ (8008834 <render_accel+0xcc>)
 800879c:	f001 fe7a 	bl	800a494 <siprintf>
	ssd1306_WriteString (buf, Font_14x15, White);
 80087a0:	4b25      	ldr	r3, [pc, #148]	@ (8008838 <render_accel+0xd0>)
 80087a2:	1d38      	adds	r0, r7, #4
 80087a4:	2201      	movs	r2, #1
 80087a6:	9200      	str	r2, [sp, #0]
 80087a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087aa:	f000 fa15 	bl	8008bd8 <ssd1306_WriteString>

	ssd1306_SetCursor (0,20);
 80087ae:	2114      	movs	r1, #20
 80087b0:	2000      	movs	r0, #0
 80087b2:	f000 fa37 	bl	8008c24 <ssd1306_SetCursor>
	strcpy(buf, "");
 80087b6:	2300      	movs	r3, #0
 80087b8:	713b      	strb	r3, [r7, #4]
	accels[1] = mpu6050.accelerometer.Axyz[1];
 80087ba:	4b1c      	ldr	r3, [pc, #112]	@ (800882c <render_accel+0xc4>)
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	4a1c      	ldr	r2, [pc, #112]	@ (8008830 <render_accel+0xc8>)
 80087c0:	6053      	str	r3, [r2, #4]
	sprintf (buf, "Ay: %.2f ", mpu6050.accelerometer.Axyz[1]);
 80087c2:	4b1a      	ldr	r3, [pc, #104]	@ (800882c <render_accel+0xc4>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f7 fe2e 	bl	8000428 <__aeabi_f2d>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	1d38      	adds	r0, r7, #4
 80087d2:	491a      	ldr	r1, [pc, #104]	@ (800883c <render_accel+0xd4>)
 80087d4:	f001 fe5e 	bl	800a494 <siprintf>
	ssd1306_WriteString (buf, Font_14x15, White);
 80087d8:	4b17      	ldr	r3, [pc, #92]	@ (8008838 <render_accel+0xd0>)
 80087da:	1d38      	adds	r0, r7, #4
 80087dc:	2201      	movs	r2, #1
 80087de:	9200      	str	r2, [sp, #0]
 80087e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087e2:	f000 f9f9 	bl	8008bd8 <ssd1306_WriteString>

	ssd1306_SetCursor (0,40);
 80087e6:	2128      	movs	r1, #40	@ 0x28
 80087e8:	2000      	movs	r0, #0
 80087ea:	f000 fa1b 	bl	8008c24 <ssd1306_SetCursor>
	strcpy(buf, "");
 80087ee:	2300      	movs	r3, #0
 80087f0:	713b      	strb	r3, [r7, #4]
	accels[2] = mpu6050.accelerometer.Axyz[2];
 80087f2:	4b0e      	ldr	r3, [pc, #56]	@ (800882c <render_accel+0xc4>)
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008830 <render_accel+0xc8>)
 80087f8:	6093      	str	r3, [r2, #8]
	sprintf (buf, "Az: %.2f ", mpu6050.accelerometer.Axyz[2]);
 80087fa:	4b0c      	ldr	r3, [pc, #48]	@ (800882c <render_accel+0xc4>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	4618      	mov	r0, r3
 8008800:	f7f7 fe12 	bl	8000428 <__aeabi_f2d>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	1d38      	adds	r0, r7, #4
 800880a:	490d      	ldr	r1, [pc, #52]	@ (8008840 <render_accel+0xd8>)
 800880c:	f001 fe42 	bl	800a494 <siprintf>
	ssd1306_WriteString (buf, Font_14x15, White);
 8008810:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <render_accel+0xd0>)
 8008812:	1d38      	adds	r0, r7, #4
 8008814:	2201      	movs	r2, #1
 8008816:	9200      	str	r2, [sp, #0]
 8008818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800881a:	f000 f9dd 	bl	8008bd8 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800881e:	f000 f8cb 	bl	80089b8 <ssd1306_UpdateScreen>
	return accels;
 8008822:	4b03      	ldr	r3, [pc, #12]	@ (8008830 <render_accel+0xc8>)
}
 8008824:	4618      	mov	r0, r3
 8008826:	3768      	adds	r7, #104	@ 0x68
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	200015a8 	.word	0x200015a8
 8008830:	200015f8 	.word	0x200015f8
 8008834:	0800dc24 	.word	0x0800dc24
 8008838:	0800ff1c 	.word	0x0800ff1c
 800883c:	0800dc30 	.word	0x0800dc30
 8008840:	0800dc3c 	.word	0x0800dc3c

08008844 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8008848:	bf00      	nop
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr

08008850 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af04      	add	r7, sp, #16
 8008856:	4603      	mov	r3, r0
 8008858:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800885a:	f04f 33ff 	mov.w	r3, #4294967295
 800885e:	9302      	str	r3, [sp, #8]
 8008860:	2301      	movs	r3, #1
 8008862:	9301      	str	r3, [sp, #4]
 8008864:	1dfb      	adds	r3, r7, #7
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	2301      	movs	r3, #1
 800886a:	2200      	movs	r2, #0
 800886c:	2178      	movs	r1, #120	@ 0x78
 800886e:	4803      	ldr	r0, [pc, #12]	@ (800887c <ssd1306_WriteCommand+0x2c>)
 8008870:	f7f9 fe50 	bl	8002514 <HAL_I2C_Mem_Write>
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	200011a0 	.word	0x200011a0

08008880 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af04      	add	r7, sp, #16
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	b29b      	uxth	r3, r3
 800888e:	f04f 32ff 	mov.w	r2, #4294967295
 8008892:	9202      	str	r2, [sp, #8]
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	2301      	movs	r3, #1
 800889c:	2240      	movs	r2, #64	@ 0x40
 800889e:	2178      	movs	r1, #120	@ 0x78
 80088a0:	4803      	ldr	r0, [pc, #12]	@ (80088b0 <ssd1306_WriteData+0x30>)
 80088a2:	f7f9 fe37 	bl	8002514 <HAL_I2C_Mem_Write>
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	200011a0 	.word	0x200011a0

080088b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80088b8:	f7ff ffc4 	bl	8008844 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80088bc:	2064      	movs	r0, #100	@ 0x64
 80088be:	f7f8 fe29 	bl	8001514 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80088c2:	2000      	movs	r0, #0
 80088c4:	f000 f9da 	bl	8008c7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80088c8:	2020      	movs	r0, #32
 80088ca:	f7ff ffc1 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80088ce:	2000      	movs	r0, #0
 80088d0:	f7ff ffbe 	bl	8008850 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80088d4:	20b0      	movs	r0, #176	@ 0xb0
 80088d6:	f7ff ffbb 	bl	8008850 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80088da:	20c8      	movs	r0, #200	@ 0xc8
 80088dc:	f7ff ffb8 	bl	8008850 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80088e0:	2000      	movs	r0, #0
 80088e2:	f7ff ffb5 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80088e6:	2010      	movs	r0, #16
 80088e8:	f7ff ffb2 	bl	8008850 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80088ec:	2040      	movs	r0, #64	@ 0x40
 80088ee:	f7ff ffaf 	bl	8008850 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80088f2:	20ff      	movs	r0, #255	@ 0xff
 80088f4:	f000 f9ae 	bl	8008c54 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80088f8:	20a1      	movs	r0, #161	@ 0xa1
 80088fa:	f7ff ffa9 	bl	8008850 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80088fe:	20a6      	movs	r0, #166	@ 0xa6
 8008900:	f7ff ffa6 	bl	8008850 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008904:	20a8      	movs	r0, #168	@ 0xa8
 8008906:	f7ff ffa3 	bl	8008850 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800890a:	203f      	movs	r0, #63	@ 0x3f
 800890c:	f7ff ffa0 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008910:	20a4      	movs	r0, #164	@ 0xa4
 8008912:	f7ff ff9d 	bl	8008850 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8008916:	20d3      	movs	r0, #211	@ 0xd3
 8008918:	f7ff ff9a 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800891c:	2000      	movs	r0, #0
 800891e:	f7ff ff97 	bl	8008850 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8008922:	20d5      	movs	r0, #213	@ 0xd5
 8008924:	f7ff ff94 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8008928:	20f0      	movs	r0, #240	@ 0xf0
 800892a:	f7ff ff91 	bl	8008850 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800892e:	20d9      	movs	r0, #217	@ 0xd9
 8008930:	f7ff ff8e 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8008934:	2022      	movs	r0, #34	@ 0x22
 8008936:	f7ff ff8b 	bl	8008850 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800893a:	20da      	movs	r0, #218	@ 0xda
 800893c:	f7ff ff88 	bl	8008850 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8008940:	2012      	movs	r0, #18
 8008942:	f7ff ff85 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8008946:	20db      	movs	r0, #219	@ 0xdb
 8008948:	f7ff ff82 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800894c:	2020      	movs	r0, #32
 800894e:	f7ff ff7f 	bl	8008850 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8008952:	208d      	movs	r0, #141	@ 0x8d
 8008954:	f7ff ff7c 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8008958:	2014      	movs	r0, #20
 800895a:	f7ff ff79 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800895e:	2001      	movs	r0, #1
 8008960:	f000 f98c 	bl	8008c7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8008964:	2000      	movs	r0, #0
 8008966:	f000 f80f 	bl	8008988 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800896a:	f000 f825 	bl	80089b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800896e:	4b05      	ldr	r3, [pc, #20]	@ (8008984 <ssd1306_Init+0xd0>)
 8008970:	2200      	movs	r2, #0
 8008972:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008974:	4b03      	ldr	r3, [pc, #12]	@ (8008984 <ssd1306_Init+0xd0>)
 8008976:	2200      	movs	r2, #0
 8008978:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800897a:	4b02      	ldr	r3, [pc, #8]	@ (8008984 <ssd1306_Init+0xd0>)
 800897c:	2201      	movs	r2, #1
 800897e:	711a      	strb	r2, [r3, #4]
}
 8008980:	bf00      	nop
 8008982:	bd80      	pop	{r7, pc}
 8008984:	20001a04 	.word	0x20001a04

08008988 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <ssd1306_Fill+0x14>
 8008998:	2300      	movs	r3, #0
 800899a:	e000      	b.n	800899e <ssd1306_Fill+0x16>
 800899c:	23ff      	movs	r3, #255	@ 0xff
 800899e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80089a2:	4619      	mov	r1, r3
 80089a4:	4803      	ldr	r0, [pc, #12]	@ (80089b4 <ssd1306_Fill+0x2c>)
 80089a6:	f001 fdda 	bl	800a55e <memset>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	20001604 	.word	0x20001604

080089b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80089be:	2300      	movs	r3, #0
 80089c0:	71fb      	strb	r3, [r7, #7]
 80089c2:	e016      	b.n	80089f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	3b50      	subs	r3, #80	@ 0x50
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff ff40 	bl	8008850 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80089d0:	2000      	movs	r0, #0
 80089d2:	f7ff ff3d 	bl	8008850 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80089d6:	2010      	movs	r0, #16
 80089d8:	f7ff ff3a 	bl	8008850 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	01db      	lsls	r3, r3, #7
 80089e0:	4a08      	ldr	r2, [pc, #32]	@ (8008a04 <ssd1306_UpdateScreen+0x4c>)
 80089e2:	4413      	add	r3, r2
 80089e4:	2180      	movs	r1, #128	@ 0x80
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff ff4a 	bl	8008880 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	3301      	adds	r3, #1
 80089f0:	71fb      	strb	r3, [r7, #7]
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	2b07      	cmp	r3, #7
 80089f6:	d9e5      	bls.n	80089c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20001604 	.word	0x20001604

08008a08 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	71fb      	strb	r3, [r7, #7]
 8008a12:	460b      	mov	r3, r1
 8008a14:	71bb      	strb	r3, [r7, #6]
 8008a16:	4613      	mov	r3, r2
 8008a18:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8008a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	db3d      	blt.n	8008a9e <ssd1306_DrawPixel+0x96>
 8008a22:	79bb      	ldrb	r3, [r7, #6]
 8008a24:	2b3f      	cmp	r3, #63	@ 0x3f
 8008a26:	d83a      	bhi.n	8008a9e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8008a28:	797b      	ldrb	r3, [r7, #5]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d11a      	bne.n	8008a64 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008a2e:	79fa      	ldrb	r2, [r7, #7]
 8008a30:	79bb      	ldrb	r3, [r7, #6]
 8008a32:	08db      	lsrs	r3, r3, #3
 8008a34:	b2d8      	uxtb	r0, r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	01db      	lsls	r3, r3, #7
 8008a3a:	4413      	add	r3, r2
 8008a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8008aa8 <ssd1306_DrawPixel+0xa0>)
 8008a3e:	5cd3      	ldrb	r3, [r2, r3]
 8008a40:	b25a      	sxtb	r2, r3
 8008a42:	79bb      	ldrb	r3, [r7, #6]
 8008a44:	f003 0307 	and.w	r3, r3, #7
 8008a48:	2101      	movs	r1, #1
 8008a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4e:	b25b      	sxtb	r3, r3
 8008a50:	4313      	orrs	r3, r2
 8008a52:	b259      	sxtb	r1, r3
 8008a54:	79fa      	ldrb	r2, [r7, #7]
 8008a56:	4603      	mov	r3, r0
 8008a58:	01db      	lsls	r3, r3, #7
 8008a5a:	4413      	add	r3, r2
 8008a5c:	b2c9      	uxtb	r1, r1
 8008a5e:	4a12      	ldr	r2, [pc, #72]	@ (8008aa8 <ssd1306_DrawPixel+0xa0>)
 8008a60:	54d1      	strb	r1, [r2, r3]
 8008a62:	e01d      	b.n	8008aa0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008a64:	79fa      	ldrb	r2, [r7, #7]
 8008a66:	79bb      	ldrb	r3, [r7, #6]
 8008a68:	08db      	lsrs	r3, r3, #3
 8008a6a:	b2d8      	uxtb	r0, r3
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	01db      	lsls	r3, r3, #7
 8008a70:	4413      	add	r3, r2
 8008a72:	4a0d      	ldr	r2, [pc, #52]	@ (8008aa8 <ssd1306_DrawPixel+0xa0>)
 8008a74:	5cd3      	ldrb	r3, [r2, r3]
 8008a76:	b25a      	sxtb	r2, r3
 8008a78:	79bb      	ldrb	r3, [r7, #6]
 8008a7a:	f003 0307 	and.w	r3, r3, #7
 8008a7e:	2101      	movs	r1, #1
 8008a80:	fa01 f303 	lsl.w	r3, r1, r3
 8008a84:	b25b      	sxtb	r3, r3
 8008a86:	43db      	mvns	r3, r3
 8008a88:	b25b      	sxtb	r3, r3
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	b259      	sxtb	r1, r3
 8008a8e:	79fa      	ldrb	r2, [r7, #7]
 8008a90:	4603      	mov	r3, r0
 8008a92:	01db      	lsls	r3, r3, #7
 8008a94:	4413      	add	r3, r2
 8008a96:	b2c9      	uxtb	r1, r1
 8008a98:	4a03      	ldr	r2, [pc, #12]	@ (8008aa8 <ssd1306_DrawPixel+0xa0>)
 8008a9a:	54d1      	strb	r1, [r2, r3]
 8008a9c:	e000      	b.n	8008aa0 <ssd1306_DrawPixel+0x98>
        return;
 8008a9e:	bf00      	nop
    }
}
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr
 8008aa8:	20001604 	.word	0x20001604

08008aac <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8008aac:	b590      	push	{r4, r7, lr}
 8008aae:	b089      	sub	sp, #36	@ 0x24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008aba:	4623      	mov	r3, r4
 8008abc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8008abe:	4b45      	ldr	r3, [pc, #276]	@ (8008bd4 <ssd1306_WriteChar+0x128>)
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	783b      	ldrb	r3, [r7, #0]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	2b80      	cmp	r3, #128	@ 0x80
 8008aca:	dc06      	bgt.n	8008ada <ssd1306_WriteChar+0x2e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8008acc:	4b41      	ldr	r3, [pc, #260]	@ (8008bd4 <ssd1306_WriteChar+0x128>)
 8008ace:	885b      	ldrh	r3, [r3, #2]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	787b      	ldrb	r3, [r7, #1]
 8008ad4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8008ad6:	2b40      	cmp	r3, #64	@ 0x40
 8008ad8:	dd01      	ble.n	8008ade <ssd1306_WriteChar+0x32>
    {
        // Not enough space on current line
        return 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	e075      	b.n	8008bca <ssd1306_WriteChar+0x11e>
    }
    
    uint8_t sh = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	75fb      	strb	r3, [r7, #23]
    if(Font.width > 16)
 8008ae2:	783b      	ldrb	r3, [r7, #0]
 8008ae4:	2b10      	cmp	r3, #16
 8008ae6:	d901      	bls.n	8008aec <ssd1306_WriteChar+0x40>
    	sh = 1;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	75fb      	strb	r3, [r7, #23]
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8008aec:	2300      	movs	r3, #0
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	e055      	b.n	8008b9e <ssd1306_WriteChar+0xf2>
    	uint16_t idx = (ch - 32) * Font.height + i;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	3b20      	subs	r3, #32
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	787a      	ldrb	r2, [r7, #1]
 8008afa:	fb02 f303 	mul.w	r3, r2, r3
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4413      	add	r3, r2
 8008b06:	82bb      	strh	r3, [r7, #20]
        b = Font.data[idx<<sh];
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	8ab9      	ldrh	r1, [r7, #20]
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	4413      	add	r3, r2
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	613b      	str	r3, [r7, #16]
        for(j = 0; j < Font.width; j++) {
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	61bb      	str	r3, [r7, #24]
 8008b1e:	e036      	b.n	8008b8e <ssd1306_WriteChar+0xe2>
            if((b << j) & 0x8000)  {
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	fa02 f303 	lsl.w	r3, r2, r3
 8008b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d013      	beq.n	8008b58 <ssd1306_WriteChar+0xac>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008b30:	4b28      	ldr	r3, [pc, #160]	@ (8008bd4 <ssd1306_WriteChar+0x128>)
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	4413      	add	r3, r2
 8008b3c:	b2d8      	uxtb	r0, r3
 8008b3e:	4b25      	ldr	r3, [pc, #148]	@ (8008bd4 <ssd1306_WriteChar+0x128>)
 8008b40:	885b      	ldrh	r3, [r3, #2]
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	4413      	add	r3, r2
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008b50:	4619      	mov	r1, r3
 8008b52:	f7ff ff59 	bl	8008a08 <ssd1306_DrawPixel>
 8008b56:	e017      	b.n	8008b88 <ssd1306_WriteChar+0xdc>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008b58:	4b1e      	ldr	r3, [pc, #120]	@ (8008bd4 <ssd1306_WriteChar+0x128>)
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	4413      	add	r3, r2
 8008b64:	b2d8      	uxtb	r0, r3
 8008b66:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd4 <ssd1306_WriteChar+0x128>)
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	4413      	add	r3, r2
 8008b72:	b2d9      	uxtb	r1, r3
 8008b74:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2301      	moveq	r3, #1
 8008b7e:	2300      	movne	r3, #0
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	f7ff ff40 	bl	8008a08 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	61bb      	str	r3, [r7, #24]
 8008b8e:	783b      	ldrb	r3, [r7, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d3c3      	bcc.n	8008b20 <ssd1306_WriteChar+0x74>
    for(i = 0; i < Font.height; i++) {
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	61fb      	str	r3, [r7, #28]
 8008b9e:	787b      	ldrb	r3, [r7, #1]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d3a4      	bcc.n	8008af2 <ssd1306_WriteChar+0x46>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd4 <ssd1306_WriteChar+0x128>)
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	2a00      	cmp	r2, #0
 8008bb0:	d005      	beq.n	8008bbe <ssd1306_WriteChar+0x112>
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	7bfa      	ldrb	r2, [r7, #15]
 8008bb6:	3a20      	subs	r2, #32
 8008bb8:	440a      	add	r2, r1
 8008bba:	7812      	ldrb	r2, [r2, #0]
 8008bbc:	e000      	b.n	8008bc0 <ssd1306_WriteChar+0x114>
 8008bbe:	783a      	ldrb	r2, [r7, #0]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	4b03      	ldr	r3, [pc, #12]	@ (8008bd4 <ssd1306_WriteChar+0x128>)
 8008bc6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3724      	adds	r7, #36	@ 0x24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd90      	pop	{r4, r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20001a04 	.word	0x20001a04

08008bd8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af02      	add	r7, sp, #8
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	4638      	mov	r0, r7
 8008be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8008be6:	e013      	b.n	8008c10 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	7818      	ldrb	r0, [r3, #0]
 8008bec:	7e3b      	ldrb	r3, [r7, #24]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	463b      	mov	r3, r7
 8008bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bf4:	f7ff ff5a 	bl	8008aac <ssd1306_WriteChar>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d002      	beq.n	8008c0a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	e008      	b.n	8008c1c <ssd1306_WriteString+0x44>
        }
        str++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e7      	bne.n	8008be8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	460a      	mov	r2, r1
 8008c2e:	71fb      	strb	r3, [r7, #7]
 8008c30:	4613      	mov	r3, r2
 8008c32:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	4b05      	ldr	r3, [pc, #20]	@ (8008c50 <ssd1306_SetCursor+0x2c>)
 8008c3a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008c3c:	79bb      	ldrb	r3, [r7, #6]
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	4b03      	ldr	r3, [pc, #12]	@ (8008c50 <ssd1306_SetCursor+0x2c>)
 8008c42:	805a      	strh	r2, [r3, #2]
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bc80      	pop	{r7}
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	20001a04 	.word	0x20001a04

08008c54 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8008c5e:	2381      	movs	r3, #129	@ 0x81
 8008c60:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fdf3 	bl	8008850 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff fdef 	bl	8008850 <ssd1306_WriteCommand>
}
 8008c72:	bf00      	nop
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	4603      	mov	r3, r0
 8008c84:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8008c8c:	23af      	movs	r3, #175	@ 0xaf
 8008c8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8008c90:	4b08      	ldr	r3, [pc, #32]	@ (8008cb4 <ssd1306_SetDisplayOn+0x38>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	715a      	strb	r2, [r3, #5]
 8008c96:	e004      	b.n	8008ca2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8008c98:	23ae      	movs	r3, #174	@ 0xae
 8008c9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8008c9c:	4b05      	ldr	r3, [pc, #20]	@ (8008cb4 <ssd1306_SetDisplayOn+0x38>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fdd3 	bl	8008850 <ssd1306_WriteCommand>
}
 8008caa:	bf00      	nop
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20001a04 	.word	0x20001a04

08008cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008cbe:	4b18      	ldr	r3, [pc, #96]	@ (8008d20 <HAL_MspInit+0x68>)
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	4a17      	ldr	r2, [pc, #92]	@ (8008d20 <HAL_MspInit+0x68>)
 8008cc4:	f043 0301 	orr.w	r3, r3, #1
 8008cc8:	6193      	str	r3, [r2, #24]
 8008cca:	4b15      	ldr	r3, [pc, #84]	@ (8008d20 <HAL_MspInit+0x68>)
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	60bb      	str	r3, [r7, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cd6:	4b12      	ldr	r3, [pc, #72]	@ (8008d20 <HAL_MspInit+0x68>)
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	4a11      	ldr	r2, [pc, #68]	@ (8008d20 <HAL_MspInit+0x68>)
 8008cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ce0:	61d3      	str	r3, [r2, #28]
 8008ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8008d20 <HAL_MspInit+0x68>)
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cea:	607b      	str	r3, [r7, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008cee:	2200      	movs	r2, #0
 8008cf0:	210f      	movs	r1, #15
 8008cf2:	f06f 0001 	mvn.w	r0, #1
 8008cf6:	f7f8 fce6 	bl	80016c6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8008d24 <HAL_MspInit+0x6c>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	4a04      	ldr	r2, [pc, #16]	@ (8008d24 <HAL_MspInit+0x6c>)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d16:	bf00      	nop
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	40021000 	.word	0x40021000
 8008d24:	40010000 	.word	0x40010000

08008d28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d30:	f107 0310 	add.w	r3, r7, #16
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	605a      	str	r2, [r3, #4]
 8008d3a:	609a      	str	r2, [r3, #8]
 8008d3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a15      	ldr	r2, [pc, #84]	@ (8008d98 <HAL_I2C_MspInit+0x70>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d123      	bne.n	8008d90 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d48:	4b14      	ldr	r3, [pc, #80]	@ (8008d9c <HAL_I2C_MspInit+0x74>)
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	4a13      	ldr	r2, [pc, #76]	@ (8008d9c <HAL_I2C_MspInit+0x74>)
 8008d4e:	f043 0308 	orr.w	r3, r3, #8
 8008d52:	6193      	str	r3, [r2, #24]
 8008d54:	4b11      	ldr	r3, [pc, #68]	@ (8008d9c <HAL_I2C_MspInit+0x74>)
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	f003 0308 	and.w	r3, r3, #8
 8008d5c:	60fb      	str	r3, [r7, #12]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d60:	23c0      	movs	r3, #192	@ 0xc0
 8008d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d64:	2312      	movs	r3, #18
 8008d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d6c:	f107 0310 	add.w	r3, r7, #16
 8008d70:	4619      	mov	r1, r3
 8008d72:	480b      	ldr	r0, [pc, #44]	@ (8008da0 <HAL_I2C_MspInit+0x78>)
 8008d74:	f7f8 fd84 	bl	8001880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d78:	4b08      	ldr	r3, [pc, #32]	@ (8008d9c <HAL_I2C_MspInit+0x74>)
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	4a07      	ldr	r2, [pc, #28]	@ (8008d9c <HAL_I2C_MspInit+0x74>)
 8008d7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d82:	61d3      	str	r3, [r2, #28]
 8008d84:	4b05      	ldr	r3, [pc, #20]	@ (8008d9c <HAL_I2C_MspInit+0x74>)
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d8c:	60bb      	str	r3, [r7, #8]
 8008d8e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008d90:	bf00      	nop
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40005400 	.word	0x40005400
 8008d9c:	40021000 	.word	0x40021000
 8008da0:	40010c00 	.word	0x40010c00

08008da4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a0f      	ldr	r2, [pc, #60]	@ (8008df0 <HAL_RTC_MspInit+0x4c>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d118      	bne.n	8008de8 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8008db6:	f7fa fc1f 	bl	80035f8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8008dba:	4b0e      	ldr	r3, [pc, #56]	@ (8008df4 <HAL_RTC_MspInit+0x50>)
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8008df4 <HAL_RTC_MspInit+0x50>)
 8008dc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008dc4:	61d3      	str	r3, [r2, #28]
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008df4 <HAL_RTC_MspInit+0x50>)
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008dd2:	4b09      	ldr	r3, [pc, #36]	@ (8008df8 <HAL_RTC_MspInit+0x54>)
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2105      	movs	r1, #5
 8008ddc:	2029      	movs	r0, #41	@ 0x29
 8008dde:	f7f8 fc72 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8008de2:	2029      	movs	r0, #41	@ 0x29
 8008de4:	f7f8 fc8b 	bl	80016fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8008de8:	bf00      	nop
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	40002800 	.word	0x40002800
 8008df4:	40021000 	.word	0x40021000
 8008df8:	4242043c 	.word	0x4242043c

08008dfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	@ 0x28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e04:	f107 0318 	add.w	r3, r7, #24
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	605a      	str	r2, [r3, #4]
 8008e0e:	609a      	str	r2, [r3, #8]
 8008e10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a3f      	ldr	r2, [pc, #252]	@ (8008f14 <HAL_UART_MspInit+0x118>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d13a      	bne.n	8008e92 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	4a3d      	ldr	r2, [pc, #244]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e26:	6193      	str	r3, [r2, #24]
 8008e28:	4b3b      	ldr	r3, [pc, #236]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e30:	617b      	str	r3, [r7, #20]
 8008e32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e34:	4b38      	ldr	r3, [pc, #224]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	4a37      	ldr	r2, [pc, #220]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008e3a:	f043 0304 	orr.w	r3, r3, #4
 8008e3e:	6193      	str	r3, [r2, #24]
 8008e40:	4b35      	ldr	r3, [pc, #212]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e52:	2302      	movs	r3, #2
 8008e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e56:	2303      	movs	r3, #3
 8008e58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e5a:	f107 0318 	add.w	r3, r7, #24
 8008e5e:	4619      	mov	r1, r3
 8008e60:	482e      	ldr	r0, [pc, #184]	@ (8008f1c <HAL_UART_MspInit+0x120>)
 8008e62:	f7f8 fd0d 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e74:	f107 0318 	add.w	r3, r7, #24
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4828      	ldr	r0, [pc, #160]	@ (8008f1c <HAL_UART_MspInit+0x120>)
 8008e7c:	f7f8 fd00 	bl	8001880 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8008e80:	2200      	movs	r2, #0
 8008e82:	2106      	movs	r1, #6
 8008e84:	2025      	movs	r0, #37	@ 0x25
 8008e86:	f7f8 fc1e 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008e8a:	2025      	movs	r0, #37	@ 0x25
 8008e8c:	f7f8 fc37 	bl	80016fe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8008e90:	e03c      	b.n	8008f0c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a22      	ldr	r2, [pc, #136]	@ (8008f20 <HAL_UART_MspInit+0x124>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d137      	bne.n	8008f0c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ea6:	61d3      	str	r3, [r2, #28]
 8008ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb4:	4b18      	ldr	r3, [pc, #96]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	4a17      	ldr	r2, [pc, #92]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008eba:	f043 0304 	orr.w	r3, r3, #4
 8008ebe:	6193      	str	r3, [r2, #24]
 8008ec0:	4b15      	ldr	r3, [pc, #84]	@ (8008f18 <HAL_UART_MspInit+0x11c>)
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	60bb      	str	r3, [r7, #8]
 8008eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008ecc:	2304      	movs	r3, #4
 8008ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ed8:	f107 0318 	add.w	r3, r7, #24
 8008edc:	4619      	mov	r1, r3
 8008ede:	480f      	ldr	r0, [pc, #60]	@ (8008f1c <HAL_UART_MspInit+0x120>)
 8008ee0:	f7f8 fcce 	bl	8001880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eec:	2300      	movs	r3, #0
 8008eee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ef0:	f107 0318 	add.w	r3, r7, #24
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4809      	ldr	r0, [pc, #36]	@ (8008f1c <HAL_UART_MspInit+0x120>)
 8008ef8:	f7f8 fcc2 	bl	8001880 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8008efc:	2200      	movs	r2, #0
 8008efe:	2107      	movs	r1, #7
 8008f00:	2026      	movs	r0, #38	@ 0x26
 8008f02:	f7f8 fbe0 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008f06:	2026      	movs	r0, #38	@ 0x26
 8008f08:	f7f8 fbf9 	bl	80016fe <HAL_NVIC_EnableIRQ>
}
 8008f0c:	bf00      	nop
 8008f0e:	3728      	adds	r7, #40	@ 0x28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40013800 	.word	0x40013800
 8008f18:	40021000 	.word	0x40021000
 8008f1c:	40010800 	.word	0x40010800
 8008f20:	40004400 	.word	0x40004400

08008f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08c      	sub	sp, #48	@ 0x30
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8008ff4 <HAL_InitTick+0xd0>)
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8008ff4 <HAL_InitTick+0xd0>)
 8008f40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008f44:	6193      	str	r3, [r2, #24]
 8008f46:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff4 <HAL_InitTick+0xd0>)
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f4e:	60bb      	str	r3, [r7, #8]
 8008f50:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008f52:	f107 020c 	add.w	r2, r7, #12
 8008f56:	f107 0310 	add.w	r3, r7, #16
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fa ff49 	bl	8003df4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008f62:	f7fa ff33 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8008f66:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6a:	4a23      	ldr	r2, [pc, #140]	@ (8008ff8 <HAL_InitTick+0xd4>)
 8008f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f70:	0c9b      	lsrs	r3, r3, #18
 8008f72:	3b01      	subs	r3, #1
 8008f74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008f76:	4b21      	ldr	r3, [pc, #132]	@ (8008ffc <HAL_InitTick+0xd8>)
 8008f78:	4a21      	ldr	r2, [pc, #132]	@ (8009000 <HAL_InitTick+0xdc>)
 8008f7a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8008f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8008ffc <HAL_InitTick+0xd8>)
 8008f7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008f82:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8008f84:	4a1d      	ldr	r2, [pc, #116]	@ (8008ffc <HAL_InitTick+0xd8>)
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8008f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8008ffc <HAL_InitTick+0xd8>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f90:	4b1a      	ldr	r3, [pc, #104]	@ (8008ffc <HAL_InitTick+0xd8>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f96:	4b19      	ldr	r3, [pc, #100]	@ (8008ffc <HAL_InitTick+0xd8>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8008f9c:	4817      	ldr	r0, [pc, #92]	@ (8008ffc <HAL_InitTick+0xd8>)
 8008f9e:	f7fb fed7 	bl	8004d50 <HAL_TIM_Base_Init>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8008fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d11b      	bne.n	8008fe8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8008fb0:	4812      	ldr	r0, [pc, #72]	@ (8008ffc <HAL_InitTick+0xd8>)
 8008fb2:	f7fb ff25 	bl	8004e00 <HAL_TIM_Base_Start_IT>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8008fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d111      	bne.n	8008fe8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008fc4:	2019      	movs	r0, #25
 8008fc6:	f7f8 fb9a 	bl	80016fe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b0f      	cmp	r3, #15
 8008fce:	d808      	bhi.n	8008fe2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	2019      	movs	r0, #25
 8008fd6:	f7f8 fb76 	bl	80016c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008fda:	4a0a      	ldr	r2, [pc, #40]	@ (8009004 <HAL_InitTick+0xe0>)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	e002      	b.n	8008fe8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8008fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3730      	adds	r7, #48	@ 0x30
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	431bde83 	.word	0x431bde83
 8008ffc:	20001a0c 	.word	0x20001a0c
 8009000:	40012c00 	.word	0x40012c00
 8009004:	20000000 	.word	0x20000000

08009008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009008:	b480      	push	{r7}
 800900a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800900c:	bf00      	nop
 800900e:	e7fd      	b.n	800900c <NMI_Handler+0x4>

08009010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009014:	bf00      	nop
 8009016:	e7fd      	b.n	8009014 <HardFault_Handler+0x4>

08009018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800901c:	bf00      	nop
 800901e:	e7fd      	b.n	800901c <MemManage_Handler+0x4>

08009020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009024:	bf00      	nop
 8009026:	e7fd      	b.n	8009024 <BusFault_Handler+0x4>

08009028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800902c:	bf00      	nop
 800902e:	e7fd      	b.n	800902c <UsageFault_Handler+0x4>

08009030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009034:	bf00      	nop
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr

0800903c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009040:	4802      	ldr	r0, [pc, #8]	@ (800904c <TIM1_UP_IRQHandler+0x10>)
 8009042:	f7fb ff2f 	bl	8004ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009046:	bf00      	nop
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20001a0c 	.word	0x20001a0c

08009050 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009054:	4802      	ldr	r0, [pc, #8]	@ (8009060 <USART1_IRQHandler+0x10>)
 8009056:	f7fc f9b9 	bl	80053cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800905a:	bf00      	nop
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20001208 	.word	0x20001208

08009064 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009068:	4802      	ldr	r0, [pc, #8]	@ (8009074 <USART2_IRQHandler+0x10>)
 800906a:	f7fc f9af 	bl	80053cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800906e:	bf00      	nop
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20001250 	.word	0x20001250

08009078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_UI_Pin);
 800907c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009080:	f7f8 fd82 	bl	8001b88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Right_UI_Pin);
 8009084:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009088:	f7f8 fd7e 	bl	8001b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800908c:	bf00      	nop
 800908e:	bd80      	pop	{r7, pc}

08009090 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8009094:	4802      	ldr	r0, [pc, #8]	@ (80090a0 <RTC_Alarm_IRQHandler+0x10>)
 8009096:	f7fb fb6d 	bl	8004774 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800909a:	bf00      	nop
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	200011f4 	.word	0x200011f4

080090a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  return 1;
 80090a8:	2301      	movs	r3, #1
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bc80      	pop	{r7}
 80090b0:	4770      	bx	lr

080090b2 <_kill>:

int _kill(int pid, int sig)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80090bc:	f001 fab2 	bl	800a624 <__errno>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2216      	movs	r2, #22
 80090c4:	601a      	str	r2, [r3, #0]
  return -1;
 80090c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <_exit>:

void _exit (int status)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80090da:	f04f 31ff 	mov.w	r1, #4294967295
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff ffe7 	bl	80090b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80090e4:	bf00      	nop
 80090e6:	e7fd      	b.n	80090e4 <_exit+0x12>

080090e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090f4:	2300      	movs	r3, #0
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	e00a      	b.n	8009110 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80090fa:	f3af 8000 	nop.w
 80090fe:	4601      	mov	r1, r0
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	60ba      	str	r2, [r7, #8]
 8009106:	b2ca      	uxtb	r2, r1
 8009108:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	3301      	adds	r3, #1
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	429a      	cmp	r2, r3
 8009116:	dbf0      	blt.n	80090fa <_read+0x12>
  }

  return len;
 8009118:	687b      	ldr	r3, [r7, #4]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b086      	sub	sp, #24
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	e009      	b.n	8009148 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	60ba      	str	r2, [r7, #8]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	4618      	mov	r0, r3
 800913e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	3301      	adds	r3, #1
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	429a      	cmp	r2, r3
 800914e:	dbf1      	blt.n	8009134 <_write+0x12>
  }
  return len;
 8009150:	687b      	ldr	r3, [r7, #4]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <_close>:

int _close(int file)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009180:	605a      	str	r2, [r3, #4]
  return 0;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	bc80      	pop	{r7}
 800918c:	4770      	bx	lr

0800918e <_isatty>:

int _isatty(int file)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009196:	2301      	movs	r3, #1
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	bc80      	pop	{r7}
 80091a0:	4770      	bx	lr

080091a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b085      	sub	sp, #20
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bc80      	pop	{r7}
 80091b8:	4770      	bx	lr
	...

080091bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80091c4:	4a14      	ldr	r2, [pc, #80]	@ (8009218 <_sbrk+0x5c>)
 80091c6:	4b15      	ldr	r3, [pc, #84]	@ (800921c <_sbrk+0x60>)
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80091d0:	4b13      	ldr	r3, [pc, #76]	@ (8009220 <_sbrk+0x64>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d102      	bne.n	80091de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80091d8:	4b11      	ldr	r3, [pc, #68]	@ (8009220 <_sbrk+0x64>)
 80091da:	4a12      	ldr	r2, [pc, #72]	@ (8009224 <_sbrk+0x68>)
 80091dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80091de:	4b10      	ldr	r3, [pc, #64]	@ (8009220 <_sbrk+0x64>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4413      	add	r3, r2
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d207      	bcs.n	80091fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80091ec:	f001 fa1a 	bl	800a624 <__errno>
 80091f0:	4603      	mov	r3, r0
 80091f2:	220c      	movs	r2, #12
 80091f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295
 80091fa:	e009      	b.n	8009210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80091fc:	4b08      	ldr	r3, [pc, #32]	@ (8009220 <_sbrk+0x64>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009202:	4b07      	ldr	r3, [pc, #28]	@ (8009220 <_sbrk+0x64>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4413      	add	r3, r2
 800920a:	4a05      	ldr	r2, [pc, #20]	@ (8009220 <_sbrk+0x64>)
 800920c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800920e:	68fb      	ldr	r3, [r7, #12]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20005000 	.word	0x20005000
 800921c:	00000400 	.word	0x00000400
 8009220:	20001a54 	.word	0x20001a54
 8009224:	20001bb8 	.word	0x20001bb8

08009228 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800922c:	bf00      	nop
 800922e:	46bd      	mov	sp, r7
 8009230:	bc80      	pop	{r7}
 8009232:	4770      	bx	lr

08009234 <set_time>:
uint8_t uart_rx_buf [1] = {0};
uint8_t hhmmss[9] = {0};
uint8_t toFill = 0;
uint8_t prevNum = 0;

void set_time (uint8_t hr, uint8_t min, uint8_t sec) {
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	71fb      	strb	r3, [r7, #7]
 800923e:	460b      	mov	r3, r1
 8009240:	71bb      	strb	r3, [r7, #6]
 8009242:	4613      	mov	r3, r2
 8009244:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime = {0};
 8009246:	f107 030c 	add.w	r3, r7, #12
 800924a:	2100      	movs	r1, #0
 800924c:	460a      	mov	r2, r1
 800924e:	801a      	strh	r2, [r3, #0]
 8009250:	460a      	mov	r2, r1
 8009252:	709a      	strb	r2, [r3, #2]
	sTime.Hours = hr;
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = min;
 8009258:	79bb      	ldrb	r3, [r7, #6]
 800925a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = sec;
 800925c:	797b      	ldrb	r3, [r7, #5]
 800925e:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8009260:	f107 030c 	add.w	r3, r7, #12
 8009264:	2200      	movs	r2, #0
 8009266:	4619      	mov	r1, r3
 8009268:	4805      	ldr	r0, [pc, #20]	@ (8009280 <set_time+0x4c>)
 800926a:	f7fb f809 	bl	8004280 <HAL_RTC_SetTime>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <set_time+0x44>
		Error_Handler();
 8009274:	f7fe fabc 	bl	80077f0 <Error_Handler>
	}
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	200011f4 	.word	0x200011f4

08009284 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date, uint8_t day) { // monday = 1
 8009284:	b590      	push	{r4, r7, lr}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	4604      	mov	r4, r0
 800928c:	4608      	mov	r0, r1
 800928e:	4611      	mov	r1, r2
 8009290:	461a      	mov	r2, r3
 8009292:	4623      	mov	r3, r4
 8009294:	71fb      	strb	r3, [r7, #7]
 8009296:	4603      	mov	r3, r0
 8009298:	71bb      	strb	r3, [r7, #6]
 800929a:	460b      	mov	r3, r1
 800929c:	717b      	strb	r3, [r7, #5]
 800929e:	4613      	mov	r3, r2
 80092a0:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate = {0};
 80092a2:	2300      	movs	r3, #0
 80092a4:	60fb      	str	r3, [r7, #12]
	sDate.WeekDay = day;
 80092a6:	793b      	ldrb	r3, [r7, #4]
 80092a8:	733b      	strb	r3, [r7, #12]
	sDate.Month = month;
 80092aa:	79bb      	ldrb	r3, [r7, #6]
 80092ac:	737b      	strb	r3, [r7, #13]
	sDate.Date = date;
 80092ae:	797b      	ldrb	r3, [r7, #5]
 80092b0:	73bb      	strb	r3, [r7, #14]
	sDate.Year = year;
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	73fb      	strb	r3, [r7, #15]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80092b6:	f107 030c 	add.w	r3, r7, #12
 80092ba:	2200      	movs	r2, #0
 80092bc:	4619      	mov	r1, r3
 80092be:	4809      	ldr	r0, [pc, #36]	@ (80092e4 <set_date+0x60>)
 80092c0:	f7fb f94e 	bl	8004560 <HAL_RTC_SetDate>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <set_date+0x4a>
		Error_Handler();
 80092ca:	f7fe fa91 	bl	80077f0 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
 80092ce:	f242 3245 	movw	r2, #9029	@ 0x2345
 80092d2:	2101      	movs	r1, #1
 80092d4:	4803      	ldr	r0, [pc, #12]	@ (80092e4 <set_date+0x60>)
 80092d6:	f7fb fd21 	bl	8004d1c <HAL_RTCEx_BKUPWrite>
	// If in main loop RTC_BKP_DR1 register contains 0x2345 -> don't update time
}
 80092da:	bf00      	nop
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd90      	pop	{r4, r7, pc}
 80092e2:	bf00      	nop
 80092e4:	200011f4 	.word	0x200011f4

080092e8 <get_time_date>:

void get_time_date(char *time, char *date)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af02      	add	r7, sp, #8
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80092f2:	f107 0308 	add.w	r3, r7, #8
 80092f6:	2200      	movs	r2, #0
 80092f8:	4619      	mov	r1, r3
 80092fa:	4813      	ldr	r0, [pc, #76]	@ (8009348 <get_time_date+0x60>)
 80092fc:	f7fb f858 	bl	80043b0 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8009300:	f107 030c 	add.w	r3, r7, #12
 8009304:	2200      	movs	r2, #0
 8009306:	4619      	mov	r1, r3
 8009308:	480f      	ldr	r0, [pc, #60]	@ (8009348 <get_time_date+0x60>)
 800930a:	f7fb f9df 	bl	80046cc <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800930e:	7a3b      	ldrb	r3, [r7, #8]
 8009310:	461a      	mov	r2, r3
 8009312:	7a7b      	ldrb	r3, [r7, #9]
 8009314:	4619      	mov	r1, r3
 8009316:	7abb      	ldrb	r3, [r7, #10]
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	460b      	mov	r3, r1
 800931c:	490b      	ldr	r1, [pc, #44]	@ (800934c <get_time_date+0x64>)
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 f8b8 	bl	800a494 <siprintf>

  /* Display date Format: dd-mm-yyyy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8009324:	7bbb      	ldrb	r3, [r7, #14]
 8009326:	461a      	mov	r2, r3
 8009328:	7b7b      	ldrb	r3, [r7, #13]
 800932a:	4619      	mov	r1, r3
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	460b      	mov	r3, r1
 8009336:	4906      	ldr	r1, [pc, #24]	@ (8009350 <get_time_date+0x68>)
 8009338:	6838      	ldr	r0, [r7, #0]
 800933a:	f001 f8ab 	bl	800a494 <siprintf>
}
 800933e:	bf00      	nop
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200011f4 	.word	0x200011f4
 800934c:	0800dc48 	.word	0x0800dc48
 8009350:	0800dc58 	.word	0x0800dc58

08009354 <parseTime>:

void parseTime(uint8_t* hhmmss) {
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	set_time(hhmmss[2], hhmmss[1], hhmmss[0]);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3302      	adds	r3, #2
 8009360:	7818      	ldrb	r0, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	3301      	adds	r3, #1
 8009366:	7819      	ldrb	r1, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	f7ff ff61 	bl	8009234 <set_time>
	set_date(hhmmss[6], hhmmss[3], hhmmss[5], hhmmss[4]+1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3306      	adds	r3, #6
 8009376:	7818      	ldrb	r0, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3303      	adds	r3, #3
 800937c:	7819      	ldrb	r1, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3305      	adds	r3, #5
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3304      	adds	r3, #4
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	3301      	adds	r3, #1
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f7ff ff79 	bl	8009284 <set_date>
	HAL_UART_Transmit(&huart2, &hhmmss[6], 1, 10);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	1d99      	adds	r1, r3, #6
 8009396:	230a      	movs	r3, #10
 8009398:	2201      	movs	r2, #1
 800939a:	4806      	ldr	r0, [pc, #24]	@ (80093b4 <parseTime+0x60>)
 800939c:	f7fb ff66 	bl	800526c <HAL_UART_Transmit>
	// no need to divide as each element of hhmmss is uint8_t == 1 byte
	memset(hhmmss, 0, sizeof(*hhmmss));
 80093a0:	2201      	movs	r2, #1
 80093a2:	2100      	movs	r1, #0
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 f8da 	bl	800a55e <memset>
}
 80093aa:	bf00      	nop
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20001250 	.word	0x20001250

080093b8 <render_time>:

void render_time(void) {
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af02      	add	r7, sp, #8
	// HH:MM:SS\n
	char time[9];
	// yyyy:mm:dd\n
	char date[11];
	get_time_date(time, date);
 80093be:	463a      	mov	r2, r7
 80093c0:	f107 030c 	add.w	r3, r7, #12
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7ff ff8e 	bl	80092e8 <get_time_date>
	// Forward byte to UART2
	//HAL_UART_Transmit(&huart2, (uint8_t*)time, 8, 100);
	ssd1306_Fill(0);
 80093cc:	2000      	movs	r0, #0
 80093ce:	f7ff fadb 	bl	8008988 <ssd1306_Fill>
	ssd1306_SetCursor (0,0);
 80093d2:	2100      	movs	r1, #0
 80093d4:	2000      	movs	r0, #0
 80093d6:	f7ff fc25 	bl	8008c24 <ssd1306_SetCursor>
	ssd1306_WriteString (time, Font_14x15, White);
 80093da:	4b0c      	ldr	r3, [pc, #48]	@ (800940c <render_time+0x54>)
 80093dc:	f107 000c 	add.w	r0, r7, #12
 80093e0:	2201      	movs	r2, #1
 80093e2:	9200      	str	r2, [sp, #0]
 80093e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093e6:	f7ff fbf7 	bl	8008bd8 <ssd1306_WriteString>
	ssd1306_SetCursor (0,30);
 80093ea:	211e      	movs	r1, #30
 80093ec:	2000      	movs	r0, #0
 80093ee:	f7ff fc19 	bl	8008c24 <ssd1306_SetCursor>
	ssd1306_WriteString (date, Font_7x10, White);
 80093f2:	4b07      	ldr	r3, [pc, #28]	@ (8009410 <render_time+0x58>)
 80093f4:	4638      	mov	r0, r7
 80093f6:	2201      	movs	r2, #1
 80093f8:	9200      	str	r2, [sp, #0]
 80093fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093fc:	f7ff fbec 	bl	8008bd8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8009400:	f7ff fada 	bl	80089b8 <ssd1306_UpdateScreen>
}
 8009404:	bf00      	nop
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	0800ff1c 	.word	0x0800ff1c
 8009410:	0800ff28 	.word	0x0800ff28

08009414 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009414:	f7ff ff08 	bl	8009228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009418:	480b      	ldr	r0, [pc, #44]	@ (8009448 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800941a:	490c      	ldr	r1, [pc, #48]	@ (800944c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800941c:	4a0c      	ldr	r2, [pc, #48]	@ (8009450 <LoopFillZerobss+0x16>)
  movs r3, #0
 800941e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009420:	e002      	b.n	8009428 <LoopCopyDataInit>

08009422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009426:	3304      	adds	r3, #4

08009428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800942a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800942c:	d3f9      	bcc.n	8009422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800942e:	4a09      	ldr	r2, [pc, #36]	@ (8009454 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8009430:	4c09      	ldr	r4, [pc, #36]	@ (8009458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009434:	e001      	b.n	800943a <LoopFillZerobss>

08009436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009438:	3204      	adds	r2, #4

0800943a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800943a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800943c:	d3fb      	bcc.n	8009436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800943e:	f001 f8f7 	bl	800a630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009442:	f7fd ff41 	bl	80072c8 <main>
  bx lr
 8009446:	4770      	bx	lr
  ldr r0, =_sdata
 8009448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800944c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8009450:	08010384 	.word	0x08010384
  ldr r2, =_sbss
 8009454:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8009458:	20001bb4 	.word	0x20001bb4

0800945c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800945c:	e7fe      	b.n	800945c <ADC1_2_IRQHandler>
	...

08009460 <malloc>:
 8009460:	4b02      	ldr	r3, [pc, #8]	@ (800946c <malloc+0xc>)
 8009462:	4601      	mov	r1, r0
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	f000 b82d 	b.w	80094c4 <_malloc_r>
 800946a:	bf00      	nop
 800946c:	2000001c 	.word	0x2000001c

08009470 <free>:
 8009470:	4b02      	ldr	r3, [pc, #8]	@ (800947c <free+0xc>)
 8009472:	4601      	mov	r1, r0
 8009474:	6818      	ldr	r0, [r3, #0]
 8009476:	f001 bf7f 	b.w	800b378 <_free_r>
 800947a:	bf00      	nop
 800947c:	2000001c 	.word	0x2000001c

08009480 <sbrk_aligned>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4e0f      	ldr	r6, [pc, #60]	@ (80094c0 <sbrk_aligned+0x40>)
 8009484:	460c      	mov	r4, r1
 8009486:	6831      	ldr	r1, [r6, #0]
 8009488:	4605      	mov	r5, r0
 800948a:	b911      	cbnz	r1, 8009492 <sbrk_aligned+0x12>
 800948c:	f001 f8a8 	bl	800a5e0 <_sbrk_r>
 8009490:	6030      	str	r0, [r6, #0]
 8009492:	4621      	mov	r1, r4
 8009494:	4628      	mov	r0, r5
 8009496:	f001 f8a3 	bl	800a5e0 <_sbrk_r>
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	d103      	bne.n	80094a6 <sbrk_aligned+0x26>
 800949e:	f04f 34ff 	mov.w	r4, #4294967295
 80094a2:	4620      	mov	r0, r4
 80094a4:	bd70      	pop	{r4, r5, r6, pc}
 80094a6:	1cc4      	adds	r4, r0, #3
 80094a8:	f024 0403 	bic.w	r4, r4, #3
 80094ac:	42a0      	cmp	r0, r4
 80094ae:	d0f8      	beq.n	80094a2 <sbrk_aligned+0x22>
 80094b0:	1a21      	subs	r1, r4, r0
 80094b2:	4628      	mov	r0, r5
 80094b4:	f001 f894 	bl	800a5e0 <_sbrk_r>
 80094b8:	3001      	adds	r0, #1
 80094ba:	d1f2      	bne.n	80094a2 <sbrk_aligned+0x22>
 80094bc:	e7ef      	b.n	800949e <sbrk_aligned+0x1e>
 80094be:	bf00      	nop
 80094c0:	20001a68 	.word	0x20001a68

080094c4 <_malloc_r>:
 80094c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c8:	1ccd      	adds	r5, r1, #3
 80094ca:	f025 0503 	bic.w	r5, r5, #3
 80094ce:	3508      	adds	r5, #8
 80094d0:	2d0c      	cmp	r5, #12
 80094d2:	bf38      	it	cc
 80094d4:	250c      	movcc	r5, #12
 80094d6:	2d00      	cmp	r5, #0
 80094d8:	4606      	mov	r6, r0
 80094da:	db01      	blt.n	80094e0 <_malloc_r+0x1c>
 80094dc:	42a9      	cmp	r1, r5
 80094de:	d904      	bls.n	80094ea <_malloc_r+0x26>
 80094e0:	230c      	movs	r3, #12
 80094e2:	6033      	str	r3, [r6, #0]
 80094e4:	2000      	movs	r0, #0
 80094e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095c0 <_malloc_r+0xfc>
 80094ee:	f000 f869 	bl	80095c4 <__malloc_lock>
 80094f2:	f8d8 3000 	ldr.w	r3, [r8]
 80094f6:	461c      	mov	r4, r3
 80094f8:	bb44      	cbnz	r4, 800954c <_malloc_r+0x88>
 80094fa:	4629      	mov	r1, r5
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7ff ffbf 	bl	8009480 <sbrk_aligned>
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	4604      	mov	r4, r0
 8009506:	d158      	bne.n	80095ba <_malloc_r+0xf6>
 8009508:	f8d8 4000 	ldr.w	r4, [r8]
 800950c:	4627      	mov	r7, r4
 800950e:	2f00      	cmp	r7, #0
 8009510:	d143      	bne.n	800959a <_malloc_r+0xd6>
 8009512:	2c00      	cmp	r4, #0
 8009514:	d04b      	beq.n	80095ae <_malloc_r+0xea>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	4639      	mov	r1, r7
 800951a:	4630      	mov	r0, r6
 800951c:	eb04 0903 	add.w	r9, r4, r3
 8009520:	f001 f85e 	bl	800a5e0 <_sbrk_r>
 8009524:	4581      	cmp	r9, r0
 8009526:	d142      	bne.n	80095ae <_malloc_r+0xea>
 8009528:	6821      	ldr	r1, [r4, #0]
 800952a:	4630      	mov	r0, r6
 800952c:	1a6d      	subs	r5, r5, r1
 800952e:	4629      	mov	r1, r5
 8009530:	f7ff ffa6 	bl	8009480 <sbrk_aligned>
 8009534:	3001      	adds	r0, #1
 8009536:	d03a      	beq.n	80095ae <_malloc_r+0xea>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	442b      	add	r3, r5
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	f8d8 3000 	ldr.w	r3, [r8]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	bb62      	cbnz	r2, 80095a0 <_malloc_r+0xdc>
 8009546:	f8c8 7000 	str.w	r7, [r8]
 800954a:	e00f      	b.n	800956c <_malloc_r+0xa8>
 800954c:	6822      	ldr	r2, [r4, #0]
 800954e:	1b52      	subs	r2, r2, r5
 8009550:	d420      	bmi.n	8009594 <_malloc_r+0xd0>
 8009552:	2a0b      	cmp	r2, #11
 8009554:	d917      	bls.n	8009586 <_malloc_r+0xc2>
 8009556:	1961      	adds	r1, r4, r5
 8009558:	42a3      	cmp	r3, r4
 800955a:	6025      	str	r5, [r4, #0]
 800955c:	bf18      	it	ne
 800955e:	6059      	strne	r1, [r3, #4]
 8009560:	6863      	ldr	r3, [r4, #4]
 8009562:	bf08      	it	eq
 8009564:	f8c8 1000 	streq.w	r1, [r8]
 8009568:	5162      	str	r2, [r4, r5]
 800956a:	604b      	str	r3, [r1, #4]
 800956c:	4630      	mov	r0, r6
 800956e:	f000 f82f 	bl	80095d0 <__malloc_unlock>
 8009572:	f104 000b 	add.w	r0, r4, #11
 8009576:	1d23      	adds	r3, r4, #4
 8009578:	f020 0007 	bic.w	r0, r0, #7
 800957c:	1ac2      	subs	r2, r0, r3
 800957e:	bf1c      	itt	ne
 8009580:	1a1b      	subne	r3, r3, r0
 8009582:	50a3      	strne	r3, [r4, r2]
 8009584:	e7af      	b.n	80094e6 <_malloc_r+0x22>
 8009586:	6862      	ldr	r2, [r4, #4]
 8009588:	42a3      	cmp	r3, r4
 800958a:	bf0c      	ite	eq
 800958c:	f8c8 2000 	streq.w	r2, [r8]
 8009590:	605a      	strne	r2, [r3, #4]
 8009592:	e7eb      	b.n	800956c <_malloc_r+0xa8>
 8009594:	4623      	mov	r3, r4
 8009596:	6864      	ldr	r4, [r4, #4]
 8009598:	e7ae      	b.n	80094f8 <_malloc_r+0x34>
 800959a:	463c      	mov	r4, r7
 800959c:	687f      	ldr	r7, [r7, #4]
 800959e:	e7b6      	b.n	800950e <_malloc_r+0x4a>
 80095a0:	461a      	mov	r2, r3
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	42a3      	cmp	r3, r4
 80095a6:	d1fb      	bne.n	80095a0 <_malloc_r+0xdc>
 80095a8:	2300      	movs	r3, #0
 80095aa:	6053      	str	r3, [r2, #4]
 80095ac:	e7de      	b.n	800956c <_malloc_r+0xa8>
 80095ae:	230c      	movs	r3, #12
 80095b0:	4630      	mov	r0, r6
 80095b2:	6033      	str	r3, [r6, #0]
 80095b4:	f000 f80c 	bl	80095d0 <__malloc_unlock>
 80095b8:	e794      	b.n	80094e4 <_malloc_r+0x20>
 80095ba:	6005      	str	r5, [r0, #0]
 80095bc:	e7d6      	b.n	800956c <_malloc_r+0xa8>
 80095be:	bf00      	nop
 80095c0:	20001a6c 	.word	0x20001a6c

080095c4 <__malloc_lock>:
 80095c4:	4801      	ldr	r0, [pc, #4]	@ (80095cc <__malloc_lock+0x8>)
 80095c6:	f001 b858 	b.w	800a67a <__retarget_lock_acquire_recursive>
 80095ca:	bf00      	nop
 80095cc:	20001bb0 	.word	0x20001bb0

080095d0 <__malloc_unlock>:
 80095d0:	4801      	ldr	r0, [pc, #4]	@ (80095d8 <__malloc_unlock+0x8>)
 80095d2:	f001 b853 	b.w	800a67c <__retarget_lock_release_recursive>
 80095d6:	bf00      	nop
 80095d8:	20001bb0 	.word	0x20001bb0

080095dc <__cvt>:
 80095dc:	2b00      	cmp	r3, #0
 80095de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e2:	461d      	mov	r5, r3
 80095e4:	bfbb      	ittet	lt
 80095e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80095ea:	461d      	movlt	r5, r3
 80095ec:	2300      	movge	r3, #0
 80095ee:	232d      	movlt	r3, #45	@ 0x2d
 80095f0:	b088      	sub	sp, #32
 80095f2:	4614      	mov	r4, r2
 80095f4:	bfb8      	it	lt
 80095f6:	4614      	movlt	r4, r2
 80095f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80095fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80095fc:	7013      	strb	r3, [r2, #0]
 80095fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009600:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009604:	f023 0820 	bic.w	r8, r3, #32
 8009608:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800960c:	d005      	beq.n	800961a <__cvt+0x3e>
 800960e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009612:	d100      	bne.n	8009616 <__cvt+0x3a>
 8009614:	3601      	adds	r6, #1
 8009616:	2302      	movs	r3, #2
 8009618:	e000      	b.n	800961c <__cvt+0x40>
 800961a:	2303      	movs	r3, #3
 800961c:	aa07      	add	r2, sp, #28
 800961e:	9204      	str	r2, [sp, #16]
 8009620:	aa06      	add	r2, sp, #24
 8009622:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009626:	e9cd 3600 	strd	r3, r6, [sp]
 800962a:	4622      	mov	r2, r4
 800962c:	462b      	mov	r3, r5
 800962e:	f001 f8cf 	bl	800a7d0 <_dtoa_r>
 8009632:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009636:	4607      	mov	r7, r0
 8009638:	d119      	bne.n	800966e <__cvt+0x92>
 800963a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800963c:	07db      	lsls	r3, r3, #31
 800963e:	d50e      	bpl.n	800965e <__cvt+0x82>
 8009640:	eb00 0906 	add.w	r9, r0, r6
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	4620      	mov	r0, r4
 800964a:	4629      	mov	r1, r5
 800964c:	f7f7 f9ac 	bl	80009a8 <__aeabi_dcmpeq>
 8009650:	b108      	cbz	r0, 8009656 <__cvt+0x7a>
 8009652:	f8cd 901c 	str.w	r9, [sp, #28]
 8009656:	2230      	movs	r2, #48	@ 0x30
 8009658:	9b07      	ldr	r3, [sp, #28]
 800965a:	454b      	cmp	r3, r9
 800965c:	d31e      	bcc.n	800969c <__cvt+0xc0>
 800965e:	4638      	mov	r0, r7
 8009660:	9b07      	ldr	r3, [sp, #28]
 8009662:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009664:	1bdb      	subs	r3, r3, r7
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	b008      	add	sp, #32
 800966a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009672:	eb00 0906 	add.w	r9, r0, r6
 8009676:	d1e5      	bne.n	8009644 <__cvt+0x68>
 8009678:	7803      	ldrb	r3, [r0, #0]
 800967a:	2b30      	cmp	r3, #48	@ 0x30
 800967c:	d10a      	bne.n	8009694 <__cvt+0xb8>
 800967e:	2200      	movs	r2, #0
 8009680:	2300      	movs	r3, #0
 8009682:	4620      	mov	r0, r4
 8009684:	4629      	mov	r1, r5
 8009686:	f7f7 f98f 	bl	80009a8 <__aeabi_dcmpeq>
 800968a:	b918      	cbnz	r0, 8009694 <__cvt+0xb8>
 800968c:	f1c6 0601 	rsb	r6, r6, #1
 8009690:	f8ca 6000 	str.w	r6, [sl]
 8009694:	f8da 3000 	ldr.w	r3, [sl]
 8009698:	4499      	add	r9, r3
 800969a:	e7d3      	b.n	8009644 <__cvt+0x68>
 800969c:	1c59      	adds	r1, r3, #1
 800969e:	9107      	str	r1, [sp, #28]
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	e7d9      	b.n	8009658 <__cvt+0x7c>

080096a4 <__exponent>:
 80096a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a6:	2900      	cmp	r1, #0
 80096a8:	bfb6      	itet	lt
 80096aa:	232d      	movlt	r3, #45	@ 0x2d
 80096ac:	232b      	movge	r3, #43	@ 0x2b
 80096ae:	4249      	neglt	r1, r1
 80096b0:	2909      	cmp	r1, #9
 80096b2:	7002      	strb	r2, [r0, #0]
 80096b4:	7043      	strb	r3, [r0, #1]
 80096b6:	dd29      	ble.n	800970c <__exponent+0x68>
 80096b8:	f10d 0307 	add.w	r3, sp, #7
 80096bc:	461d      	mov	r5, r3
 80096be:	270a      	movs	r7, #10
 80096c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80096c4:	461a      	mov	r2, r3
 80096c6:	fb07 1416 	mls	r4, r7, r6, r1
 80096ca:	3430      	adds	r4, #48	@ 0x30
 80096cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80096d0:	460c      	mov	r4, r1
 80096d2:	2c63      	cmp	r4, #99	@ 0x63
 80096d4:	4631      	mov	r1, r6
 80096d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80096da:	dcf1      	bgt.n	80096c0 <__exponent+0x1c>
 80096dc:	3130      	adds	r1, #48	@ 0x30
 80096de:	1e94      	subs	r4, r2, #2
 80096e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096e4:	4623      	mov	r3, r4
 80096e6:	1c41      	adds	r1, r0, #1
 80096e8:	42ab      	cmp	r3, r5
 80096ea:	d30a      	bcc.n	8009702 <__exponent+0x5e>
 80096ec:	f10d 0309 	add.w	r3, sp, #9
 80096f0:	1a9b      	subs	r3, r3, r2
 80096f2:	42ac      	cmp	r4, r5
 80096f4:	bf88      	it	hi
 80096f6:	2300      	movhi	r3, #0
 80096f8:	3302      	adds	r3, #2
 80096fa:	4403      	add	r3, r0
 80096fc:	1a18      	subs	r0, r3, r0
 80096fe:	b003      	add	sp, #12
 8009700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009702:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009706:	f801 6f01 	strb.w	r6, [r1, #1]!
 800970a:	e7ed      	b.n	80096e8 <__exponent+0x44>
 800970c:	2330      	movs	r3, #48	@ 0x30
 800970e:	3130      	adds	r1, #48	@ 0x30
 8009710:	7083      	strb	r3, [r0, #2]
 8009712:	70c1      	strb	r1, [r0, #3]
 8009714:	1d03      	adds	r3, r0, #4
 8009716:	e7f1      	b.n	80096fc <__exponent+0x58>

08009718 <_printf_float>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	b091      	sub	sp, #68	@ 0x44
 800971e:	460c      	mov	r4, r1
 8009720:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009724:	4616      	mov	r6, r2
 8009726:	461f      	mov	r7, r3
 8009728:	4605      	mov	r5, r0
 800972a:	f000 ff21 	bl	800a570 <_localeconv_r>
 800972e:	6803      	ldr	r3, [r0, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	9308      	str	r3, [sp, #32]
 8009734:	f7f6 fd0c 	bl	8000150 <strlen>
 8009738:	2300      	movs	r3, #0
 800973a:	930e      	str	r3, [sp, #56]	@ 0x38
 800973c:	f8d8 3000 	ldr.w	r3, [r8]
 8009740:	9009      	str	r0, [sp, #36]	@ 0x24
 8009742:	3307      	adds	r3, #7
 8009744:	f023 0307 	bic.w	r3, r3, #7
 8009748:	f103 0208 	add.w	r2, r3, #8
 800974c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009750:	f8d4 b000 	ldr.w	fp, [r4]
 8009754:	f8c8 2000 	str.w	r2, [r8]
 8009758:	e9d3 8900 	ldrd	r8, r9, [r3]
 800975c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009760:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009762:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009766:	f04f 32ff 	mov.w	r2, #4294967295
 800976a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800976e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009772:	4b9c      	ldr	r3, [pc, #624]	@ (80099e4 <_printf_float+0x2cc>)
 8009774:	f7f7 f94a 	bl	8000a0c <__aeabi_dcmpun>
 8009778:	bb70      	cbnz	r0, 80097d8 <_printf_float+0xc0>
 800977a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800977e:	f04f 32ff 	mov.w	r2, #4294967295
 8009782:	4b98      	ldr	r3, [pc, #608]	@ (80099e4 <_printf_float+0x2cc>)
 8009784:	f7f7 f924 	bl	80009d0 <__aeabi_dcmple>
 8009788:	bb30      	cbnz	r0, 80097d8 <_printf_float+0xc0>
 800978a:	2200      	movs	r2, #0
 800978c:	2300      	movs	r3, #0
 800978e:	4640      	mov	r0, r8
 8009790:	4649      	mov	r1, r9
 8009792:	f7f7 f913 	bl	80009bc <__aeabi_dcmplt>
 8009796:	b110      	cbz	r0, 800979e <_printf_float+0x86>
 8009798:	232d      	movs	r3, #45	@ 0x2d
 800979a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800979e:	4a92      	ldr	r2, [pc, #584]	@ (80099e8 <_printf_float+0x2d0>)
 80097a0:	4b92      	ldr	r3, [pc, #584]	@ (80099ec <_printf_float+0x2d4>)
 80097a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80097a6:	bf8c      	ite	hi
 80097a8:	4690      	movhi	r8, r2
 80097aa:	4698      	movls	r8, r3
 80097ac:	2303      	movs	r3, #3
 80097ae:	f04f 0900 	mov.w	r9, #0
 80097b2:	6123      	str	r3, [r4, #16]
 80097b4:	f02b 0304 	bic.w	r3, fp, #4
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	4633      	mov	r3, r6
 80097bc:	4621      	mov	r1, r4
 80097be:	4628      	mov	r0, r5
 80097c0:	9700      	str	r7, [sp, #0]
 80097c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80097c4:	f000 f9d4 	bl	8009b70 <_printf_common>
 80097c8:	3001      	adds	r0, #1
 80097ca:	f040 8090 	bne.w	80098ee <_printf_float+0x1d6>
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295
 80097d2:	b011      	add	sp, #68	@ 0x44
 80097d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d8:	4642      	mov	r2, r8
 80097da:	464b      	mov	r3, r9
 80097dc:	4640      	mov	r0, r8
 80097de:	4649      	mov	r1, r9
 80097e0:	f7f7 f914 	bl	8000a0c <__aeabi_dcmpun>
 80097e4:	b148      	cbz	r0, 80097fa <_printf_float+0xe2>
 80097e6:	464b      	mov	r3, r9
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	bfb8      	it	lt
 80097ec:	232d      	movlt	r3, #45	@ 0x2d
 80097ee:	4a80      	ldr	r2, [pc, #512]	@ (80099f0 <_printf_float+0x2d8>)
 80097f0:	bfb8      	it	lt
 80097f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097f6:	4b7f      	ldr	r3, [pc, #508]	@ (80099f4 <_printf_float+0x2dc>)
 80097f8:	e7d3      	b.n	80097a2 <_printf_float+0x8a>
 80097fa:	6863      	ldr	r3, [r4, #4]
 80097fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	d13f      	bne.n	8009884 <_printf_float+0x16c>
 8009804:	2306      	movs	r3, #6
 8009806:	6063      	str	r3, [r4, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	9206      	str	r2, [sp, #24]
 8009812:	aa0e      	add	r2, sp, #56	@ 0x38
 8009814:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009818:	aa0d      	add	r2, sp, #52	@ 0x34
 800981a:	9203      	str	r2, [sp, #12]
 800981c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009820:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009824:	6863      	ldr	r3, [r4, #4]
 8009826:	4642      	mov	r2, r8
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	4628      	mov	r0, r5
 800982c:	464b      	mov	r3, r9
 800982e:	910a      	str	r1, [sp, #40]	@ 0x28
 8009830:	f7ff fed4 	bl	80095dc <__cvt>
 8009834:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009836:	4680      	mov	r8, r0
 8009838:	2947      	cmp	r1, #71	@ 0x47
 800983a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800983c:	d128      	bne.n	8009890 <_printf_float+0x178>
 800983e:	1cc8      	adds	r0, r1, #3
 8009840:	db02      	blt.n	8009848 <_printf_float+0x130>
 8009842:	6863      	ldr	r3, [r4, #4]
 8009844:	4299      	cmp	r1, r3
 8009846:	dd40      	ble.n	80098ca <_printf_float+0x1b2>
 8009848:	f1aa 0a02 	sub.w	sl, sl, #2
 800984c:	fa5f fa8a 	uxtb.w	sl, sl
 8009850:	4652      	mov	r2, sl
 8009852:	3901      	subs	r1, #1
 8009854:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009858:	910d      	str	r1, [sp, #52]	@ 0x34
 800985a:	f7ff ff23 	bl	80096a4 <__exponent>
 800985e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009860:	4681      	mov	r9, r0
 8009862:	1813      	adds	r3, r2, r0
 8009864:	2a01      	cmp	r2, #1
 8009866:	6123      	str	r3, [r4, #16]
 8009868:	dc02      	bgt.n	8009870 <_printf_float+0x158>
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	07d2      	lsls	r2, r2, #31
 800986e:	d501      	bpl.n	8009874 <_printf_float+0x15c>
 8009870:	3301      	adds	r3, #1
 8009872:	6123      	str	r3, [r4, #16]
 8009874:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009878:	2b00      	cmp	r3, #0
 800987a:	d09e      	beq.n	80097ba <_printf_float+0xa2>
 800987c:	232d      	movs	r3, #45	@ 0x2d
 800987e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009882:	e79a      	b.n	80097ba <_printf_float+0xa2>
 8009884:	2947      	cmp	r1, #71	@ 0x47
 8009886:	d1bf      	bne.n	8009808 <_printf_float+0xf0>
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1bd      	bne.n	8009808 <_printf_float+0xf0>
 800988c:	2301      	movs	r3, #1
 800988e:	e7ba      	b.n	8009806 <_printf_float+0xee>
 8009890:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009894:	d9dc      	bls.n	8009850 <_printf_float+0x138>
 8009896:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800989a:	d118      	bne.n	80098ce <_printf_float+0x1b6>
 800989c:	2900      	cmp	r1, #0
 800989e:	6863      	ldr	r3, [r4, #4]
 80098a0:	dd0b      	ble.n	80098ba <_printf_float+0x1a2>
 80098a2:	6121      	str	r1, [r4, #16]
 80098a4:	b913      	cbnz	r3, 80098ac <_printf_float+0x194>
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	07d0      	lsls	r0, r2, #31
 80098aa:	d502      	bpl.n	80098b2 <_printf_float+0x19a>
 80098ac:	3301      	adds	r3, #1
 80098ae:	440b      	add	r3, r1
 80098b0:	6123      	str	r3, [r4, #16]
 80098b2:	f04f 0900 	mov.w	r9, #0
 80098b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80098b8:	e7dc      	b.n	8009874 <_printf_float+0x15c>
 80098ba:	b913      	cbnz	r3, 80098c2 <_printf_float+0x1aa>
 80098bc:	6822      	ldr	r2, [r4, #0]
 80098be:	07d2      	lsls	r2, r2, #31
 80098c0:	d501      	bpl.n	80098c6 <_printf_float+0x1ae>
 80098c2:	3302      	adds	r3, #2
 80098c4:	e7f4      	b.n	80098b0 <_printf_float+0x198>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e7f2      	b.n	80098b0 <_printf_float+0x198>
 80098ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80098ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098d0:	4299      	cmp	r1, r3
 80098d2:	db05      	blt.n	80098e0 <_printf_float+0x1c8>
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	6121      	str	r1, [r4, #16]
 80098d8:	07d8      	lsls	r0, r3, #31
 80098da:	d5ea      	bpl.n	80098b2 <_printf_float+0x19a>
 80098dc:	1c4b      	adds	r3, r1, #1
 80098de:	e7e7      	b.n	80098b0 <_printf_float+0x198>
 80098e0:	2900      	cmp	r1, #0
 80098e2:	bfcc      	ite	gt
 80098e4:	2201      	movgt	r2, #1
 80098e6:	f1c1 0202 	rsble	r2, r1, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	e7e0      	b.n	80098b0 <_printf_float+0x198>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	055a      	lsls	r2, r3, #21
 80098f2:	d407      	bmi.n	8009904 <_printf_float+0x1ec>
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	4642      	mov	r2, r8
 80098f8:	4631      	mov	r1, r6
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	d12b      	bne.n	800995a <_printf_float+0x242>
 8009902:	e764      	b.n	80097ce <_printf_float+0xb6>
 8009904:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009908:	f240 80dc 	bls.w	8009ac4 <_printf_float+0x3ac>
 800990c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009910:	2200      	movs	r2, #0
 8009912:	2300      	movs	r3, #0
 8009914:	f7f7 f848 	bl	80009a8 <__aeabi_dcmpeq>
 8009918:	2800      	cmp	r0, #0
 800991a:	d033      	beq.n	8009984 <_printf_float+0x26c>
 800991c:	2301      	movs	r3, #1
 800991e:	4631      	mov	r1, r6
 8009920:	4628      	mov	r0, r5
 8009922:	4a35      	ldr	r2, [pc, #212]	@ (80099f8 <_printf_float+0x2e0>)
 8009924:	47b8      	blx	r7
 8009926:	3001      	adds	r0, #1
 8009928:	f43f af51 	beq.w	80097ce <_printf_float+0xb6>
 800992c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009930:	4543      	cmp	r3, r8
 8009932:	db02      	blt.n	800993a <_printf_float+0x222>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	07d8      	lsls	r0, r3, #31
 8009938:	d50f      	bpl.n	800995a <_printf_float+0x242>
 800993a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800993e:	4631      	mov	r1, r6
 8009940:	4628      	mov	r0, r5
 8009942:	47b8      	blx	r7
 8009944:	3001      	adds	r0, #1
 8009946:	f43f af42 	beq.w	80097ce <_printf_float+0xb6>
 800994a:	f04f 0900 	mov.w	r9, #0
 800994e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009952:	f104 0a1a 	add.w	sl, r4, #26
 8009956:	45c8      	cmp	r8, r9
 8009958:	dc09      	bgt.n	800996e <_printf_float+0x256>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	079b      	lsls	r3, r3, #30
 800995e:	f100 8102 	bmi.w	8009b66 <_printf_float+0x44e>
 8009962:	68e0      	ldr	r0, [r4, #12]
 8009964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009966:	4298      	cmp	r0, r3
 8009968:	bfb8      	it	lt
 800996a:	4618      	movlt	r0, r3
 800996c:	e731      	b.n	80097d2 <_printf_float+0xba>
 800996e:	2301      	movs	r3, #1
 8009970:	4652      	mov	r2, sl
 8009972:	4631      	mov	r1, r6
 8009974:	4628      	mov	r0, r5
 8009976:	47b8      	blx	r7
 8009978:	3001      	adds	r0, #1
 800997a:	f43f af28 	beq.w	80097ce <_printf_float+0xb6>
 800997e:	f109 0901 	add.w	r9, r9, #1
 8009982:	e7e8      	b.n	8009956 <_printf_float+0x23e>
 8009984:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009986:	2b00      	cmp	r3, #0
 8009988:	dc38      	bgt.n	80099fc <_printf_float+0x2e4>
 800998a:	2301      	movs	r3, #1
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	4a19      	ldr	r2, [pc, #100]	@ (80099f8 <_printf_float+0x2e0>)
 8009992:	47b8      	blx	r7
 8009994:	3001      	adds	r0, #1
 8009996:	f43f af1a 	beq.w	80097ce <_printf_float+0xb6>
 800999a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800999e:	ea59 0303 	orrs.w	r3, r9, r3
 80099a2:	d102      	bne.n	80099aa <_printf_float+0x292>
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	07d9      	lsls	r1, r3, #31
 80099a8:	d5d7      	bpl.n	800995a <_printf_float+0x242>
 80099aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b8      	blx	r7
 80099b4:	3001      	adds	r0, #1
 80099b6:	f43f af0a 	beq.w	80097ce <_printf_float+0xb6>
 80099ba:	f04f 0a00 	mov.w	sl, #0
 80099be:	f104 0b1a 	add.w	fp, r4, #26
 80099c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099c4:	425b      	negs	r3, r3
 80099c6:	4553      	cmp	r3, sl
 80099c8:	dc01      	bgt.n	80099ce <_printf_float+0x2b6>
 80099ca:	464b      	mov	r3, r9
 80099cc:	e793      	b.n	80098f6 <_printf_float+0x1de>
 80099ce:	2301      	movs	r3, #1
 80099d0:	465a      	mov	r2, fp
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f aef8 	beq.w	80097ce <_printf_float+0xb6>
 80099de:	f10a 0a01 	add.w	sl, sl, #1
 80099e2:	e7ee      	b.n	80099c2 <_printf_float+0x2aa>
 80099e4:	7fefffff 	.word	0x7fefffff
 80099e8:	0800ff50 	.word	0x0800ff50
 80099ec:	0800ff4c 	.word	0x0800ff4c
 80099f0:	0800ff58 	.word	0x0800ff58
 80099f4:	0800ff54 	.word	0x0800ff54
 80099f8:	0800ff5c 	.word	0x0800ff5c
 80099fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009a02:	4553      	cmp	r3, sl
 8009a04:	bfa8      	it	ge
 8009a06:	4653      	movge	r3, sl
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	4699      	mov	r9, r3
 8009a0c:	dc36      	bgt.n	8009a7c <_printf_float+0x364>
 8009a0e:	f04f 0b00 	mov.w	fp, #0
 8009a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a16:	f104 021a 	add.w	r2, r4, #26
 8009a1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a1e:	eba3 0309 	sub.w	r3, r3, r9
 8009a22:	455b      	cmp	r3, fp
 8009a24:	dc31      	bgt.n	8009a8a <_printf_float+0x372>
 8009a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a28:	459a      	cmp	sl, r3
 8009a2a:	dc3a      	bgt.n	8009aa2 <_printf_float+0x38a>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	07da      	lsls	r2, r3, #31
 8009a30:	d437      	bmi.n	8009aa2 <_printf_float+0x38a>
 8009a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a34:	ebaa 0903 	sub.w	r9, sl, r3
 8009a38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a3a:	ebaa 0303 	sub.w	r3, sl, r3
 8009a3e:	4599      	cmp	r9, r3
 8009a40:	bfa8      	it	ge
 8009a42:	4699      	movge	r9, r3
 8009a44:	f1b9 0f00 	cmp.w	r9, #0
 8009a48:	dc33      	bgt.n	8009ab2 <_printf_float+0x39a>
 8009a4a:	f04f 0800 	mov.w	r8, #0
 8009a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a52:	f104 0b1a 	add.w	fp, r4, #26
 8009a56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a58:	ebaa 0303 	sub.w	r3, sl, r3
 8009a5c:	eba3 0309 	sub.w	r3, r3, r9
 8009a60:	4543      	cmp	r3, r8
 8009a62:	f77f af7a 	ble.w	800995a <_printf_float+0x242>
 8009a66:	2301      	movs	r3, #1
 8009a68:	465a      	mov	r2, fp
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	47b8      	blx	r7
 8009a70:	3001      	adds	r0, #1
 8009a72:	f43f aeac 	beq.w	80097ce <_printf_float+0xb6>
 8009a76:	f108 0801 	add.w	r8, r8, #1
 8009a7a:	e7ec      	b.n	8009a56 <_printf_float+0x33e>
 8009a7c:	4642      	mov	r2, r8
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4628      	mov	r0, r5
 8009a82:	47b8      	blx	r7
 8009a84:	3001      	adds	r0, #1
 8009a86:	d1c2      	bne.n	8009a0e <_printf_float+0x2f6>
 8009a88:	e6a1      	b.n	80097ce <_printf_float+0xb6>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4628      	mov	r0, r5
 8009a90:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a92:	47b8      	blx	r7
 8009a94:	3001      	adds	r0, #1
 8009a96:	f43f ae9a 	beq.w	80097ce <_printf_float+0xb6>
 8009a9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a9c:	f10b 0b01 	add.w	fp, fp, #1
 8009aa0:	e7bb      	b.n	8009a1a <_printf_float+0x302>
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b8      	blx	r7
 8009aac:	3001      	adds	r0, #1
 8009aae:	d1c0      	bne.n	8009a32 <_printf_float+0x31a>
 8009ab0:	e68d      	b.n	80097ce <_printf_float+0xb6>
 8009ab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ab4:	464b      	mov	r3, r9
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	4442      	add	r2, r8
 8009abc:	47b8      	blx	r7
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d1c3      	bne.n	8009a4a <_printf_float+0x332>
 8009ac2:	e684      	b.n	80097ce <_printf_float+0xb6>
 8009ac4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009ac8:	f1ba 0f01 	cmp.w	sl, #1
 8009acc:	dc01      	bgt.n	8009ad2 <_printf_float+0x3ba>
 8009ace:	07db      	lsls	r3, r3, #31
 8009ad0:	d536      	bpl.n	8009b40 <_printf_float+0x428>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	4642      	mov	r2, r8
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b8      	blx	r7
 8009adc:	3001      	adds	r0, #1
 8009ade:	f43f ae76 	beq.w	80097ce <_printf_float+0xb6>
 8009ae2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	4628      	mov	r0, r5
 8009aea:	47b8      	blx	r7
 8009aec:	3001      	adds	r0, #1
 8009aee:	f43f ae6e 	beq.w	80097ce <_printf_float+0xb6>
 8009af2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009af6:	2200      	movs	r2, #0
 8009af8:	2300      	movs	r3, #0
 8009afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009afe:	f7f6 ff53 	bl	80009a8 <__aeabi_dcmpeq>
 8009b02:	b9c0      	cbnz	r0, 8009b36 <_printf_float+0x41e>
 8009b04:	4653      	mov	r3, sl
 8009b06:	f108 0201 	add.w	r2, r8, #1
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	47b8      	blx	r7
 8009b10:	3001      	adds	r0, #1
 8009b12:	d10c      	bne.n	8009b2e <_printf_float+0x416>
 8009b14:	e65b      	b.n	80097ce <_printf_float+0xb6>
 8009b16:	2301      	movs	r3, #1
 8009b18:	465a      	mov	r2, fp
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	47b8      	blx	r7
 8009b20:	3001      	adds	r0, #1
 8009b22:	f43f ae54 	beq.w	80097ce <_printf_float+0xb6>
 8009b26:	f108 0801 	add.w	r8, r8, #1
 8009b2a:	45d0      	cmp	r8, sl
 8009b2c:	dbf3      	blt.n	8009b16 <_printf_float+0x3fe>
 8009b2e:	464b      	mov	r3, r9
 8009b30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b34:	e6e0      	b.n	80098f8 <_printf_float+0x1e0>
 8009b36:	f04f 0800 	mov.w	r8, #0
 8009b3a:	f104 0b1a 	add.w	fp, r4, #26
 8009b3e:	e7f4      	b.n	8009b2a <_printf_float+0x412>
 8009b40:	2301      	movs	r3, #1
 8009b42:	4642      	mov	r2, r8
 8009b44:	e7e1      	b.n	8009b0a <_printf_float+0x3f2>
 8009b46:	2301      	movs	r3, #1
 8009b48:	464a      	mov	r2, r9
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	f43f ae3c 	beq.w	80097ce <_printf_float+0xb6>
 8009b56:	f108 0801 	add.w	r8, r8, #1
 8009b5a:	68e3      	ldr	r3, [r4, #12]
 8009b5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009b5e:	1a5b      	subs	r3, r3, r1
 8009b60:	4543      	cmp	r3, r8
 8009b62:	dcf0      	bgt.n	8009b46 <_printf_float+0x42e>
 8009b64:	e6fd      	b.n	8009962 <_printf_float+0x24a>
 8009b66:	f04f 0800 	mov.w	r8, #0
 8009b6a:	f104 0919 	add.w	r9, r4, #25
 8009b6e:	e7f4      	b.n	8009b5a <_printf_float+0x442>

08009b70 <_printf_common>:
 8009b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	4616      	mov	r6, r2
 8009b76:	4698      	mov	r8, r3
 8009b78:	688a      	ldr	r2, [r1, #8]
 8009b7a:	690b      	ldr	r3, [r1, #16]
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	bfb8      	it	lt
 8009b82:	4613      	movlt	r3, r2
 8009b84:	6033      	str	r3, [r6, #0]
 8009b86:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b90:	b10a      	cbz	r2, 8009b96 <_printf_common+0x26>
 8009b92:	3301      	adds	r3, #1
 8009b94:	6033      	str	r3, [r6, #0]
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	0699      	lsls	r1, r3, #26
 8009b9a:	bf42      	ittt	mi
 8009b9c:	6833      	ldrmi	r3, [r6, #0]
 8009b9e:	3302      	addmi	r3, #2
 8009ba0:	6033      	strmi	r3, [r6, #0]
 8009ba2:	6825      	ldr	r5, [r4, #0]
 8009ba4:	f015 0506 	ands.w	r5, r5, #6
 8009ba8:	d106      	bne.n	8009bb8 <_printf_common+0x48>
 8009baa:	f104 0a19 	add.w	sl, r4, #25
 8009bae:	68e3      	ldr	r3, [r4, #12]
 8009bb0:	6832      	ldr	r2, [r6, #0]
 8009bb2:	1a9b      	subs	r3, r3, r2
 8009bb4:	42ab      	cmp	r3, r5
 8009bb6:	dc2b      	bgt.n	8009c10 <_printf_common+0xa0>
 8009bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009bbc:	6822      	ldr	r2, [r4, #0]
 8009bbe:	3b00      	subs	r3, #0
 8009bc0:	bf18      	it	ne
 8009bc2:	2301      	movne	r3, #1
 8009bc4:	0692      	lsls	r2, r2, #26
 8009bc6:	d430      	bmi.n	8009c2a <_printf_common+0xba>
 8009bc8:	4641      	mov	r1, r8
 8009bca:	4638      	mov	r0, r7
 8009bcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009bd0:	47c8      	blx	r9
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	d023      	beq.n	8009c1e <_printf_common+0xae>
 8009bd6:	6823      	ldr	r3, [r4, #0]
 8009bd8:	6922      	ldr	r2, [r4, #16]
 8009bda:	f003 0306 	and.w	r3, r3, #6
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	bf14      	ite	ne
 8009be2:	2500      	movne	r5, #0
 8009be4:	6833      	ldreq	r3, [r6, #0]
 8009be6:	f04f 0600 	mov.w	r6, #0
 8009bea:	bf08      	it	eq
 8009bec:	68e5      	ldreq	r5, [r4, #12]
 8009bee:	f104 041a 	add.w	r4, r4, #26
 8009bf2:	bf08      	it	eq
 8009bf4:	1aed      	subeq	r5, r5, r3
 8009bf6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009bfa:	bf08      	it	eq
 8009bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c00:	4293      	cmp	r3, r2
 8009c02:	bfc4      	itt	gt
 8009c04:	1a9b      	subgt	r3, r3, r2
 8009c06:	18ed      	addgt	r5, r5, r3
 8009c08:	42b5      	cmp	r5, r6
 8009c0a:	d11a      	bne.n	8009c42 <_printf_common+0xd2>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	e008      	b.n	8009c22 <_printf_common+0xb2>
 8009c10:	2301      	movs	r3, #1
 8009c12:	4652      	mov	r2, sl
 8009c14:	4641      	mov	r1, r8
 8009c16:	4638      	mov	r0, r7
 8009c18:	47c8      	blx	r9
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	d103      	bne.n	8009c26 <_printf_common+0xb6>
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c26:	3501      	adds	r5, #1
 8009c28:	e7c1      	b.n	8009bae <_printf_common+0x3e>
 8009c2a:	2030      	movs	r0, #48	@ 0x30
 8009c2c:	18e1      	adds	r1, r4, r3
 8009c2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c38:	4422      	add	r2, r4
 8009c3a:	3302      	adds	r3, #2
 8009c3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c40:	e7c2      	b.n	8009bc8 <_printf_common+0x58>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4622      	mov	r2, r4
 8009c46:	4641      	mov	r1, r8
 8009c48:	4638      	mov	r0, r7
 8009c4a:	47c8      	blx	r9
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d0e6      	beq.n	8009c1e <_printf_common+0xae>
 8009c50:	3601      	adds	r6, #1
 8009c52:	e7d9      	b.n	8009c08 <_printf_common+0x98>

08009c54 <_printf_i>:
 8009c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c58:	7e0f      	ldrb	r7, [r1, #24]
 8009c5a:	4691      	mov	r9, r2
 8009c5c:	2f78      	cmp	r7, #120	@ 0x78
 8009c5e:	4680      	mov	r8, r0
 8009c60:	460c      	mov	r4, r1
 8009c62:	469a      	mov	sl, r3
 8009c64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c6a:	d807      	bhi.n	8009c7c <_printf_i+0x28>
 8009c6c:	2f62      	cmp	r7, #98	@ 0x62
 8009c6e:	d80a      	bhi.n	8009c86 <_printf_i+0x32>
 8009c70:	2f00      	cmp	r7, #0
 8009c72:	f000 80d1 	beq.w	8009e18 <_printf_i+0x1c4>
 8009c76:	2f58      	cmp	r7, #88	@ 0x58
 8009c78:	f000 80b8 	beq.w	8009dec <_printf_i+0x198>
 8009c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c84:	e03a      	b.n	8009cfc <_printf_i+0xa8>
 8009c86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c8a:	2b15      	cmp	r3, #21
 8009c8c:	d8f6      	bhi.n	8009c7c <_printf_i+0x28>
 8009c8e:	a101      	add	r1, pc, #4	@ (adr r1, 8009c94 <_printf_i+0x40>)
 8009c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c94:	08009ced 	.word	0x08009ced
 8009c98:	08009d01 	.word	0x08009d01
 8009c9c:	08009c7d 	.word	0x08009c7d
 8009ca0:	08009c7d 	.word	0x08009c7d
 8009ca4:	08009c7d 	.word	0x08009c7d
 8009ca8:	08009c7d 	.word	0x08009c7d
 8009cac:	08009d01 	.word	0x08009d01
 8009cb0:	08009c7d 	.word	0x08009c7d
 8009cb4:	08009c7d 	.word	0x08009c7d
 8009cb8:	08009c7d 	.word	0x08009c7d
 8009cbc:	08009c7d 	.word	0x08009c7d
 8009cc0:	08009dff 	.word	0x08009dff
 8009cc4:	08009d2b 	.word	0x08009d2b
 8009cc8:	08009db9 	.word	0x08009db9
 8009ccc:	08009c7d 	.word	0x08009c7d
 8009cd0:	08009c7d 	.word	0x08009c7d
 8009cd4:	08009e21 	.word	0x08009e21
 8009cd8:	08009c7d 	.word	0x08009c7d
 8009cdc:	08009d2b 	.word	0x08009d2b
 8009ce0:	08009c7d 	.word	0x08009c7d
 8009ce4:	08009c7d 	.word	0x08009c7d
 8009ce8:	08009dc1 	.word	0x08009dc1
 8009cec:	6833      	ldr	r3, [r6, #0]
 8009cee:	1d1a      	adds	r2, r3, #4
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6032      	str	r2, [r6, #0]
 8009cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e09c      	b.n	8009e3a <_printf_i+0x1e6>
 8009d00:	6833      	ldr	r3, [r6, #0]
 8009d02:	6820      	ldr	r0, [r4, #0]
 8009d04:	1d19      	adds	r1, r3, #4
 8009d06:	6031      	str	r1, [r6, #0]
 8009d08:	0606      	lsls	r6, r0, #24
 8009d0a:	d501      	bpl.n	8009d10 <_printf_i+0xbc>
 8009d0c:	681d      	ldr	r5, [r3, #0]
 8009d0e:	e003      	b.n	8009d18 <_printf_i+0xc4>
 8009d10:	0645      	lsls	r5, r0, #25
 8009d12:	d5fb      	bpl.n	8009d0c <_printf_i+0xb8>
 8009d14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d18:	2d00      	cmp	r5, #0
 8009d1a:	da03      	bge.n	8009d24 <_printf_i+0xd0>
 8009d1c:	232d      	movs	r3, #45	@ 0x2d
 8009d1e:	426d      	negs	r5, r5
 8009d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d24:	230a      	movs	r3, #10
 8009d26:	4858      	ldr	r0, [pc, #352]	@ (8009e88 <_printf_i+0x234>)
 8009d28:	e011      	b.n	8009d4e <_printf_i+0xfa>
 8009d2a:	6821      	ldr	r1, [r4, #0]
 8009d2c:	6833      	ldr	r3, [r6, #0]
 8009d2e:	0608      	lsls	r0, r1, #24
 8009d30:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d34:	d402      	bmi.n	8009d3c <_printf_i+0xe8>
 8009d36:	0649      	lsls	r1, r1, #25
 8009d38:	bf48      	it	mi
 8009d3a:	b2ad      	uxthmi	r5, r5
 8009d3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d3e:	6033      	str	r3, [r6, #0]
 8009d40:	bf14      	ite	ne
 8009d42:	230a      	movne	r3, #10
 8009d44:	2308      	moveq	r3, #8
 8009d46:	4850      	ldr	r0, [pc, #320]	@ (8009e88 <_printf_i+0x234>)
 8009d48:	2100      	movs	r1, #0
 8009d4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d4e:	6866      	ldr	r6, [r4, #4]
 8009d50:	2e00      	cmp	r6, #0
 8009d52:	60a6      	str	r6, [r4, #8]
 8009d54:	db05      	blt.n	8009d62 <_printf_i+0x10e>
 8009d56:	6821      	ldr	r1, [r4, #0]
 8009d58:	432e      	orrs	r6, r5
 8009d5a:	f021 0104 	bic.w	r1, r1, #4
 8009d5e:	6021      	str	r1, [r4, #0]
 8009d60:	d04b      	beq.n	8009dfa <_printf_i+0x1a6>
 8009d62:	4616      	mov	r6, r2
 8009d64:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d68:	fb03 5711 	mls	r7, r3, r1, r5
 8009d6c:	5dc7      	ldrb	r7, [r0, r7]
 8009d6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d72:	462f      	mov	r7, r5
 8009d74:	42bb      	cmp	r3, r7
 8009d76:	460d      	mov	r5, r1
 8009d78:	d9f4      	bls.n	8009d64 <_printf_i+0x110>
 8009d7a:	2b08      	cmp	r3, #8
 8009d7c:	d10b      	bne.n	8009d96 <_printf_i+0x142>
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	07df      	lsls	r7, r3, #31
 8009d82:	d508      	bpl.n	8009d96 <_printf_i+0x142>
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	6861      	ldr	r1, [r4, #4]
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	bfde      	ittt	le
 8009d8c:	2330      	movle	r3, #48	@ 0x30
 8009d8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d96:	1b92      	subs	r2, r2, r6
 8009d98:	6122      	str	r2, [r4, #16]
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	4640      	mov	r0, r8
 8009da0:	f8cd a000 	str.w	sl, [sp]
 8009da4:	aa03      	add	r2, sp, #12
 8009da6:	f7ff fee3 	bl	8009b70 <_printf_common>
 8009daa:	3001      	adds	r0, #1
 8009dac:	d14a      	bne.n	8009e44 <_printf_i+0x1f0>
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	b004      	add	sp, #16
 8009db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	f043 0320 	orr.w	r3, r3, #32
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	2778      	movs	r7, #120	@ 0x78
 8009dc2:	4832      	ldr	r0, [pc, #200]	@ (8009e8c <_printf_i+0x238>)
 8009dc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	6831      	ldr	r1, [r6, #0]
 8009dcc:	061f      	lsls	r7, r3, #24
 8009dce:	f851 5b04 	ldr.w	r5, [r1], #4
 8009dd2:	d402      	bmi.n	8009dda <_printf_i+0x186>
 8009dd4:	065f      	lsls	r7, r3, #25
 8009dd6:	bf48      	it	mi
 8009dd8:	b2ad      	uxthmi	r5, r5
 8009dda:	6031      	str	r1, [r6, #0]
 8009ddc:	07d9      	lsls	r1, r3, #31
 8009dde:	bf44      	itt	mi
 8009de0:	f043 0320 	orrmi.w	r3, r3, #32
 8009de4:	6023      	strmi	r3, [r4, #0]
 8009de6:	b11d      	cbz	r5, 8009df0 <_printf_i+0x19c>
 8009de8:	2310      	movs	r3, #16
 8009dea:	e7ad      	b.n	8009d48 <_printf_i+0xf4>
 8009dec:	4826      	ldr	r0, [pc, #152]	@ (8009e88 <_printf_i+0x234>)
 8009dee:	e7e9      	b.n	8009dc4 <_printf_i+0x170>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	f023 0320 	bic.w	r3, r3, #32
 8009df6:	6023      	str	r3, [r4, #0]
 8009df8:	e7f6      	b.n	8009de8 <_printf_i+0x194>
 8009dfa:	4616      	mov	r6, r2
 8009dfc:	e7bd      	b.n	8009d7a <_printf_i+0x126>
 8009dfe:	6833      	ldr	r3, [r6, #0]
 8009e00:	6825      	ldr	r5, [r4, #0]
 8009e02:	1d18      	adds	r0, r3, #4
 8009e04:	6961      	ldr	r1, [r4, #20]
 8009e06:	6030      	str	r0, [r6, #0]
 8009e08:	062e      	lsls	r6, r5, #24
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	d501      	bpl.n	8009e12 <_printf_i+0x1be>
 8009e0e:	6019      	str	r1, [r3, #0]
 8009e10:	e002      	b.n	8009e18 <_printf_i+0x1c4>
 8009e12:	0668      	lsls	r0, r5, #25
 8009e14:	d5fb      	bpl.n	8009e0e <_printf_i+0x1ba>
 8009e16:	8019      	strh	r1, [r3, #0]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4616      	mov	r6, r2
 8009e1c:	6123      	str	r3, [r4, #16]
 8009e1e:	e7bc      	b.n	8009d9a <_printf_i+0x146>
 8009e20:	6833      	ldr	r3, [r6, #0]
 8009e22:	2100      	movs	r1, #0
 8009e24:	1d1a      	adds	r2, r3, #4
 8009e26:	6032      	str	r2, [r6, #0]
 8009e28:	681e      	ldr	r6, [r3, #0]
 8009e2a:	6862      	ldr	r2, [r4, #4]
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f000 fc26 	bl	800a67e <memchr>
 8009e32:	b108      	cbz	r0, 8009e38 <_printf_i+0x1e4>
 8009e34:	1b80      	subs	r0, r0, r6
 8009e36:	6060      	str	r0, [r4, #4]
 8009e38:	6863      	ldr	r3, [r4, #4]
 8009e3a:	6123      	str	r3, [r4, #16]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e42:	e7aa      	b.n	8009d9a <_printf_i+0x146>
 8009e44:	4632      	mov	r2, r6
 8009e46:	4649      	mov	r1, r9
 8009e48:	4640      	mov	r0, r8
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	47d0      	blx	sl
 8009e4e:	3001      	adds	r0, #1
 8009e50:	d0ad      	beq.n	8009dae <_printf_i+0x15a>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	079b      	lsls	r3, r3, #30
 8009e56:	d413      	bmi.n	8009e80 <_printf_i+0x22c>
 8009e58:	68e0      	ldr	r0, [r4, #12]
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	4298      	cmp	r0, r3
 8009e5e:	bfb8      	it	lt
 8009e60:	4618      	movlt	r0, r3
 8009e62:	e7a6      	b.n	8009db2 <_printf_i+0x15e>
 8009e64:	2301      	movs	r3, #1
 8009e66:	4632      	mov	r2, r6
 8009e68:	4649      	mov	r1, r9
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	47d0      	blx	sl
 8009e6e:	3001      	adds	r0, #1
 8009e70:	d09d      	beq.n	8009dae <_printf_i+0x15a>
 8009e72:	3501      	adds	r5, #1
 8009e74:	68e3      	ldr	r3, [r4, #12]
 8009e76:	9903      	ldr	r1, [sp, #12]
 8009e78:	1a5b      	subs	r3, r3, r1
 8009e7a:	42ab      	cmp	r3, r5
 8009e7c:	dcf2      	bgt.n	8009e64 <_printf_i+0x210>
 8009e7e:	e7eb      	b.n	8009e58 <_printf_i+0x204>
 8009e80:	2500      	movs	r5, #0
 8009e82:	f104 0619 	add.w	r6, r4, #25
 8009e86:	e7f5      	b.n	8009e74 <_printf_i+0x220>
 8009e88:	0800ff5e 	.word	0x0800ff5e
 8009e8c:	0800ff6f 	.word	0x0800ff6f

08009e90 <_scanf_float>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	b087      	sub	sp, #28
 8009e96:	9303      	str	r3, [sp, #12]
 8009e98:	688b      	ldr	r3, [r1, #8]
 8009e9a:	4691      	mov	r9, r2
 8009e9c:	1e5a      	subs	r2, r3, #1
 8009e9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009ea2:	bf82      	ittt	hi
 8009ea4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009ea8:	eb03 0b05 	addhi.w	fp, r3, r5
 8009eac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009eb0:	460a      	mov	r2, r1
 8009eb2:	f04f 0500 	mov.w	r5, #0
 8009eb6:	bf88      	it	hi
 8009eb8:	608b      	strhi	r3, [r1, #8]
 8009eba:	680b      	ldr	r3, [r1, #0]
 8009ebc:	4680      	mov	r8, r0
 8009ebe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009ec2:	f842 3b1c 	str.w	r3, [r2], #28
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	bf98      	it	ls
 8009eca:	f04f 0b00 	movls.w	fp, #0
 8009ece:	4616      	mov	r6, r2
 8009ed0:	46aa      	mov	sl, r5
 8009ed2:	462f      	mov	r7, r5
 8009ed4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009ed8:	9201      	str	r2, [sp, #4]
 8009eda:	9502      	str	r5, [sp, #8]
 8009edc:	68a2      	ldr	r2, [r4, #8]
 8009ede:	b15a      	cbz	r2, 8009ef8 <_scanf_float+0x68>
 8009ee0:	f8d9 3000 	ldr.w	r3, [r9]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b4e      	cmp	r3, #78	@ 0x4e
 8009ee8:	d862      	bhi.n	8009fb0 <_scanf_float+0x120>
 8009eea:	2b40      	cmp	r3, #64	@ 0x40
 8009eec:	d83a      	bhi.n	8009f64 <_scanf_float+0xd4>
 8009eee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009ef2:	b2c8      	uxtb	r0, r1
 8009ef4:	280e      	cmp	r0, #14
 8009ef6:	d938      	bls.n	8009f6a <_scanf_float+0xda>
 8009ef8:	b11f      	cbz	r7, 8009f02 <_scanf_float+0x72>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f06:	f1ba 0f01 	cmp.w	sl, #1
 8009f0a:	f200 8114 	bhi.w	800a136 <_scanf_float+0x2a6>
 8009f0e:	9b01      	ldr	r3, [sp, #4]
 8009f10:	429e      	cmp	r6, r3
 8009f12:	f200 8105 	bhi.w	800a120 <_scanf_float+0x290>
 8009f16:	2001      	movs	r0, #1
 8009f18:	b007      	add	sp, #28
 8009f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009f22:	2a0d      	cmp	r2, #13
 8009f24:	d8e8      	bhi.n	8009ef8 <_scanf_float+0x68>
 8009f26:	a101      	add	r1, pc, #4	@ (adr r1, 8009f2c <_scanf_float+0x9c>)
 8009f28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f2c:	0800a075 	.word	0x0800a075
 8009f30:	08009ef9 	.word	0x08009ef9
 8009f34:	08009ef9 	.word	0x08009ef9
 8009f38:	08009ef9 	.word	0x08009ef9
 8009f3c:	0800a0d1 	.word	0x0800a0d1
 8009f40:	0800a0ab 	.word	0x0800a0ab
 8009f44:	08009ef9 	.word	0x08009ef9
 8009f48:	08009ef9 	.word	0x08009ef9
 8009f4c:	0800a083 	.word	0x0800a083
 8009f50:	08009ef9 	.word	0x08009ef9
 8009f54:	08009ef9 	.word	0x08009ef9
 8009f58:	08009ef9 	.word	0x08009ef9
 8009f5c:	08009ef9 	.word	0x08009ef9
 8009f60:	0800a03f 	.word	0x0800a03f
 8009f64:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009f68:	e7db      	b.n	8009f22 <_scanf_float+0x92>
 8009f6a:	290e      	cmp	r1, #14
 8009f6c:	d8c4      	bhi.n	8009ef8 <_scanf_float+0x68>
 8009f6e:	a001      	add	r0, pc, #4	@ (adr r0, 8009f74 <_scanf_float+0xe4>)
 8009f70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f74:	0800a02f 	.word	0x0800a02f
 8009f78:	08009ef9 	.word	0x08009ef9
 8009f7c:	0800a02f 	.word	0x0800a02f
 8009f80:	0800a0bf 	.word	0x0800a0bf
 8009f84:	08009ef9 	.word	0x08009ef9
 8009f88:	08009fd1 	.word	0x08009fd1
 8009f8c:	0800a015 	.word	0x0800a015
 8009f90:	0800a015 	.word	0x0800a015
 8009f94:	0800a015 	.word	0x0800a015
 8009f98:	0800a015 	.word	0x0800a015
 8009f9c:	0800a015 	.word	0x0800a015
 8009fa0:	0800a015 	.word	0x0800a015
 8009fa4:	0800a015 	.word	0x0800a015
 8009fa8:	0800a015 	.word	0x0800a015
 8009fac:	0800a015 	.word	0x0800a015
 8009fb0:	2b6e      	cmp	r3, #110	@ 0x6e
 8009fb2:	d809      	bhi.n	8009fc8 <_scanf_float+0x138>
 8009fb4:	2b60      	cmp	r3, #96	@ 0x60
 8009fb6:	d8b2      	bhi.n	8009f1e <_scanf_float+0x8e>
 8009fb8:	2b54      	cmp	r3, #84	@ 0x54
 8009fba:	d07b      	beq.n	800a0b4 <_scanf_float+0x224>
 8009fbc:	2b59      	cmp	r3, #89	@ 0x59
 8009fbe:	d19b      	bne.n	8009ef8 <_scanf_float+0x68>
 8009fc0:	2d07      	cmp	r5, #7
 8009fc2:	d199      	bne.n	8009ef8 <_scanf_float+0x68>
 8009fc4:	2508      	movs	r5, #8
 8009fc6:	e02f      	b.n	800a028 <_scanf_float+0x198>
 8009fc8:	2b74      	cmp	r3, #116	@ 0x74
 8009fca:	d073      	beq.n	800a0b4 <_scanf_float+0x224>
 8009fcc:	2b79      	cmp	r3, #121	@ 0x79
 8009fce:	e7f6      	b.n	8009fbe <_scanf_float+0x12e>
 8009fd0:	6821      	ldr	r1, [r4, #0]
 8009fd2:	05c8      	lsls	r0, r1, #23
 8009fd4:	d51e      	bpl.n	800a014 <_scanf_float+0x184>
 8009fd6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009fda:	6021      	str	r1, [r4, #0]
 8009fdc:	3701      	adds	r7, #1
 8009fde:	f1bb 0f00 	cmp.w	fp, #0
 8009fe2:	d003      	beq.n	8009fec <_scanf_float+0x15c>
 8009fe4:	3201      	adds	r2, #1
 8009fe6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fea:	60a2      	str	r2, [r4, #8]
 8009fec:	68a3      	ldr	r3, [r4, #8]
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	60a3      	str	r3, [r4, #8]
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	6123      	str	r3, [r4, #16]
 8009ff8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f8c9 3004 	str.w	r3, [r9, #4]
 800a004:	f340 8083 	ble.w	800a10e <_scanf_float+0x27e>
 800a008:	f8d9 3000 	ldr.w	r3, [r9]
 800a00c:	3301      	adds	r3, #1
 800a00e:	f8c9 3000 	str.w	r3, [r9]
 800a012:	e763      	b.n	8009edc <_scanf_float+0x4c>
 800a014:	eb1a 0105 	adds.w	r1, sl, r5
 800a018:	f47f af6e 	bne.w	8009ef8 <_scanf_float+0x68>
 800a01c:	460d      	mov	r5, r1
 800a01e:	468a      	mov	sl, r1
 800a020:	6822      	ldr	r2, [r4, #0]
 800a022:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	f806 3b01 	strb.w	r3, [r6], #1
 800a02c:	e7de      	b.n	8009fec <_scanf_float+0x15c>
 800a02e:	6822      	ldr	r2, [r4, #0]
 800a030:	0610      	lsls	r0, r2, #24
 800a032:	f57f af61 	bpl.w	8009ef8 <_scanf_float+0x68>
 800a036:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a03a:	6022      	str	r2, [r4, #0]
 800a03c:	e7f4      	b.n	800a028 <_scanf_float+0x198>
 800a03e:	f1ba 0f00 	cmp.w	sl, #0
 800a042:	d10c      	bne.n	800a05e <_scanf_float+0x1ce>
 800a044:	b977      	cbnz	r7, 800a064 <_scanf_float+0x1d4>
 800a046:	6822      	ldr	r2, [r4, #0]
 800a048:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a04c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a050:	d108      	bne.n	800a064 <_scanf_float+0x1d4>
 800a052:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a056:	f04f 0a01 	mov.w	sl, #1
 800a05a:	6022      	str	r2, [r4, #0]
 800a05c:	e7e4      	b.n	800a028 <_scanf_float+0x198>
 800a05e:	f1ba 0f02 	cmp.w	sl, #2
 800a062:	d051      	beq.n	800a108 <_scanf_float+0x278>
 800a064:	2d01      	cmp	r5, #1
 800a066:	d002      	beq.n	800a06e <_scanf_float+0x1de>
 800a068:	2d04      	cmp	r5, #4
 800a06a:	f47f af45 	bne.w	8009ef8 <_scanf_float+0x68>
 800a06e:	3501      	adds	r5, #1
 800a070:	b2ed      	uxtb	r5, r5
 800a072:	e7d9      	b.n	800a028 <_scanf_float+0x198>
 800a074:	f1ba 0f01 	cmp.w	sl, #1
 800a078:	f47f af3e 	bne.w	8009ef8 <_scanf_float+0x68>
 800a07c:	f04f 0a02 	mov.w	sl, #2
 800a080:	e7d2      	b.n	800a028 <_scanf_float+0x198>
 800a082:	b975      	cbnz	r5, 800a0a2 <_scanf_float+0x212>
 800a084:	2f00      	cmp	r7, #0
 800a086:	f47f af38 	bne.w	8009efa <_scanf_float+0x6a>
 800a08a:	6822      	ldr	r2, [r4, #0]
 800a08c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a090:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a094:	f040 80ff 	bne.w	800a296 <_scanf_float+0x406>
 800a098:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a09c:	2501      	movs	r5, #1
 800a09e:	6022      	str	r2, [r4, #0]
 800a0a0:	e7c2      	b.n	800a028 <_scanf_float+0x198>
 800a0a2:	2d03      	cmp	r5, #3
 800a0a4:	d0e3      	beq.n	800a06e <_scanf_float+0x1de>
 800a0a6:	2d05      	cmp	r5, #5
 800a0a8:	e7df      	b.n	800a06a <_scanf_float+0x1da>
 800a0aa:	2d02      	cmp	r5, #2
 800a0ac:	f47f af24 	bne.w	8009ef8 <_scanf_float+0x68>
 800a0b0:	2503      	movs	r5, #3
 800a0b2:	e7b9      	b.n	800a028 <_scanf_float+0x198>
 800a0b4:	2d06      	cmp	r5, #6
 800a0b6:	f47f af1f 	bne.w	8009ef8 <_scanf_float+0x68>
 800a0ba:	2507      	movs	r5, #7
 800a0bc:	e7b4      	b.n	800a028 <_scanf_float+0x198>
 800a0be:	6822      	ldr	r2, [r4, #0]
 800a0c0:	0591      	lsls	r1, r2, #22
 800a0c2:	f57f af19 	bpl.w	8009ef8 <_scanf_float+0x68>
 800a0c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a0ca:	6022      	str	r2, [r4, #0]
 800a0cc:	9702      	str	r7, [sp, #8]
 800a0ce:	e7ab      	b.n	800a028 <_scanf_float+0x198>
 800a0d0:	6822      	ldr	r2, [r4, #0]
 800a0d2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a0d6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a0da:	d005      	beq.n	800a0e8 <_scanf_float+0x258>
 800a0dc:	0550      	lsls	r0, r2, #21
 800a0de:	f57f af0b 	bpl.w	8009ef8 <_scanf_float+0x68>
 800a0e2:	2f00      	cmp	r7, #0
 800a0e4:	f000 80d7 	beq.w	800a296 <_scanf_float+0x406>
 800a0e8:	0591      	lsls	r1, r2, #22
 800a0ea:	bf58      	it	pl
 800a0ec:	9902      	ldrpl	r1, [sp, #8]
 800a0ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a0f2:	bf58      	it	pl
 800a0f4:	1a79      	subpl	r1, r7, r1
 800a0f6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a0fa:	f04f 0700 	mov.w	r7, #0
 800a0fe:	bf58      	it	pl
 800a100:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a104:	6022      	str	r2, [r4, #0]
 800a106:	e78f      	b.n	800a028 <_scanf_float+0x198>
 800a108:	f04f 0a03 	mov.w	sl, #3
 800a10c:	e78c      	b.n	800a028 <_scanf_float+0x198>
 800a10e:	4649      	mov	r1, r9
 800a110:	4640      	mov	r0, r8
 800a112:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a116:	4798      	blx	r3
 800a118:	2800      	cmp	r0, #0
 800a11a:	f43f aedf 	beq.w	8009edc <_scanf_float+0x4c>
 800a11e:	e6eb      	b.n	8009ef8 <_scanf_float+0x68>
 800a120:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a124:	464a      	mov	r2, r9
 800a126:	4640      	mov	r0, r8
 800a128:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a12c:	4798      	blx	r3
 800a12e:	6923      	ldr	r3, [r4, #16]
 800a130:	3b01      	subs	r3, #1
 800a132:	6123      	str	r3, [r4, #16]
 800a134:	e6eb      	b.n	8009f0e <_scanf_float+0x7e>
 800a136:	1e6b      	subs	r3, r5, #1
 800a138:	2b06      	cmp	r3, #6
 800a13a:	d824      	bhi.n	800a186 <_scanf_float+0x2f6>
 800a13c:	2d02      	cmp	r5, #2
 800a13e:	d836      	bhi.n	800a1ae <_scanf_float+0x31e>
 800a140:	9b01      	ldr	r3, [sp, #4]
 800a142:	429e      	cmp	r6, r3
 800a144:	f67f aee7 	bls.w	8009f16 <_scanf_float+0x86>
 800a148:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a14c:	464a      	mov	r2, r9
 800a14e:	4640      	mov	r0, r8
 800a150:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a154:	4798      	blx	r3
 800a156:	6923      	ldr	r3, [r4, #16]
 800a158:	3b01      	subs	r3, #1
 800a15a:	6123      	str	r3, [r4, #16]
 800a15c:	e7f0      	b.n	800a140 <_scanf_float+0x2b0>
 800a15e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a162:	464a      	mov	r2, r9
 800a164:	4640      	mov	r0, r8
 800a166:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a16a:	4798      	blx	r3
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	3b01      	subs	r3, #1
 800a170:	6123      	str	r3, [r4, #16]
 800a172:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a176:	fa5f fa8a 	uxtb.w	sl, sl
 800a17a:	f1ba 0f02 	cmp.w	sl, #2
 800a17e:	d1ee      	bne.n	800a15e <_scanf_float+0x2ce>
 800a180:	3d03      	subs	r5, #3
 800a182:	b2ed      	uxtb	r5, r5
 800a184:	1b76      	subs	r6, r6, r5
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	05da      	lsls	r2, r3, #23
 800a18a:	d530      	bpl.n	800a1ee <_scanf_float+0x35e>
 800a18c:	055b      	lsls	r3, r3, #21
 800a18e:	d511      	bpl.n	800a1b4 <_scanf_float+0x324>
 800a190:	9b01      	ldr	r3, [sp, #4]
 800a192:	429e      	cmp	r6, r3
 800a194:	f67f aebf 	bls.w	8009f16 <_scanf_float+0x86>
 800a198:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a19c:	464a      	mov	r2, r9
 800a19e:	4640      	mov	r0, r8
 800a1a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1a4:	4798      	blx	r3
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	6123      	str	r3, [r4, #16]
 800a1ac:	e7f0      	b.n	800a190 <_scanf_float+0x300>
 800a1ae:	46aa      	mov	sl, r5
 800a1b0:	46b3      	mov	fp, r6
 800a1b2:	e7de      	b.n	800a172 <_scanf_float+0x2e2>
 800a1b4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	2965      	cmp	r1, #101	@ 0x65
 800a1bc:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1c0:	f106 35ff 	add.w	r5, r6, #4294967295
 800a1c4:	6123      	str	r3, [r4, #16]
 800a1c6:	d00c      	beq.n	800a1e2 <_scanf_float+0x352>
 800a1c8:	2945      	cmp	r1, #69	@ 0x45
 800a1ca:	d00a      	beq.n	800a1e2 <_scanf_float+0x352>
 800a1cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1d0:	464a      	mov	r2, r9
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4798      	blx	r3
 800a1d6:	6923      	ldr	r3, [r4, #16]
 800a1d8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	1eb5      	subs	r5, r6, #2
 800a1e0:	6123      	str	r3, [r4, #16]
 800a1e2:	464a      	mov	r2, r9
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1ea:	4798      	blx	r3
 800a1ec:	462e      	mov	r6, r5
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	f012 0210 	ands.w	r2, r2, #16
 800a1f4:	d001      	beq.n	800a1fa <_scanf_float+0x36a>
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e68e      	b.n	8009f18 <_scanf_float+0x88>
 800a1fa:	7032      	strb	r2, [r6, #0]
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a206:	d125      	bne.n	800a254 <_scanf_float+0x3c4>
 800a208:	9b02      	ldr	r3, [sp, #8]
 800a20a:	429f      	cmp	r7, r3
 800a20c:	d00a      	beq.n	800a224 <_scanf_float+0x394>
 800a20e:	1bda      	subs	r2, r3, r7
 800a210:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a214:	429e      	cmp	r6, r3
 800a216:	bf28      	it	cs
 800a218:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a21c:	4630      	mov	r0, r6
 800a21e:	491f      	ldr	r1, [pc, #124]	@ (800a29c <_scanf_float+0x40c>)
 800a220:	f000 f938 	bl	800a494 <siprintf>
 800a224:	2200      	movs	r2, #0
 800a226:	4640      	mov	r0, r8
 800a228:	9901      	ldr	r1, [sp, #4]
 800a22a:	f002 fb89 	bl	800c940 <_strtod_r>
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	6825      	ldr	r5, [r4, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f015 0f02 	tst.w	r5, #2
 800a238:	4606      	mov	r6, r0
 800a23a:	460f      	mov	r7, r1
 800a23c:	f103 0204 	add.w	r2, r3, #4
 800a240:	d015      	beq.n	800a26e <_scanf_float+0x3de>
 800a242:	9903      	ldr	r1, [sp, #12]
 800a244:	600a      	str	r2, [r1, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	e9c3 6700 	strd	r6, r7, [r3]
 800a24c:	68e3      	ldr	r3, [r4, #12]
 800a24e:	3301      	adds	r3, #1
 800a250:	60e3      	str	r3, [r4, #12]
 800a252:	e7d0      	b.n	800a1f6 <_scanf_float+0x366>
 800a254:	9b04      	ldr	r3, [sp, #16]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0e4      	beq.n	800a224 <_scanf_float+0x394>
 800a25a:	9905      	ldr	r1, [sp, #20]
 800a25c:	230a      	movs	r3, #10
 800a25e:	4640      	mov	r0, r8
 800a260:	3101      	adds	r1, #1
 800a262:	f002 fbed 	bl	800ca40 <_strtol_r>
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	9e05      	ldr	r6, [sp, #20]
 800a26a:	1ac2      	subs	r2, r0, r3
 800a26c:	e7d0      	b.n	800a210 <_scanf_float+0x380>
 800a26e:	076d      	lsls	r5, r5, #29
 800a270:	d4e7      	bmi.n	800a242 <_scanf_float+0x3b2>
 800a272:	9d03      	ldr	r5, [sp, #12]
 800a274:	602a      	str	r2, [r5, #0]
 800a276:	681d      	ldr	r5, [r3, #0]
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	f7f6 fbc6 	bl	8000a0c <__aeabi_dcmpun>
 800a280:	b120      	cbz	r0, 800a28c <_scanf_float+0x3fc>
 800a282:	4807      	ldr	r0, [pc, #28]	@ (800a2a0 <_scanf_float+0x410>)
 800a284:	f000 fa18 	bl	800a6b8 <nanf>
 800a288:	6028      	str	r0, [r5, #0]
 800a28a:	e7df      	b.n	800a24c <_scanf_float+0x3bc>
 800a28c:	4630      	mov	r0, r6
 800a28e:	4639      	mov	r1, r7
 800a290:	f7f6 fc1a 	bl	8000ac8 <__aeabi_d2f>
 800a294:	e7f8      	b.n	800a288 <_scanf_float+0x3f8>
 800a296:	2700      	movs	r7, #0
 800a298:	e633      	b.n	8009f02 <_scanf_float+0x72>
 800a29a:	bf00      	nop
 800a29c:	0800ff80 	.word	0x0800ff80
 800a2a0:	080100c1 	.word	0x080100c1

0800a2a4 <std>:
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a2ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2b2:	6083      	str	r3, [r0, #8]
 800a2b4:	8181      	strh	r1, [r0, #12]
 800a2b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2b8:	81c2      	strh	r2, [r0, #14]
 800a2ba:	6183      	str	r3, [r0, #24]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	2208      	movs	r2, #8
 800a2c0:	305c      	adds	r0, #92	@ 0x5c
 800a2c2:	f000 f94c 	bl	800a55e <memset>
 800a2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2fc <std+0x58>)
 800a2c8:	6224      	str	r4, [r4, #32]
 800a2ca:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a300 <std+0x5c>)
 800a2ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a304 <std+0x60>)
 800a2d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a308 <std+0x64>)
 800a2d6:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a30c <std+0x68>)
 800a2da:	429c      	cmp	r4, r3
 800a2dc:	d006      	beq.n	800a2ec <std+0x48>
 800a2de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2e2:	4294      	cmp	r4, r2
 800a2e4:	d002      	beq.n	800a2ec <std+0x48>
 800a2e6:	33d0      	adds	r3, #208	@ 0xd0
 800a2e8:	429c      	cmp	r4, r3
 800a2ea:	d105      	bne.n	800a2f8 <std+0x54>
 800a2ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f4:	f000 b9c0 	b.w	800a678 <__retarget_lock_init_recursive>
 800a2f8:	bd10      	pop	{r4, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800a4d9 	.word	0x0800a4d9
 800a300:	0800a4fb 	.word	0x0800a4fb
 800a304:	0800a533 	.word	0x0800a533
 800a308:	0800a557 	.word	0x0800a557
 800a30c:	20001a70 	.word	0x20001a70

0800a310 <stdio_exit_handler>:
 800a310:	4a02      	ldr	r2, [pc, #8]	@ (800a31c <stdio_exit_handler+0xc>)
 800a312:	4903      	ldr	r1, [pc, #12]	@ (800a320 <stdio_exit_handler+0x10>)
 800a314:	4803      	ldr	r0, [pc, #12]	@ (800a324 <stdio_exit_handler+0x14>)
 800a316:	f000 b869 	b.w	800a3ec <_fwalk_sglue>
 800a31a:	bf00      	nop
 800a31c:	20000010 	.word	0x20000010
 800a320:	0800cdf5 	.word	0x0800cdf5
 800a324:	20000020 	.word	0x20000020

0800a328 <cleanup_stdio>:
 800a328:	6841      	ldr	r1, [r0, #4]
 800a32a:	4b0c      	ldr	r3, [pc, #48]	@ (800a35c <cleanup_stdio+0x34>)
 800a32c:	b510      	push	{r4, lr}
 800a32e:	4299      	cmp	r1, r3
 800a330:	4604      	mov	r4, r0
 800a332:	d001      	beq.n	800a338 <cleanup_stdio+0x10>
 800a334:	f002 fd5e 	bl	800cdf4 <_fflush_r>
 800a338:	68a1      	ldr	r1, [r4, #8]
 800a33a:	4b09      	ldr	r3, [pc, #36]	@ (800a360 <cleanup_stdio+0x38>)
 800a33c:	4299      	cmp	r1, r3
 800a33e:	d002      	beq.n	800a346 <cleanup_stdio+0x1e>
 800a340:	4620      	mov	r0, r4
 800a342:	f002 fd57 	bl	800cdf4 <_fflush_r>
 800a346:	68e1      	ldr	r1, [r4, #12]
 800a348:	4b06      	ldr	r3, [pc, #24]	@ (800a364 <cleanup_stdio+0x3c>)
 800a34a:	4299      	cmp	r1, r3
 800a34c:	d004      	beq.n	800a358 <cleanup_stdio+0x30>
 800a34e:	4620      	mov	r0, r4
 800a350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a354:	f002 bd4e 	b.w	800cdf4 <_fflush_r>
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	bf00      	nop
 800a35c:	20001a70 	.word	0x20001a70
 800a360:	20001ad8 	.word	0x20001ad8
 800a364:	20001b40 	.word	0x20001b40

0800a368 <global_stdio_init.part.0>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	4b0b      	ldr	r3, [pc, #44]	@ (800a398 <global_stdio_init.part.0+0x30>)
 800a36c:	4c0b      	ldr	r4, [pc, #44]	@ (800a39c <global_stdio_init.part.0+0x34>)
 800a36e:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a0 <global_stdio_init.part.0+0x38>)
 800a370:	4620      	mov	r0, r4
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	2104      	movs	r1, #4
 800a376:	2200      	movs	r2, #0
 800a378:	f7ff ff94 	bl	800a2a4 <std>
 800a37c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a380:	2201      	movs	r2, #1
 800a382:	2109      	movs	r1, #9
 800a384:	f7ff ff8e 	bl	800a2a4 <std>
 800a388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a38c:	2202      	movs	r2, #2
 800a38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a392:	2112      	movs	r1, #18
 800a394:	f7ff bf86 	b.w	800a2a4 <std>
 800a398:	20001ba8 	.word	0x20001ba8
 800a39c:	20001a70 	.word	0x20001a70
 800a3a0:	0800a311 	.word	0x0800a311

0800a3a4 <__sfp_lock_acquire>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	@ (800a3ac <__sfp_lock_acquire+0x8>)
 800a3a6:	f000 b968 	b.w	800a67a <__retarget_lock_acquire_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	20001bb1 	.word	0x20001bb1

0800a3b0 <__sfp_lock_release>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	@ (800a3b8 <__sfp_lock_release+0x8>)
 800a3b2:	f000 b963 	b.w	800a67c <__retarget_lock_release_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	20001bb1 	.word	0x20001bb1

0800a3bc <__sinit>:
 800a3bc:	b510      	push	{r4, lr}
 800a3be:	4604      	mov	r4, r0
 800a3c0:	f7ff fff0 	bl	800a3a4 <__sfp_lock_acquire>
 800a3c4:	6a23      	ldr	r3, [r4, #32]
 800a3c6:	b11b      	cbz	r3, 800a3d0 <__sinit+0x14>
 800a3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3cc:	f7ff bff0 	b.w	800a3b0 <__sfp_lock_release>
 800a3d0:	4b04      	ldr	r3, [pc, #16]	@ (800a3e4 <__sinit+0x28>)
 800a3d2:	6223      	str	r3, [r4, #32]
 800a3d4:	4b04      	ldr	r3, [pc, #16]	@ (800a3e8 <__sinit+0x2c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1f5      	bne.n	800a3c8 <__sinit+0xc>
 800a3dc:	f7ff ffc4 	bl	800a368 <global_stdio_init.part.0>
 800a3e0:	e7f2      	b.n	800a3c8 <__sinit+0xc>
 800a3e2:	bf00      	nop
 800a3e4:	0800a329 	.word	0x0800a329
 800a3e8:	20001ba8 	.word	0x20001ba8

0800a3ec <_fwalk_sglue>:
 800a3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f0:	4607      	mov	r7, r0
 800a3f2:	4688      	mov	r8, r1
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	2600      	movs	r6, #0
 800a3f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3fc:	f1b9 0901 	subs.w	r9, r9, #1
 800a400:	d505      	bpl.n	800a40e <_fwalk_sglue+0x22>
 800a402:	6824      	ldr	r4, [r4, #0]
 800a404:	2c00      	cmp	r4, #0
 800a406:	d1f7      	bne.n	800a3f8 <_fwalk_sglue+0xc>
 800a408:	4630      	mov	r0, r6
 800a40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d907      	bls.n	800a424 <_fwalk_sglue+0x38>
 800a414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a418:	3301      	adds	r3, #1
 800a41a:	d003      	beq.n	800a424 <_fwalk_sglue+0x38>
 800a41c:	4629      	mov	r1, r5
 800a41e:	4638      	mov	r0, r7
 800a420:	47c0      	blx	r8
 800a422:	4306      	orrs	r6, r0
 800a424:	3568      	adds	r5, #104	@ 0x68
 800a426:	e7e9      	b.n	800a3fc <_fwalk_sglue+0x10>

0800a428 <sniprintf>:
 800a428:	b40c      	push	{r2, r3}
 800a42a:	b530      	push	{r4, r5, lr}
 800a42c:	4b18      	ldr	r3, [pc, #96]	@ (800a490 <sniprintf+0x68>)
 800a42e:	1e0c      	subs	r4, r1, #0
 800a430:	681d      	ldr	r5, [r3, #0]
 800a432:	b09d      	sub	sp, #116	@ 0x74
 800a434:	da08      	bge.n	800a448 <sniprintf+0x20>
 800a436:	238b      	movs	r3, #139	@ 0x8b
 800a438:	f04f 30ff 	mov.w	r0, #4294967295
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	b01d      	add	sp, #116	@ 0x74
 800a440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a444:	b002      	add	sp, #8
 800a446:	4770      	bx	lr
 800a448:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a44c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a450:	f04f 0300 	mov.w	r3, #0
 800a454:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a456:	bf0c      	ite	eq
 800a458:	4623      	moveq	r3, r4
 800a45a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	9307      	str	r3, [sp, #28]
 800a462:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a466:	9002      	str	r0, [sp, #8]
 800a468:	9006      	str	r0, [sp, #24]
 800a46a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a46e:	4628      	mov	r0, r5
 800a470:	ab21      	add	r3, sp, #132	@ 0x84
 800a472:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a474:	a902      	add	r1, sp, #8
 800a476:	9301      	str	r3, [sp, #4]
 800a478:	f002 fb40 	bl	800cafc <_svfiprintf_r>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	bfbc      	itt	lt
 800a480:	238b      	movlt	r3, #139	@ 0x8b
 800a482:	602b      	strlt	r3, [r5, #0]
 800a484:	2c00      	cmp	r4, #0
 800a486:	d0da      	beq.n	800a43e <sniprintf+0x16>
 800a488:	2200      	movs	r2, #0
 800a48a:	9b02      	ldr	r3, [sp, #8]
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	e7d6      	b.n	800a43e <sniprintf+0x16>
 800a490:	2000001c 	.word	0x2000001c

0800a494 <siprintf>:
 800a494:	b40e      	push	{r1, r2, r3}
 800a496:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a49a:	b510      	push	{r4, lr}
 800a49c:	2400      	movs	r4, #0
 800a49e:	b09d      	sub	sp, #116	@ 0x74
 800a4a0:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a4a2:	9002      	str	r0, [sp, #8]
 800a4a4:	9006      	str	r0, [sp, #24]
 800a4a6:	9107      	str	r1, [sp, #28]
 800a4a8:	9104      	str	r1, [sp, #16]
 800a4aa:	4809      	ldr	r0, [pc, #36]	@ (800a4d0 <siprintf+0x3c>)
 800a4ac:	4909      	ldr	r1, [pc, #36]	@ (800a4d4 <siprintf+0x40>)
 800a4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b2:	9105      	str	r1, [sp, #20]
 800a4b4:	6800      	ldr	r0, [r0, #0]
 800a4b6:	a902      	add	r1, sp, #8
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a4bc:	f002 fb1e 	bl	800cafc <_svfiprintf_r>
 800a4c0:	9b02      	ldr	r3, [sp, #8]
 800a4c2:	701c      	strb	r4, [r3, #0]
 800a4c4:	b01d      	add	sp, #116	@ 0x74
 800a4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ca:	b003      	add	sp, #12
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	2000001c 	.word	0x2000001c
 800a4d4:	ffff0208 	.word	0xffff0208

0800a4d8 <__sread>:
 800a4d8:	b510      	push	{r4, lr}
 800a4da:	460c      	mov	r4, r1
 800a4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e0:	f000 f86c 	bl	800a5bc <_read_r>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	bfab      	itete	ge
 800a4e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a4ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a4ec:	181b      	addge	r3, r3, r0
 800a4ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4f2:	bfac      	ite	ge
 800a4f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a4f6:	81a3      	strhlt	r3, [r4, #12]
 800a4f8:	bd10      	pop	{r4, pc}

0800a4fa <__swrite>:
 800a4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fe:	461f      	mov	r7, r3
 800a500:	898b      	ldrh	r3, [r1, #12]
 800a502:	4605      	mov	r5, r0
 800a504:	05db      	lsls	r3, r3, #23
 800a506:	460c      	mov	r4, r1
 800a508:	4616      	mov	r6, r2
 800a50a:	d505      	bpl.n	800a518 <__swrite+0x1e>
 800a50c:	2302      	movs	r3, #2
 800a50e:	2200      	movs	r2, #0
 800a510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a514:	f000 f840 	bl	800a598 <_lseek_r>
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	4632      	mov	r2, r6
 800a51c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a520:	81a3      	strh	r3, [r4, #12]
 800a522:	4628      	mov	r0, r5
 800a524:	463b      	mov	r3, r7
 800a526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a52a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a52e:	f000 b867 	b.w	800a600 <_write_r>

0800a532 <__sseek>:
 800a532:	b510      	push	{r4, lr}
 800a534:	460c      	mov	r4, r1
 800a536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53a:	f000 f82d 	bl	800a598 <_lseek_r>
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	bf15      	itete	ne
 800a544:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a546:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a54a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a54e:	81a3      	strheq	r3, [r4, #12]
 800a550:	bf18      	it	ne
 800a552:	81a3      	strhne	r3, [r4, #12]
 800a554:	bd10      	pop	{r4, pc}

0800a556 <__sclose>:
 800a556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55a:	f000 b80d 	b.w	800a578 <_close_r>

0800a55e <memset>:
 800a55e:	4603      	mov	r3, r0
 800a560:	4402      	add	r2, r0
 800a562:	4293      	cmp	r3, r2
 800a564:	d100      	bne.n	800a568 <memset+0xa>
 800a566:	4770      	bx	lr
 800a568:	f803 1b01 	strb.w	r1, [r3], #1
 800a56c:	e7f9      	b.n	800a562 <memset+0x4>
	...

0800a570 <_localeconv_r>:
 800a570:	4800      	ldr	r0, [pc, #0]	@ (800a574 <_localeconv_r+0x4>)
 800a572:	4770      	bx	lr
 800a574:	2000015c 	.word	0x2000015c

0800a578 <_close_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	2300      	movs	r3, #0
 800a57c:	4d05      	ldr	r5, [pc, #20]	@ (800a594 <_close_r+0x1c>)
 800a57e:	4604      	mov	r4, r0
 800a580:	4608      	mov	r0, r1
 800a582:	602b      	str	r3, [r5, #0]
 800a584:	f7fe fde9 	bl	800915a <_close>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_close_r+0x1a>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_close_r+0x1a>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	20001bac 	.word	0x20001bac

0800a598 <_lseek_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4d05      	ldr	r5, [pc, #20]	@ (800a5b8 <_lseek_r+0x20>)
 800a5a4:	602a      	str	r2, [r5, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f7fe fdfb 	bl	80091a2 <_lseek>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d102      	bne.n	800a5b6 <_lseek_r+0x1e>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b103      	cbz	r3, 800a5b6 <_lseek_r+0x1e>
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	20001bac 	.word	0x20001bac

0800a5bc <_read_r>:
 800a5bc:	b538      	push	{r3, r4, r5, lr}
 800a5be:	4604      	mov	r4, r0
 800a5c0:	4608      	mov	r0, r1
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	4d05      	ldr	r5, [pc, #20]	@ (800a5dc <_read_r+0x20>)
 800a5c8:	602a      	str	r2, [r5, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f7fe fd8c 	bl	80090e8 <_read>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d102      	bne.n	800a5da <_read_r+0x1e>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	b103      	cbz	r3, 800a5da <_read_r+0x1e>
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	20001bac 	.word	0x20001bac

0800a5e0 <_sbrk_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	4d05      	ldr	r5, [pc, #20]	@ (800a5fc <_sbrk_r+0x1c>)
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	602b      	str	r3, [r5, #0]
 800a5ec:	f7fe fde6 	bl	80091bc <_sbrk>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d102      	bne.n	800a5fa <_sbrk_r+0x1a>
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	b103      	cbz	r3, 800a5fa <_sbrk_r+0x1a>
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	bd38      	pop	{r3, r4, r5, pc}
 800a5fc:	20001bac 	.word	0x20001bac

0800a600 <_write_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	4604      	mov	r4, r0
 800a604:	4608      	mov	r0, r1
 800a606:	4611      	mov	r1, r2
 800a608:	2200      	movs	r2, #0
 800a60a:	4d05      	ldr	r5, [pc, #20]	@ (800a620 <_write_r+0x20>)
 800a60c:	602a      	str	r2, [r5, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	f7fe fd87 	bl	8009122 <_write>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_write_r+0x1e>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_write_r+0x1e>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20001bac 	.word	0x20001bac

0800a624 <__errno>:
 800a624:	4b01      	ldr	r3, [pc, #4]	@ (800a62c <__errno+0x8>)
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	2000001c 	.word	0x2000001c

0800a630 <__libc_init_array>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	2600      	movs	r6, #0
 800a634:	4d0c      	ldr	r5, [pc, #48]	@ (800a668 <__libc_init_array+0x38>)
 800a636:	4c0d      	ldr	r4, [pc, #52]	@ (800a66c <__libc_init_array+0x3c>)
 800a638:	1b64      	subs	r4, r4, r5
 800a63a:	10a4      	asrs	r4, r4, #2
 800a63c:	42a6      	cmp	r6, r4
 800a63e:	d109      	bne.n	800a654 <__libc_init_array+0x24>
 800a640:	f003 faa6 	bl	800db90 <_init>
 800a644:	2600      	movs	r6, #0
 800a646:	4d0a      	ldr	r5, [pc, #40]	@ (800a670 <__libc_init_array+0x40>)
 800a648:	4c0a      	ldr	r4, [pc, #40]	@ (800a674 <__libc_init_array+0x44>)
 800a64a:	1b64      	subs	r4, r4, r5
 800a64c:	10a4      	asrs	r4, r4, #2
 800a64e:	42a6      	cmp	r6, r4
 800a650:	d105      	bne.n	800a65e <__libc_init_array+0x2e>
 800a652:	bd70      	pop	{r4, r5, r6, pc}
 800a654:	f855 3b04 	ldr.w	r3, [r5], #4
 800a658:	4798      	blx	r3
 800a65a:	3601      	adds	r6, #1
 800a65c:	e7ee      	b.n	800a63c <__libc_init_array+0xc>
 800a65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a662:	4798      	blx	r3
 800a664:	3601      	adds	r6, #1
 800a666:	e7f2      	b.n	800a64e <__libc_init_array+0x1e>
 800a668:	0801037c 	.word	0x0801037c
 800a66c:	0801037c 	.word	0x0801037c
 800a670:	0801037c 	.word	0x0801037c
 800a674:	08010380 	.word	0x08010380

0800a678 <__retarget_lock_init_recursive>:
 800a678:	4770      	bx	lr

0800a67a <__retarget_lock_acquire_recursive>:
 800a67a:	4770      	bx	lr

0800a67c <__retarget_lock_release_recursive>:
 800a67c:	4770      	bx	lr

0800a67e <memchr>:
 800a67e:	4603      	mov	r3, r0
 800a680:	b510      	push	{r4, lr}
 800a682:	b2c9      	uxtb	r1, r1
 800a684:	4402      	add	r2, r0
 800a686:	4293      	cmp	r3, r2
 800a688:	4618      	mov	r0, r3
 800a68a:	d101      	bne.n	800a690 <memchr+0x12>
 800a68c:	2000      	movs	r0, #0
 800a68e:	e003      	b.n	800a698 <memchr+0x1a>
 800a690:	7804      	ldrb	r4, [r0, #0]
 800a692:	3301      	adds	r3, #1
 800a694:	428c      	cmp	r4, r1
 800a696:	d1f6      	bne.n	800a686 <memchr+0x8>
 800a698:	bd10      	pop	{r4, pc}

0800a69a <memcpy>:
 800a69a:	440a      	add	r2, r1
 800a69c:	4291      	cmp	r1, r2
 800a69e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6a2:	d100      	bne.n	800a6a6 <memcpy+0xc>
 800a6a4:	4770      	bx	lr
 800a6a6:	b510      	push	{r4, lr}
 800a6a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ac:	4291      	cmp	r1, r2
 800a6ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6b2:	d1f9      	bne.n	800a6a8 <memcpy+0xe>
 800a6b4:	bd10      	pop	{r4, pc}
	...

0800a6b8 <nanf>:
 800a6b8:	4800      	ldr	r0, [pc, #0]	@ (800a6bc <nanf+0x4>)
 800a6ba:	4770      	bx	lr
 800a6bc:	7fc00000 	.word	0x7fc00000

0800a6c0 <quorem>:
 800a6c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	6903      	ldr	r3, [r0, #16]
 800a6c6:	690c      	ldr	r4, [r1, #16]
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	42a3      	cmp	r3, r4
 800a6cc:	db7e      	blt.n	800a7cc <quorem+0x10c>
 800a6ce:	3c01      	subs	r4, #1
 800a6d0:	00a3      	lsls	r3, r4, #2
 800a6d2:	f100 0514 	add.w	r5, r0, #20
 800a6d6:	f101 0814 	add.w	r8, r1, #20
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6f6:	d32e      	bcc.n	800a756 <quorem+0x96>
 800a6f8:	f04f 0a00 	mov.w	sl, #0
 800a6fc:	46c4      	mov	ip, r8
 800a6fe:	46ae      	mov	lr, r5
 800a700:	46d3      	mov	fp, sl
 800a702:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a706:	b298      	uxth	r0, r3
 800a708:	fb06 a000 	mla	r0, r6, r0, sl
 800a70c:	0c1b      	lsrs	r3, r3, #16
 800a70e:	0c02      	lsrs	r2, r0, #16
 800a710:	fb06 2303 	mla	r3, r6, r3, r2
 800a714:	f8de 2000 	ldr.w	r2, [lr]
 800a718:	b280      	uxth	r0, r0
 800a71a:	b292      	uxth	r2, r2
 800a71c:	1a12      	subs	r2, r2, r0
 800a71e:	445a      	add	r2, fp
 800a720:	f8de 0000 	ldr.w	r0, [lr]
 800a724:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a728:	b29b      	uxth	r3, r3
 800a72a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a72e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a732:	b292      	uxth	r2, r2
 800a734:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a738:	45e1      	cmp	r9, ip
 800a73a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a73e:	f84e 2b04 	str.w	r2, [lr], #4
 800a742:	d2de      	bcs.n	800a702 <quorem+0x42>
 800a744:	9b00      	ldr	r3, [sp, #0]
 800a746:	58eb      	ldr	r3, [r5, r3]
 800a748:	b92b      	cbnz	r3, 800a756 <quorem+0x96>
 800a74a:	9b01      	ldr	r3, [sp, #4]
 800a74c:	3b04      	subs	r3, #4
 800a74e:	429d      	cmp	r5, r3
 800a750:	461a      	mov	r2, r3
 800a752:	d32f      	bcc.n	800a7b4 <quorem+0xf4>
 800a754:	613c      	str	r4, [r7, #16]
 800a756:	4638      	mov	r0, r7
 800a758:	f001 f912 	bl	800b980 <__mcmp>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	db25      	blt.n	800a7ac <quorem+0xec>
 800a760:	4629      	mov	r1, r5
 800a762:	2000      	movs	r0, #0
 800a764:	f858 2b04 	ldr.w	r2, [r8], #4
 800a768:	f8d1 c000 	ldr.w	ip, [r1]
 800a76c:	fa1f fe82 	uxth.w	lr, r2
 800a770:	fa1f f38c 	uxth.w	r3, ip
 800a774:	eba3 030e 	sub.w	r3, r3, lr
 800a778:	4403      	add	r3, r0
 800a77a:	0c12      	lsrs	r2, r2, #16
 800a77c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a780:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a784:	b29b      	uxth	r3, r3
 800a786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a78a:	45c1      	cmp	r9, r8
 800a78c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a790:	f841 3b04 	str.w	r3, [r1], #4
 800a794:	d2e6      	bcs.n	800a764 <quorem+0xa4>
 800a796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a79a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a79e:	b922      	cbnz	r2, 800a7aa <quorem+0xea>
 800a7a0:	3b04      	subs	r3, #4
 800a7a2:	429d      	cmp	r5, r3
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	d30b      	bcc.n	800a7c0 <quorem+0x100>
 800a7a8:	613c      	str	r4, [r7, #16]
 800a7aa:	3601      	adds	r6, #1
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	b003      	add	sp, #12
 800a7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b4:	6812      	ldr	r2, [r2, #0]
 800a7b6:	3b04      	subs	r3, #4
 800a7b8:	2a00      	cmp	r2, #0
 800a7ba:	d1cb      	bne.n	800a754 <quorem+0x94>
 800a7bc:	3c01      	subs	r4, #1
 800a7be:	e7c6      	b.n	800a74e <quorem+0x8e>
 800a7c0:	6812      	ldr	r2, [r2, #0]
 800a7c2:	3b04      	subs	r3, #4
 800a7c4:	2a00      	cmp	r2, #0
 800a7c6:	d1ef      	bne.n	800a7a8 <quorem+0xe8>
 800a7c8:	3c01      	subs	r4, #1
 800a7ca:	e7ea      	b.n	800a7a2 <quorem+0xe2>
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	e7ee      	b.n	800a7ae <quorem+0xee>

0800a7d0 <_dtoa_r>:
 800a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	461d      	mov	r5, r3
 800a7d8:	69c7      	ldr	r7, [r0, #28]
 800a7da:	b097      	sub	sp, #92	@ 0x5c
 800a7dc:	4681      	mov	r9, r0
 800a7de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a7e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a7e4:	b97f      	cbnz	r7, 800a806 <_dtoa_r+0x36>
 800a7e6:	2010      	movs	r0, #16
 800a7e8:	f7fe fe3a 	bl	8009460 <malloc>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	f8c9 001c 	str.w	r0, [r9, #28]
 800a7f2:	b920      	cbnz	r0, 800a7fe <_dtoa_r+0x2e>
 800a7f4:	21ef      	movs	r1, #239	@ 0xef
 800a7f6:	4bac      	ldr	r3, [pc, #688]	@ (800aaa8 <_dtoa_r+0x2d8>)
 800a7f8:	48ac      	ldr	r0, [pc, #688]	@ (800aaac <_dtoa_r+0x2dc>)
 800a7fa:	f002 fb55 	bl	800cea8 <__assert_func>
 800a7fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a802:	6007      	str	r7, [r0, #0]
 800a804:	60c7      	str	r7, [r0, #12]
 800a806:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a80a:	6819      	ldr	r1, [r3, #0]
 800a80c:	b159      	cbz	r1, 800a826 <_dtoa_r+0x56>
 800a80e:	685a      	ldr	r2, [r3, #4]
 800a810:	2301      	movs	r3, #1
 800a812:	4093      	lsls	r3, r2
 800a814:	604a      	str	r2, [r1, #4]
 800a816:	608b      	str	r3, [r1, #8]
 800a818:	4648      	mov	r0, r9
 800a81a:	f000 fe35 	bl	800b488 <_Bfree>
 800a81e:	2200      	movs	r2, #0
 800a820:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	1e2b      	subs	r3, r5, #0
 800a828:	bfaf      	iteee	ge
 800a82a:	2300      	movge	r3, #0
 800a82c:	2201      	movlt	r2, #1
 800a82e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a832:	9307      	strlt	r3, [sp, #28]
 800a834:	bfa8      	it	ge
 800a836:	6033      	strge	r3, [r6, #0]
 800a838:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a83c:	4b9c      	ldr	r3, [pc, #624]	@ (800aab0 <_dtoa_r+0x2e0>)
 800a83e:	bfb8      	it	lt
 800a840:	6032      	strlt	r2, [r6, #0]
 800a842:	ea33 0308 	bics.w	r3, r3, r8
 800a846:	d112      	bne.n	800a86e <_dtoa_r+0x9e>
 800a848:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a84c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a854:	4323      	orrs	r3, r4
 800a856:	f000 855e 	beq.w	800b316 <_dtoa_r+0xb46>
 800a85a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a85c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aab4 <_dtoa_r+0x2e4>
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 8560 	beq.w	800b326 <_dtoa_r+0xb56>
 800a866:	f10a 0303 	add.w	r3, sl, #3
 800a86a:	f000 bd5a 	b.w	800b322 <_dtoa_r+0xb52>
 800a86e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a872:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a87a:	2200      	movs	r2, #0
 800a87c:	2300      	movs	r3, #0
 800a87e:	f7f6 f893 	bl	80009a8 <__aeabi_dcmpeq>
 800a882:	4607      	mov	r7, r0
 800a884:	b158      	cbz	r0, 800a89e <_dtoa_r+0xce>
 800a886:	2301      	movs	r3, #1
 800a888:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a88a:	6013      	str	r3, [r2, #0]
 800a88c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a88e:	b113      	cbz	r3, 800a896 <_dtoa_r+0xc6>
 800a890:	4b89      	ldr	r3, [pc, #548]	@ (800aab8 <_dtoa_r+0x2e8>)
 800a892:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a894:	6013      	str	r3, [r2, #0]
 800a896:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800aabc <_dtoa_r+0x2ec>
 800a89a:	f000 bd44 	b.w	800b326 <_dtoa_r+0xb56>
 800a89e:	ab14      	add	r3, sp, #80	@ 0x50
 800a8a0:	9301      	str	r3, [sp, #4]
 800a8a2:	ab15      	add	r3, sp, #84	@ 0x54
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	4648      	mov	r0, r9
 800a8a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a8ac:	f001 f980 	bl	800bbb0 <__d2b>
 800a8b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a8b4:	9003      	str	r0, [sp, #12]
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	d078      	beq.n	800a9ac <_dtoa_r+0x1dc>
 800a8ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a8c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a8cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a8d0:	9712      	str	r7, [sp, #72]	@ 0x48
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4b7a      	ldr	r3, [pc, #488]	@ (800aac0 <_dtoa_r+0x2f0>)
 800a8d8:	f7f5 fc46 	bl	8000168 <__aeabi_dsub>
 800a8dc:	a36c      	add	r3, pc, #432	@ (adr r3, 800aa90 <_dtoa_r+0x2c0>)
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f7f5 fdf9 	bl	80004d8 <__aeabi_dmul>
 800a8e6:	a36c      	add	r3, pc, #432	@ (adr r3, 800aa98 <_dtoa_r+0x2c8>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fc3e 	bl	800016c <__adddf3>
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	f7f5 fd85 	bl	8000404 <__aeabi_i2d>
 800a8fa:	a369      	add	r3, pc, #420	@ (adr r3, 800aaa0 <_dtoa_r+0x2d0>)
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	f7f5 fdea 	bl	80004d8 <__aeabi_dmul>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	4620      	mov	r0, r4
 800a90a:	4629      	mov	r1, r5
 800a90c:	f7f5 fc2e 	bl	800016c <__adddf3>
 800a910:	4604      	mov	r4, r0
 800a912:	460d      	mov	r5, r1
 800a914:	f7f6 f890 	bl	8000a38 <__aeabi_d2iz>
 800a918:	2200      	movs	r2, #0
 800a91a:	4607      	mov	r7, r0
 800a91c:	2300      	movs	r3, #0
 800a91e:	4620      	mov	r0, r4
 800a920:	4629      	mov	r1, r5
 800a922:	f7f6 f84b 	bl	80009bc <__aeabi_dcmplt>
 800a926:	b140      	cbz	r0, 800a93a <_dtoa_r+0x16a>
 800a928:	4638      	mov	r0, r7
 800a92a:	f7f5 fd6b 	bl	8000404 <__aeabi_i2d>
 800a92e:	4622      	mov	r2, r4
 800a930:	462b      	mov	r3, r5
 800a932:	f7f6 f839 	bl	80009a8 <__aeabi_dcmpeq>
 800a936:	b900      	cbnz	r0, 800a93a <_dtoa_r+0x16a>
 800a938:	3f01      	subs	r7, #1
 800a93a:	2f16      	cmp	r7, #22
 800a93c:	d854      	bhi.n	800a9e8 <_dtoa_r+0x218>
 800a93e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a942:	4b60      	ldr	r3, [pc, #384]	@ (800aac4 <_dtoa_r+0x2f4>)
 800a944:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	f7f6 f836 	bl	80009bc <__aeabi_dcmplt>
 800a950:	2800      	cmp	r0, #0
 800a952:	d04b      	beq.n	800a9ec <_dtoa_r+0x21c>
 800a954:	2300      	movs	r3, #0
 800a956:	3f01      	subs	r7, #1
 800a958:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a95a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a95c:	1b9b      	subs	r3, r3, r6
 800a95e:	1e5a      	subs	r2, r3, #1
 800a960:	bf49      	itett	mi
 800a962:	f1c3 0301 	rsbmi	r3, r3, #1
 800a966:	2300      	movpl	r3, #0
 800a968:	9304      	strmi	r3, [sp, #16]
 800a96a:	2300      	movmi	r3, #0
 800a96c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a96e:	bf54      	ite	pl
 800a970:	9304      	strpl	r3, [sp, #16]
 800a972:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a974:	2f00      	cmp	r7, #0
 800a976:	db3b      	blt.n	800a9f0 <_dtoa_r+0x220>
 800a978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a97a:	970e      	str	r7, [sp, #56]	@ 0x38
 800a97c:	443b      	add	r3, r7
 800a97e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a980:	2300      	movs	r3, #0
 800a982:	930a      	str	r3, [sp, #40]	@ 0x28
 800a984:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a986:	2b09      	cmp	r3, #9
 800a988:	d865      	bhi.n	800aa56 <_dtoa_r+0x286>
 800a98a:	2b05      	cmp	r3, #5
 800a98c:	bfc4      	itt	gt
 800a98e:	3b04      	subgt	r3, #4
 800a990:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a992:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a994:	bfc8      	it	gt
 800a996:	2400      	movgt	r4, #0
 800a998:	f1a3 0302 	sub.w	r3, r3, #2
 800a99c:	bfd8      	it	le
 800a99e:	2401      	movle	r4, #1
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d864      	bhi.n	800aa6e <_dtoa_r+0x29e>
 800a9a4:	e8df f003 	tbb	[pc, r3]
 800a9a8:	2c385553 	.word	0x2c385553
 800a9ac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a9b0:	441e      	add	r6, r3
 800a9b2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a9b6:	2b20      	cmp	r3, #32
 800a9b8:	bfc1      	itttt	gt
 800a9ba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a9be:	fa08 f803 	lslgt.w	r8, r8, r3
 800a9c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a9c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a9ca:	bfd6      	itet	le
 800a9cc:	f1c3 0320 	rsble	r3, r3, #32
 800a9d0:	ea48 0003 	orrgt.w	r0, r8, r3
 800a9d4:	fa04 f003 	lslle.w	r0, r4, r3
 800a9d8:	f7f5 fd04 	bl	80003e4 <__aeabi_ui2d>
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a9e2:	3e01      	subs	r6, #1
 800a9e4:	9212      	str	r2, [sp, #72]	@ 0x48
 800a9e6:	e774      	b.n	800a8d2 <_dtoa_r+0x102>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e7b5      	b.n	800a958 <_dtoa_r+0x188>
 800a9ec:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a9ee:	e7b4      	b.n	800a95a <_dtoa_r+0x18a>
 800a9f0:	9b04      	ldr	r3, [sp, #16]
 800a9f2:	1bdb      	subs	r3, r3, r7
 800a9f4:	9304      	str	r3, [sp, #16]
 800a9f6:	427b      	negs	r3, r7
 800a9f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9fe:	e7c1      	b.n	800a984 <_dtoa_r+0x1b4>
 800aa00:	2301      	movs	r3, #1
 800aa02:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa06:	eb07 0b03 	add.w	fp, r7, r3
 800aa0a:	f10b 0301 	add.w	r3, fp, #1
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	9308      	str	r3, [sp, #32]
 800aa12:	bfb8      	it	lt
 800aa14:	2301      	movlt	r3, #1
 800aa16:	e006      	b.n	800aa26 <_dtoa_r+0x256>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	dd28      	ble.n	800aa74 <_dtoa_r+0x2a4>
 800aa22:	469b      	mov	fp, r3
 800aa24:	9308      	str	r3, [sp, #32]
 800aa26:	2100      	movs	r1, #0
 800aa28:	2204      	movs	r2, #4
 800aa2a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800aa2e:	f102 0514 	add.w	r5, r2, #20
 800aa32:	429d      	cmp	r5, r3
 800aa34:	d926      	bls.n	800aa84 <_dtoa_r+0x2b4>
 800aa36:	6041      	str	r1, [r0, #4]
 800aa38:	4648      	mov	r0, r9
 800aa3a:	f000 fce5 	bl	800b408 <_Balloc>
 800aa3e:	4682      	mov	sl, r0
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d143      	bne.n	800aacc <_dtoa_r+0x2fc>
 800aa44:	4602      	mov	r2, r0
 800aa46:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa4a:	4b1f      	ldr	r3, [pc, #124]	@ (800aac8 <_dtoa_r+0x2f8>)
 800aa4c:	e6d4      	b.n	800a7f8 <_dtoa_r+0x28>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e7e3      	b.n	800aa1a <_dtoa_r+0x24a>
 800aa52:	2300      	movs	r3, #0
 800aa54:	e7d5      	b.n	800aa02 <_dtoa_r+0x232>
 800aa56:	2401      	movs	r4, #1
 800aa58:	2300      	movs	r3, #0
 800aa5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa5c:	9320      	str	r3, [sp, #128]	@ 0x80
 800aa5e:	f04f 3bff 	mov.w	fp, #4294967295
 800aa62:	2200      	movs	r2, #0
 800aa64:	2312      	movs	r3, #18
 800aa66:	f8cd b020 	str.w	fp, [sp, #32]
 800aa6a:	9221      	str	r2, [sp, #132]	@ 0x84
 800aa6c:	e7db      	b.n	800aa26 <_dtoa_r+0x256>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa72:	e7f4      	b.n	800aa5e <_dtoa_r+0x28e>
 800aa74:	f04f 0b01 	mov.w	fp, #1
 800aa78:	465b      	mov	r3, fp
 800aa7a:	f8cd b020 	str.w	fp, [sp, #32]
 800aa7e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800aa82:	e7d0      	b.n	800aa26 <_dtoa_r+0x256>
 800aa84:	3101      	adds	r1, #1
 800aa86:	0052      	lsls	r2, r2, #1
 800aa88:	e7d1      	b.n	800aa2e <_dtoa_r+0x25e>
 800aa8a:	bf00      	nop
 800aa8c:	f3af 8000 	nop.w
 800aa90:	636f4361 	.word	0x636f4361
 800aa94:	3fd287a7 	.word	0x3fd287a7
 800aa98:	8b60c8b3 	.word	0x8b60c8b3
 800aa9c:	3fc68a28 	.word	0x3fc68a28
 800aaa0:	509f79fb 	.word	0x509f79fb
 800aaa4:	3fd34413 	.word	0x3fd34413
 800aaa8:	0800ff92 	.word	0x0800ff92
 800aaac:	0800ffa9 	.word	0x0800ffa9
 800aab0:	7ff00000 	.word	0x7ff00000
 800aab4:	0800ff8e 	.word	0x0800ff8e
 800aab8:	0800ff5d 	.word	0x0800ff5d
 800aabc:	0800ff5c 	.word	0x0800ff5c
 800aac0:	3ff80000 	.word	0x3ff80000
 800aac4:	08010158 	.word	0x08010158
 800aac8:	08010001 	.word	0x08010001
 800aacc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aad0:	6018      	str	r0, [r3, #0]
 800aad2:	9b08      	ldr	r3, [sp, #32]
 800aad4:	2b0e      	cmp	r3, #14
 800aad6:	f200 80a1 	bhi.w	800ac1c <_dtoa_r+0x44c>
 800aada:	2c00      	cmp	r4, #0
 800aadc:	f000 809e 	beq.w	800ac1c <_dtoa_r+0x44c>
 800aae0:	2f00      	cmp	r7, #0
 800aae2:	dd33      	ble.n	800ab4c <_dtoa_r+0x37c>
 800aae4:	4b9c      	ldr	r3, [pc, #624]	@ (800ad58 <_dtoa_r+0x588>)
 800aae6:	f007 020f 	and.w	r2, r7, #15
 800aaea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaee:	05f8      	lsls	r0, r7, #23
 800aaf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaf4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800aaf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aafc:	d516      	bpl.n	800ab2c <_dtoa_r+0x35c>
 800aafe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab02:	4b96      	ldr	r3, [pc, #600]	@ (800ad5c <_dtoa_r+0x58c>)
 800ab04:	2603      	movs	r6, #3
 800ab06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab0a:	f7f5 fe0f 	bl	800072c <__aeabi_ddiv>
 800ab0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab12:	f004 040f 	and.w	r4, r4, #15
 800ab16:	4d91      	ldr	r5, [pc, #580]	@ (800ad5c <_dtoa_r+0x58c>)
 800ab18:	b954      	cbnz	r4, 800ab30 <_dtoa_r+0x360>
 800ab1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab22:	f7f5 fe03 	bl	800072c <__aeabi_ddiv>
 800ab26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab2a:	e028      	b.n	800ab7e <_dtoa_r+0x3ae>
 800ab2c:	2602      	movs	r6, #2
 800ab2e:	e7f2      	b.n	800ab16 <_dtoa_r+0x346>
 800ab30:	07e1      	lsls	r1, r4, #31
 800ab32:	d508      	bpl.n	800ab46 <_dtoa_r+0x376>
 800ab34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab3c:	f7f5 fccc 	bl	80004d8 <__aeabi_dmul>
 800ab40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab44:	3601      	adds	r6, #1
 800ab46:	1064      	asrs	r4, r4, #1
 800ab48:	3508      	adds	r5, #8
 800ab4a:	e7e5      	b.n	800ab18 <_dtoa_r+0x348>
 800ab4c:	f000 80af 	beq.w	800acae <_dtoa_r+0x4de>
 800ab50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab54:	427c      	negs	r4, r7
 800ab56:	4b80      	ldr	r3, [pc, #512]	@ (800ad58 <_dtoa_r+0x588>)
 800ab58:	f004 020f 	and.w	r2, r4, #15
 800ab5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	f7f5 fcb8 	bl	80004d8 <__aeabi_dmul>
 800ab68:	2602      	movs	r6, #2
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab70:	4d7a      	ldr	r5, [pc, #488]	@ (800ad5c <_dtoa_r+0x58c>)
 800ab72:	1124      	asrs	r4, r4, #4
 800ab74:	2c00      	cmp	r4, #0
 800ab76:	f040 808f 	bne.w	800ac98 <_dtoa_r+0x4c8>
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1d3      	bne.n	800ab26 <_dtoa_r+0x356>
 800ab7e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ab82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8094 	beq.w	800acb2 <_dtoa_r+0x4e2>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4b73      	ldr	r3, [pc, #460]	@ (800ad60 <_dtoa_r+0x590>)
 800ab92:	f7f5 ff13 	bl	80009bc <__aeabi_dcmplt>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f000 808b 	beq.w	800acb2 <_dtoa_r+0x4e2>
 800ab9c:	9b08      	ldr	r3, [sp, #32]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8087 	beq.w	800acb2 <_dtoa_r+0x4e2>
 800aba4:	f1bb 0f00 	cmp.w	fp, #0
 800aba8:	dd34      	ble.n	800ac14 <_dtoa_r+0x444>
 800abaa:	4620      	mov	r0, r4
 800abac:	2200      	movs	r2, #0
 800abae:	4629      	mov	r1, r5
 800abb0:	4b6c      	ldr	r3, [pc, #432]	@ (800ad64 <_dtoa_r+0x594>)
 800abb2:	f7f5 fc91 	bl	80004d8 <__aeabi_dmul>
 800abb6:	465c      	mov	r4, fp
 800abb8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abbc:	f107 38ff 	add.w	r8, r7, #4294967295
 800abc0:	3601      	adds	r6, #1
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7f5 fc1e 	bl	8000404 <__aeabi_i2d>
 800abc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abcc:	f7f5 fc84 	bl	80004d8 <__aeabi_dmul>
 800abd0:	2200      	movs	r2, #0
 800abd2:	4b65      	ldr	r3, [pc, #404]	@ (800ad68 <_dtoa_r+0x598>)
 800abd4:	f7f5 faca 	bl	800016c <__adddf3>
 800abd8:	4605      	mov	r5, r0
 800abda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800abde:	2c00      	cmp	r4, #0
 800abe0:	d16a      	bne.n	800acb8 <_dtoa_r+0x4e8>
 800abe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abe6:	2200      	movs	r2, #0
 800abe8:	4b60      	ldr	r3, [pc, #384]	@ (800ad6c <_dtoa_r+0x59c>)
 800abea:	f7f5 fabd 	bl	8000168 <__aeabi_dsub>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abf6:	462a      	mov	r2, r5
 800abf8:	4633      	mov	r3, r6
 800abfa:	f7f5 fefd 	bl	80009f8 <__aeabi_dcmpgt>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	f040 8298 	bne.w	800b134 <_dtoa_r+0x964>
 800ac04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac08:	462a      	mov	r2, r5
 800ac0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac0e:	f7f5 fed5 	bl	80009bc <__aeabi_dcmplt>
 800ac12:	bb38      	cbnz	r0, 800ac64 <_dtoa_r+0x494>
 800ac14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac18:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ac1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f2c0 8157 	blt.w	800aed2 <_dtoa_r+0x702>
 800ac24:	2f0e      	cmp	r7, #14
 800ac26:	f300 8154 	bgt.w	800aed2 <_dtoa_r+0x702>
 800ac2a:	4b4b      	ldr	r3, [pc, #300]	@ (800ad58 <_dtoa_r+0x588>)
 800ac2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac30:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f280 80e5 	bge.w	800ae0a <_dtoa_r+0x63a>
 800ac40:	9b08      	ldr	r3, [sp, #32]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f300 80e1 	bgt.w	800ae0a <_dtoa_r+0x63a>
 800ac48:	d10c      	bne.n	800ac64 <_dtoa_r+0x494>
 800ac4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	4b46      	ldr	r3, [pc, #280]	@ (800ad6c <_dtoa_r+0x59c>)
 800ac52:	f7f5 fc41 	bl	80004d8 <__aeabi_dmul>
 800ac56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac5a:	f7f5 fec3 	bl	80009e4 <__aeabi_dcmpge>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f000 8266 	beq.w	800b130 <_dtoa_r+0x960>
 800ac64:	2400      	movs	r4, #0
 800ac66:	4625      	mov	r5, r4
 800ac68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac6a:	4656      	mov	r6, sl
 800ac6c:	ea6f 0803 	mvn.w	r8, r3
 800ac70:	2700      	movs	r7, #0
 800ac72:	4621      	mov	r1, r4
 800ac74:	4648      	mov	r0, r9
 800ac76:	f000 fc07 	bl	800b488 <_Bfree>
 800ac7a:	2d00      	cmp	r5, #0
 800ac7c:	f000 80bd 	beq.w	800adfa <_dtoa_r+0x62a>
 800ac80:	b12f      	cbz	r7, 800ac8e <_dtoa_r+0x4be>
 800ac82:	42af      	cmp	r7, r5
 800ac84:	d003      	beq.n	800ac8e <_dtoa_r+0x4be>
 800ac86:	4639      	mov	r1, r7
 800ac88:	4648      	mov	r0, r9
 800ac8a:	f000 fbfd 	bl	800b488 <_Bfree>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4648      	mov	r0, r9
 800ac92:	f000 fbf9 	bl	800b488 <_Bfree>
 800ac96:	e0b0      	b.n	800adfa <_dtoa_r+0x62a>
 800ac98:	07e2      	lsls	r2, r4, #31
 800ac9a:	d505      	bpl.n	800aca8 <_dtoa_r+0x4d8>
 800ac9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aca0:	f7f5 fc1a 	bl	80004d8 <__aeabi_dmul>
 800aca4:	2301      	movs	r3, #1
 800aca6:	3601      	adds	r6, #1
 800aca8:	1064      	asrs	r4, r4, #1
 800acaa:	3508      	adds	r5, #8
 800acac:	e762      	b.n	800ab74 <_dtoa_r+0x3a4>
 800acae:	2602      	movs	r6, #2
 800acb0:	e765      	b.n	800ab7e <_dtoa_r+0x3ae>
 800acb2:	46b8      	mov	r8, r7
 800acb4:	9c08      	ldr	r4, [sp, #32]
 800acb6:	e784      	b.n	800abc2 <_dtoa_r+0x3f2>
 800acb8:	4b27      	ldr	r3, [pc, #156]	@ (800ad58 <_dtoa_r+0x588>)
 800acba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acc4:	4454      	add	r4, sl
 800acc6:	2900      	cmp	r1, #0
 800acc8:	d054      	beq.n	800ad74 <_dtoa_r+0x5a4>
 800acca:	2000      	movs	r0, #0
 800accc:	4928      	ldr	r1, [pc, #160]	@ (800ad70 <_dtoa_r+0x5a0>)
 800acce:	f7f5 fd2d 	bl	800072c <__aeabi_ddiv>
 800acd2:	4633      	mov	r3, r6
 800acd4:	462a      	mov	r2, r5
 800acd6:	f7f5 fa47 	bl	8000168 <__aeabi_dsub>
 800acda:	4656      	mov	r6, sl
 800acdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ace0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ace4:	f7f5 fea8 	bl	8000a38 <__aeabi_d2iz>
 800ace8:	4605      	mov	r5, r0
 800acea:	f7f5 fb8b 	bl	8000404 <__aeabi_i2d>
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acf6:	f7f5 fa37 	bl	8000168 <__aeabi_dsub>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	3530      	adds	r5, #48	@ 0x30
 800ad00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad08:	f806 5b01 	strb.w	r5, [r6], #1
 800ad0c:	f7f5 fe56 	bl	80009bc <__aeabi_dcmplt>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d172      	bne.n	800adfa <_dtoa_r+0x62a>
 800ad14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad18:	2000      	movs	r0, #0
 800ad1a:	4911      	ldr	r1, [pc, #68]	@ (800ad60 <_dtoa_r+0x590>)
 800ad1c:	f7f5 fa24 	bl	8000168 <__aeabi_dsub>
 800ad20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad24:	f7f5 fe4a 	bl	80009bc <__aeabi_dcmplt>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	f040 80b4 	bne.w	800ae96 <_dtoa_r+0x6c6>
 800ad2e:	42a6      	cmp	r6, r4
 800ad30:	f43f af70 	beq.w	800ac14 <_dtoa_r+0x444>
 800ad34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad64 <_dtoa_r+0x594>)
 800ad3c:	f7f5 fbcc 	bl	80004d8 <__aeabi_dmul>
 800ad40:	2200      	movs	r2, #0
 800ad42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad4a:	4b06      	ldr	r3, [pc, #24]	@ (800ad64 <_dtoa_r+0x594>)
 800ad4c:	f7f5 fbc4 	bl	80004d8 <__aeabi_dmul>
 800ad50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad54:	e7c4      	b.n	800ace0 <_dtoa_r+0x510>
 800ad56:	bf00      	nop
 800ad58:	08010158 	.word	0x08010158
 800ad5c:	08010130 	.word	0x08010130
 800ad60:	3ff00000 	.word	0x3ff00000
 800ad64:	40240000 	.word	0x40240000
 800ad68:	401c0000 	.word	0x401c0000
 800ad6c:	40140000 	.word	0x40140000
 800ad70:	3fe00000 	.word	0x3fe00000
 800ad74:	4631      	mov	r1, r6
 800ad76:	4628      	mov	r0, r5
 800ad78:	f7f5 fbae 	bl	80004d8 <__aeabi_dmul>
 800ad7c:	4656      	mov	r6, sl
 800ad7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad82:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ad84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad88:	f7f5 fe56 	bl	8000a38 <__aeabi_d2iz>
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	f7f5 fb39 	bl	8000404 <__aeabi_i2d>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad9a:	f7f5 f9e5 	bl	8000168 <__aeabi_dsub>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	3530      	adds	r5, #48	@ 0x30
 800ada4:	f806 5b01 	strb.w	r5, [r6], #1
 800ada8:	42a6      	cmp	r6, r4
 800adaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800adae:	f04f 0200 	mov.w	r2, #0
 800adb2:	d124      	bne.n	800adfe <_dtoa_r+0x62e>
 800adb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800adb8:	4bae      	ldr	r3, [pc, #696]	@ (800b074 <_dtoa_r+0x8a4>)
 800adba:	f7f5 f9d7 	bl	800016c <__adddf3>
 800adbe:	4602      	mov	r2, r0
 800adc0:	460b      	mov	r3, r1
 800adc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adc6:	f7f5 fe17 	bl	80009f8 <__aeabi_dcmpgt>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d163      	bne.n	800ae96 <_dtoa_r+0x6c6>
 800adce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800add2:	2000      	movs	r0, #0
 800add4:	49a7      	ldr	r1, [pc, #668]	@ (800b074 <_dtoa_r+0x8a4>)
 800add6:	f7f5 f9c7 	bl	8000168 <__aeabi_dsub>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ade2:	f7f5 fdeb 	bl	80009bc <__aeabi_dcmplt>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f af14 	beq.w	800ac14 <_dtoa_r+0x444>
 800adec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800adee:	1e73      	subs	r3, r6, #1
 800adf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800adf6:	2b30      	cmp	r3, #48	@ 0x30
 800adf8:	d0f8      	beq.n	800adec <_dtoa_r+0x61c>
 800adfa:	4647      	mov	r7, r8
 800adfc:	e03b      	b.n	800ae76 <_dtoa_r+0x6a6>
 800adfe:	4b9e      	ldr	r3, [pc, #632]	@ (800b078 <_dtoa_r+0x8a8>)
 800ae00:	f7f5 fb6a 	bl	80004d8 <__aeabi_dmul>
 800ae04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae08:	e7bc      	b.n	800ad84 <_dtoa_r+0x5b4>
 800ae0a:	4656      	mov	r6, sl
 800ae0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ae10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fc88 	bl	800072c <__aeabi_ddiv>
 800ae1c:	f7f5 fe0c 	bl	8000a38 <__aeabi_d2iz>
 800ae20:	4680      	mov	r8, r0
 800ae22:	f7f5 faef 	bl	8000404 <__aeabi_i2d>
 800ae26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae2a:	f7f5 fb55 	bl	80004d8 <__aeabi_dmul>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 f997 	bl	8000168 <__aeabi_dsub>
 800ae3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae3e:	9d08      	ldr	r5, [sp, #32]
 800ae40:	f806 4b01 	strb.w	r4, [r6], #1
 800ae44:	eba6 040a 	sub.w	r4, r6, sl
 800ae48:	42a5      	cmp	r5, r4
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	d133      	bne.n	800aeb8 <_dtoa_r+0x6e8>
 800ae50:	f7f5 f98c 	bl	800016c <__adddf3>
 800ae54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae58:	4604      	mov	r4, r0
 800ae5a:	460d      	mov	r5, r1
 800ae5c:	f7f5 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 800ae60:	b9c0      	cbnz	r0, 800ae94 <_dtoa_r+0x6c4>
 800ae62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae66:	4620      	mov	r0, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7f5 fd9d 	bl	80009a8 <__aeabi_dcmpeq>
 800ae6e:	b110      	cbz	r0, 800ae76 <_dtoa_r+0x6a6>
 800ae70:	f018 0f01 	tst.w	r8, #1
 800ae74:	d10e      	bne.n	800ae94 <_dtoa_r+0x6c4>
 800ae76:	4648      	mov	r0, r9
 800ae78:	9903      	ldr	r1, [sp, #12]
 800ae7a:	f000 fb05 	bl	800b488 <_Bfree>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	7033      	strb	r3, [r6, #0]
 800ae82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ae84:	3701      	adds	r7, #1
 800ae86:	601f      	str	r7, [r3, #0]
 800ae88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 824b 	beq.w	800b326 <_dtoa_r+0xb56>
 800ae90:	601e      	str	r6, [r3, #0]
 800ae92:	e248      	b.n	800b326 <_dtoa_r+0xb56>
 800ae94:	46b8      	mov	r8, r7
 800ae96:	4633      	mov	r3, r6
 800ae98:	461e      	mov	r6, r3
 800ae9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae9e:	2a39      	cmp	r2, #57	@ 0x39
 800aea0:	d106      	bne.n	800aeb0 <_dtoa_r+0x6e0>
 800aea2:	459a      	cmp	sl, r3
 800aea4:	d1f8      	bne.n	800ae98 <_dtoa_r+0x6c8>
 800aea6:	2230      	movs	r2, #48	@ 0x30
 800aea8:	f108 0801 	add.w	r8, r8, #1
 800aeac:	f88a 2000 	strb.w	r2, [sl]
 800aeb0:	781a      	ldrb	r2, [r3, #0]
 800aeb2:	3201      	adds	r2, #1
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	e7a0      	b.n	800adfa <_dtoa_r+0x62a>
 800aeb8:	2200      	movs	r2, #0
 800aeba:	4b6f      	ldr	r3, [pc, #444]	@ (800b078 <_dtoa_r+0x8a8>)
 800aebc:	f7f5 fb0c 	bl	80004d8 <__aeabi_dmul>
 800aec0:	2200      	movs	r2, #0
 800aec2:	2300      	movs	r3, #0
 800aec4:	4604      	mov	r4, r0
 800aec6:	460d      	mov	r5, r1
 800aec8:	f7f5 fd6e 	bl	80009a8 <__aeabi_dcmpeq>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d09f      	beq.n	800ae10 <_dtoa_r+0x640>
 800aed0:	e7d1      	b.n	800ae76 <_dtoa_r+0x6a6>
 800aed2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aed4:	2a00      	cmp	r2, #0
 800aed6:	f000 80ea 	beq.w	800b0ae <_dtoa_r+0x8de>
 800aeda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aedc:	2a01      	cmp	r2, #1
 800aede:	f300 80cd 	bgt.w	800b07c <_dtoa_r+0x8ac>
 800aee2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aee4:	2a00      	cmp	r2, #0
 800aee6:	f000 80c1 	beq.w	800b06c <_dtoa_r+0x89c>
 800aeea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aeee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aef0:	9e04      	ldr	r6, [sp, #16]
 800aef2:	9a04      	ldr	r2, [sp, #16]
 800aef4:	2101      	movs	r1, #1
 800aef6:	441a      	add	r2, r3
 800aef8:	9204      	str	r2, [sp, #16]
 800aefa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aefc:	4648      	mov	r0, r9
 800aefe:	441a      	add	r2, r3
 800af00:	9209      	str	r2, [sp, #36]	@ 0x24
 800af02:	f000 fbbf 	bl	800b684 <__i2b>
 800af06:	4605      	mov	r5, r0
 800af08:	b166      	cbz	r6, 800af24 <_dtoa_r+0x754>
 800af0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	dd09      	ble.n	800af24 <_dtoa_r+0x754>
 800af10:	42b3      	cmp	r3, r6
 800af12:	bfa8      	it	ge
 800af14:	4633      	movge	r3, r6
 800af16:	9a04      	ldr	r2, [sp, #16]
 800af18:	1af6      	subs	r6, r6, r3
 800af1a:	1ad2      	subs	r2, r2, r3
 800af1c:	9204      	str	r2, [sp, #16]
 800af1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	9309      	str	r3, [sp, #36]	@ 0x24
 800af24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af26:	b30b      	cbz	r3, 800af6c <_dtoa_r+0x79c>
 800af28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 80c6 	beq.w	800b0bc <_dtoa_r+0x8ec>
 800af30:	2c00      	cmp	r4, #0
 800af32:	f000 80c0 	beq.w	800b0b6 <_dtoa_r+0x8e6>
 800af36:	4629      	mov	r1, r5
 800af38:	4622      	mov	r2, r4
 800af3a:	4648      	mov	r0, r9
 800af3c:	f000 fc5a 	bl	800b7f4 <__pow5mult>
 800af40:	9a03      	ldr	r2, [sp, #12]
 800af42:	4601      	mov	r1, r0
 800af44:	4605      	mov	r5, r0
 800af46:	4648      	mov	r0, r9
 800af48:	f000 fbb2 	bl	800b6b0 <__multiply>
 800af4c:	9903      	ldr	r1, [sp, #12]
 800af4e:	4680      	mov	r8, r0
 800af50:	4648      	mov	r0, r9
 800af52:	f000 fa99 	bl	800b488 <_Bfree>
 800af56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af58:	1b1b      	subs	r3, r3, r4
 800af5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800af5c:	f000 80b1 	beq.w	800b0c2 <_dtoa_r+0x8f2>
 800af60:	4641      	mov	r1, r8
 800af62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af64:	4648      	mov	r0, r9
 800af66:	f000 fc45 	bl	800b7f4 <__pow5mult>
 800af6a:	9003      	str	r0, [sp, #12]
 800af6c:	2101      	movs	r1, #1
 800af6e:	4648      	mov	r0, r9
 800af70:	f000 fb88 	bl	800b684 <__i2b>
 800af74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af76:	4604      	mov	r4, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 81d8 	beq.w	800b32e <_dtoa_r+0xb5e>
 800af7e:	461a      	mov	r2, r3
 800af80:	4601      	mov	r1, r0
 800af82:	4648      	mov	r0, r9
 800af84:	f000 fc36 	bl	800b7f4 <__pow5mult>
 800af88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af8a:	4604      	mov	r4, r0
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	f300 809f 	bgt.w	800b0d0 <_dtoa_r+0x900>
 800af92:	9b06      	ldr	r3, [sp, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f040 8097 	bne.w	800b0c8 <_dtoa_r+0x8f8>
 800af9a:	9b07      	ldr	r3, [sp, #28]
 800af9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f040 8093 	bne.w	800b0cc <_dtoa_r+0x8fc>
 800afa6:	9b07      	ldr	r3, [sp, #28]
 800afa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afac:	0d1b      	lsrs	r3, r3, #20
 800afae:	051b      	lsls	r3, r3, #20
 800afb0:	b133      	cbz	r3, 800afc0 <_dtoa_r+0x7f0>
 800afb2:	9b04      	ldr	r3, [sp, #16]
 800afb4:	3301      	adds	r3, #1
 800afb6:	9304      	str	r3, [sp, #16]
 800afb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afba:	3301      	adds	r3, #1
 800afbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afbe:	2301      	movs	r3, #1
 800afc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800afc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 81b8 	beq.w	800b33a <_dtoa_r+0xb6a>
 800afca:	6923      	ldr	r3, [r4, #16]
 800afcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afd0:	6918      	ldr	r0, [r3, #16]
 800afd2:	f000 fb0b 	bl	800b5ec <__hi0bits>
 800afd6:	f1c0 0020 	rsb	r0, r0, #32
 800afda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afdc:	4418      	add	r0, r3
 800afde:	f010 001f 	ands.w	r0, r0, #31
 800afe2:	f000 8082 	beq.w	800b0ea <_dtoa_r+0x91a>
 800afe6:	f1c0 0320 	rsb	r3, r0, #32
 800afea:	2b04      	cmp	r3, #4
 800afec:	dd73      	ble.n	800b0d6 <_dtoa_r+0x906>
 800afee:	9b04      	ldr	r3, [sp, #16]
 800aff0:	f1c0 001c 	rsb	r0, r0, #28
 800aff4:	4403      	add	r3, r0
 800aff6:	9304      	str	r3, [sp, #16]
 800aff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800affa:	4406      	add	r6, r0
 800affc:	4403      	add	r3, r0
 800affe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b000:	9b04      	ldr	r3, [sp, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	dd05      	ble.n	800b012 <_dtoa_r+0x842>
 800b006:	461a      	mov	r2, r3
 800b008:	4648      	mov	r0, r9
 800b00a:	9903      	ldr	r1, [sp, #12]
 800b00c:	f000 fc4c 	bl	800b8a8 <__lshift>
 800b010:	9003      	str	r0, [sp, #12]
 800b012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b014:	2b00      	cmp	r3, #0
 800b016:	dd05      	ble.n	800b024 <_dtoa_r+0x854>
 800b018:	4621      	mov	r1, r4
 800b01a:	461a      	mov	r2, r3
 800b01c:	4648      	mov	r0, r9
 800b01e:	f000 fc43 	bl	800b8a8 <__lshift>
 800b022:	4604      	mov	r4, r0
 800b024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b026:	2b00      	cmp	r3, #0
 800b028:	d061      	beq.n	800b0ee <_dtoa_r+0x91e>
 800b02a:	4621      	mov	r1, r4
 800b02c:	9803      	ldr	r0, [sp, #12]
 800b02e:	f000 fca7 	bl	800b980 <__mcmp>
 800b032:	2800      	cmp	r0, #0
 800b034:	da5b      	bge.n	800b0ee <_dtoa_r+0x91e>
 800b036:	2300      	movs	r3, #0
 800b038:	220a      	movs	r2, #10
 800b03a:	4648      	mov	r0, r9
 800b03c:	9903      	ldr	r1, [sp, #12]
 800b03e:	f000 fa45 	bl	800b4cc <__multadd>
 800b042:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b044:	f107 38ff 	add.w	r8, r7, #4294967295
 800b048:	9003      	str	r0, [sp, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 8177 	beq.w	800b33e <_dtoa_r+0xb6e>
 800b050:	4629      	mov	r1, r5
 800b052:	2300      	movs	r3, #0
 800b054:	220a      	movs	r2, #10
 800b056:	4648      	mov	r0, r9
 800b058:	f000 fa38 	bl	800b4cc <__multadd>
 800b05c:	f1bb 0f00 	cmp.w	fp, #0
 800b060:	4605      	mov	r5, r0
 800b062:	dc6f      	bgt.n	800b144 <_dtoa_r+0x974>
 800b064:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b066:	2b02      	cmp	r3, #2
 800b068:	dc49      	bgt.n	800b0fe <_dtoa_r+0x92e>
 800b06a:	e06b      	b.n	800b144 <_dtoa_r+0x974>
 800b06c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b06e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b072:	e73c      	b.n	800aeee <_dtoa_r+0x71e>
 800b074:	3fe00000 	.word	0x3fe00000
 800b078:	40240000 	.word	0x40240000
 800b07c:	9b08      	ldr	r3, [sp, #32]
 800b07e:	1e5c      	subs	r4, r3, #1
 800b080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b082:	42a3      	cmp	r3, r4
 800b084:	db09      	blt.n	800b09a <_dtoa_r+0x8ca>
 800b086:	1b1c      	subs	r4, r3, r4
 800b088:	9b08      	ldr	r3, [sp, #32]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f6bf af30 	bge.w	800aef0 <_dtoa_r+0x720>
 800b090:	9b04      	ldr	r3, [sp, #16]
 800b092:	9a08      	ldr	r2, [sp, #32]
 800b094:	1a9e      	subs	r6, r3, r2
 800b096:	2300      	movs	r3, #0
 800b098:	e72b      	b.n	800aef2 <_dtoa_r+0x722>
 800b09a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b09c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b09e:	1ae3      	subs	r3, r4, r3
 800b0a0:	441a      	add	r2, r3
 800b0a2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b0a4:	9e04      	ldr	r6, [sp, #16]
 800b0a6:	2400      	movs	r4, #0
 800b0a8:	9b08      	ldr	r3, [sp, #32]
 800b0aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0ac:	e721      	b.n	800aef2 <_dtoa_r+0x722>
 800b0ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0b0:	9e04      	ldr	r6, [sp, #16]
 800b0b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b0b4:	e728      	b.n	800af08 <_dtoa_r+0x738>
 800b0b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b0ba:	e751      	b.n	800af60 <_dtoa_r+0x790>
 800b0bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0be:	9903      	ldr	r1, [sp, #12]
 800b0c0:	e750      	b.n	800af64 <_dtoa_r+0x794>
 800b0c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0c6:	e751      	b.n	800af6c <_dtoa_r+0x79c>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	e779      	b.n	800afc0 <_dtoa_r+0x7f0>
 800b0cc:	9b06      	ldr	r3, [sp, #24]
 800b0ce:	e777      	b.n	800afc0 <_dtoa_r+0x7f0>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0d4:	e779      	b.n	800afca <_dtoa_r+0x7fa>
 800b0d6:	d093      	beq.n	800b000 <_dtoa_r+0x830>
 800b0d8:	9a04      	ldr	r2, [sp, #16]
 800b0da:	331c      	adds	r3, #28
 800b0dc:	441a      	add	r2, r3
 800b0de:	9204      	str	r2, [sp, #16]
 800b0e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0e2:	441e      	add	r6, r3
 800b0e4:	441a      	add	r2, r3
 800b0e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0e8:	e78a      	b.n	800b000 <_dtoa_r+0x830>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	e7f4      	b.n	800b0d8 <_dtoa_r+0x908>
 800b0ee:	9b08      	ldr	r3, [sp, #32]
 800b0f0:	46b8      	mov	r8, r7
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dc20      	bgt.n	800b138 <_dtoa_r+0x968>
 800b0f6:	469b      	mov	fp, r3
 800b0f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	dd1e      	ble.n	800b13c <_dtoa_r+0x96c>
 800b0fe:	f1bb 0f00 	cmp.w	fp, #0
 800b102:	f47f adb1 	bne.w	800ac68 <_dtoa_r+0x498>
 800b106:	4621      	mov	r1, r4
 800b108:	465b      	mov	r3, fp
 800b10a:	2205      	movs	r2, #5
 800b10c:	4648      	mov	r0, r9
 800b10e:	f000 f9dd 	bl	800b4cc <__multadd>
 800b112:	4601      	mov	r1, r0
 800b114:	4604      	mov	r4, r0
 800b116:	9803      	ldr	r0, [sp, #12]
 800b118:	f000 fc32 	bl	800b980 <__mcmp>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	f77f ada3 	ble.w	800ac68 <_dtoa_r+0x498>
 800b122:	4656      	mov	r6, sl
 800b124:	2331      	movs	r3, #49	@ 0x31
 800b126:	f108 0801 	add.w	r8, r8, #1
 800b12a:	f806 3b01 	strb.w	r3, [r6], #1
 800b12e:	e59f      	b.n	800ac70 <_dtoa_r+0x4a0>
 800b130:	46b8      	mov	r8, r7
 800b132:	9c08      	ldr	r4, [sp, #32]
 800b134:	4625      	mov	r5, r4
 800b136:	e7f4      	b.n	800b122 <_dtoa_r+0x952>
 800b138:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b13c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 8101 	beq.w	800b346 <_dtoa_r+0xb76>
 800b144:	2e00      	cmp	r6, #0
 800b146:	dd05      	ble.n	800b154 <_dtoa_r+0x984>
 800b148:	4629      	mov	r1, r5
 800b14a:	4632      	mov	r2, r6
 800b14c:	4648      	mov	r0, r9
 800b14e:	f000 fbab 	bl	800b8a8 <__lshift>
 800b152:	4605      	mov	r5, r0
 800b154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b156:	2b00      	cmp	r3, #0
 800b158:	d05c      	beq.n	800b214 <_dtoa_r+0xa44>
 800b15a:	4648      	mov	r0, r9
 800b15c:	6869      	ldr	r1, [r5, #4]
 800b15e:	f000 f953 	bl	800b408 <_Balloc>
 800b162:	4606      	mov	r6, r0
 800b164:	b928      	cbnz	r0, 800b172 <_dtoa_r+0x9a2>
 800b166:	4602      	mov	r2, r0
 800b168:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b16c:	4b80      	ldr	r3, [pc, #512]	@ (800b370 <_dtoa_r+0xba0>)
 800b16e:	f7ff bb43 	b.w	800a7f8 <_dtoa_r+0x28>
 800b172:	692a      	ldr	r2, [r5, #16]
 800b174:	f105 010c 	add.w	r1, r5, #12
 800b178:	3202      	adds	r2, #2
 800b17a:	0092      	lsls	r2, r2, #2
 800b17c:	300c      	adds	r0, #12
 800b17e:	f7ff fa8c 	bl	800a69a <memcpy>
 800b182:	2201      	movs	r2, #1
 800b184:	4631      	mov	r1, r6
 800b186:	4648      	mov	r0, r9
 800b188:	f000 fb8e 	bl	800b8a8 <__lshift>
 800b18c:	462f      	mov	r7, r5
 800b18e:	4605      	mov	r5, r0
 800b190:	f10a 0301 	add.w	r3, sl, #1
 800b194:	9304      	str	r3, [sp, #16]
 800b196:	eb0a 030b 	add.w	r3, sl, fp
 800b19a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b19c:	9b06      	ldr	r3, [sp, #24]
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a4:	9b04      	ldr	r3, [sp, #16]
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	9803      	ldr	r0, [sp, #12]
 800b1aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800b1ae:	f7ff fa87 	bl	800a6c0 <quorem>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	3330      	adds	r3, #48	@ 0x30
 800b1b8:	9006      	str	r0, [sp, #24]
 800b1ba:	9803      	ldr	r0, [sp, #12]
 800b1bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1be:	f000 fbdf 	bl	800b980 <__mcmp>
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	9008      	str	r0, [sp, #32]
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	4648      	mov	r0, r9
 800b1ca:	f000 fbf5 	bl	800b9b8 <__mdiff>
 800b1ce:	68c2      	ldr	r2, [r0, #12]
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1d4:	bb02      	cbnz	r2, 800b218 <_dtoa_r+0xa48>
 800b1d6:	4601      	mov	r1, r0
 800b1d8:	9803      	ldr	r0, [sp, #12]
 800b1da:	f000 fbd1 	bl	800b980 <__mcmp>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	4648      	mov	r0, r9
 800b1e6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800b1ea:	f000 f94d 	bl	800b488 <_Bfree>
 800b1ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b1f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b1f2:	9e04      	ldr	r6, [sp, #16]
 800b1f4:	ea42 0103 	orr.w	r1, r2, r3
 800b1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1fa:	4319      	orrs	r1, r3
 800b1fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1fe:	d10d      	bne.n	800b21c <_dtoa_r+0xa4c>
 800b200:	2b39      	cmp	r3, #57	@ 0x39
 800b202:	d027      	beq.n	800b254 <_dtoa_r+0xa84>
 800b204:	9a08      	ldr	r2, [sp, #32]
 800b206:	2a00      	cmp	r2, #0
 800b208:	dd01      	ble.n	800b20e <_dtoa_r+0xa3e>
 800b20a:	9b06      	ldr	r3, [sp, #24]
 800b20c:	3331      	adds	r3, #49	@ 0x31
 800b20e:	f88b 3000 	strb.w	r3, [fp]
 800b212:	e52e      	b.n	800ac72 <_dtoa_r+0x4a2>
 800b214:	4628      	mov	r0, r5
 800b216:	e7b9      	b.n	800b18c <_dtoa_r+0x9bc>
 800b218:	2201      	movs	r2, #1
 800b21a:	e7e2      	b.n	800b1e2 <_dtoa_r+0xa12>
 800b21c:	9908      	ldr	r1, [sp, #32]
 800b21e:	2900      	cmp	r1, #0
 800b220:	db04      	blt.n	800b22c <_dtoa_r+0xa5c>
 800b222:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b224:	4301      	orrs	r1, r0
 800b226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b228:	4301      	orrs	r1, r0
 800b22a:	d120      	bne.n	800b26e <_dtoa_r+0xa9e>
 800b22c:	2a00      	cmp	r2, #0
 800b22e:	ddee      	ble.n	800b20e <_dtoa_r+0xa3e>
 800b230:	2201      	movs	r2, #1
 800b232:	9903      	ldr	r1, [sp, #12]
 800b234:	4648      	mov	r0, r9
 800b236:	9304      	str	r3, [sp, #16]
 800b238:	f000 fb36 	bl	800b8a8 <__lshift>
 800b23c:	4621      	mov	r1, r4
 800b23e:	9003      	str	r0, [sp, #12]
 800b240:	f000 fb9e 	bl	800b980 <__mcmp>
 800b244:	2800      	cmp	r0, #0
 800b246:	9b04      	ldr	r3, [sp, #16]
 800b248:	dc02      	bgt.n	800b250 <_dtoa_r+0xa80>
 800b24a:	d1e0      	bne.n	800b20e <_dtoa_r+0xa3e>
 800b24c:	07da      	lsls	r2, r3, #31
 800b24e:	d5de      	bpl.n	800b20e <_dtoa_r+0xa3e>
 800b250:	2b39      	cmp	r3, #57	@ 0x39
 800b252:	d1da      	bne.n	800b20a <_dtoa_r+0xa3a>
 800b254:	2339      	movs	r3, #57	@ 0x39
 800b256:	f88b 3000 	strb.w	r3, [fp]
 800b25a:	4633      	mov	r3, r6
 800b25c:	461e      	mov	r6, r3
 800b25e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b262:	3b01      	subs	r3, #1
 800b264:	2a39      	cmp	r2, #57	@ 0x39
 800b266:	d04e      	beq.n	800b306 <_dtoa_r+0xb36>
 800b268:	3201      	adds	r2, #1
 800b26a:	701a      	strb	r2, [r3, #0]
 800b26c:	e501      	b.n	800ac72 <_dtoa_r+0x4a2>
 800b26e:	2a00      	cmp	r2, #0
 800b270:	dd03      	ble.n	800b27a <_dtoa_r+0xaaa>
 800b272:	2b39      	cmp	r3, #57	@ 0x39
 800b274:	d0ee      	beq.n	800b254 <_dtoa_r+0xa84>
 800b276:	3301      	adds	r3, #1
 800b278:	e7c9      	b.n	800b20e <_dtoa_r+0xa3e>
 800b27a:	9a04      	ldr	r2, [sp, #16]
 800b27c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b27e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b282:	428a      	cmp	r2, r1
 800b284:	d028      	beq.n	800b2d8 <_dtoa_r+0xb08>
 800b286:	2300      	movs	r3, #0
 800b288:	220a      	movs	r2, #10
 800b28a:	9903      	ldr	r1, [sp, #12]
 800b28c:	4648      	mov	r0, r9
 800b28e:	f000 f91d 	bl	800b4cc <__multadd>
 800b292:	42af      	cmp	r7, r5
 800b294:	9003      	str	r0, [sp, #12]
 800b296:	f04f 0300 	mov.w	r3, #0
 800b29a:	f04f 020a 	mov.w	r2, #10
 800b29e:	4639      	mov	r1, r7
 800b2a0:	4648      	mov	r0, r9
 800b2a2:	d107      	bne.n	800b2b4 <_dtoa_r+0xae4>
 800b2a4:	f000 f912 	bl	800b4cc <__multadd>
 800b2a8:	4607      	mov	r7, r0
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	9b04      	ldr	r3, [sp, #16]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	9304      	str	r3, [sp, #16]
 800b2b2:	e777      	b.n	800b1a4 <_dtoa_r+0x9d4>
 800b2b4:	f000 f90a 	bl	800b4cc <__multadd>
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	2300      	movs	r3, #0
 800b2be:	220a      	movs	r2, #10
 800b2c0:	4648      	mov	r0, r9
 800b2c2:	f000 f903 	bl	800b4cc <__multadd>
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	e7f0      	b.n	800b2ac <_dtoa_r+0xadc>
 800b2ca:	f1bb 0f00 	cmp.w	fp, #0
 800b2ce:	bfcc      	ite	gt
 800b2d0:	465e      	movgt	r6, fp
 800b2d2:	2601      	movle	r6, #1
 800b2d4:	2700      	movs	r7, #0
 800b2d6:	4456      	add	r6, sl
 800b2d8:	2201      	movs	r2, #1
 800b2da:	9903      	ldr	r1, [sp, #12]
 800b2dc:	4648      	mov	r0, r9
 800b2de:	9304      	str	r3, [sp, #16]
 800b2e0:	f000 fae2 	bl	800b8a8 <__lshift>
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	9003      	str	r0, [sp, #12]
 800b2e8:	f000 fb4a 	bl	800b980 <__mcmp>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	dcb4      	bgt.n	800b25a <_dtoa_r+0xa8a>
 800b2f0:	d102      	bne.n	800b2f8 <_dtoa_r+0xb28>
 800b2f2:	9b04      	ldr	r3, [sp, #16]
 800b2f4:	07db      	lsls	r3, r3, #31
 800b2f6:	d4b0      	bmi.n	800b25a <_dtoa_r+0xa8a>
 800b2f8:	4633      	mov	r3, r6
 800b2fa:	461e      	mov	r6, r3
 800b2fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b300:	2a30      	cmp	r2, #48	@ 0x30
 800b302:	d0fa      	beq.n	800b2fa <_dtoa_r+0xb2a>
 800b304:	e4b5      	b.n	800ac72 <_dtoa_r+0x4a2>
 800b306:	459a      	cmp	sl, r3
 800b308:	d1a8      	bne.n	800b25c <_dtoa_r+0xa8c>
 800b30a:	2331      	movs	r3, #49	@ 0x31
 800b30c:	f108 0801 	add.w	r8, r8, #1
 800b310:	f88a 3000 	strb.w	r3, [sl]
 800b314:	e4ad      	b.n	800ac72 <_dtoa_r+0x4a2>
 800b316:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b318:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b374 <_dtoa_r+0xba4>
 800b31c:	b11b      	cbz	r3, 800b326 <_dtoa_r+0xb56>
 800b31e:	f10a 0308 	add.w	r3, sl, #8
 800b322:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	4650      	mov	r0, sl
 800b328:	b017      	add	sp, #92	@ 0x5c
 800b32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b330:	2b01      	cmp	r3, #1
 800b332:	f77f ae2e 	ble.w	800af92 <_dtoa_r+0x7c2>
 800b336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b338:	930a      	str	r3, [sp, #40]	@ 0x28
 800b33a:	2001      	movs	r0, #1
 800b33c:	e64d      	b.n	800afda <_dtoa_r+0x80a>
 800b33e:	f1bb 0f00 	cmp.w	fp, #0
 800b342:	f77f aed9 	ble.w	800b0f8 <_dtoa_r+0x928>
 800b346:	4656      	mov	r6, sl
 800b348:	4621      	mov	r1, r4
 800b34a:	9803      	ldr	r0, [sp, #12]
 800b34c:	f7ff f9b8 	bl	800a6c0 <quorem>
 800b350:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b354:	f806 3b01 	strb.w	r3, [r6], #1
 800b358:	eba6 020a 	sub.w	r2, r6, sl
 800b35c:	4593      	cmp	fp, r2
 800b35e:	ddb4      	ble.n	800b2ca <_dtoa_r+0xafa>
 800b360:	2300      	movs	r3, #0
 800b362:	220a      	movs	r2, #10
 800b364:	4648      	mov	r0, r9
 800b366:	9903      	ldr	r1, [sp, #12]
 800b368:	f000 f8b0 	bl	800b4cc <__multadd>
 800b36c:	9003      	str	r0, [sp, #12]
 800b36e:	e7eb      	b.n	800b348 <_dtoa_r+0xb78>
 800b370:	08010001 	.word	0x08010001
 800b374:	0800ff85 	.word	0x0800ff85

0800b378 <_free_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4605      	mov	r5, r0
 800b37c:	2900      	cmp	r1, #0
 800b37e:	d040      	beq.n	800b402 <_free_r+0x8a>
 800b380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b384:	1f0c      	subs	r4, r1, #4
 800b386:	2b00      	cmp	r3, #0
 800b388:	bfb8      	it	lt
 800b38a:	18e4      	addlt	r4, r4, r3
 800b38c:	f7fe f91a 	bl	80095c4 <__malloc_lock>
 800b390:	4a1c      	ldr	r2, [pc, #112]	@ (800b404 <_free_r+0x8c>)
 800b392:	6813      	ldr	r3, [r2, #0]
 800b394:	b933      	cbnz	r3, 800b3a4 <_free_r+0x2c>
 800b396:	6063      	str	r3, [r4, #4]
 800b398:	6014      	str	r4, [r2, #0]
 800b39a:	4628      	mov	r0, r5
 800b39c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3a0:	f7fe b916 	b.w	80095d0 <__malloc_unlock>
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d908      	bls.n	800b3ba <_free_r+0x42>
 800b3a8:	6820      	ldr	r0, [r4, #0]
 800b3aa:	1821      	adds	r1, r4, r0
 800b3ac:	428b      	cmp	r3, r1
 800b3ae:	bf01      	itttt	eq
 800b3b0:	6819      	ldreq	r1, [r3, #0]
 800b3b2:	685b      	ldreq	r3, [r3, #4]
 800b3b4:	1809      	addeq	r1, r1, r0
 800b3b6:	6021      	streq	r1, [r4, #0]
 800b3b8:	e7ed      	b.n	800b396 <_free_r+0x1e>
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	b10b      	cbz	r3, 800b3c4 <_free_r+0x4c>
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	d9fa      	bls.n	800b3ba <_free_r+0x42>
 800b3c4:	6811      	ldr	r1, [r2, #0]
 800b3c6:	1850      	adds	r0, r2, r1
 800b3c8:	42a0      	cmp	r0, r4
 800b3ca:	d10b      	bne.n	800b3e4 <_free_r+0x6c>
 800b3cc:	6820      	ldr	r0, [r4, #0]
 800b3ce:	4401      	add	r1, r0
 800b3d0:	1850      	adds	r0, r2, r1
 800b3d2:	4283      	cmp	r3, r0
 800b3d4:	6011      	str	r1, [r2, #0]
 800b3d6:	d1e0      	bne.n	800b39a <_free_r+0x22>
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	4408      	add	r0, r1
 800b3de:	6010      	str	r0, [r2, #0]
 800b3e0:	6053      	str	r3, [r2, #4]
 800b3e2:	e7da      	b.n	800b39a <_free_r+0x22>
 800b3e4:	d902      	bls.n	800b3ec <_free_r+0x74>
 800b3e6:	230c      	movs	r3, #12
 800b3e8:	602b      	str	r3, [r5, #0]
 800b3ea:	e7d6      	b.n	800b39a <_free_r+0x22>
 800b3ec:	6820      	ldr	r0, [r4, #0]
 800b3ee:	1821      	adds	r1, r4, r0
 800b3f0:	428b      	cmp	r3, r1
 800b3f2:	bf01      	itttt	eq
 800b3f4:	6819      	ldreq	r1, [r3, #0]
 800b3f6:	685b      	ldreq	r3, [r3, #4]
 800b3f8:	1809      	addeq	r1, r1, r0
 800b3fa:	6021      	streq	r1, [r4, #0]
 800b3fc:	6063      	str	r3, [r4, #4]
 800b3fe:	6054      	str	r4, [r2, #4]
 800b400:	e7cb      	b.n	800b39a <_free_r+0x22>
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	20001a6c 	.word	0x20001a6c

0800b408 <_Balloc>:
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	69c6      	ldr	r6, [r0, #28]
 800b40c:	4604      	mov	r4, r0
 800b40e:	460d      	mov	r5, r1
 800b410:	b976      	cbnz	r6, 800b430 <_Balloc+0x28>
 800b412:	2010      	movs	r0, #16
 800b414:	f7fe f824 	bl	8009460 <malloc>
 800b418:	4602      	mov	r2, r0
 800b41a:	61e0      	str	r0, [r4, #28]
 800b41c:	b920      	cbnz	r0, 800b428 <_Balloc+0x20>
 800b41e:	216b      	movs	r1, #107	@ 0x6b
 800b420:	4b17      	ldr	r3, [pc, #92]	@ (800b480 <_Balloc+0x78>)
 800b422:	4818      	ldr	r0, [pc, #96]	@ (800b484 <_Balloc+0x7c>)
 800b424:	f001 fd40 	bl	800cea8 <__assert_func>
 800b428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b42c:	6006      	str	r6, [r0, #0]
 800b42e:	60c6      	str	r6, [r0, #12]
 800b430:	69e6      	ldr	r6, [r4, #28]
 800b432:	68f3      	ldr	r3, [r6, #12]
 800b434:	b183      	cbz	r3, 800b458 <_Balloc+0x50>
 800b436:	69e3      	ldr	r3, [r4, #28]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b43e:	b9b8      	cbnz	r0, 800b470 <_Balloc+0x68>
 800b440:	2101      	movs	r1, #1
 800b442:	fa01 f605 	lsl.w	r6, r1, r5
 800b446:	1d72      	adds	r2, r6, #5
 800b448:	4620      	mov	r0, r4
 800b44a:	0092      	lsls	r2, r2, #2
 800b44c:	f001 fd4a 	bl	800cee4 <_calloc_r>
 800b450:	b160      	cbz	r0, 800b46c <_Balloc+0x64>
 800b452:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b456:	e00e      	b.n	800b476 <_Balloc+0x6e>
 800b458:	2221      	movs	r2, #33	@ 0x21
 800b45a:	2104      	movs	r1, #4
 800b45c:	4620      	mov	r0, r4
 800b45e:	f001 fd41 	bl	800cee4 <_calloc_r>
 800b462:	69e3      	ldr	r3, [r4, #28]
 800b464:	60f0      	str	r0, [r6, #12]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1e4      	bne.n	800b436 <_Balloc+0x2e>
 800b46c:	2000      	movs	r0, #0
 800b46e:	bd70      	pop	{r4, r5, r6, pc}
 800b470:	6802      	ldr	r2, [r0, #0]
 800b472:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b476:	2300      	movs	r3, #0
 800b478:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b47c:	e7f7      	b.n	800b46e <_Balloc+0x66>
 800b47e:	bf00      	nop
 800b480:	0800ff92 	.word	0x0800ff92
 800b484:	08010012 	.word	0x08010012

0800b488 <_Bfree>:
 800b488:	b570      	push	{r4, r5, r6, lr}
 800b48a:	69c6      	ldr	r6, [r0, #28]
 800b48c:	4605      	mov	r5, r0
 800b48e:	460c      	mov	r4, r1
 800b490:	b976      	cbnz	r6, 800b4b0 <_Bfree+0x28>
 800b492:	2010      	movs	r0, #16
 800b494:	f7fd ffe4 	bl	8009460 <malloc>
 800b498:	4602      	mov	r2, r0
 800b49a:	61e8      	str	r0, [r5, #28]
 800b49c:	b920      	cbnz	r0, 800b4a8 <_Bfree+0x20>
 800b49e:	218f      	movs	r1, #143	@ 0x8f
 800b4a0:	4b08      	ldr	r3, [pc, #32]	@ (800b4c4 <_Bfree+0x3c>)
 800b4a2:	4809      	ldr	r0, [pc, #36]	@ (800b4c8 <_Bfree+0x40>)
 800b4a4:	f001 fd00 	bl	800cea8 <__assert_func>
 800b4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4ac:	6006      	str	r6, [r0, #0]
 800b4ae:	60c6      	str	r6, [r0, #12]
 800b4b0:	b13c      	cbz	r4, 800b4c2 <_Bfree+0x3a>
 800b4b2:	69eb      	ldr	r3, [r5, #28]
 800b4b4:	6862      	ldr	r2, [r4, #4]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4bc:	6021      	str	r1, [r4, #0]
 800b4be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4c2:	bd70      	pop	{r4, r5, r6, pc}
 800b4c4:	0800ff92 	.word	0x0800ff92
 800b4c8:	08010012 	.word	0x08010012

0800b4cc <__multadd>:
 800b4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d0:	4607      	mov	r7, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	461e      	mov	r6, r3
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	690d      	ldr	r5, [r1, #16]
 800b4da:	f101 0c14 	add.w	ip, r1, #20
 800b4de:	f8dc 3000 	ldr.w	r3, [ip]
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	b299      	uxth	r1, r3
 800b4e6:	fb02 6101 	mla	r1, r2, r1, r6
 800b4ea:	0c1e      	lsrs	r6, r3, #16
 800b4ec:	0c0b      	lsrs	r3, r1, #16
 800b4ee:	fb02 3306 	mla	r3, r2, r6, r3
 800b4f2:	b289      	uxth	r1, r1
 800b4f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4f8:	4285      	cmp	r5, r0
 800b4fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4fe:	f84c 1b04 	str.w	r1, [ip], #4
 800b502:	dcec      	bgt.n	800b4de <__multadd+0x12>
 800b504:	b30e      	cbz	r6, 800b54a <__multadd+0x7e>
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	42ab      	cmp	r3, r5
 800b50a:	dc19      	bgt.n	800b540 <__multadd+0x74>
 800b50c:	6861      	ldr	r1, [r4, #4]
 800b50e:	4638      	mov	r0, r7
 800b510:	3101      	adds	r1, #1
 800b512:	f7ff ff79 	bl	800b408 <_Balloc>
 800b516:	4680      	mov	r8, r0
 800b518:	b928      	cbnz	r0, 800b526 <__multadd+0x5a>
 800b51a:	4602      	mov	r2, r0
 800b51c:	21ba      	movs	r1, #186	@ 0xba
 800b51e:	4b0c      	ldr	r3, [pc, #48]	@ (800b550 <__multadd+0x84>)
 800b520:	480c      	ldr	r0, [pc, #48]	@ (800b554 <__multadd+0x88>)
 800b522:	f001 fcc1 	bl	800cea8 <__assert_func>
 800b526:	6922      	ldr	r2, [r4, #16]
 800b528:	f104 010c 	add.w	r1, r4, #12
 800b52c:	3202      	adds	r2, #2
 800b52e:	0092      	lsls	r2, r2, #2
 800b530:	300c      	adds	r0, #12
 800b532:	f7ff f8b2 	bl	800a69a <memcpy>
 800b536:	4621      	mov	r1, r4
 800b538:	4638      	mov	r0, r7
 800b53a:	f7ff ffa5 	bl	800b488 <_Bfree>
 800b53e:	4644      	mov	r4, r8
 800b540:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b544:	3501      	adds	r5, #1
 800b546:	615e      	str	r6, [r3, #20]
 800b548:	6125      	str	r5, [r4, #16]
 800b54a:	4620      	mov	r0, r4
 800b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b550:	08010001 	.word	0x08010001
 800b554:	08010012 	.word	0x08010012

0800b558 <__s2b>:
 800b558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b55c:	4615      	mov	r5, r2
 800b55e:	2209      	movs	r2, #9
 800b560:	461f      	mov	r7, r3
 800b562:	3308      	adds	r3, #8
 800b564:	460c      	mov	r4, r1
 800b566:	fb93 f3f2 	sdiv	r3, r3, r2
 800b56a:	4606      	mov	r6, r0
 800b56c:	2201      	movs	r2, #1
 800b56e:	2100      	movs	r1, #0
 800b570:	429a      	cmp	r2, r3
 800b572:	db09      	blt.n	800b588 <__s2b+0x30>
 800b574:	4630      	mov	r0, r6
 800b576:	f7ff ff47 	bl	800b408 <_Balloc>
 800b57a:	b940      	cbnz	r0, 800b58e <__s2b+0x36>
 800b57c:	4602      	mov	r2, r0
 800b57e:	21d3      	movs	r1, #211	@ 0xd3
 800b580:	4b18      	ldr	r3, [pc, #96]	@ (800b5e4 <__s2b+0x8c>)
 800b582:	4819      	ldr	r0, [pc, #100]	@ (800b5e8 <__s2b+0x90>)
 800b584:	f001 fc90 	bl	800cea8 <__assert_func>
 800b588:	0052      	lsls	r2, r2, #1
 800b58a:	3101      	adds	r1, #1
 800b58c:	e7f0      	b.n	800b570 <__s2b+0x18>
 800b58e:	9b08      	ldr	r3, [sp, #32]
 800b590:	2d09      	cmp	r5, #9
 800b592:	6143      	str	r3, [r0, #20]
 800b594:	f04f 0301 	mov.w	r3, #1
 800b598:	6103      	str	r3, [r0, #16]
 800b59a:	dd16      	ble.n	800b5ca <__s2b+0x72>
 800b59c:	f104 0909 	add.w	r9, r4, #9
 800b5a0:	46c8      	mov	r8, r9
 800b5a2:	442c      	add	r4, r5
 800b5a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b5a8:	4601      	mov	r1, r0
 800b5aa:	220a      	movs	r2, #10
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	3b30      	subs	r3, #48	@ 0x30
 800b5b0:	f7ff ff8c 	bl	800b4cc <__multadd>
 800b5b4:	45a0      	cmp	r8, r4
 800b5b6:	d1f5      	bne.n	800b5a4 <__s2b+0x4c>
 800b5b8:	f1a5 0408 	sub.w	r4, r5, #8
 800b5bc:	444c      	add	r4, r9
 800b5be:	1b2d      	subs	r5, r5, r4
 800b5c0:	1963      	adds	r3, r4, r5
 800b5c2:	42bb      	cmp	r3, r7
 800b5c4:	db04      	blt.n	800b5d0 <__s2b+0x78>
 800b5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ca:	2509      	movs	r5, #9
 800b5cc:	340a      	adds	r4, #10
 800b5ce:	e7f6      	b.n	800b5be <__s2b+0x66>
 800b5d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b5d4:	4601      	mov	r1, r0
 800b5d6:	220a      	movs	r2, #10
 800b5d8:	4630      	mov	r0, r6
 800b5da:	3b30      	subs	r3, #48	@ 0x30
 800b5dc:	f7ff ff76 	bl	800b4cc <__multadd>
 800b5e0:	e7ee      	b.n	800b5c0 <__s2b+0x68>
 800b5e2:	bf00      	nop
 800b5e4:	08010001 	.word	0x08010001
 800b5e8:	08010012 	.word	0x08010012

0800b5ec <__hi0bits>:
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5f2:	bf3a      	itte	cc
 800b5f4:	0403      	lslcc	r3, r0, #16
 800b5f6:	2010      	movcc	r0, #16
 800b5f8:	2000      	movcs	r0, #0
 800b5fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5fe:	bf3c      	itt	cc
 800b600:	021b      	lslcc	r3, r3, #8
 800b602:	3008      	addcc	r0, #8
 800b604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b608:	bf3c      	itt	cc
 800b60a:	011b      	lslcc	r3, r3, #4
 800b60c:	3004      	addcc	r0, #4
 800b60e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b612:	bf3c      	itt	cc
 800b614:	009b      	lslcc	r3, r3, #2
 800b616:	3002      	addcc	r0, #2
 800b618:	2b00      	cmp	r3, #0
 800b61a:	db05      	blt.n	800b628 <__hi0bits+0x3c>
 800b61c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b620:	f100 0001 	add.w	r0, r0, #1
 800b624:	bf08      	it	eq
 800b626:	2020      	moveq	r0, #32
 800b628:	4770      	bx	lr

0800b62a <__lo0bits>:
 800b62a:	6803      	ldr	r3, [r0, #0]
 800b62c:	4602      	mov	r2, r0
 800b62e:	f013 0007 	ands.w	r0, r3, #7
 800b632:	d00b      	beq.n	800b64c <__lo0bits+0x22>
 800b634:	07d9      	lsls	r1, r3, #31
 800b636:	d421      	bmi.n	800b67c <__lo0bits+0x52>
 800b638:	0798      	lsls	r0, r3, #30
 800b63a:	bf49      	itett	mi
 800b63c:	085b      	lsrmi	r3, r3, #1
 800b63e:	089b      	lsrpl	r3, r3, #2
 800b640:	2001      	movmi	r0, #1
 800b642:	6013      	strmi	r3, [r2, #0]
 800b644:	bf5c      	itt	pl
 800b646:	2002      	movpl	r0, #2
 800b648:	6013      	strpl	r3, [r2, #0]
 800b64a:	4770      	bx	lr
 800b64c:	b299      	uxth	r1, r3
 800b64e:	b909      	cbnz	r1, 800b654 <__lo0bits+0x2a>
 800b650:	2010      	movs	r0, #16
 800b652:	0c1b      	lsrs	r3, r3, #16
 800b654:	b2d9      	uxtb	r1, r3
 800b656:	b909      	cbnz	r1, 800b65c <__lo0bits+0x32>
 800b658:	3008      	adds	r0, #8
 800b65a:	0a1b      	lsrs	r3, r3, #8
 800b65c:	0719      	lsls	r1, r3, #28
 800b65e:	bf04      	itt	eq
 800b660:	091b      	lsreq	r3, r3, #4
 800b662:	3004      	addeq	r0, #4
 800b664:	0799      	lsls	r1, r3, #30
 800b666:	bf04      	itt	eq
 800b668:	089b      	lsreq	r3, r3, #2
 800b66a:	3002      	addeq	r0, #2
 800b66c:	07d9      	lsls	r1, r3, #31
 800b66e:	d403      	bmi.n	800b678 <__lo0bits+0x4e>
 800b670:	085b      	lsrs	r3, r3, #1
 800b672:	f100 0001 	add.w	r0, r0, #1
 800b676:	d003      	beq.n	800b680 <__lo0bits+0x56>
 800b678:	6013      	str	r3, [r2, #0]
 800b67a:	4770      	bx	lr
 800b67c:	2000      	movs	r0, #0
 800b67e:	4770      	bx	lr
 800b680:	2020      	movs	r0, #32
 800b682:	4770      	bx	lr

0800b684 <__i2b>:
 800b684:	b510      	push	{r4, lr}
 800b686:	460c      	mov	r4, r1
 800b688:	2101      	movs	r1, #1
 800b68a:	f7ff febd 	bl	800b408 <_Balloc>
 800b68e:	4602      	mov	r2, r0
 800b690:	b928      	cbnz	r0, 800b69e <__i2b+0x1a>
 800b692:	f240 1145 	movw	r1, #325	@ 0x145
 800b696:	4b04      	ldr	r3, [pc, #16]	@ (800b6a8 <__i2b+0x24>)
 800b698:	4804      	ldr	r0, [pc, #16]	@ (800b6ac <__i2b+0x28>)
 800b69a:	f001 fc05 	bl	800cea8 <__assert_func>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	6144      	str	r4, [r0, #20]
 800b6a2:	6103      	str	r3, [r0, #16]
 800b6a4:	bd10      	pop	{r4, pc}
 800b6a6:	bf00      	nop
 800b6a8:	08010001 	.word	0x08010001
 800b6ac:	08010012 	.word	0x08010012

0800b6b0 <__multiply>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4617      	mov	r7, r2
 800b6b6:	690a      	ldr	r2, [r1, #16]
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	4689      	mov	r9, r1
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	bfa2      	ittt	ge
 800b6c0:	463b      	movge	r3, r7
 800b6c2:	460f      	movge	r7, r1
 800b6c4:	4699      	movge	r9, r3
 800b6c6:	693d      	ldr	r5, [r7, #16]
 800b6c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	6879      	ldr	r1, [r7, #4]
 800b6d0:	eb05 060a 	add.w	r6, r5, sl
 800b6d4:	42b3      	cmp	r3, r6
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	bfb8      	it	lt
 800b6da:	3101      	addlt	r1, #1
 800b6dc:	f7ff fe94 	bl	800b408 <_Balloc>
 800b6e0:	b930      	cbnz	r0, 800b6f0 <__multiply+0x40>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6e8:	4b40      	ldr	r3, [pc, #256]	@ (800b7ec <__multiply+0x13c>)
 800b6ea:	4841      	ldr	r0, [pc, #260]	@ (800b7f0 <__multiply+0x140>)
 800b6ec:	f001 fbdc 	bl	800cea8 <__assert_func>
 800b6f0:	f100 0414 	add.w	r4, r0, #20
 800b6f4:	4623      	mov	r3, r4
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b6fc:	4573      	cmp	r3, lr
 800b6fe:	d320      	bcc.n	800b742 <__multiply+0x92>
 800b700:	f107 0814 	add.w	r8, r7, #20
 800b704:	f109 0114 	add.w	r1, r9, #20
 800b708:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b70c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b710:	9302      	str	r3, [sp, #8]
 800b712:	1beb      	subs	r3, r5, r7
 800b714:	3b15      	subs	r3, #21
 800b716:	f023 0303 	bic.w	r3, r3, #3
 800b71a:	3304      	adds	r3, #4
 800b71c:	3715      	adds	r7, #21
 800b71e:	42bd      	cmp	r5, r7
 800b720:	bf38      	it	cc
 800b722:	2304      	movcc	r3, #4
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	9b02      	ldr	r3, [sp, #8]
 800b728:	9103      	str	r1, [sp, #12]
 800b72a:	428b      	cmp	r3, r1
 800b72c:	d80c      	bhi.n	800b748 <__multiply+0x98>
 800b72e:	2e00      	cmp	r6, #0
 800b730:	dd03      	ble.n	800b73a <__multiply+0x8a>
 800b732:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b736:	2b00      	cmp	r3, #0
 800b738:	d055      	beq.n	800b7e6 <__multiply+0x136>
 800b73a:	6106      	str	r6, [r0, #16]
 800b73c:	b005      	add	sp, #20
 800b73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b742:	f843 2b04 	str.w	r2, [r3], #4
 800b746:	e7d9      	b.n	800b6fc <__multiply+0x4c>
 800b748:	f8b1 a000 	ldrh.w	sl, [r1]
 800b74c:	f1ba 0f00 	cmp.w	sl, #0
 800b750:	d01f      	beq.n	800b792 <__multiply+0xe2>
 800b752:	46c4      	mov	ip, r8
 800b754:	46a1      	mov	r9, r4
 800b756:	2700      	movs	r7, #0
 800b758:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b75c:	f8d9 3000 	ldr.w	r3, [r9]
 800b760:	fa1f fb82 	uxth.w	fp, r2
 800b764:	b29b      	uxth	r3, r3
 800b766:	fb0a 330b 	mla	r3, sl, fp, r3
 800b76a:	443b      	add	r3, r7
 800b76c:	f8d9 7000 	ldr.w	r7, [r9]
 800b770:	0c12      	lsrs	r2, r2, #16
 800b772:	0c3f      	lsrs	r7, r7, #16
 800b774:	fb0a 7202 	mla	r2, sl, r2, r7
 800b778:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b782:	4565      	cmp	r5, ip
 800b784:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b788:	f849 3b04 	str.w	r3, [r9], #4
 800b78c:	d8e4      	bhi.n	800b758 <__multiply+0xa8>
 800b78e:	9b01      	ldr	r3, [sp, #4]
 800b790:	50e7      	str	r7, [r4, r3]
 800b792:	9b03      	ldr	r3, [sp, #12]
 800b794:	3104      	adds	r1, #4
 800b796:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b79a:	f1b9 0f00 	cmp.w	r9, #0
 800b79e:	d020      	beq.n	800b7e2 <__multiply+0x132>
 800b7a0:	4647      	mov	r7, r8
 800b7a2:	46a4      	mov	ip, r4
 800b7a4:	f04f 0a00 	mov.w	sl, #0
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	f8b7 b000 	ldrh.w	fp, [r7]
 800b7ae:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	fb09 220b 	mla	r2, r9, fp, r2
 800b7b8:	4452      	add	r2, sl
 800b7ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7be:	f84c 3b04 	str.w	r3, [ip], #4
 800b7c2:	f857 3b04 	ldr.w	r3, [r7], #4
 800b7c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7ca:	f8bc 3000 	ldrh.w	r3, [ip]
 800b7ce:	42bd      	cmp	r5, r7
 800b7d0:	fb09 330a 	mla	r3, r9, sl, r3
 800b7d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b7d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7dc:	d8e5      	bhi.n	800b7aa <__multiply+0xfa>
 800b7de:	9a01      	ldr	r2, [sp, #4]
 800b7e0:	50a3      	str	r3, [r4, r2]
 800b7e2:	3404      	adds	r4, #4
 800b7e4:	e79f      	b.n	800b726 <__multiply+0x76>
 800b7e6:	3e01      	subs	r6, #1
 800b7e8:	e7a1      	b.n	800b72e <__multiply+0x7e>
 800b7ea:	bf00      	nop
 800b7ec:	08010001 	.word	0x08010001
 800b7f0:	08010012 	.word	0x08010012

0800b7f4 <__pow5mult>:
 800b7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7f8:	4615      	mov	r5, r2
 800b7fa:	f012 0203 	ands.w	r2, r2, #3
 800b7fe:	4607      	mov	r7, r0
 800b800:	460e      	mov	r6, r1
 800b802:	d007      	beq.n	800b814 <__pow5mult+0x20>
 800b804:	4c25      	ldr	r4, [pc, #148]	@ (800b89c <__pow5mult+0xa8>)
 800b806:	3a01      	subs	r2, #1
 800b808:	2300      	movs	r3, #0
 800b80a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b80e:	f7ff fe5d 	bl	800b4cc <__multadd>
 800b812:	4606      	mov	r6, r0
 800b814:	10ad      	asrs	r5, r5, #2
 800b816:	d03d      	beq.n	800b894 <__pow5mult+0xa0>
 800b818:	69fc      	ldr	r4, [r7, #28]
 800b81a:	b97c      	cbnz	r4, 800b83c <__pow5mult+0x48>
 800b81c:	2010      	movs	r0, #16
 800b81e:	f7fd fe1f 	bl	8009460 <malloc>
 800b822:	4602      	mov	r2, r0
 800b824:	61f8      	str	r0, [r7, #28]
 800b826:	b928      	cbnz	r0, 800b834 <__pow5mult+0x40>
 800b828:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b82c:	4b1c      	ldr	r3, [pc, #112]	@ (800b8a0 <__pow5mult+0xac>)
 800b82e:	481d      	ldr	r0, [pc, #116]	@ (800b8a4 <__pow5mult+0xb0>)
 800b830:	f001 fb3a 	bl	800cea8 <__assert_func>
 800b834:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b838:	6004      	str	r4, [r0, #0]
 800b83a:	60c4      	str	r4, [r0, #12]
 800b83c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b840:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b844:	b94c      	cbnz	r4, 800b85a <__pow5mult+0x66>
 800b846:	f240 2171 	movw	r1, #625	@ 0x271
 800b84a:	4638      	mov	r0, r7
 800b84c:	f7ff ff1a 	bl	800b684 <__i2b>
 800b850:	2300      	movs	r3, #0
 800b852:	4604      	mov	r4, r0
 800b854:	f8c8 0008 	str.w	r0, [r8, #8]
 800b858:	6003      	str	r3, [r0, #0]
 800b85a:	f04f 0900 	mov.w	r9, #0
 800b85e:	07eb      	lsls	r3, r5, #31
 800b860:	d50a      	bpl.n	800b878 <__pow5mult+0x84>
 800b862:	4631      	mov	r1, r6
 800b864:	4622      	mov	r2, r4
 800b866:	4638      	mov	r0, r7
 800b868:	f7ff ff22 	bl	800b6b0 <__multiply>
 800b86c:	4680      	mov	r8, r0
 800b86e:	4631      	mov	r1, r6
 800b870:	4638      	mov	r0, r7
 800b872:	f7ff fe09 	bl	800b488 <_Bfree>
 800b876:	4646      	mov	r6, r8
 800b878:	106d      	asrs	r5, r5, #1
 800b87a:	d00b      	beq.n	800b894 <__pow5mult+0xa0>
 800b87c:	6820      	ldr	r0, [r4, #0]
 800b87e:	b938      	cbnz	r0, 800b890 <__pow5mult+0x9c>
 800b880:	4622      	mov	r2, r4
 800b882:	4621      	mov	r1, r4
 800b884:	4638      	mov	r0, r7
 800b886:	f7ff ff13 	bl	800b6b0 <__multiply>
 800b88a:	6020      	str	r0, [r4, #0]
 800b88c:	f8c0 9000 	str.w	r9, [r0]
 800b890:	4604      	mov	r4, r0
 800b892:	e7e4      	b.n	800b85e <__pow5mult+0x6a>
 800b894:	4630      	mov	r0, r6
 800b896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b89a:	bf00      	nop
 800b89c:	08010124 	.word	0x08010124
 800b8a0:	0800ff92 	.word	0x0800ff92
 800b8a4:	08010012 	.word	0x08010012

0800b8a8 <__lshift>:
 800b8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	4607      	mov	r7, r0
 800b8b0:	4691      	mov	r9, r2
 800b8b2:	6923      	ldr	r3, [r4, #16]
 800b8b4:	6849      	ldr	r1, [r1, #4]
 800b8b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8ba:	68a3      	ldr	r3, [r4, #8]
 800b8bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8c0:	f108 0601 	add.w	r6, r8, #1
 800b8c4:	42b3      	cmp	r3, r6
 800b8c6:	db0b      	blt.n	800b8e0 <__lshift+0x38>
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	f7ff fd9d 	bl	800b408 <_Balloc>
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	b948      	cbnz	r0, 800b8e6 <__lshift+0x3e>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b8d8:	4b27      	ldr	r3, [pc, #156]	@ (800b978 <__lshift+0xd0>)
 800b8da:	4828      	ldr	r0, [pc, #160]	@ (800b97c <__lshift+0xd4>)
 800b8dc:	f001 fae4 	bl	800cea8 <__assert_func>
 800b8e0:	3101      	adds	r1, #1
 800b8e2:	005b      	lsls	r3, r3, #1
 800b8e4:	e7ee      	b.n	800b8c4 <__lshift+0x1c>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	f100 0114 	add.w	r1, r0, #20
 800b8ec:	f100 0210 	add.w	r2, r0, #16
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	4553      	cmp	r3, sl
 800b8f4:	db33      	blt.n	800b95e <__lshift+0xb6>
 800b8f6:	6920      	ldr	r0, [r4, #16]
 800b8f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8fc:	f104 0314 	add.w	r3, r4, #20
 800b900:	f019 091f 	ands.w	r9, r9, #31
 800b904:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b908:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b90c:	d02b      	beq.n	800b966 <__lshift+0xbe>
 800b90e:	468a      	mov	sl, r1
 800b910:	2200      	movs	r2, #0
 800b912:	f1c9 0e20 	rsb	lr, r9, #32
 800b916:	6818      	ldr	r0, [r3, #0]
 800b918:	fa00 f009 	lsl.w	r0, r0, r9
 800b91c:	4310      	orrs	r0, r2
 800b91e:	f84a 0b04 	str.w	r0, [sl], #4
 800b922:	f853 2b04 	ldr.w	r2, [r3], #4
 800b926:	459c      	cmp	ip, r3
 800b928:	fa22 f20e 	lsr.w	r2, r2, lr
 800b92c:	d8f3      	bhi.n	800b916 <__lshift+0x6e>
 800b92e:	ebac 0304 	sub.w	r3, ip, r4
 800b932:	3b15      	subs	r3, #21
 800b934:	f023 0303 	bic.w	r3, r3, #3
 800b938:	3304      	adds	r3, #4
 800b93a:	f104 0015 	add.w	r0, r4, #21
 800b93e:	4560      	cmp	r0, ip
 800b940:	bf88      	it	hi
 800b942:	2304      	movhi	r3, #4
 800b944:	50ca      	str	r2, [r1, r3]
 800b946:	b10a      	cbz	r2, 800b94c <__lshift+0xa4>
 800b948:	f108 0602 	add.w	r6, r8, #2
 800b94c:	3e01      	subs	r6, #1
 800b94e:	4638      	mov	r0, r7
 800b950:	4621      	mov	r1, r4
 800b952:	612e      	str	r6, [r5, #16]
 800b954:	f7ff fd98 	bl	800b488 <_Bfree>
 800b958:	4628      	mov	r0, r5
 800b95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b95e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b962:	3301      	adds	r3, #1
 800b964:	e7c5      	b.n	800b8f2 <__lshift+0x4a>
 800b966:	3904      	subs	r1, #4
 800b968:	f853 2b04 	ldr.w	r2, [r3], #4
 800b96c:	459c      	cmp	ip, r3
 800b96e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b972:	d8f9      	bhi.n	800b968 <__lshift+0xc0>
 800b974:	e7ea      	b.n	800b94c <__lshift+0xa4>
 800b976:	bf00      	nop
 800b978:	08010001 	.word	0x08010001
 800b97c:	08010012 	.word	0x08010012

0800b980 <__mcmp>:
 800b980:	4603      	mov	r3, r0
 800b982:	690a      	ldr	r2, [r1, #16]
 800b984:	6900      	ldr	r0, [r0, #16]
 800b986:	b530      	push	{r4, r5, lr}
 800b988:	1a80      	subs	r0, r0, r2
 800b98a:	d10e      	bne.n	800b9aa <__mcmp+0x2a>
 800b98c:	3314      	adds	r3, #20
 800b98e:	3114      	adds	r1, #20
 800b990:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b994:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b998:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b99c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9a0:	4295      	cmp	r5, r2
 800b9a2:	d003      	beq.n	800b9ac <__mcmp+0x2c>
 800b9a4:	d205      	bcs.n	800b9b2 <__mcmp+0x32>
 800b9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9aa:	bd30      	pop	{r4, r5, pc}
 800b9ac:	42a3      	cmp	r3, r4
 800b9ae:	d3f3      	bcc.n	800b998 <__mcmp+0x18>
 800b9b0:	e7fb      	b.n	800b9aa <__mcmp+0x2a>
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	e7f9      	b.n	800b9aa <__mcmp+0x2a>
	...

0800b9b8 <__mdiff>:
 800b9b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	4689      	mov	r9, r1
 800b9be:	4606      	mov	r6, r0
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4648      	mov	r0, r9
 800b9c4:	4614      	mov	r4, r2
 800b9c6:	f7ff ffdb 	bl	800b980 <__mcmp>
 800b9ca:	1e05      	subs	r5, r0, #0
 800b9cc:	d112      	bne.n	800b9f4 <__mdiff+0x3c>
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff fd19 	bl	800b408 <_Balloc>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	b928      	cbnz	r0, 800b9e6 <__mdiff+0x2e>
 800b9da:	f240 2137 	movw	r1, #567	@ 0x237
 800b9de:	4b3e      	ldr	r3, [pc, #248]	@ (800bad8 <__mdiff+0x120>)
 800b9e0:	483e      	ldr	r0, [pc, #248]	@ (800badc <__mdiff+0x124>)
 800b9e2:	f001 fa61 	bl	800cea8 <__assert_func>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	b003      	add	sp, #12
 800b9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f4:	bfbc      	itt	lt
 800b9f6:	464b      	movlt	r3, r9
 800b9f8:	46a1      	movlt	r9, r4
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba00:	bfba      	itte	lt
 800ba02:	461c      	movlt	r4, r3
 800ba04:	2501      	movlt	r5, #1
 800ba06:	2500      	movge	r5, #0
 800ba08:	f7ff fcfe 	bl	800b408 <_Balloc>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	b918      	cbnz	r0, 800ba18 <__mdiff+0x60>
 800ba10:	f240 2145 	movw	r1, #581	@ 0x245
 800ba14:	4b30      	ldr	r3, [pc, #192]	@ (800bad8 <__mdiff+0x120>)
 800ba16:	e7e3      	b.n	800b9e0 <__mdiff+0x28>
 800ba18:	f100 0b14 	add.w	fp, r0, #20
 800ba1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba20:	f109 0310 	add.w	r3, r9, #16
 800ba24:	60c5      	str	r5, [r0, #12]
 800ba26:	f04f 0c00 	mov.w	ip, #0
 800ba2a:	f109 0514 	add.w	r5, r9, #20
 800ba2e:	46d9      	mov	r9, fp
 800ba30:	6926      	ldr	r6, [r4, #16]
 800ba32:	f104 0e14 	add.w	lr, r4, #20
 800ba36:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba3a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba46:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba4a:	b281      	uxth	r1, r0
 800ba4c:	9301      	str	r3, [sp, #4]
 800ba4e:	fa1f f38a 	uxth.w	r3, sl
 800ba52:	1a5b      	subs	r3, r3, r1
 800ba54:	0c00      	lsrs	r0, r0, #16
 800ba56:	4463      	add	r3, ip
 800ba58:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba5c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba66:	4576      	cmp	r6, lr
 800ba68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba6c:	f849 3b04 	str.w	r3, [r9], #4
 800ba70:	d8e6      	bhi.n	800ba40 <__mdiff+0x88>
 800ba72:	1b33      	subs	r3, r6, r4
 800ba74:	3b15      	subs	r3, #21
 800ba76:	f023 0303 	bic.w	r3, r3, #3
 800ba7a:	3415      	adds	r4, #21
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	42a6      	cmp	r6, r4
 800ba80:	bf38      	it	cc
 800ba82:	2304      	movcc	r3, #4
 800ba84:	441d      	add	r5, r3
 800ba86:	445b      	add	r3, fp
 800ba88:	461e      	mov	r6, r3
 800ba8a:	462c      	mov	r4, r5
 800ba8c:	4544      	cmp	r4, r8
 800ba8e:	d30e      	bcc.n	800baae <__mdiff+0xf6>
 800ba90:	f108 0103 	add.w	r1, r8, #3
 800ba94:	1b49      	subs	r1, r1, r5
 800ba96:	f021 0103 	bic.w	r1, r1, #3
 800ba9a:	3d03      	subs	r5, #3
 800ba9c:	45a8      	cmp	r8, r5
 800ba9e:	bf38      	it	cc
 800baa0:	2100      	movcc	r1, #0
 800baa2:	440b      	add	r3, r1
 800baa4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800baa8:	b199      	cbz	r1, 800bad2 <__mdiff+0x11a>
 800baaa:	6117      	str	r7, [r2, #16]
 800baac:	e79e      	b.n	800b9ec <__mdiff+0x34>
 800baae:	46e6      	mov	lr, ip
 800bab0:	f854 1b04 	ldr.w	r1, [r4], #4
 800bab4:	fa1f fc81 	uxth.w	ip, r1
 800bab8:	44f4      	add	ip, lr
 800baba:	0c08      	lsrs	r0, r1, #16
 800babc:	4471      	add	r1, lr
 800babe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bac2:	b289      	uxth	r1, r1
 800bac4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bac8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bacc:	f846 1b04 	str.w	r1, [r6], #4
 800bad0:	e7dc      	b.n	800ba8c <__mdiff+0xd4>
 800bad2:	3f01      	subs	r7, #1
 800bad4:	e7e6      	b.n	800baa4 <__mdiff+0xec>
 800bad6:	bf00      	nop
 800bad8:	08010001 	.word	0x08010001
 800badc:	08010012 	.word	0x08010012

0800bae0 <__ulp>:
 800bae0:	4b0e      	ldr	r3, [pc, #56]	@ (800bb1c <__ulp+0x3c>)
 800bae2:	400b      	ands	r3, r1
 800bae4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dc08      	bgt.n	800bafe <__ulp+0x1e>
 800baec:	425b      	negs	r3, r3
 800baee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800baf2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800baf6:	da04      	bge.n	800bb02 <__ulp+0x22>
 800baf8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bafc:	4113      	asrs	r3, r2
 800bafe:	2200      	movs	r2, #0
 800bb00:	e008      	b.n	800bb14 <__ulp+0x34>
 800bb02:	f1a2 0314 	sub.w	r3, r2, #20
 800bb06:	2b1e      	cmp	r3, #30
 800bb08:	bfd6      	itet	le
 800bb0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bb0e:	2201      	movgt	r2, #1
 800bb10:	40da      	lsrle	r2, r3
 800bb12:	2300      	movs	r3, #0
 800bb14:	4619      	mov	r1, r3
 800bb16:	4610      	mov	r0, r2
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	7ff00000 	.word	0x7ff00000

0800bb20 <__b2d>:
 800bb20:	6902      	ldr	r2, [r0, #16]
 800bb22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb24:	f100 0614 	add.w	r6, r0, #20
 800bb28:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800bb2c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800bb30:	4f1e      	ldr	r7, [pc, #120]	@ (800bbac <__b2d+0x8c>)
 800bb32:	4620      	mov	r0, r4
 800bb34:	f7ff fd5a 	bl	800b5ec <__hi0bits>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	f1c0 0020 	rsb	r0, r0, #32
 800bb3e:	2b0a      	cmp	r3, #10
 800bb40:	f1a2 0504 	sub.w	r5, r2, #4
 800bb44:	6008      	str	r0, [r1, #0]
 800bb46:	dc12      	bgt.n	800bb6e <__b2d+0x4e>
 800bb48:	42ae      	cmp	r6, r5
 800bb4a:	bf2c      	ite	cs
 800bb4c:	2200      	movcs	r2, #0
 800bb4e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bb52:	f1c3 0c0b 	rsb	ip, r3, #11
 800bb56:	3315      	adds	r3, #21
 800bb58:	fa24 fe0c 	lsr.w	lr, r4, ip
 800bb5c:	fa04 f303 	lsl.w	r3, r4, r3
 800bb60:	fa22 f20c 	lsr.w	r2, r2, ip
 800bb64:	ea4e 0107 	orr.w	r1, lr, r7
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb6e:	42ae      	cmp	r6, r5
 800bb70:	bf36      	itet	cc
 800bb72:	f1a2 0508 	subcc.w	r5, r2, #8
 800bb76:	2200      	movcs	r2, #0
 800bb78:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bb7c:	3b0b      	subs	r3, #11
 800bb7e:	d012      	beq.n	800bba6 <__b2d+0x86>
 800bb80:	f1c3 0720 	rsb	r7, r3, #32
 800bb84:	fa22 f107 	lsr.w	r1, r2, r7
 800bb88:	409c      	lsls	r4, r3
 800bb8a:	430c      	orrs	r4, r1
 800bb8c:	42b5      	cmp	r5, r6
 800bb8e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800bb92:	bf94      	ite	ls
 800bb94:	2400      	movls	r4, #0
 800bb96:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800bb9a:	409a      	lsls	r2, r3
 800bb9c:	40fc      	lsrs	r4, r7
 800bb9e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bba2:	4322      	orrs	r2, r4
 800bba4:	e7e1      	b.n	800bb6a <__b2d+0x4a>
 800bba6:	ea44 0107 	orr.w	r1, r4, r7
 800bbaa:	e7de      	b.n	800bb6a <__b2d+0x4a>
 800bbac:	3ff00000 	.word	0x3ff00000

0800bbb0 <__d2b>:
 800bbb0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	4690      	mov	r8, r2
 800bbb8:	4699      	mov	r9, r3
 800bbba:	9e08      	ldr	r6, [sp, #32]
 800bbbc:	f7ff fc24 	bl	800b408 <_Balloc>
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	b930      	cbnz	r0, 800bbd2 <__d2b+0x22>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	f240 310f 	movw	r1, #783	@ 0x30f
 800bbca:	4b23      	ldr	r3, [pc, #140]	@ (800bc58 <__d2b+0xa8>)
 800bbcc:	4823      	ldr	r0, [pc, #140]	@ (800bc5c <__d2b+0xac>)
 800bbce:	f001 f96b 	bl	800cea8 <__assert_func>
 800bbd2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbda:	b10d      	cbz	r5, 800bbe0 <__d2b+0x30>
 800bbdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	f1b8 0300 	subs.w	r3, r8, #0
 800bbe6:	d024      	beq.n	800bc32 <__d2b+0x82>
 800bbe8:	4668      	mov	r0, sp
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	f7ff fd1d 	bl	800b62a <__lo0bits>
 800bbf0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbf4:	b1d8      	cbz	r0, 800bc2e <__d2b+0x7e>
 800bbf6:	f1c0 0320 	rsb	r3, r0, #32
 800bbfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bbfe:	430b      	orrs	r3, r1
 800bc00:	40c2      	lsrs	r2, r0
 800bc02:	6163      	str	r3, [r4, #20]
 800bc04:	9201      	str	r2, [sp, #4]
 800bc06:	9b01      	ldr	r3, [sp, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bf0c      	ite	eq
 800bc0c:	2201      	moveq	r2, #1
 800bc0e:	2202      	movne	r2, #2
 800bc10:	61a3      	str	r3, [r4, #24]
 800bc12:	6122      	str	r2, [r4, #16]
 800bc14:	b1ad      	cbz	r5, 800bc42 <__d2b+0x92>
 800bc16:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc1a:	4405      	add	r5, r0
 800bc1c:	6035      	str	r5, [r6, #0]
 800bc1e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc24:	6018      	str	r0, [r3, #0]
 800bc26:	4620      	mov	r0, r4
 800bc28:	b002      	add	sp, #8
 800bc2a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bc2e:	6161      	str	r1, [r4, #20]
 800bc30:	e7e9      	b.n	800bc06 <__d2b+0x56>
 800bc32:	a801      	add	r0, sp, #4
 800bc34:	f7ff fcf9 	bl	800b62a <__lo0bits>
 800bc38:	9b01      	ldr	r3, [sp, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	6163      	str	r3, [r4, #20]
 800bc3e:	3020      	adds	r0, #32
 800bc40:	e7e7      	b.n	800bc12 <__d2b+0x62>
 800bc42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc4a:	6030      	str	r0, [r6, #0]
 800bc4c:	6918      	ldr	r0, [r3, #16]
 800bc4e:	f7ff fccd 	bl	800b5ec <__hi0bits>
 800bc52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc56:	e7e4      	b.n	800bc22 <__d2b+0x72>
 800bc58:	08010001 	.word	0x08010001
 800bc5c:	08010012 	.word	0x08010012

0800bc60 <__ratio>:
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	b085      	sub	sp, #20
 800bc66:	e9cd 1000 	strd	r1, r0, [sp]
 800bc6a:	a902      	add	r1, sp, #8
 800bc6c:	f7ff ff58 	bl	800bb20 <__b2d>
 800bc70:	468b      	mov	fp, r1
 800bc72:	4606      	mov	r6, r0
 800bc74:	460f      	mov	r7, r1
 800bc76:	9800      	ldr	r0, [sp, #0]
 800bc78:	a903      	add	r1, sp, #12
 800bc7a:	f7ff ff51 	bl	800bb20 <__b2d>
 800bc7e:	460d      	mov	r5, r1
 800bc80:	9b01      	ldr	r3, [sp, #4]
 800bc82:	4689      	mov	r9, r1
 800bc84:	6919      	ldr	r1, [r3, #16]
 800bc86:	9b00      	ldr	r3, [sp, #0]
 800bc88:	4604      	mov	r4, r0
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	1ac9      	subs	r1, r1, r3
 800bc90:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bc94:	1a9b      	subs	r3, r3, r2
 800bc96:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	bfcd      	iteet	gt
 800bc9e:	463a      	movgt	r2, r7
 800bca0:	462a      	movle	r2, r5
 800bca2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bca6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bcaa:	bfd8      	it	le
 800bcac:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bcb0:	464b      	mov	r3, r9
 800bcb2:	4622      	mov	r2, r4
 800bcb4:	4659      	mov	r1, fp
 800bcb6:	f7f4 fd39 	bl	800072c <__aeabi_ddiv>
 800bcba:	b005      	add	sp, #20
 800bcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcc0 <__copybits>:
 800bcc0:	3901      	subs	r1, #1
 800bcc2:	b570      	push	{r4, r5, r6, lr}
 800bcc4:	1149      	asrs	r1, r1, #5
 800bcc6:	6914      	ldr	r4, [r2, #16]
 800bcc8:	3101      	adds	r1, #1
 800bcca:	f102 0314 	add.w	r3, r2, #20
 800bcce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bcd2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bcd6:	1f05      	subs	r5, r0, #4
 800bcd8:	42a3      	cmp	r3, r4
 800bcda:	d30c      	bcc.n	800bcf6 <__copybits+0x36>
 800bcdc:	1aa3      	subs	r3, r4, r2
 800bcde:	3b11      	subs	r3, #17
 800bce0:	f023 0303 	bic.w	r3, r3, #3
 800bce4:	3211      	adds	r2, #17
 800bce6:	42a2      	cmp	r2, r4
 800bce8:	bf88      	it	hi
 800bcea:	2300      	movhi	r3, #0
 800bcec:	4418      	add	r0, r3
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4288      	cmp	r0, r1
 800bcf2:	d305      	bcc.n	800bd00 <__copybits+0x40>
 800bcf4:	bd70      	pop	{r4, r5, r6, pc}
 800bcf6:	f853 6b04 	ldr.w	r6, [r3], #4
 800bcfa:	f845 6f04 	str.w	r6, [r5, #4]!
 800bcfe:	e7eb      	b.n	800bcd8 <__copybits+0x18>
 800bd00:	f840 3b04 	str.w	r3, [r0], #4
 800bd04:	e7f4      	b.n	800bcf0 <__copybits+0x30>

0800bd06 <__any_on>:
 800bd06:	f100 0214 	add.w	r2, r0, #20
 800bd0a:	6900      	ldr	r0, [r0, #16]
 800bd0c:	114b      	asrs	r3, r1, #5
 800bd0e:	4298      	cmp	r0, r3
 800bd10:	b510      	push	{r4, lr}
 800bd12:	db11      	blt.n	800bd38 <__any_on+0x32>
 800bd14:	dd0a      	ble.n	800bd2c <__any_on+0x26>
 800bd16:	f011 011f 	ands.w	r1, r1, #31
 800bd1a:	d007      	beq.n	800bd2c <__any_on+0x26>
 800bd1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd20:	fa24 f001 	lsr.w	r0, r4, r1
 800bd24:	fa00 f101 	lsl.w	r1, r0, r1
 800bd28:	428c      	cmp	r4, r1
 800bd2a:	d10b      	bne.n	800bd44 <__any_on+0x3e>
 800bd2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d803      	bhi.n	800bd3c <__any_on+0x36>
 800bd34:	2000      	movs	r0, #0
 800bd36:	bd10      	pop	{r4, pc}
 800bd38:	4603      	mov	r3, r0
 800bd3a:	e7f7      	b.n	800bd2c <__any_on+0x26>
 800bd3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd40:	2900      	cmp	r1, #0
 800bd42:	d0f5      	beq.n	800bd30 <__any_on+0x2a>
 800bd44:	2001      	movs	r0, #1
 800bd46:	e7f6      	b.n	800bd36 <__any_on+0x30>

0800bd48 <sulp>:
 800bd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	4690      	mov	r8, r2
 800bd50:	f7ff fec6 	bl	800bae0 <__ulp>
 800bd54:	4604      	mov	r4, r0
 800bd56:	460d      	mov	r5, r1
 800bd58:	f1b8 0f00 	cmp.w	r8, #0
 800bd5c:	d011      	beq.n	800bd82 <sulp+0x3a>
 800bd5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800bd62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	dd0b      	ble.n	800bd82 <sulp+0x3a>
 800bd6a:	2400      	movs	r4, #0
 800bd6c:	051b      	lsls	r3, r3, #20
 800bd6e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bd72:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bd76:	4622      	mov	r2, r4
 800bd78:	462b      	mov	r3, r5
 800bd7a:	f7f4 fbad 	bl	80004d8 <__aeabi_dmul>
 800bd7e:	4604      	mov	r4, r0
 800bd80:	460d      	mov	r5, r1
 800bd82:	4620      	mov	r0, r4
 800bd84:	4629      	mov	r1, r5
 800bd86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd8a:	0000      	movs	r0, r0
 800bd8c:	0000      	movs	r0, r0
	...

0800bd90 <_strtod_l>:
 800bd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	b09f      	sub	sp, #124	@ 0x7c
 800bd96:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bd98:	2200      	movs	r2, #0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	921a      	str	r2, [sp, #104]	@ 0x68
 800bd9e:	f04f 0a00 	mov.w	sl, #0
 800bda2:	f04f 0b00 	mov.w	fp, #0
 800bda6:	460a      	mov	r2, r1
 800bda8:	9005      	str	r0, [sp, #20]
 800bdaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800bdac:	7811      	ldrb	r1, [r2, #0]
 800bdae:	292b      	cmp	r1, #43	@ 0x2b
 800bdb0:	d048      	beq.n	800be44 <_strtod_l+0xb4>
 800bdb2:	d836      	bhi.n	800be22 <_strtod_l+0x92>
 800bdb4:	290d      	cmp	r1, #13
 800bdb6:	d830      	bhi.n	800be1a <_strtod_l+0x8a>
 800bdb8:	2908      	cmp	r1, #8
 800bdba:	d830      	bhi.n	800be1e <_strtod_l+0x8e>
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	d039      	beq.n	800be34 <_strtod_l+0xa4>
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800bdc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bdc6:	782a      	ldrb	r2, [r5, #0]
 800bdc8:	2a30      	cmp	r2, #48	@ 0x30
 800bdca:	f040 80b0 	bne.w	800bf2e <_strtod_l+0x19e>
 800bdce:	786a      	ldrb	r2, [r5, #1]
 800bdd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bdd4:	2a58      	cmp	r2, #88	@ 0x58
 800bdd6:	d16c      	bne.n	800beb2 <_strtod_l+0x122>
 800bdd8:	9302      	str	r3, [sp, #8]
 800bdda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bddc:	4a8f      	ldr	r2, [pc, #572]	@ (800c01c <_strtod_l+0x28c>)
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	ab1a      	add	r3, sp, #104	@ 0x68
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	9805      	ldr	r0, [sp, #20]
 800bde6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bde8:	a919      	add	r1, sp, #100	@ 0x64
 800bdea:	f001 f8f7 	bl	800cfdc <__gethex>
 800bdee:	f010 060f 	ands.w	r6, r0, #15
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	d005      	beq.n	800be02 <_strtod_l+0x72>
 800bdf6:	2e06      	cmp	r6, #6
 800bdf8:	d126      	bne.n	800be48 <_strtod_l+0xb8>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	3501      	adds	r5, #1
 800bdfe:	9519      	str	r5, [sp, #100]	@ 0x64
 800be00:	930e      	str	r3, [sp, #56]	@ 0x38
 800be02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be04:	2b00      	cmp	r3, #0
 800be06:	f040 8582 	bne.w	800c90e <_strtod_l+0xb7e>
 800be0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be0c:	b1bb      	cbz	r3, 800be3e <_strtod_l+0xae>
 800be0e:	4650      	mov	r0, sl
 800be10:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800be14:	b01f      	add	sp, #124	@ 0x7c
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1a:	2920      	cmp	r1, #32
 800be1c:	d1d0      	bne.n	800bdc0 <_strtod_l+0x30>
 800be1e:	3201      	adds	r2, #1
 800be20:	e7c3      	b.n	800bdaa <_strtod_l+0x1a>
 800be22:	292d      	cmp	r1, #45	@ 0x2d
 800be24:	d1cc      	bne.n	800bdc0 <_strtod_l+0x30>
 800be26:	2101      	movs	r1, #1
 800be28:	910e      	str	r1, [sp, #56]	@ 0x38
 800be2a:	1c51      	adds	r1, r2, #1
 800be2c:	9119      	str	r1, [sp, #100]	@ 0x64
 800be2e:	7852      	ldrb	r2, [r2, #1]
 800be30:	2a00      	cmp	r2, #0
 800be32:	d1c7      	bne.n	800bdc4 <_strtod_l+0x34>
 800be34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be36:	9419      	str	r4, [sp, #100]	@ 0x64
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f040 8566 	bne.w	800c90a <_strtod_l+0xb7a>
 800be3e:	4650      	mov	r0, sl
 800be40:	4659      	mov	r1, fp
 800be42:	e7e7      	b.n	800be14 <_strtod_l+0x84>
 800be44:	2100      	movs	r1, #0
 800be46:	e7ef      	b.n	800be28 <_strtod_l+0x98>
 800be48:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be4a:	b13a      	cbz	r2, 800be5c <_strtod_l+0xcc>
 800be4c:	2135      	movs	r1, #53	@ 0x35
 800be4e:	a81c      	add	r0, sp, #112	@ 0x70
 800be50:	f7ff ff36 	bl	800bcc0 <__copybits>
 800be54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be56:	9805      	ldr	r0, [sp, #20]
 800be58:	f7ff fb16 	bl	800b488 <_Bfree>
 800be5c:	3e01      	subs	r6, #1
 800be5e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800be60:	2e04      	cmp	r6, #4
 800be62:	d806      	bhi.n	800be72 <_strtod_l+0xe2>
 800be64:	e8df f006 	tbb	[pc, r6]
 800be68:	201d0314 	.word	0x201d0314
 800be6c:	14          	.byte	0x14
 800be6d:	00          	.byte	0x00
 800be6e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800be72:	05e1      	lsls	r1, r4, #23
 800be74:	bf48      	it	mi
 800be76:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800be7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be7e:	0d1b      	lsrs	r3, r3, #20
 800be80:	051b      	lsls	r3, r3, #20
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1bd      	bne.n	800be02 <_strtod_l+0x72>
 800be86:	f7fe fbcd 	bl	800a624 <__errno>
 800be8a:	2322      	movs	r3, #34	@ 0x22
 800be8c:	6003      	str	r3, [r0, #0]
 800be8e:	e7b8      	b.n	800be02 <_strtod_l+0x72>
 800be90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800be94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800be98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800be9c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bea0:	e7e7      	b.n	800be72 <_strtod_l+0xe2>
 800bea2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c020 <_strtod_l+0x290>
 800bea6:	e7e4      	b.n	800be72 <_strtod_l+0xe2>
 800bea8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800beac:	f04f 3aff 	mov.w	sl, #4294967295
 800beb0:	e7df      	b.n	800be72 <_strtod_l+0xe2>
 800beb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800beb4:	1c5a      	adds	r2, r3, #1
 800beb6:	9219      	str	r2, [sp, #100]	@ 0x64
 800beb8:	785b      	ldrb	r3, [r3, #1]
 800beba:	2b30      	cmp	r3, #48	@ 0x30
 800bebc:	d0f9      	beq.n	800beb2 <_strtod_l+0x122>
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d09f      	beq.n	800be02 <_strtod_l+0x72>
 800bec2:	2301      	movs	r3, #1
 800bec4:	2700      	movs	r7, #0
 800bec6:	220a      	movs	r2, #10
 800bec8:	46b9      	mov	r9, r7
 800beca:	9308      	str	r3, [sp, #32]
 800becc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bece:	970b      	str	r7, [sp, #44]	@ 0x2c
 800bed0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bed2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bed4:	7805      	ldrb	r5, [r0, #0]
 800bed6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800beda:	b2d9      	uxtb	r1, r3
 800bedc:	2909      	cmp	r1, #9
 800bede:	d928      	bls.n	800bf32 <_strtod_l+0x1a2>
 800bee0:	2201      	movs	r2, #1
 800bee2:	4950      	ldr	r1, [pc, #320]	@ (800c024 <_strtod_l+0x294>)
 800bee4:	f000 ffc8 	bl	800ce78 <strncmp>
 800bee8:	2800      	cmp	r0, #0
 800beea:	d032      	beq.n	800bf52 <_strtod_l+0x1c2>
 800beec:	2000      	movs	r0, #0
 800beee:	462a      	mov	r2, r5
 800bef0:	4603      	mov	r3, r0
 800bef2:	464d      	mov	r5, r9
 800bef4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bef6:	2a65      	cmp	r2, #101	@ 0x65
 800bef8:	d001      	beq.n	800befe <_strtod_l+0x16e>
 800befa:	2a45      	cmp	r2, #69	@ 0x45
 800befc:	d114      	bne.n	800bf28 <_strtod_l+0x198>
 800befe:	b91d      	cbnz	r5, 800bf08 <_strtod_l+0x178>
 800bf00:	9a08      	ldr	r2, [sp, #32]
 800bf02:	4302      	orrs	r2, r0
 800bf04:	d096      	beq.n	800be34 <_strtod_l+0xa4>
 800bf06:	2500      	movs	r5, #0
 800bf08:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bf0a:	1c62      	adds	r2, r4, #1
 800bf0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf0e:	7862      	ldrb	r2, [r4, #1]
 800bf10:	2a2b      	cmp	r2, #43	@ 0x2b
 800bf12:	d07a      	beq.n	800c00a <_strtod_l+0x27a>
 800bf14:	2a2d      	cmp	r2, #45	@ 0x2d
 800bf16:	d07e      	beq.n	800c016 <_strtod_l+0x286>
 800bf18:	f04f 0c00 	mov.w	ip, #0
 800bf1c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bf20:	2909      	cmp	r1, #9
 800bf22:	f240 8085 	bls.w	800c030 <_strtod_l+0x2a0>
 800bf26:	9419      	str	r4, [sp, #100]	@ 0x64
 800bf28:	f04f 0800 	mov.w	r8, #0
 800bf2c:	e0a5      	b.n	800c07a <_strtod_l+0x2ea>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	e7c8      	b.n	800bec4 <_strtod_l+0x134>
 800bf32:	f1b9 0f08 	cmp.w	r9, #8
 800bf36:	bfd8      	it	le
 800bf38:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800bf3a:	f100 0001 	add.w	r0, r0, #1
 800bf3e:	bfd6      	itet	le
 800bf40:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf44:	fb02 3707 	mlagt	r7, r2, r7, r3
 800bf48:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800bf4a:	f109 0901 	add.w	r9, r9, #1
 800bf4e:	9019      	str	r0, [sp, #100]	@ 0x64
 800bf50:	e7bf      	b.n	800bed2 <_strtod_l+0x142>
 800bf52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf54:	1c5a      	adds	r2, r3, #1
 800bf56:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf58:	785a      	ldrb	r2, [r3, #1]
 800bf5a:	f1b9 0f00 	cmp.w	r9, #0
 800bf5e:	d03b      	beq.n	800bfd8 <_strtod_l+0x248>
 800bf60:	464d      	mov	r5, r9
 800bf62:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf64:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bf68:	2b09      	cmp	r3, #9
 800bf6a:	d912      	bls.n	800bf92 <_strtod_l+0x202>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e7c2      	b.n	800bef6 <_strtod_l+0x166>
 800bf70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf72:	3001      	adds	r0, #1
 800bf74:	1c5a      	adds	r2, r3, #1
 800bf76:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf78:	785a      	ldrb	r2, [r3, #1]
 800bf7a:	2a30      	cmp	r2, #48	@ 0x30
 800bf7c:	d0f8      	beq.n	800bf70 <_strtod_l+0x1e0>
 800bf7e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bf82:	2b08      	cmp	r3, #8
 800bf84:	f200 84c8 	bhi.w	800c918 <_strtod_l+0xb88>
 800bf88:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf90:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf92:	3a30      	subs	r2, #48	@ 0x30
 800bf94:	f100 0301 	add.w	r3, r0, #1
 800bf98:	d018      	beq.n	800bfcc <_strtod_l+0x23c>
 800bf9a:	462e      	mov	r6, r5
 800bf9c:	f04f 0e0a 	mov.w	lr, #10
 800bfa0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bfa2:	4419      	add	r1, r3
 800bfa4:	910a      	str	r1, [sp, #40]	@ 0x28
 800bfa6:	1c71      	adds	r1, r6, #1
 800bfa8:	eba1 0c05 	sub.w	ip, r1, r5
 800bfac:	4563      	cmp	r3, ip
 800bfae:	dc15      	bgt.n	800bfdc <_strtod_l+0x24c>
 800bfb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800bfb4:	182b      	adds	r3, r5, r0
 800bfb6:	2b08      	cmp	r3, #8
 800bfb8:	f105 0501 	add.w	r5, r5, #1
 800bfbc:	4405      	add	r5, r0
 800bfbe:	dc1a      	bgt.n	800bff6 <_strtod_l+0x266>
 800bfc0:	230a      	movs	r3, #10
 800bfc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfc4:	fb03 2301 	mla	r3, r3, r1, r2
 800bfc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfce:	4618      	mov	r0, r3
 800bfd0:	1c51      	adds	r1, r2, #1
 800bfd2:	9119      	str	r1, [sp, #100]	@ 0x64
 800bfd4:	7852      	ldrb	r2, [r2, #1]
 800bfd6:	e7c5      	b.n	800bf64 <_strtod_l+0x1d4>
 800bfd8:	4648      	mov	r0, r9
 800bfda:	e7ce      	b.n	800bf7a <_strtod_l+0x1ea>
 800bfdc:	2e08      	cmp	r6, #8
 800bfde:	dc05      	bgt.n	800bfec <_strtod_l+0x25c>
 800bfe0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bfe2:	fb0e f606 	mul.w	r6, lr, r6
 800bfe6:	960b      	str	r6, [sp, #44]	@ 0x2c
 800bfe8:	460e      	mov	r6, r1
 800bfea:	e7dc      	b.n	800bfa6 <_strtod_l+0x216>
 800bfec:	2910      	cmp	r1, #16
 800bfee:	bfd8      	it	le
 800bff0:	fb0e f707 	mulle.w	r7, lr, r7
 800bff4:	e7f8      	b.n	800bfe8 <_strtod_l+0x258>
 800bff6:	2b0f      	cmp	r3, #15
 800bff8:	bfdc      	itt	le
 800bffa:	230a      	movle	r3, #10
 800bffc:	fb03 2707 	mlale	r7, r3, r7, r2
 800c000:	e7e3      	b.n	800bfca <_strtod_l+0x23a>
 800c002:	2300      	movs	r3, #0
 800c004:	930a      	str	r3, [sp, #40]	@ 0x28
 800c006:	2301      	movs	r3, #1
 800c008:	e77a      	b.n	800bf00 <_strtod_l+0x170>
 800c00a:	f04f 0c00 	mov.w	ip, #0
 800c00e:	1ca2      	adds	r2, r4, #2
 800c010:	9219      	str	r2, [sp, #100]	@ 0x64
 800c012:	78a2      	ldrb	r2, [r4, #2]
 800c014:	e782      	b.n	800bf1c <_strtod_l+0x18c>
 800c016:	f04f 0c01 	mov.w	ip, #1
 800c01a:	e7f8      	b.n	800c00e <_strtod_l+0x27e>
 800c01c:	08010234 	.word	0x08010234
 800c020:	7ff00000 	.word	0x7ff00000
 800c024:	0801006b 	.word	0x0801006b
 800c028:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c02a:	1c51      	adds	r1, r2, #1
 800c02c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c02e:	7852      	ldrb	r2, [r2, #1]
 800c030:	2a30      	cmp	r2, #48	@ 0x30
 800c032:	d0f9      	beq.n	800c028 <_strtod_l+0x298>
 800c034:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c038:	2908      	cmp	r1, #8
 800c03a:	f63f af75 	bhi.w	800bf28 <_strtod_l+0x198>
 800c03e:	f04f 080a 	mov.w	r8, #10
 800c042:	3a30      	subs	r2, #48	@ 0x30
 800c044:	9209      	str	r2, [sp, #36]	@ 0x24
 800c046:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c048:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c04a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c04c:	1c56      	adds	r6, r2, #1
 800c04e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c050:	7852      	ldrb	r2, [r2, #1]
 800c052:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c056:	f1be 0f09 	cmp.w	lr, #9
 800c05a:	d939      	bls.n	800c0d0 <_strtod_l+0x340>
 800c05c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c05e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c062:	1a76      	subs	r6, r6, r1
 800c064:	2e08      	cmp	r6, #8
 800c066:	dc03      	bgt.n	800c070 <_strtod_l+0x2e0>
 800c068:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c06a:	4588      	cmp	r8, r1
 800c06c:	bfa8      	it	ge
 800c06e:	4688      	movge	r8, r1
 800c070:	f1bc 0f00 	cmp.w	ip, #0
 800c074:	d001      	beq.n	800c07a <_strtod_l+0x2ea>
 800c076:	f1c8 0800 	rsb	r8, r8, #0
 800c07a:	2d00      	cmp	r5, #0
 800c07c:	d14e      	bne.n	800c11c <_strtod_l+0x38c>
 800c07e:	9908      	ldr	r1, [sp, #32]
 800c080:	4308      	orrs	r0, r1
 800c082:	f47f aebe 	bne.w	800be02 <_strtod_l+0x72>
 800c086:	2b00      	cmp	r3, #0
 800c088:	f47f aed4 	bne.w	800be34 <_strtod_l+0xa4>
 800c08c:	2a69      	cmp	r2, #105	@ 0x69
 800c08e:	d028      	beq.n	800c0e2 <_strtod_l+0x352>
 800c090:	dc25      	bgt.n	800c0de <_strtod_l+0x34e>
 800c092:	2a49      	cmp	r2, #73	@ 0x49
 800c094:	d025      	beq.n	800c0e2 <_strtod_l+0x352>
 800c096:	2a4e      	cmp	r2, #78	@ 0x4e
 800c098:	f47f aecc 	bne.w	800be34 <_strtod_l+0xa4>
 800c09c:	4999      	ldr	r1, [pc, #612]	@ (800c304 <_strtod_l+0x574>)
 800c09e:	a819      	add	r0, sp, #100	@ 0x64
 800c0a0:	f001 f9be 	bl	800d420 <__match>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	f43f aec5 	beq.w	800be34 <_strtod_l+0xa4>
 800c0aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	2b28      	cmp	r3, #40	@ 0x28
 800c0b0:	d12e      	bne.n	800c110 <_strtod_l+0x380>
 800c0b2:	4995      	ldr	r1, [pc, #596]	@ (800c308 <_strtod_l+0x578>)
 800c0b4:	aa1c      	add	r2, sp, #112	@ 0x70
 800c0b6:	a819      	add	r0, sp, #100	@ 0x64
 800c0b8:	f001 f9c6 	bl	800d448 <__hexnan>
 800c0bc:	2805      	cmp	r0, #5
 800c0be:	d127      	bne.n	800c110 <_strtod_l+0x380>
 800c0c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c0c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c0c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c0ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c0ce:	e698      	b.n	800be02 <_strtod_l+0x72>
 800c0d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0d2:	fb08 2101 	mla	r1, r8, r1, r2
 800c0d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c0da:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0dc:	e7b5      	b.n	800c04a <_strtod_l+0x2ba>
 800c0de:	2a6e      	cmp	r2, #110	@ 0x6e
 800c0e0:	e7da      	b.n	800c098 <_strtod_l+0x308>
 800c0e2:	498a      	ldr	r1, [pc, #552]	@ (800c30c <_strtod_l+0x57c>)
 800c0e4:	a819      	add	r0, sp, #100	@ 0x64
 800c0e6:	f001 f99b 	bl	800d420 <__match>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	f43f aea2 	beq.w	800be34 <_strtod_l+0xa4>
 800c0f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0f2:	4987      	ldr	r1, [pc, #540]	@ (800c310 <_strtod_l+0x580>)
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	a819      	add	r0, sp, #100	@ 0x64
 800c0f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c0fa:	f001 f991 	bl	800d420 <__match>
 800c0fe:	b910      	cbnz	r0, 800c106 <_strtod_l+0x376>
 800c100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c102:	3301      	adds	r3, #1
 800c104:	9319      	str	r3, [sp, #100]	@ 0x64
 800c106:	f04f 0a00 	mov.w	sl, #0
 800c10a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800c314 <_strtod_l+0x584>
 800c10e:	e678      	b.n	800be02 <_strtod_l+0x72>
 800c110:	4881      	ldr	r0, [pc, #516]	@ (800c318 <_strtod_l+0x588>)
 800c112:	f000 fec3 	bl	800ce9c <nan>
 800c116:	4682      	mov	sl, r0
 800c118:	468b      	mov	fp, r1
 800c11a:	e672      	b.n	800be02 <_strtod_l+0x72>
 800c11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c11e:	f1b9 0f00 	cmp.w	r9, #0
 800c122:	bf08      	it	eq
 800c124:	46a9      	moveq	r9, r5
 800c126:	eba8 0303 	sub.w	r3, r8, r3
 800c12a:	2d10      	cmp	r5, #16
 800c12c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c12e:	462c      	mov	r4, r5
 800c130:	9309      	str	r3, [sp, #36]	@ 0x24
 800c132:	bfa8      	it	ge
 800c134:	2410      	movge	r4, #16
 800c136:	f7f4 f955 	bl	80003e4 <__aeabi_ui2d>
 800c13a:	2d09      	cmp	r5, #9
 800c13c:	4682      	mov	sl, r0
 800c13e:	468b      	mov	fp, r1
 800c140:	dc11      	bgt.n	800c166 <_strtod_l+0x3d6>
 800c142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c144:	2b00      	cmp	r3, #0
 800c146:	f43f ae5c 	beq.w	800be02 <_strtod_l+0x72>
 800c14a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c14c:	dd76      	ble.n	800c23c <_strtod_l+0x4ac>
 800c14e:	2b16      	cmp	r3, #22
 800c150:	dc5d      	bgt.n	800c20e <_strtod_l+0x47e>
 800c152:	4972      	ldr	r1, [pc, #456]	@ (800c31c <_strtod_l+0x58c>)
 800c154:	4652      	mov	r2, sl
 800c156:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c15a:	465b      	mov	r3, fp
 800c15c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c160:	f7f4 f9ba 	bl	80004d8 <__aeabi_dmul>
 800c164:	e7d7      	b.n	800c116 <_strtod_l+0x386>
 800c166:	4b6d      	ldr	r3, [pc, #436]	@ (800c31c <_strtod_l+0x58c>)
 800c168:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c16c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c170:	f7f4 f9b2 	bl	80004d8 <__aeabi_dmul>
 800c174:	4682      	mov	sl, r0
 800c176:	4638      	mov	r0, r7
 800c178:	468b      	mov	fp, r1
 800c17a:	f7f4 f933 	bl	80003e4 <__aeabi_ui2d>
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	4650      	mov	r0, sl
 800c184:	4659      	mov	r1, fp
 800c186:	f7f3 fff1 	bl	800016c <__adddf3>
 800c18a:	2d0f      	cmp	r5, #15
 800c18c:	4682      	mov	sl, r0
 800c18e:	468b      	mov	fp, r1
 800c190:	ddd7      	ble.n	800c142 <_strtod_l+0x3b2>
 800c192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c194:	1b2c      	subs	r4, r5, r4
 800c196:	441c      	add	r4, r3
 800c198:	2c00      	cmp	r4, #0
 800c19a:	f340 8093 	ble.w	800c2c4 <_strtod_l+0x534>
 800c19e:	f014 030f 	ands.w	r3, r4, #15
 800c1a2:	d00a      	beq.n	800c1ba <_strtod_l+0x42a>
 800c1a4:	495d      	ldr	r1, [pc, #372]	@ (800c31c <_strtod_l+0x58c>)
 800c1a6:	4652      	mov	r2, sl
 800c1a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1b0:	465b      	mov	r3, fp
 800c1b2:	f7f4 f991 	bl	80004d8 <__aeabi_dmul>
 800c1b6:	4682      	mov	sl, r0
 800c1b8:	468b      	mov	fp, r1
 800c1ba:	f034 040f 	bics.w	r4, r4, #15
 800c1be:	d073      	beq.n	800c2a8 <_strtod_l+0x518>
 800c1c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c1c4:	dd49      	ble.n	800c25a <_strtod_l+0x4ca>
 800c1c6:	2400      	movs	r4, #0
 800c1c8:	46a0      	mov	r8, r4
 800c1ca:	46a1      	mov	r9, r4
 800c1cc:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c1ce:	2322      	movs	r3, #34	@ 0x22
 800c1d0:	f04f 0a00 	mov.w	sl, #0
 800c1d4:	9a05      	ldr	r2, [sp, #20]
 800c1d6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800c314 <_strtod_l+0x584>
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f43f ae0f 	beq.w	800be02 <_strtod_l+0x72>
 800c1e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1e6:	9805      	ldr	r0, [sp, #20]
 800c1e8:	f7ff f94e 	bl	800b488 <_Bfree>
 800c1ec:	4649      	mov	r1, r9
 800c1ee:	9805      	ldr	r0, [sp, #20]
 800c1f0:	f7ff f94a 	bl	800b488 <_Bfree>
 800c1f4:	4641      	mov	r1, r8
 800c1f6:	9805      	ldr	r0, [sp, #20]
 800c1f8:	f7ff f946 	bl	800b488 <_Bfree>
 800c1fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1fe:	9805      	ldr	r0, [sp, #20]
 800c200:	f7ff f942 	bl	800b488 <_Bfree>
 800c204:	4621      	mov	r1, r4
 800c206:	9805      	ldr	r0, [sp, #20]
 800c208:	f7ff f93e 	bl	800b488 <_Bfree>
 800c20c:	e5f9      	b.n	800be02 <_strtod_l+0x72>
 800c20e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c210:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c214:	4293      	cmp	r3, r2
 800c216:	dbbc      	blt.n	800c192 <_strtod_l+0x402>
 800c218:	4c40      	ldr	r4, [pc, #256]	@ (800c31c <_strtod_l+0x58c>)
 800c21a:	f1c5 050f 	rsb	r5, r5, #15
 800c21e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c222:	4652      	mov	r2, sl
 800c224:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c228:	465b      	mov	r3, fp
 800c22a:	f7f4 f955 	bl	80004d8 <__aeabi_dmul>
 800c22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c230:	1b5d      	subs	r5, r3, r5
 800c232:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c236:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c23a:	e791      	b.n	800c160 <_strtod_l+0x3d0>
 800c23c:	3316      	adds	r3, #22
 800c23e:	dba8      	blt.n	800c192 <_strtod_l+0x402>
 800c240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c242:	4650      	mov	r0, sl
 800c244:	eba3 0808 	sub.w	r8, r3, r8
 800c248:	4b34      	ldr	r3, [pc, #208]	@ (800c31c <_strtod_l+0x58c>)
 800c24a:	4659      	mov	r1, fp
 800c24c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c250:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c254:	f7f4 fa6a 	bl	800072c <__aeabi_ddiv>
 800c258:	e75d      	b.n	800c116 <_strtod_l+0x386>
 800c25a:	2300      	movs	r3, #0
 800c25c:	4650      	mov	r0, sl
 800c25e:	4659      	mov	r1, fp
 800c260:	461e      	mov	r6, r3
 800c262:	4f2f      	ldr	r7, [pc, #188]	@ (800c320 <_strtod_l+0x590>)
 800c264:	1124      	asrs	r4, r4, #4
 800c266:	2c01      	cmp	r4, #1
 800c268:	dc21      	bgt.n	800c2ae <_strtod_l+0x51e>
 800c26a:	b10b      	cbz	r3, 800c270 <_strtod_l+0x4e0>
 800c26c:	4682      	mov	sl, r0
 800c26e:	468b      	mov	fp, r1
 800c270:	492b      	ldr	r1, [pc, #172]	@ (800c320 <_strtod_l+0x590>)
 800c272:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c276:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c27a:	4652      	mov	r2, sl
 800c27c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c280:	465b      	mov	r3, fp
 800c282:	f7f4 f929 	bl	80004d8 <__aeabi_dmul>
 800c286:	4b23      	ldr	r3, [pc, #140]	@ (800c314 <_strtod_l+0x584>)
 800c288:	460a      	mov	r2, r1
 800c28a:	400b      	ands	r3, r1
 800c28c:	4925      	ldr	r1, [pc, #148]	@ (800c324 <_strtod_l+0x594>)
 800c28e:	4682      	mov	sl, r0
 800c290:	428b      	cmp	r3, r1
 800c292:	d898      	bhi.n	800c1c6 <_strtod_l+0x436>
 800c294:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c298:	428b      	cmp	r3, r1
 800c29a:	bf86      	itte	hi
 800c29c:	f04f 3aff 	movhi.w	sl, #4294967295
 800c2a0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800c328 <_strtod_l+0x598>
 800c2a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	9308      	str	r3, [sp, #32]
 800c2ac:	e076      	b.n	800c39c <_strtod_l+0x60c>
 800c2ae:	07e2      	lsls	r2, r4, #31
 800c2b0:	d504      	bpl.n	800c2bc <_strtod_l+0x52c>
 800c2b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b6:	f7f4 f90f 	bl	80004d8 <__aeabi_dmul>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	3601      	adds	r6, #1
 800c2be:	1064      	asrs	r4, r4, #1
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	e7d0      	b.n	800c266 <_strtod_l+0x4d6>
 800c2c4:	d0f0      	beq.n	800c2a8 <_strtod_l+0x518>
 800c2c6:	4264      	negs	r4, r4
 800c2c8:	f014 020f 	ands.w	r2, r4, #15
 800c2cc:	d00a      	beq.n	800c2e4 <_strtod_l+0x554>
 800c2ce:	4b13      	ldr	r3, [pc, #76]	@ (800c31c <_strtod_l+0x58c>)
 800c2d0:	4650      	mov	r0, sl
 800c2d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2d6:	4659      	mov	r1, fp
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f4 fa26 	bl	800072c <__aeabi_ddiv>
 800c2e0:	4682      	mov	sl, r0
 800c2e2:	468b      	mov	fp, r1
 800c2e4:	1124      	asrs	r4, r4, #4
 800c2e6:	d0df      	beq.n	800c2a8 <_strtod_l+0x518>
 800c2e8:	2c1f      	cmp	r4, #31
 800c2ea:	dd1f      	ble.n	800c32c <_strtod_l+0x59c>
 800c2ec:	2400      	movs	r4, #0
 800c2ee:	46a0      	mov	r8, r4
 800c2f0:	46a1      	mov	r9, r4
 800c2f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c2f4:	2322      	movs	r3, #34	@ 0x22
 800c2f6:	9a05      	ldr	r2, [sp, #20]
 800c2f8:	f04f 0a00 	mov.w	sl, #0
 800c2fc:	f04f 0b00 	mov.w	fp, #0
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	e76b      	b.n	800c1dc <_strtod_l+0x44c>
 800c304:	0800ff59 	.word	0x0800ff59
 800c308:	08010220 	.word	0x08010220
 800c30c:	0800ff51 	.word	0x0800ff51
 800c310:	0800ff88 	.word	0x0800ff88
 800c314:	7ff00000 	.word	0x7ff00000
 800c318:	080100c1 	.word	0x080100c1
 800c31c:	08010158 	.word	0x08010158
 800c320:	08010130 	.word	0x08010130
 800c324:	7ca00000 	.word	0x7ca00000
 800c328:	7fefffff 	.word	0x7fefffff
 800c32c:	f014 0310 	ands.w	r3, r4, #16
 800c330:	bf18      	it	ne
 800c332:	236a      	movne	r3, #106	@ 0x6a
 800c334:	4650      	mov	r0, sl
 800c336:	9308      	str	r3, [sp, #32]
 800c338:	4659      	mov	r1, fp
 800c33a:	2300      	movs	r3, #0
 800c33c:	4e77      	ldr	r6, [pc, #476]	@ (800c51c <_strtod_l+0x78c>)
 800c33e:	07e7      	lsls	r7, r4, #31
 800c340:	d504      	bpl.n	800c34c <_strtod_l+0x5bc>
 800c342:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c346:	f7f4 f8c7 	bl	80004d8 <__aeabi_dmul>
 800c34a:	2301      	movs	r3, #1
 800c34c:	1064      	asrs	r4, r4, #1
 800c34e:	f106 0608 	add.w	r6, r6, #8
 800c352:	d1f4      	bne.n	800c33e <_strtod_l+0x5ae>
 800c354:	b10b      	cbz	r3, 800c35a <_strtod_l+0x5ca>
 800c356:	4682      	mov	sl, r0
 800c358:	468b      	mov	fp, r1
 800c35a:	9b08      	ldr	r3, [sp, #32]
 800c35c:	b1b3      	cbz	r3, 800c38c <_strtod_l+0x5fc>
 800c35e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c362:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c366:	2b00      	cmp	r3, #0
 800c368:	4659      	mov	r1, fp
 800c36a:	dd0f      	ble.n	800c38c <_strtod_l+0x5fc>
 800c36c:	2b1f      	cmp	r3, #31
 800c36e:	dd58      	ble.n	800c422 <_strtod_l+0x692>
 800c370:	2b34      	cmp	r3, #52	@ 0x34
 800c372:	bfd8      	it	le
 800c374:	f04f 33ff 	movle.w	r3, #4294967295
 800c378:	f04f 0a00 	mov.w	sl, #0
 800c37c:	bfcf      	iteee	gt
 800c37e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c382:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c386:	4093      	lslle	r3, r2
 800c388:	ea03 0b01 	andle.w	fp, r3, r1
 800c38c:	2200      	movs	r2, #0
 800c38e:	2300      	movs	r3, #0
 800c390:	4650      	mov	r0, sl
 800c392:	4659      	mov	r1, fp
 800c394:	f7f4 fb08 	bl	80009a8 <__aeabi_dcmpeq>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d1a7      	bne.n	800c2ec <_strtod_l+0x55c>
 800c39c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c39e:	464a      	mov	r2, r9
 800c3a0:	9300      	str	r3, [sp, #0]
 800c3a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c3a4:	462b      	mov	r3, r5
 800c3a6:	9805      	ldr	r0, [sp, #20]
 800c3a8:	f7ff f8d6 	bl	800b558 <__s2b>
 800c3ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	f43f af09 	beq.w	800c1c6 <_strtod_l+0x436>
 800c3b4:	2400      	movs	r4, #0
 800c3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ba:	2a00      	cmp	r2, #0
 800c3bc:	eba3 0308 	sub.w	r3, r3, r8
 800c3c0:	bfa8      	it	ge
 800c3c2:	2300      	movge	r3, #0
 800c3c4:	46a0      	mov	r8, r4
 800c3c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c3c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c3cc:	9316      	str	r3, [sp, #88]	@ 0x58
 800c3ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3d0:	9805      	ldr	r0, [sp, #20]
 800c3d2:	6859      	ldr	r1, [r3, #4]
 800c3d4:	f7ff f818 	bl	800b408 <_Balloc>
 800c3d8:	4681      	mov	r9, r0
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	f43f aef7 	beq.w	800c1ce <_strtod_l+0x43e>
 800c3e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3e2:	300c      	adds	r0, #12
 800c3e4:	691a      	ldr	r2, [r3, #16]
 800c3e6:	f103 010c 	add.w	r1, r3, #12
 800c3ea:	3202      	adds	r2, #2
 800c3ec:	0092      	lsls	r2, r2, #2
 800c3ee:	f7fe f954 	bl	800a69a <memcpy>
 800c3f2:	ab1c      	add	r3, sp, #112	@ 0x70
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	4652      	mov	r2, sl
 800c3fc:	465b      	mov	r3, fp
 800c3fe:	9805      	ldr	r0, [sp, #20]
 800c400:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c404:	f7ff fbd4 	bl	800bbb0 <__d2b>
 800c408:	901a      	str	r0, [sp, #104]	@ 0x68
 800c40a:	2800      	cmp	r0, #0
 800c40c:	f43f aedf 	beq.w	800c1ce <_strtod_l+0x43e>
 800c410:	2101      	movs	r1, #1
 800c412:	9805      	ldr	r0, [sp, #20]
 800c414:	f7ff f936 	bl	800b684 <__i2b>
 800c418:	4680      	mov	r8, r0
 800c41a:	b948      	cbnz	r0, 800c430 <_strtod_l+0x6a0>
 800c41c:	f04f 0800 	mov.w	r8, #0
 800c420:	e6d5      	b.n	800c1ce <_strtod_l+0x43e>
 800c422:	f04f 32ff 	mov.w	r2, #4294967295
 800c426:	fa02 f303 	lsl.w	r3, r2, r3
 800c42a:	ea03 0a0a 	and.w	sl, r3, sl
 800c42e:	e7ad      	b.n	800c38c <_strtod_l+0x5fc>
 800c430:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c432:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c434:	2d00      	cmp	r5, #0
 800c436:	bfab      	itete	ge
 800c438:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c43a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c43c:	18ef      	addge	r7, r5, r3
 800c43e:	1b5e      	sublt	r6, r3, r5
 800c440:	9b08      	ldr	r3, [sp, #32]
 800c442:	bfa8      	it	ge
 800c444:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c446:	eba5 0503 	sub.w	r5, r5, r3
 800c44a:	4415      	add	r5, r2
 800c44c:	4b34      	ldr	r3, [pc, #208]	@ (800c520 <_strtod_l+0x790>)
 800c44e:	f105 35ff 	add.w	r5, r5, #4294967295
 800c452:	bfb8      	it	lt
 800c454:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c456:	429d      	cmp	r5, r3
 800c458:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c45c:	da50      	bge.n	800c500 <_strtod_l+0x770>
 800c45e:	1b5b      	subs	r3, r3, r5
 800c460:	2b1f      	cmp	r3, #31
 800c462:	f04f 0101 	mov.w	r1, #1
 800c466:	eba2 0203 	sub.w	r2, r2, r3
 800c46a:	dc3d      	bgt.n	800c4e8 <_strtod_l+0x758>
 800c46c:	fa01 f303 	lsl.w	r3, r1, r3
 800c470:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c472:	2300      	movs	r3, #0
 800c474:	9310      	str	r3, [sp, #64]	@ 0x40
 800c476:	18bd      	adds	r5, r7, r2
 800c478:	9b08      	ldr	r3, [sp, #32]
 800c47a:	42af      	cmp	r7, r5
 800c47c:	4416      	add	r6, r2
 800c47e:	441e      	add	r6, r3
 800c480:	463b      	mov	r3, r7
 800c482:	bfa8      	it	ge
 800c484:	462b      	movge	r3, r5
 800c486:	42b3      	cmp	r3, r6
 800c488:	bfa8      	it	ge
 800c48a:	4633      	movge	r3, r6
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	bfc2      	ittt	gt
 800c490:	1aed      	subgt	r5, r5, r3
 800c492:	1af6      	subgt	r6, r6, r3
 800c494:	1aff      	subgt	r7, r7, r3
 800c496:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c498:	2b00      	cmp	r3, #0
 800c49a:	dd16      	ble.n	800c4ca <_strtod_l+0x73a>
 800c49c:	4641      	mov	r1, r8
 800c49e:	461a      	mov	r2, r3
 800c4a0:	9805      	ldr	r0, [sp, #20]
 800c4a2:	f7ff f9a7 	bl	800b7f4 <__pow5mult>
 800c4a6:	4680      	mov	r8, r0
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	d0b7      	beq.n	800c41c <_strtod_l+0x68c>
 800c4ac:	4601      	mov	r1, r0
 800c4ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c4b0:	9805      	ldr	r0, [sp, #20]
 800c4b2:	f7ff f8fd 	bl	800b6b0 <__multiply>
 800c4b6:	900a      	str	r0, [sp, #40]	@ 0x28
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f43f ae88 	beq.w	800c1ce <_strtod_l+0x43e>
 800c4be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4c0:	9805      	ldr	r0, [sp, #20]
 800c4c2:	f7fe ffe1 	bl	800b488 <_Bfree>
 800c4c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4ca:	2d00      	cmp	r5, #0
 800c4cc:	dc1d      	bgt.n	800c50a <_strtod_l+0x77a>
 800c4ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	dd27      	ble.n	800c524 <_strtod_l+0x794>
 800c4d4:	4649      	mov	r1, r9
 800c4d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c4d8:	9805      	ldr	r0, [sp, #20]
 800c4da:	f7ff f98b 	bl	800b7f4 <__pow5mult>
 800c4de:	4681      	mov	r9, r0
 800c4e0:	bb00      	cbnz	r0, 800c524 <_strtod_l+0x794>
 800c4e2:	f04f 0900 	mov.w	r9, #0
 800c4e6:	e672      	b.n	800c1ce <_strtod_l+0x43e>
 800c4e8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c4ec:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c4f0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c4f4:	35e2      	adds	r5, #226	@ 0xe2
 800c4f6:	fa01 f305 	lsl.w	r3, r1, r5
 800c4fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4fc:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c4fe:	e7ba      	b.n	800c476 <_strtod_l+0x6e6>
 800c500:	2300      	movs	r3, #0
 800c502:	9310      	str	r3, [sp, #64]	@ 0x40
 800c504:	2301      	movs	r3, #1
 800c506:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c508:	e7b5      	b.n	800c476 <_strtod_l+0x6e6>
 800c50a:	462a      	mov	r2, r5
 800c50c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c50e:	9805      	ldr	r0, [sp, #20]
 800c510:	f7ff f9ca 	bl	800b8a8 <__lshift>
 800c514:	901a      	str	r0, [sp, #104]	@ 0x68
 800c516:	2800      	cmp	r0, #0
 800c518:	d1d9      	bne.n	800c4ce <_strtod_l+0x73e>
 800c51a:	e658      	b.n	800c1ce <_strtod_l+0x43e>
 800c51c:	08010248 	.word	0x08010248
 800c520:	fffffc02 	.word	0xfffffc02
 800c524:	2e00      	cmp	r6, #0
 800c526:	dd07      	ble.n	800c538 <_strtod_l+0x7a8>
 800c528:	4649      	mov	r1, r9
 800c52a:	4632      	mov	r2, r6
 800c52c:	9805      	ldr	r0, [sp, #20]
 800c52e:	f7ff f9bb 	bl	800b8a8 <__lshift>
 800c532:	4681      	mov	r9, r0
 800c534:	2800      	cmp	r0, #0
 800c536:	d0d4      	beq.n	800c4e2 <_strtod_l+0x752>
 800c538:	2f00      	cmp	r7, #0
 800c53a:	dd08      	ble.n	800c54e <_strtod_l+0x7be>
 800c53c:	4641      	mov	r1, r8
 800c53e:	463a      	mov	r2, r7
 800c540:	9805      	ldr	r0, [sp, #20]
 800c542:	f7ff f9b1 	bl	800b8a8 <__lshift>
 800c546:	4680      	mov	r8, r0
 800c548:	2800      	cmp	r0, #0
 800c54a:	f43f ae40 	beq.w	800c1ce <_strtod_l+0x43e>
 800c54e:	464a      	mov	r2, r9
 800c550:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c552:	9805      	ldr	r0, [sp, #20]
 800c554:	f7ff fa30 	bl	800b9b8 <__mdiff>
 800c558:	4604      	mov	r4, r0
 800c55a:	2800      	cmp	r0, #0
 800c55c:	f43f ae37 	beq.w	800c1ce <_strtod_l+0x43e>
 800c560:	68c3      	ldr	r3, [r0, #12]
 800c562:	4641      	mov	r1, r8
 800c564:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c566:	2300      	movs	r3, #0
 800c568:	60c3      	str	r3, [r0, #12]
 800c56a:	f7ff fa09 	bl	800b980 <__mcmp>
 800c56e:	2800      	cmp	r0, #0
 800c570:	da3d      	bge.n	800c5ee <_strtod_l+0x85e>
 800c572:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c574:	ea53 030a 	orrs.w	r3, r3, sl
 800c578:	d163      	bne.n	800c642 <_strtod_l+0x8b2>
 800c57a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d15f      	bne.n	800c642 <_strtod_l+0x8b2>
 800c582:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c586:	0d1b      	lsrs	r3, r3, #20
 800c588:	051b      	lsls	r3, r3, #20
 800c58a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c58e:	d958      	bls.n	800c642 <_strtod_l+0x8b2>
 800c590:	6963      	ldr	r3, [r4, #20]
 800c592:	b913      	cbnz	r3, 800c59a <_strtod_l+0x80a>
 800c594:	6923      	ldr	r3, [r4, #16]
 800c596:	2b01      	cmp	r3, #1
 800c598:	dd53      	ble.n	800c642 <_strtod_l+0x8b2>
 800c59a:	4621      	mov	r1, r4
 800c59c:	2201      	movs	r2, #1
 800c59e:	9805      	ldr	r0, [sp, #20]
 800c5a0:	f7ff f982 	bl	800b8a8 <__lshift>
 800c5a4:	4641      	mov	r1, r8
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	f7ff f9ea 	bl	800b980 <__mcmp>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	dd48      	ble.n	800c642 <_strtod_l+0x8b2>
 800c5b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c5b4:	9a08      	ldr	r2, [sp, #32]
 800c5b6:	0d1b      	lsrs	r3, r3, #20
 800c5b8:	051b      	lsls	r3, r3, #20
 800c5ba:	2a00      	cmp	r2, #0
 800c5bc:	d062      	beq.n	800c684 <_strtod_l+0x8f4>
 800c5be:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c5c2:	d85f      	bhi.n	800c684 <_strtod_l+0x8f4>
 800c5c4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c5c8:	f67f ae94 	bls.w	800c2f4 <_strtod_l+0x564>
 800c5cc:	4650      	mov	r0, sl
 800c5ce:	4659      	mov	r1, fp
 800c5d0:	4ba3      	ldr	r3, [pc, #652]	@ (800c860 <_strtod_l+0xad0>)
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f7f3 ff80 	bl	80004d8 <__aeabi_dmul>
 800c5d8:	4ba2      	ldr	r3, [pc, #648]	@ (800c864 <_strtod_l+0xad4>)
 800c5da:	4682      	mov	sl, r0
 800c5dc:	400b      	ands	r3, r1
 800c5de:	468b      	mov	fp, r1
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f47f adff 	bne.w	800c1e4 <_strtod_l+0x454>
 800c5e6:	2322      	movs	r3, #34	@ 0x22
 800c5e8:	9a05      	ldr	r2, [sp, #20]
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	e5fa      	b.n	800c1e4 <_strtod_l+0x454>
 800c5ee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c5f2:	d165      	bne.n	800c6c0 <_strtod_l+0x930>
 800c5f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c5f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5fa:	b35a      	cbz	r2, 800c654 <_strtod_l+0x8c4>
 800c5fc:	4a9a      	ldr	r2, [pc, #616]	@ (800c868 <_strtod_l+0xad8>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d12b      	bne.n	800c65a <_strtod_l+0x8ca>
 800c602:	9b08      	ldr	r3, [sp, #32]
 800c604:	4651      	mov	r1, sl
 800c606:	b303      	cbz	r3, 800c64a <_strtod_l+0x8ba>
 800c608:	465a      	mov	r2, fp
 800c60a:	4b96      	ldr	r3, [pc, #600]	@ (800c864 <_strtod_l+0xad4>)
 800c60c:	4013      	ands	r3, r2
 800c60e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c612:	f04f 32ff 	mov.w	r2, #4294967295
 800c616:	d81b      	bhi.n	800c650 <_strtod_l+0x8c0>
 800c618:	0d1b      	lsrs	r3, r3, #20
 800c61a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c61e:	fa02 f303 	lsl.w	r3, r2, r3
 800c622:	4299      	cmp	r1, r3
 800c624:	d119      	bne.n	800c65a <_strtod_l+0x8ca>
 800c626:	4b91      	ldr	r3, [pc, #580]	@ (800c86c <_strtod_l+0xadc>)
 800c628:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d102      	bne.n	800c634 <_strtod_l+0x8a4>
 800c62e:	3101      	adds	r1, #1
 800c630:	f43f adcd 	beq.w	800c1ce <_strtod_l+0x43e>
 800c634:	f04f 0a00 	mov.w	sl, #0
 800c638:	4b8a      	ldr	r3, [pc, #552]	@ (800c864 <_strtod_l+0xad4>)
 800c63a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c63c:	401a      	ands	r2, r3
 800c63e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c642:	9b08      	ldr	r3, [sp, #32]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1c1      	bne.n	800c5cc <_strtod_l+0x83c>
 800c648:	e5cc      	b.n	800c1e4 <_strtod_l+0x454>
 800c64a:	f04f 33ff 	mov.w	r3, #4294967295
 800c64e:	e7e8      	b.n	800c622 <_strtod_l+0x892>
 800c650:	4613      	mov	r3, r2
 800c652:	e7e6      	b.n	800c622 <_strtod_l+0x892>
 800c654:	ea53 030a 	orrs.w	r3, r3, sl
 800c658:	d0aa      	beq.n	800c5b0 <_strtod_l+0x820>
 800c65a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c65c:	b1db      	cbz	r3, 800c696 <_strtod_l+0x906>
 800c65e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c660:	4213      	tst	r3, r2
 800c662:	d0ee      	beq.n	800c642 <_strtod_l+0x8b2>
 800c664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c666:	4650      	mov	r0, sl
 800c668:	4659      	mov	r1, fp
 800c66a:	9a08      	ldr	r2, [sp, #32]
 800c66c:	b1bb      	cbz	r3, 800c69e <_strtod_l+0x90e>
 800c66e:	f7ff fb6b 	bl	800bd48 <sulp>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c67a:	f7f3 fd77 	bl	800016c <__adddf3>
 800c67e:	4682      	mov	sl, r0
 800c680:	468b      	mov	fp, r1
 800c682:	e7de      	b.n	800c642 <_strtod_l+0x8b2>
 800c684:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c688:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c68c:	f04f 3aff 	mov.w	sl, #4294967295
 800c690:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c694:	e7d5      	b.n	800c642 <_strtod_l+0x8b2>
 800c696:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c698:	ea13 0f0a 	tst.w	r3, sl
 800c69c:	e7e1      	b.n	800c662 <_strtod_l+0x8d2>
 800c69e:	f7ff fb53 	bl	800bd48 <sulp>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6aa:	f7f3 fd5d 	bl	8000168 <__aeabi_dsub>
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4682      	mov	sl, r0
 800c6b4:	468b      	mov	fp, r1
 800c6b6:	f7f4 f977 	bl	80009a8 <__aeabi_dcmpeq>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d0c1      	beq.n	800c642 <_strtod_l+0x8b2>
 800c6be:	e619      	b.n	800c2f4 <_strtod_l+0x564>
 800c6c0:	4641      	mov	r1, r8
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f7ff facc 	bl	800bc60 <__ratio>
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	f7f4 f97d 	bl	80009d0 <__aeabi_dcmple>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d06d      	beq.n	800c7b6 <_strtod_l+0xa26>
 800c6da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d178      	bne.n	800c7d2 <_strtod_l+0xa42>
 800c6e0:	f1ba 0f00 	cmp.w	sl, #0
 800c6e4:	d156      	bne.n	800c794 <_strtod_l+0xa04>
 800c6e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d158      	bne.n	800c7a2 <_strtod_l+0xa12>
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	4639      	mov	r1, r7
 800c6f6:	4b5e      	ldr	r3, [pc, #376]	@ (800c870 <_strtod_l+0xae0>)
 800c6f8:	f7f4 f960 	bl	80009bc <__aeabi_dcmplt>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d157      	bne.n	800c7b0 <_strtod_l+0xa20>
 800c700:	4630      	mov	r0, r6
 800c702:	4639      	mov	r1, r7
 800c704:	2200      	movs	r2, #0
 800c706:	4b5b      	ldr	r3, [pc, #364]	@ (800c874 <_strtod_l+0xae4>)
 800c708:	f7f3 fee6 	bl	80004d8 <__aeabi_dmul>
 800c70c:	4606      	mov	r6, r0
 800c70e:	460f      	mov	r7, r1
 800c710:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c714:	9606      	str	r6, [sp, #24]
 800c716:	9307      	str	r3, [sp, #28]
 800c718:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c71c:	4d51      	ldr	r5, [pc, #324]	@ (800c864 <_strtod_l+0xad4>)
 800c71e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c724:	401d      	ands	r5, r3
 800c726:	4b54      	ldr	r3, [pc, #336]	@ (800c878 <_strtod_l+0xae8>)
 800c728:	429d      	cmp	r5, r3
 800c72a:	f040 80ab 	bne.w	800c884 <_strtod_l+0xaf4>
 800c72e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c730:	4650      	mov	r0, sl
 800c732:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c736:	4659      	mov	r1, fp
 800c738:	f7ff f9d2 	bl	800bae0 <__ulp>
 800c73c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c740:	f7f3 feca 	bl	80004d8 <__aeabi_dmul>
 800c744:	4652      	mov	r2, sl
 800c746:	465b      	mov	r3, fp
 800c748:	f7f3 fd10 	bl	800016c <__adddf3>
 800c74c:	460b      	mov	r3, r1
 800c74e:	4945      	ldr	r1, [pc, #276]	@ (800c864 <_strtod_l+0xad4>)
 800c750:	4a4a      	ldr	r2, [pc, #296]	@ (800c87c <_strtod_l+0xaec>)
 800c752:	4019      	ands	r1, r3
 800c754:	4291      	cmp	r1, r2
 800c756:	4682      	mov	sl, r0
 800c758:	d942      	bls.n	800c7e0 <_strtod_l+0xa50>
 800c75a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c75c:	4b43      	ldr	r3, [pc, #268]	@ (800c86c <_strtod_l+0xadc>)
 800c75e:	429a      	cmp	r2, r3
 800c760:	d103      	bne.n	800c76a <_strtod_l+0x9da>
 800c762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c764:	3301      	adds	r3, #1
 800c766:	f43f ad32 	beq.w	800c1ce <_strtod_l+0x43e>
 800c76a:	f04f 3aff 	mov.w	sl, #4294967295
 800c76e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800c86c <_strtod_l+0xadc>
 800c772:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c774:	9805      	ldr	r0, [sp, #20]
 800c776:	f7fe fe87 	bl	800b488 <_Bfree>
 800c77a:	4649      	mov	r1, r9
 800c77c:	9805      	ldr	r0, [sp, #20]
 800c77e:	f7fe fe83 	bl	800b488 <_Bfree>
 800c782:	4641      	mov	r1, r8
 800c784:	9805      	ldr	r0, [sp, #20]
 800c786:	f7fe fe7f 	bl	800b488 <_Bfree>
 800c78a:	4621      	mov	r1, r4
 800c78c:	9805      	ldr	r0, [sp, #20]
 800c78e:	f7fe fe7b 	bl	800b488 <_Bfree>
 800c792:	e61c      	b.n	800c3ce <_strtod_l+0x63e>
 800c794:	f1ba 0f01 	cmp.w	sl, #1
 800c798:	d103      	bne.n	800c7a2 <_strtod_l+0xa12>
 800c79a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f43f ada9 	beq.w	800c2f4 <_strtod_l+0x564>
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	4b36      	ldr	r3, [pc, #216]	@ (800c880 <_strtod_l+0xaf0>)
 800c7a6:	2600      	movs	r6, #0
 800c7a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7ac:	4f30      	ldr	r7, [pc, #192]	@ (800c870 <_strtod_l+0xae0>)
 800c7ae:	e7b3      	b.n	800c718 <_strtod_l+0x988>
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	4f30      	ldr	r7, [pc, #192]	@ (800c874 <_strtod_l+0xae4>)
 800c7b4:	e7ac      	b.n	800c710 <_strtod_l+0x980>
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	4b2e      	ldr	r3, [pc, #184]	@ (800c874 <_strtod_l+0xae4>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f7f3 fe8b 	bl	80004d8 <__aeabi_dmul>
 800c7c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	460f      	mov	r7, r1
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d0a1      	beq.n	800c710 <_strtod_l+0x980>
 800c7cc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c7d0:	e7a2      	b.n	800c718 <_strtod_l+0x988>
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	4b26      	ldr	r3, [pc, #152]	@ (800c870 <_strtod_l+0xae0>)
 800c7d6:	4616      	mov	r6, r2
 800c7d8:	461f      	mov	r7, r3
 800c7da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7de:	e79b      	b.n	800c718 <_strtod_l+0x988>
 800c7e0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c7e4:	9b08      	ldr	r3, [sp, #32]
 800c7e6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1c1      	bne.n	800c772 <_strtod_l+0x9e2>
 800c7ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c7f2:	0d1b      	lsrs	r3, r3, #20
 800c7f4:	051b      	lsls	r3, r3, #20
 800c7f6:	429d      	cmp	r5, r3
 800c7f8:	d1bb      	bne.n	800c772 <_strtod_l+0x9e2>
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	4639      	mov	r1, r7
 800c7fe:	f7f4 fc9f 	bl	8001140 <__aeabi_d2lz>
 800c802:	f7f3 fe3b 	bl	800047c <__aeabi_l2d>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	4630      	mov	r0, r6
 800c80c:	4639      	mov	r1, r7
 800c80e:	f7f3 fcab 	bl	8000168 <__aeabi_dsub>
 800c812:	460b      	mov	r3, r1
 800c814:	4602      	mov	r2, r0
 800c816:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c81a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c81e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c820:	ea46 060a 	orr.w	r6, r6, sl
 800c824:	431e      	orrs	r6, r3
 800c826:	d06a      	beq.n	800c8fe <_strtod_l+0xb6e>
 800c828:	a309      	add	r3, pc, #36	@ (adr r3, 800c850 <_strtod_l+0xac0>)
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	f7f4 f8c5 	bl	80009bc <__aeabi_dcmplt>
 800c832:	2800      	cmp	r0, #0
 800c834:	f47f acd6 	bne.w	800c1e4 <_strtod_l+0x454>
 800c838:	a307      	add	r3, pc, #28	@ (adr r3, 800c858 <_strtod_l+0xac8>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c842:	f7f4 f8d9 	bl	80009f8 <__aeabi_dcmpgt>
 800c846:	2800      	cmp	r0, #0
 800c848:	d093      	beq.n	800c772 <_strtod_l+0x9e2>
 800c84a:	e4cb      	b.n	800c1e4 <_strtod_l+0x454>
 800c84c:	f3af 8000 	nop.w
 800c850:	94a03595 	.word	0x94a03595
 800c854:	3fdfffff 	.word	0x3fdfffff
 800c858:	35afe535 	.word	0x35afe535
 800c85c:	3fe00000 	.word	0x3fe00000
 800c860:	39500000 	.word	0x39500000
 800c864:	7ff00000 	.word	0x7ff00000
 800c868:	000fffff 	.word	0x000fffff
 800c86c:	7fefffff 	.word	0x7fefffff
 800c870:	3ff00000 	.word	0x3ff00000
 800c874:	3fe00000 	.word	0x3fe00000
 800c878:	7fe00000 	.word	0x7fe00000
 800c87c:	7c9fffff 	.word	0x7c9fffff
 800c880:	bff00000 	.word	0xbff00000
 800c884:	9b08      	ldr	r3, [sp, #32]
 800c886:	b323      	cbz	r3, 800c8d2 <_strtod_l+0xb42>
 800c888:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c88c:	d821      	bhi.n	800c8d2 <_strtod_l+0xb42>
 800c88e:	a328      	add	r3, pc, #160	@ (adr r3, 800c930 <_strtod_l+0xba0>)
 800c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c894:	4630      	mov	r0, r6
 800c896:	4639      	mov	r1, r7
 800c898:	f7f4 f89a 	bl	80009d0 <__aeabi_dcmple>
 800c89c:	b1a0      	cbz	r0, 800c8c8 <_strtod_l+0xb38>
 800c89e:	4639      	mov	r1, r7
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f7f4 f8f1 	bl	8000a88 <__aeabi_d2uiz>
 800c8a6:	2801      	cmp	r0, #1
 800c8a8:	bf38      	it	cc
 800c8aa:	2001      	movcc	r0, #1
 800c8ac:	f7f3 fd9a 	bl	80003e4 <__aeabi_ui2d>
 800c8b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	460f      	mov	r7, r1
 800c8b6:	b9fb      	cbnz	r3, 800c8f8 <_strtod_l+0xb68>
 800c8b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800c8be:	9315      	str	r3, [sp, #84]	@ 0x54
 800c8c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c8c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c8c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c8ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c8ce:	1b5b      	subs	r3, r3, r5
 800c8d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c8d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c8da:	f7ff f901 	bl	800bae0 <__ulp>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	4650      	mov	r0, sl
 800c8e4:	4659      	mov	r1, fp
 800c8e6:	f7f3 fdf7 	bl	80004d8 <__aeabi_dmul>
 800c8ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c8ee:	f7f3 fc3d 	bl	800016c <__adddf3>
 800c8f2:	4682      	mov	sl, r0
 800c8f4:	468b      	mov	fp, r1
 800c8f6:	e775      	b.n	800c7e4 <_strtod_l+0xa54>
 800c8f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c8fc:	e7e0      	b.n	800c8c0 <_strtod_l+0xb30>
 800c8fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800c938 <_strtod_l+0xba8>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	f7f4 f85a 	bl	80009bc <__aeabi_dcmplt>
 800c908:	e79d      	b.n	800c846 <_strtod_l+0xab6>
 800c90a:	2300      	movs	r3, #0
 800c90c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c90e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c910:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	f7ff ba79 	b.w	800be0a <_strtod_l+0x7a>
 800c918:	2a65      	cmp	r2, #101	@ 0x65
 800c91a:	f43f ab72 	beq.w	800c002 <_strtod_l+0x272>
 800c91e:	2a45      	cmp	r2, #69	@ 0x45
 800c920:	f43f ab6f 	beq.w	800c002 <_strtod_l+0x272>
 800c924:	2301      	movs	r3, #1
 800c926:	f7ff bbaa 	b.w	800c07e <_strtod_l+0x2ee>
 800c92a:	bf00      	nop
 800c92c:	f3af 8000 	nop.w
 800c930:	ffc00000 	.word	0xffc00000
 800c934:	41dfffff 	.word	0x41dfffff
 800c938:	94a03595 	.word	0x94a03595
 800c93c:	3fcfffff 	.word	0x3fcfffff

0800c940 <_strtod_r>:
 800c940:	4b01      	ldr	r3, [pc, #4]	@ (800c948 <_strtod_r+0x8>)
 800c942:	f7ff ba25 	b.w	800bd90 <_strtod_l>
 800c946:	bf00      	nop
 800c948:	2000006c 	.word	0x2000006c

0800c94c <_strtol_l.isra.0>:
 800c94c:	2b24      	cmp	r3, #36	@ 0x24
 800c94e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c952:	4686      	mov	lr, r0
 800c954:	4690      	mov	r8, r2
 800c956:	d801      	bhi.n	800c95c <_strtol_l.isra.0+0x10>
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d106      	bne.n	800c96a <_strtol_l.isra.0+0x1e>
 800c95c:	f7fd fe62 	bl	800a624 <__errno>
 800c960:	2316      	movs	r3, #22
 800c962:	6003      	str	r3, [r0, #0]
 800c964:	2000      	movs	r0, #0
 800c966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c96a:	460d      	mov	r5, r1
 800c96c:	4833      	ldr	r0, [pc, #204]	@ (800ca3c <_strtol_l.isra.0+0xf0>)
 800c96e:	462a      	mov	r2, r5
 800c970:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c974:	5d06      	ldrb	r6, [r0, r4]
 800c976:	f016 0608 	ands.w	r6, r6, #8
 800c97a:	d1f8      	bne.n	800c96e <_strtol_l.isra.0+0x22>
 800c97c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c97e:	d110      	bne.n	800c9a2 <_strtol_l.isra.0+0x56>
 800c980:	2601      	movs	r6, #1
 800c982:	782c      	ldrb	r4, [r5, #0]
 800c984:	1c95      	adds	r5, r2, #2
 800c986:	f033 0210 	bics.w	r2, r3, #16
 800c98a:	d115      	bne.n	800c9b8 <_strtol_l.isra.0+0x6c>
 800c98c:	2c30      	cmp	r4, #48	@ 0x30
 800c98e:	d10d      	bne.n	800c9ac <_strtol_l.isra.0+0x60>
 800c990:	782a      	ldrb	r2, [r5, #0]
 800c992:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c996:	2a58      	cmp	r2, #88	@ 0x58
 800c998:	d108      	bne.n	800c9ac <_strtol_l.isra.0+0x60>
 800c99a:	786c      	ldrb	r4, [r5, #1]
 800c99c:	3502      	adds	r5, #2
 800c99e:	2310      	movs	r3, #16
 800c9a0:	e00a      	b.n	800c9b8 <_strtol_l.isra.0+0x6c>
 800c9a2:	2c2b      	cmp	r4, #43	@ 0x2b
 800c9a4:	bf04      	itt	eq
 800c9a6:	782c      	ldrbeq	r4, [r5, #0]
 800c9a8:	1c95      	addeq	r5, r2, #2
 800c9aa:	e7ec      	b.n	800c986 <_strtol_l.isra.0+0x3a>
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1f6      	bne.n	800c99e <_strtol_l.isra.0+0x52>
 800c9b0:	2c30      	cmp	r4, #48	@ 0x30
 800c9b2:	bf14      	ite	ne
 800c9b4:	230a      	movne	r3, #10
 800c9b6:	2308      	moveq	r3, #8
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c9be:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c9c2:	fbbc f9f3 	udiv	r9, ip, r3
 800c9c6:	4610      	mov	r0, r2
 800c9c8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c9cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c9d0:	2f09      	cmp	r7, #9
 800c9d2:	d80f      	bhi.n	800c9f4 <_strtol_l.isra.0+0xa8>
 800c9d4:	463c      	mov	r4, r7
 800c9d6:	42a3      	cmp	r3, r4
 800c9d8:	dd1b      	ble.n	800ca12 <_strtol_l.isra.0+0xc6>
 800c9da:	1c57      	adds	r7, r2, #1
 800c9dc:	d007      	beq.n	800c9ee <_strtol_l.isra.0+0xa2>
 800c9de:	4581      	cmp	r9, r0
 800c9e0:	d314      	bcc.n	800ca0c <_strtol_l.isra.0+0xc0>
 800c9e2:	d101      	bne.n	800c9e8 <_strtol_l.isra.0+0x9c>
 800c9e4:	45a2      	cmp	sl, r4
 800c9e6:	db11      	blt.n	800ca0c <_strtol_l.isra.0+0xc0>
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	fb00 4003 	mla	r0, r0, r3, r4
 800c9ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9f2:	e7eb      	b.n	800c9cc <_strtol_l.isra.0+0x80>
 800c9f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c9f8:	2f19      	cmp	r7, #25
 800c9fa:	d801      	bhi.n	800ca00 <_strtol_l.isra.0+0xb4>
 800c9fc:	3c37      	subs	r4, #55	@ 0x37
 800c9fe:	e7ea      	b.n	800c9d6 <_strtol_l.isra.0+0x8a>
 800ca00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ca04:	2f19      	cmp	r7, #25
 800ca06:	d804      	bhi.n	800ca12 <_strtol_l.isra.0+0xc6>
 800ca08:	3c57      	subs	r4, #87	@ 0x57
 800ca0a:	e7e4      	b.n	800c9d6 <_strtol_l.isra.0+0x8a>
 800ca0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca10:	e7ed      	b.n	800c9ee <_strtol_l.isra.0+0xa2>
 800ca12:	1c53      	adds	r3, r2, #1
 800ca14:	d108      	bne.n	800ca28 <_strtol_l.isra.0+0xdc>
 800ca16:	2322      	movs	r3, #34	@ 0x22
 800ca18:	4660      	mov	r0, ip
 800ca1a:	f8ce 3000 	str.w	r3, [lr]
 800ca1e:	f1b8 0f00 	cmp.w	r8, #0
 800ca22:	d0a0      	beq.n	800c966 <_strtol_l.isra.0+0x1a>
 800ca24:	1e69      	subs	r1, r5, #1
 800ca26:	e006      	b.n	800ca36 <_strtol_l.isra.0+0xea>
 800ca28:	b106      	cbz	r6, 800ca2c <_strtol_l.isra.0+0xe0>
 800ca2a:	4240      	negs	r0, r0
 800ca2c:	f1b8 0f00 	cmp.w	r8, #0
 800ca30:	d099      	beq.n	800c966 <_strtol_l.isra.0+0x1a>
 800ca32:	2a00      	cmp	r2, #0
 800ca34:	d1f6      	bne.n	800ca24 <_strtol_l.isra.0+0xd8>
 800ca36:	f8c8 1000 	str.w	r1, [r8]
 800ca3a:	e794      	b.n	800c966 <_strtol_l.isra.0+0x1a>
 800ca3c:	08010271 	.word	0x08010271

0800ca40 <_strtol_r>:
 800ca40:	f7ff bf84 	b.w	800c94c <_strtol_l.isra.0>

0800ca44 <__ssputs_r>:
 800ca44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca48:	461f      	mov	r7, r3
 800ca4a:	688e      	ldr	r6, [r1, #8]
 800ca4c:	4682      	mov	sl, r0
 800ca4e:	42be      	cmp	r6, r7
 800ca50:	460c      	mov	r4, r1
 800ca52:	4690      	mov	r8, r2
 800ca54:	680b      	ldr	r3, [r1, #0]
 800ca56:	d82d      	bhi.n	800cab4 <__ssputs_r+0x70>
 800ca58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca60:	d026      	beq.n	800cab0 <__ssputs_r+0x6c>
 800ca62:	6965      	ldr	r5, [r4, #20]
 800ca64:	6909      	ldr	r1, [r1, #16]
 800ca66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca6a:	eba3 0901 	sub.w	r9, r3, r1
 800ca6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca72:	1c7b      	adds	r3, r7, #1
 800ca74:	444b      	add	r3, r9
 800ca76:	106d      	asrs	r5, r5, #1
 800ca78:	429d      	cmp	r5, r3
 800ca7a:	bf38      	it	cc
 800ca7c:	461d      	movcc	r5, r3
 800ca7e:	0553      	lsls	r3, r2, #21
 800ca80:	d527      	bpl.n	800cad2 <__ssputs_r+0x8e>
 800ca82:	4629      	mov	r1, r5
 800ca84:	f7fc fd1e 	bl	80094c4 <_malloc_r>
 800ca88:	4606      	mov	r6, r0
 800ca8a:	b360      	cbz	r0, 800cae6 <__ssputs_r+0xa2>
 800ca8c:	464a      	mov	r2, r9
 800ca8e:	6921      	ldr	r1, [r4, #16]
 800ca90:	f7fd fe03 	bl	800a69a <memcpy>
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca9e:	81a3      	strh	r3, [r4, #12]
 800caa0:	6126      	str	r6, [r4, #16]
 800caa2:	444e      	add	r6, r9
 800caa4:	6026      	str	r6, [r4, #0]
 800caa6:	463e      	mov	r6, r7
 800caa8:	6165      	str	r5, [r4, #20]
 800caaa:	eba5 0509 	sub.w	r5, r5, r9
 800caae:	60a5      	str	r5, [r4, #8]
 800cab0:	42be      	cmp	r6, r7
 800cab2:	d900      	bls.n	800cab6 <__ssputs_r+0x72>
 800cab4:	463e      	mov	r6, r7
 800cab6:	4632      	mov	r2, r6
 800cab8:	4641      	mov	r1, r8
 800caba:	6820      	ldr	r0, [r4, #0]
 800cabc:	f000 f9c2 	bl	800ce44 <memmove>
 800cac0:	2000      	movs	r0, #0
 800cac2:	68a3      	ldr	r3, [r4, #8]
 800cac4:	1b9b      	subs	r3, r3, r6
 800cac6:	60a3      	str	r3, [r4, #8]
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	4433      	add	r3, r6
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad2:	462a      	mov	r2, r5
 800cad4:	f000 fd65 	bl	800d5a2 <_realloc_r>
 800cad8:	4606      	mov	r6, r0
 800cada:	2800      	cmp	r0, #0
 800cadc:	d1e0      	bne.n	800caa0 <__ssputs_r+0x5c>
 800cade:	4650      	mov	r0, sl
 800cae0:	6921      	ldr	r1, [r4, #16]
 800cae2:	f7fe fc49 	bl	800b378 <_free_r>
 800cae6:	230c      	movs	r3, #12
 800cae8:	f8ca 3000 	str.w	r3, [sl]
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	f04f 30ff 	mov.w	r0, #4294967295
 800caf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caf6:	81a3      	strh	r3, [r4, #12]
 800caf8:	e7e9      	b.n	800cace <__ssputs_r+0x8a>
	...

0800cafc <_svfiprintf_r>:
 800cafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb00:	4698      	mov	r8, r3
 800cb02:	898b      	ldrh	r3, [r1, #12]
 800cb04:	4607      	mov	r7, r0
 800cb06:	061b      	lsls	r3, r3, #24
 800cb08:	460d      	mov	r5, r1
 800cb0a:	4614      	mov	r4, r2
 800cb0c:	b09d      	sub	sp, #116	@ 0x74
 800cb0e:	d510      	bpl.n	800cb32 <_svfiprintf_r+0x36>
 800cb10:	690b      	ldr	r3, [r1, #16]
 800cb12:	b973      	cbnz	r3, 800cb32 <_svfiprintf_r+0x36>
 800cb14:	2140      	movs	r1, #64	@ 0x40
 800cb16:	f7fc fcd5 	bl	80094c4 <_malloc_r>
 800cb1a:	6028      	str	r0, [r5, #0]
 800cb1c:	6128      	str	r0, [r5, #16]
 800cb1e:	b930      	cbnz	r0, 800cb2e <_svfiprintf_r+0x32>
 800cb20:	230c      	movs	r3, #12
 800cb22:	603b      	str	r3, [r7, #0]
 800cb24:	f04f 30ff 	mov.w	r0, #4294967295
 800cb28:	b01d      	add	sp, #116	@ 0x74
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	2340      	movs	r3, #64	@ 0x40
 800cb30:	616b      	str	r3, [r5, #20]
 800cb32:	2300      	movs	r3, #0
 800cb34:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb36:	2320      	movs	r3, #32
 800cb38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb3c:	2330      	movs	r3, #48	@ 0x30
 800cb3e:	f04f 0901 	mov.w	r9, #1
 800cb42:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb46:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cce0 <_svfiprintf_r+0x1e4>
 800cb4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb4e:	4623      	mov	r3, r4
 800cb50:	469a      	mov	sl, r3
 800cb52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb56:	b10a      	cbz	r2, 800cb5c <_svfiprintf_r+0x60>
 800cb58:	2a25      	cmp	r2, #37	@ 0x25
 800cb5a:	d1f9      	bne.n	800cb50 <_svfiprintf_r+0x54>
 800cb5c:	ebba 0b04 	subs.w	fp, sl, r4
 800cb60:	d00b      	beq.n	800cb7a <_svfiprintf_r+0x7e>
 800cb62:	465b      	mov	r3, fp
 800cb64:	4622      	mov	r2, r4
 800cb66:	4629      	mov	r1, r5
 800cb68:	4638      	mov	r0, r7
 800cb6a:	f7ff ff6b 	bl	800ca44 <__ssputs_r>
 800cb6e:	3001      	adds	r0, #1
 800cb70:	f000 80a7 	beq.w	800ccc2 <_svfiprintf_r+0x1c6>
 800cb74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb76:	445a      	add	r2, fp
 800cb78:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb7a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f000 809f 	beq.w	800ccc2 <_svfiprintf_r+0x1c6>
 800cb84:	2300      	movs	r3, #0
 800cb86:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb8e:	f10a 0a01 	add.w	sl, sl, #1
 800cb92:	9304      	str	r3, [sp, #16]
 800cb94:	9307      	str	r3, [sp, #28]
 800cb96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb9c:	4654      	mov	r4, sl
 800cb9e:	2205      	movs	r2, #5
 800cba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba4:	484e      	ldr	r0, [pc, #312]	@ (800cce0 <_svfiprintf_r+0x1e4>)
 800cba6:	f7fd fd6a 	bl	800a67e <memchr>
 800cbaa:	9a04      	ldr	r2, [sp, #16]
 800cbac:	b9d8      	cbnz	r0, 800cbe6 <_svfiprintf_r+0xea>
 800cbae:	06d0      	lsls	r0, r2, #27
 800cbb0:	bf44      	itt	mi
 800cbb2:	2320      	movmi	r3, #32
 800cbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbb8:	0711      	lsls	r1, r2, #28
 800cbba:	bf44      	itt	mi
 800cbbc:	232b      	movmi	r3, #43	@ 0x2b
 800cbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbc2:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbc8:	d015      	beq.n	800cbf6 <_svfiprintf_r+0xfa>
 800cbca:	4654      	mov	r4, sl
 800cbcc:	2000      	movs	r0, #0
 800cbce:	f04f 0c0a 	mov.w	ip, #10
 800cbd2:	9a07      	ldr	r2, [sp, #28]
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbda:	3b30      	subs	r3, #48	@ 0x30
 800cbdc:	2b09      	cmp	r3, #9
 800cbde:	d94b      	bls.n	800cc78 <_svfiprintf_r+0x17c>
 800cbe0:	b1b0      	cbz	r0, 800cc10 <_svfiprintf_r+0x114>
 800cbe2:	9207      	str	r2, [sp, #28]
 800cbe4:	e014      	b.n	800cc10 <_svfiprintf_r+0x114>
 800cbe6:	eba0 0308 	sub.w	r3, r0, r8
 800cbea:	fa09 f303 	lsl.w	r3, r9, r3
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	46a2      	mov	sl, r4
 800cbf2:	9304      	str	r3, [sp, #16]
 800cbf4:	e7d2      	b.n	800cb9c <_svfiprintf_r+0xa0>
 800cbf6:	9b03      	ldr	r3, [sp, #12]
 800cbf8:	1d19      	adds	r1, r3, #4
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	9103      	str	r1, [sp, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bfbb      	ittet	lt
 800cc02:	425b      	neglt	r3, r3
 800cc04:	f042 0202 	orrlt.w	r2, r2, #2
 800cc08:	9307      	strge	r3, [sp, #28]
 800cc0a:	9307      	strlt	r3, [sp, #28]
 800cc0c:	bfb8      	it	lt
 800cc0e:	9204      	strlt	r2, [sp, #16]
 800cc10:	7823      	ldrb	r3, [r4, #0]
 800cc12:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc14:	d10a      	bne.n	800cc2c <_svfiprintf_r+0x130>
 800cc16:	7863      	ldrb	r3, [r4, #1]
 800cc18:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc1a:	d132      	bne.n	800cc82 <_svfiprintf_r+0x186>
 800cc1c:	9b03      	ldr	r3, [sp, #12]
 800cc1e:	3402      	adds	r4, #2
 800cc20:	1d1a      	adds	r2, r3, #4
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	9203      	str	r2, [sp, #12]
 800cc26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc2a:	9305      	str	r3, [sp, #20]
 800cc2c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cce4 <_svfiprintf_r+0x1e8>
 800cc30:	2203      	movs	r2, #3
 800cc32:	4650      	mov	r0, sl
 800cc34:	7821      	ldrb	r1, [r4, #0]
 800cc36:	f7fd fd22 	bl	800a67e <memchr>
 800cc3a:	b138      	cbz	r0, 800cc4c <_svfiprintf_r+0x150>
 800cc3c:	2240      	movs	r2, #64	@ 0x40
 800cc3e:	9b04      	ldr	r3, [sp, #16]
 800cc40:	eba0 000a 	sub.w	r0, r0, sl
 800cc44:	4082      	lsls	r2, r0
 800cc46:	4313      	orrs	r3, r2
 800cc48:	3401      	adds	r4, #1
 800cc4a:	9304      	str	r3, [sp, #16]
 800cc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc50:	2206      	movs	r2, #6
 800cc52:	4825      	ldr	r0, [pc, #148]	@ (800cce8 <_svfiprintf_r+0x1ec>)
 800cc54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc58:	f7fd fd11 	bl	800a67e <memchr>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d036      	beq.n	800ccce <_svfiprintf_r+0x1d2>
 800cc60:	4b22      	ldr	r3, [pc, #136]	@ (800ccec <_svfiprintf_r+0x1f0>)
 800cc62:	bb1b      	cbnz	r3, 800ccac <_svfiprintf_r+0x1b0>
 800cc64:	9b03      	ldr	r3, [sp, #12]
 800cc66:	3307      	adds	r3, #7
 800cc68:	f023 0307 	bic.w	r3, r3, #7
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	9303      	str	r3, [sp, #12]
 800cc70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc72:	4433      	add	r3, r6
 800cc74:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc76:	e76a      	b.n	800cb4e <_svfiprintf_r+0x52>
 800cc78:	460c      	mov	r4, r1
 800cc7a:	2001      	movs	r0, #1
 800cc7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc80:	e7a8      	b.n	800cbd4 <_svfiprintf_r+0xd8>
 800cc82:	2300      	movs	r3, #0
 800cc84:	f04f 0c0a 	mov.w	ip, #10
 800cc88:	4619      	mov	r1, r3
 800cc8a:	3401      	adds	r4, #1
 800cc8c:	9305      	str	r3, [sp, #20]
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc94:	3a30      	subs	r2, #48	@ 0x30
 800cc96:	2a09      	cmp	r2, #9
 800cc98:	d903      	bls.n	800cca2 <_svfiprintf_r+0x1a6>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d0c6      	beq.n	800cc2c <_svfiprintf_r+0x130>
 800cc9e:	9105      	str	r1, [sp, #20]
 800cca0:	e7c4      	b.n	800cc2c <_svfiprintf_r+0x130>
 800cca2:	4604      	mov	r4, r0
 800cca4:	2301      	movs	r3, #1
 800cca6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccaa:	e7f0      	b.n	800cc8e <_svfiprintf_r+0x192>
 800ccac:	ab03      	add	r3, sp, #12
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	462a      	mov	r2, r5
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf0 <_svfiprintf_r+0x1f4>)
 800ccb6:	a904      	add	r1, sp, #16
 800ccb8:	f7fc fd2e 	bl	8009718 <_printf_float>
 800ccbc:	1c42      	adds	r2, r0, #1
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	d1d6      	bne.n	800cc70 <_svfiprintf_r+0x174>
 800ccc2:	89ab      	ldrh	r3, [r5, #12]
 800ccc4:	065b      	lsls	r3, r3, #25
 800ccc6:	f53f af2d 	bmi.w	800cb24 <_svfiprintf_r+0x28>
 800ccca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cccc:	e72c      	b.n	800cb28 <_svfiprintf_r+0x2c>
 800ccce:	ab03      	add	r3, sp, #12
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	462a      	mov	r2, r5
 800ccd4:	4638      	mov	r0, r7
 800ccd6:	4b06      	ldr	r3, [pc, #24]	@ (800ccf0 <_svfiprintf_r+0x1f4>)
 800ccd8:	a904      	add	r1, sp, #16
 800ccda:	f7fc ffbb 	bl	8009c54 <_printf_i>
 800ccde:	e7ed      	b.n	800ccbc <_svfiprintf_r+0x1c0>
 800cce0:	0801006d 	.word	0x0801006d
 800cce4:	08010073 	.word	0x08010073
 800cce8:	08010077 	.word	0x08010077
 800ccec:	08009719 	.word	0x08009719
 800ccf0:	0800ca45 	.word	0x0800ca45

0800ccf4 <__sflush_r>:
 800ccf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	0716      	lsls	r6, r2, #28
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	460c      	mov	r4, r1
 800cd00:	d454      	bmi.n	800cdac <__sflush_r+0xb8>
 800cd02:	684b      	ldr	r3, [r1, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dc02      	bgt.n	800cd0e <__sflush_r+0x1a>
 800cd08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	dd48      	ble.n	800cda0 <__sflush_r+0xac>
 800cd0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd10:	2e00      	cmp	r6, #0
 800cd12:	d045      	beq.n	800cda0 <__sflush_r+0xac>
 800cd14:	2300      	movs	r3, #0
 800cd16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd1a:	682f      	ldr	r7, [r5, #0]
 800cd1c:	6a21      	ldr	r1, [r4, #32]
 800cd1e:	602b      	str	r3, [r5, #0]
 800cd20:	d030      	beq.n	800cd84 <__sflush_r+0x90>
 800cd22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	0759      	lsls	r1, r3, #29
 800cd28:	d505      	bpl.n	800cd36 <__sflush_r+0x42>
 800cd2a:	6863      	ldr	r3, [r4, #4]
 800cd2c:	1ad2      	subs	r2, r2, r3
 800cd2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd30:	b10b      	cbz	r3, 800cd36 <__sflush_r+0x42>
 800cd32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd34:	1ad2      	subs	r2, r2, r3
 800cd36:	2300      	movs	r3, #0
 800cd38:	4628      	mov	r0, r5
 800cd3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd3c:	6a21      	ldr	r1, [r4, #32]
 800cd3e:	47b0      	blx	r6
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	d106      	bne.n	800cd54 <__sflush_r+0x60>
 800cd46:	6829      	ldr	r1, [r5, #0]
 800cd48:	291d      	cmp	r1, #29
 800cd4a:	d82b      	bhi.n	800cda4 <__sflush_r+0xb0>
 800cd4c:	4a28      	ldr	r2, [pc, #160]	@ (800cdf0 <__sflush_r+0xfc>)
 800cd4e:	40ca      	lsrs	r2, r1
 800cd50:	07d6      	lsls	r6, r2, #31
 800cd52:	d527      	bpl.n	800cda4 <__sflush_r+0xb0>
 800cd54:	2200      	movs	r2, #0
 800cd56:	6062      	str	r2, [r4, #4]
 800cd58:	6922      	ldr	r2, [r4, #16]
 800cd5a:	04d9      	lsls	r1, r3, #19
 800cd5c:	6022      	str	r2, [r4, #0]
 800cd5e:	d504      	bpl.n	800cd6a <__sflush_r+0x76>
 800cd60:	1c42      	adds	r2, r0, #1
 800cd62:	d101      	bne.n	800cd68 <__sflush_r+0x74>
 800cd64:	682b      	ldr	r3, [r5, #0]
 800cd66:	b903      	cbnz	r3, 800cd6a <__sflush_r+0x76>
 800cd68:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd6c:	602f      	str	r7, [r5, #0]
 800cd6e:	b1b9      	cbz	r1, 800cda0 <__sflush_r+0xac>
 800cd70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd74:	4299      	cmp	r1, r3
 800cd76:	d002      	beq.n	800cd7e <__sflush_r+0x8a>
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f7fe fafd 	bl	800b378 <_free_r>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd82:	e00d      	b.n	800cda0 <__sflush_r+0xac>
 800cd84:	2301      	movs	r3, #1
 800cd86:	4628      	mov	r0, r5
 800cd88:	47b0      	blx	r6
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	1c50      	adds	r0, r2, #1
 800cd8e:	d1c9      	bne.n	800cd24 <__sflush_r+0x30>
 800cd90:	682b      	ldr	r3, [r5, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d0c6      	beq.n	800cd24 <__sflush_r+0x30>
 800cd96:	2b1d      	cmp	r3, #29
 800cd98:	d001      	beq.n	800cd9e <__sflush_r+0xaa>
 800cd9a:	2b16      	cmp	r3, #22
 800cd9c:	d11d      	bne.n	800cdda <__sflush_r+0xe6>
 800cd9e:	602f      	str	r7, [r5, #0]
 800cda0:	2000      	movs	r0, #0
 800cda2:	e021      	b.n	800cde8 <__sflush_r+0xf4>
 800cda4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cda8:	b21b      	sxth	r3, r3
 800cdaa:	e01a      	b.n	800cde2 <__sflush_r+0xee>
 800cdac:	690f      	ldr	r7, [r1, #16]
 800cdae:	2f00      	cmp	r7, #0
 800cdb0:	d0f6      	beq.n	800cda0 <__sflush_r+0xac>
 800cdb2:	0793      	lsls	r3, r2, #30
 800cdb4:	bf18      	it	ne
 800cdb6:	2300      	movne	r3, #0
 800cdb8:	680e      	ldr	r6, [r1, #0]
 800cdba:	bf08      	it	eq
 800cdbc:	694b      	ldreq	r3, [r1, #20]
 800cdbe:	1bf6      	subs	r6, r6, r7
 800cdc0:	600f      	str	r7, [r1, #0]
 800cdc2:	608b      	str	r3, [r1, #8]
 800cdc4:	2e00      	cmp	r6, #0
 800cdc6:	ddeb      	ble.n	800cda0 <__sflush_r+0xac>
 800cdc8:	4633      	mov	r3, r6
 800cdca:	463a      	mov	r2, r7
 800cdcc:	4628      	mov	r0, r5
 800cdce:	6a21      	ldr	r1, [r4, #32]
 800cdd0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cdd4:	47e0      	blx	ip
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	dc07      	bgt.n	800cdea <__sflush_r+0xf6>
 800cdda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cde2:	f04f 30ff 	mov.w	r0, #4294967295
 800cde6:	81a3      	strh	r3, [r4, #12]
 800cde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdea:	4407      	add	r7, r0
 800cdec:	1a36      	subs	r6, r6, r0
 800cdee:	e7e9      	b.n	800cdc4 <__sflush_r+0xd0>
 800cdf0:	20400001 	.word	0x20400001

0800cdf4 <_fflush_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	690b      	ldr	r3, [r1, #16]
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	b913      	cbnz	r3, 800ce04 <_fflush_r+0x10>
 800cdfe:	2500      	movs	r5, #0
 800ce00:	4628      	mov	r0, r5
 800ce02:	bd38      	pop	{r3, r4, r5, pc}
 800ce04:	b118      	cbz	r0, 800ce0e <_fflush_r+0x1a>
 800ce06:	6a03      	ldr	r3, [r0, #32]
 800ce08:	b90b      	cbnz	r3, 800ce0e <_fflush_r+0x1a>
 800ce0a:	f7fd fad7 	bl	800a3bc <__sinit>
 800ce0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d0f3      	beq.n	800cdfe <_fflush_r+0xa>
 800ce16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce18:	07d0      	lsls	r0, r2, #31
 800ce1a:	d404      	bmi.n	800ce26 <_fflush_r+0x32>
 800ce1c:	0599      	lsls	r1, r3, #22
 800ce1e:	d402      	bmi.n	800ce26 <_fflush_r+0x32>
 800ce20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce22:	f7fd fc2a 	bl	800a67a <__retarget_lock_acquire_recursive>
 800ce26:	4628      	mov	r0, r5
 800ce28:	4621      	mov	r1, r4
 800ce2a:	f7ff ff63 	bl	800ccf4 <__sflush_r>
 800ce2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce30:	4605      	mov	r5, r0
 800ce32:	07da      	lsls	r2, r3, #31
 800ce34:	d4e4      	bmi.n	800ce00 <_fflush_r+0xc>
 800ce36:	89a3      	ldrh	r3, [r4, #12]
 800ce38:	059b      	lsls	r3, r3, #22
 800ce3a:	d4e1      	bmi.n	800ce00 <_fflush_r+0xc>
 800ce3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce3e:	f7fd fc1d 	bl	800a67c <__retarget_lock_release_recursive>
 800ce42:	e7dd      	b.n	800ce00 <_fflush_r+0xc>

0800ce44 <memmove>:
 800ce44:	4288      	cmp	r0, r1
 800ce46:	b510      	push	{r4, lr}
 800ce48:	eb01 0402 	add.w	r4, r1, r2
 800ce4c:	d902      	bls.n	800ce54 <memmove+0x10>
 800ce4e:	4284      	cmp	r4, r0
 800ce50:	4623      	mov	r3, r4
 800ce52:	d807      	bhi.n	800ce64 <memmove+0x20>
 800ce54:	1e43      	subs	r3, r0, #1
 800ce56:	42a1      	cmp	r1, r4
 800ce58:	d008      	beq.n	800ce6c <memmove+0x28>
 800ce5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce62:	e7f8      	b.n	800ce56 <memmove+0x12>
 800ce64:	4601      	mov	r1, r0
 800ce66:	4402      	add	r2, r0
 800ce68:	428a      	cmp	r2, r1
 800ce6a:	d100      	bne.n	800ce6e <memmove+0x2a>
 800ce6c:	bd10      	pop	{r4, pc}
 800ce6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce76:	e7f7      	b.n	800ce68 <memmove+0x24>

0800ce78 <strncmp>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	b16a      	cbz	r2, 800ce98 <strncmp+0x20>
 800ce7c:	3901      	subs	r1, #1
 800ce7e:	1884      	adds	r4, r0, r2
 800ce80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d103      	bne.n	800ce94 <strncmp+0x1c>
 800ce8c:	42a0      	cmp	r0, r4
 800ce8e:	d001      	beq.n	800ce94 <strncmp+0x1c>
 800ce90:	2a00      	cmp	r2, #0
 800ce92:	d1f5      	bne.n	800ce80 <strncmp+0x8>
 800ce94:	1ad0      	subs	r0, r2, r3
 800ce96:	bd10      	pop	{r4, pc}
 800ce98:	4610      	mov	r0, r2
 800ce9a:	e7fc      	b.n	800ce96 <strncmp+0x1e>

0800ce9c <nan>:
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	4901      	ldr	r1, [pc, #4]	@ (800cea4 <nan+0x8>)
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	7ff80000 	.word	0x7ff80000

0800cea8 <__assert_func>:
 800cea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceaa:	4614      	mov	r4, r2
 800ceac:	461a      	mov	r2, r3
 800ceae:	4b09      	ldr	r3, [pc, #36]	@ (800ced4 <__assert_func+0x2c>)
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	68d8      	ldr	r0, [r3, #12]
 800ceb6:	b14c      	cbz	r4, 800cecc <__assert_func+0x24>
 800ceb8:	4b07      	ldr	r3, [pc, #28]	@ (800ced8 <__assert_func+0x30>)
 800ceba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cebe:	9100      	str	r1, [sp, #0]
 800cec0:	462b      	mov	r3, r5
 800cec2:	4906      	ldr	r1, [pc, #24]	@ (800cedc <__assert_func+0x34>)
 800cec4:	f000 fba8 	bl	800d618 <fiprintf>
 800cec8:	f000 fbb8 	bl	800d63c <abort>
 800cecc:	4b04      	ldr	r3, [pc, #16]	@ (800cee0 <__assert_func+0x38>)
 800cece:	461c      	mov	r4, r3
 800ced0:	e7f3      	b.n	800ceba <__assert_func+0x12>
 800ced2:	bf00      	nop
 800ced4:	2000001c 	.word	0x2000001c
 800ced8:	08010086 	.word	0x08010086
 800cedc:	08010093 	.word	0x08010093
 800cee0:	080100c1 	.word	0x080100c1

0800cee4 <_calloc_r>:
 800cee4:	b570      	push	{r4, r5, r6, lr}
 800cee6:	fba1 5402 	umull	r5, r4, r1, r2
 800ceea:	b934      	cbnz	r4, 800cefa <_calloc_r+0x16>
 800ceec:	4629      	mov	r1, r5
 800ceee:	f7fc fae9 	bl	80094c4 <_malloc_r>
 800cef2:	4606      	mov	r6, r0
 800cef4:	b928      	cbnz	r0, 800cf02 <_calloc_r+0x1e>
 800cef6:	4630      	mov	r0, r6
 800cef8:	bd70      	pop	{r4, r5, r6, pc}
 800cefa:	220c      	movs	r2, #12
 800cefc:	2600      	movs	r6, #0
 800cefe:	6002      	str	r2, [r0, #0]
 800cf00:	e7f9      	b.n	800cef6 <_calloc_r+0x12>
 800cf02:	462a      	mov	r2, r5
 800cf04:	4621      	mov	r1, r4
 800cf06:	f7fd fb2a 	bl	800a55e <memset>
 800cf0a:	e7f4      	b.n	800cef6 <_calloc_r+0x12>

0800cf0c <rshift>:
 800cf0c:	6903      	ldr	r3, [r0, #16]
 800cf0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf16:	f100 0414 	add.w	r4, r0, #20
 800cf1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf1e:	dd46      	ble.n	800cfae <rshift+0xa2>
 800cf20:	f011 011f 	ands.w	r1, r1, #31
 800cf24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf2c:	d10c      	bne.n	800cf48 <rshift+0x3c>
 800cf2e:	4629      	mov	r1, r5
 800cf30:	f100 0710 	add.w	r7, r0, #16
 800cf34:	42b1      	cmp	r1, r6
 800cf36:	d335      	bcc.n	800cfa4 <rshift+0x98>
 800cf38:	1a9b      	subs	r3, r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	1eea      	subs	r2, r5, #3
 800cf3e:	4296      	cmp	r6, r2
 800cf40:	bf38      	it	cc
 800cf42:	2300      	movcc	r3, #0
 800cf44:	4423      	add	r3, r4
 800cf46:	e015      	b.n	800cf74 <rshift+0x68>
 800cf48:	46a1      	mov	r9, r4
 800cf4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf4e:	f1c1 0820 	rsb	r8, r1, #32
 800cf52:	40cf      	lsrs	r7, r1
 800cf54:	f105 0e04 	add.w	lr, r5, #4
 800cf58:	4576      	cmp	r6, lr
 800cf5a:	46f4      	mov	ip, lr
 800cf5c:	d816      	bhi.n	800cf8c <rshift+0x80>
 800cf5e:	1a9a      	subs	r2, r3, r2
 800cf60:	0092      	lsls	r2, r2, #2
 800cf62:	3a04      	subs	r2, #4
 800cf64:	3501      	adds	r5, #1
 800cf66:	42ae      	cmp	r6, r5
 800cf68:	bf38      	it	cc
 800cf6a:	2200      	movcc	r2, #0
 800cf6c:	18a3      	adds	r3, r4, r2
 800cf6e:	50a7      	str	r7, [r4, r2]
 800cf70:	b107      	cbz	r7, 800cf74 <rshift+0x68>
 800cf72:	3304      	adds	r3, #4
 800cf74:	42a3      	cmp	r3, r4
 800cf76:	eba3 0204 	sub.w	r2, r3, r4
 800cf7a:	bf08      	it	eq
 800cf7c:	2300      	moveq	r3, #0
 800cf7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf82:	6102      	str	r2, [r0, #16]
 800cf84:	bf08      	it	eq
 800cf86:	6143      	streq	r3, [r0, #20]
 800cf88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf8c:	f8dc c000 	ldr.w	ip, [ip]
 800cf90:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf94:	ea4c 0707 	orr.w	r7, ip, r7
 800cf98:	f849 7b04 	str.w	r7, [r9], #4
 800cf9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfa0:	40cf      	lsrs	r7, r1
 800cfa2:	e7d9      	b.n	800cf58 <rshift+0x4c>
 800cfa4:	f851 cb04 	ldr.w	ip, [r1], #4
 800cfa8:	f847 cf04 	str.w	ip, [r7, #4]!
 800cfac:	e7c2      	b.n	800cf34 <rshift+0x28>
 800cfae:	4623      	mov	r3, r4
 800cfb0:	e7e0      	b.n	800cf74 <rshift+0x68>

0800cfb2 <__hexdig_fun>:
 800cfb2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cfb6:	2b09      	cmp	r3, #9
 800cfb8:	d802      	bhi.n	800cfc0 <__hexdig_fun+0xe>
 800cfba:	3820      	subs	r0, #32
 800cfbc:	b2c0      	uxtb	r0, r0
 800cfbe:	4770      	bx	lr
 800cfc0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cfc4:	2b05      	cmp	r3, #5
 800cfc6:	d801      	bhi.n	800cfcc <__hexdig_fun+0x1a>
 800cfc8:	3847      	subs	r0, #71	@ 0x47
 800cfca:	e7f7      	b.n	800cfbc <__hexdig_fun+0xa>
 800cfcc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cfd0:	2b05      	cmp	r3, #5
 800cfd2:	d801      	bhi.n	800cfd8 <__hexdig_fun+0x26>
 800cfd4:	3827      	subs	r0, #39	@ 0x27
 800cfd6:	e7f1      	b.n	800cfbc <__hexdig_fun+0xa>
 800cfd8:	2000      	movs	r0, #0
 800cfda:	4770      	bx	lr

0800cfdc <__gethex>:
 800cfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe0:	468a      	mov	sl, r1
 800cfe2:	4690      	mov	r8, r2
 800cfe4:	b085      	sub	sp, #20
 800cfe6:	9302      	str	r3, [sp, #8]
 800cfe8:	680b      	ldr	r3, [r1, #0]
 800cfea:	9001      	str	r0, [sp, #4]
 800cfec:	1c9c      	adds	r4, r3, #2
 800cfee:	46a1      	mov	r9, r4
 800cff0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cff4:	2830      	cmp	r0, #48	@ 0x30
 800cff6:	d0fa      	beq.n	800cfee <__gethex+0x12>
 800cff8:	eba9 0303 	sub.w	r3, r9, r3
 800cffc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d000:	f7ff ffd7 	bl	800cfb2 <__hexdig_fun>
 800d004:	4605      	mov	r5, r0
 800d006:	2800      	cmp	r0, #0
 800d008:	d168      	bne.n	800d0dc <__gethex+0x100>
 800d00a:	2201      	movs	r2, #1
 800d00c:	4648      	mov	r0, r9
 800d00e:	499f      	ldr	r1, [pc, #636]	@ (800d28c <__gethex+0x2b0>)
 800d010:	f7ff ff32 	bl	800ce78 <strncmp>
 800d014:	4607      	mov	r7, r0
 800d016:	2800      	cmp	r0, #0
 800d018:	d167      	bne.n	800d0ea <__gethex+0x10e>
 800d01a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d01e:	4626      	mov	r6, r4
 800d020:	f7ff ffc7 	bl	800cfb2 <__hexdig_fun>
 800d024:	2800      	cmp	r0, #0
 800d026:	d062      	beq.n	800d0ee <__gethex+0x112>
 800d028:	4623      	mov	r3, r4
 800d02a:	7818      	ldrb	r0, [r3, #0]
 800d02c:	4699      	mov	r9, r3
 800d02e:	2830      	cmp	r0, #48	@ 0x30
 800d030:	f103 0301 	add.w	r3, r3, #1
 800d034:	d0f9      	beq.n	800d02a <__gethex+0x4e>
 800d036:	f7ff ffbc 	bl	800cfb2 <__hexdig_fun>
 800d03a:	fab0 f580 	clz	r5, r0
 800d03e:	f04f 0b01 	mov.w	fp, #1
 800d042:	096d      	lsrs	r5, r5, #5
 800d044:	464a      	mov	r2, r9
 800d046:	4616      	mov	r6, r2
 800d048:	7830      	ldrb	r0, [r6, #0]
 800d04a:	3201      	adds	r2, #1
 800d04c:	f7ff ffb1 	bl	800cfb2 <__hexdig_fun>
 800d050:	2800      	cmp	r0, #0
 800d052:	d1f8      	bne.n	800d046 <__gethex+0x6a>
 800d054:	2201      	movs	r2, #1
 800d056:	4630      	mov	r0, r6
 800d058:	498c      	ldr	r1, [pc, #560]	@ (800d28c <__gethex+0x2b0>)
 800d05a:	f7ff ff0d 	bl	800ce78 <strncmp>
 800d05e:	2800      	cmp	r0, #0
 800d060:	d13f      	bne.n	800d0e2 <__gethex+0x106>
 800d062:	b944      	cbnz	r4, 800d076 <__gethex+0x9a>
 800d064:	1c74      	adds	r4, r6, #1
 800d066:	4622      	mov	r2, r4
 800d068:	4616      	mov	r6, r2
 800d06a:	7830      	ldrb	r0, [r6, #0]
 800d06c:	3201      	adds	r2, #1
 800d06e:	f7ff ffa0 	bl	800cfb2 <__hexdig_fun>
 800d072:	2800      	cmp	r0, #0
 800d074:	d1f8      	bne.n	800d068 <__gethex+0x8c>
 800d076:	1ba4      	subs	r4, r4, r6
 800d078:	00a7      	lsls	r7, r4, #2
 800d07a:	7833      	ldrb	r3, [r6, #0]
 800d07c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d080:	2b50      	cmp	r3, #80	@ 0x50
 800d082:	d13e      	bne.n	800d102 <__gethex+0x126>
 800d084:	7873      	ldrb	r3, [r6, #1]
 800d086:	2b2b      	cmp	r3, #43	@ 0x2b
 800d088:	d033      	beq.n	800d0f2 <__gethex+0x116>
 800d08a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d08c:	d034      	beq.n	800d0f8 <__gethex+0x11c>
 800d08e:	2400      	movs	r4, #0
 800d090:	1c71      	adds	r1, r6, #1
 800d092:	7808      	ldrb	r0, [r1, #0]
 800d094:	f7ff ff8d 	bl	800cfb2 <__hexdig_fun>
 800d098:	1e43      	subs	r3, r0, #1
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b18      	cmp	r3, #24
 800d09e:	d830      	bhi.n	800d102 <__gethex+0x126>
 800d0a0:	f1a0 0210 	sub.w	r2, r0, #16
 800d0a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d0a8:	f7ff ff83 	bl	800cfb2 <__hexdig_fun>
 800d0ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800d0b0:	fa5f fc8c 	uxtb.w	ip, ip
 800d0b4:	f1bc 0f18 	cmp.w	ip, #24
 800d0b8:	f04f 030a 	mov.w	r3, #10
 800d0bc:	d91e      	bls.n	800d0fc <__gethex+0x120>
 800d0be:	b104      	cbz	r4, 800d0c2 <__gethex+0xe6>
 800d0c0:	4252      	negs	r2, r2
 800d0c2:	4417      	add	r7, r2
 800d0c4:	f8ca 1000 	str.w	r1, [sl]
 800d0c8:	b1ed      	cbz	r5, 800d106 <__gethex+0x12a>
 800d0ca:	f1bb 0f00 	cmp.w	fp, #0
 800d0ce:	bf0c      	ite	eq
 800d0d0:	2506      	moveq	r5, #6
 800d0d2:	2500      	movne	r5, #0
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	b005      	add	sp, #20
 800d0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0dc:	2500      	movs	r5, #0
 800d0de:	462c      	mov	r4, r5
 800d0e0:	e7b0      	b.n	800d044 <__gethex+0x68>
 800d0e2:	2c00      	cmp	r4, #0
 800d0e4:	d1c7      	bne.n	800d076 <__gethex+0x9a>
 800d0e6:	4627      	mov	r7, r4
 800d0e8:	e7c7      	b.n	800d07a <__gethex+0x9e>
 800d0ea:	464e      	mov	r6, r9
 800d0ec:	462f      	mov	r7, r5
 800d0ee:	2501      	movs	r5, #1
 800d0f0:	e7c3      	b.n	800d07a <__gethex+0x9e>
 800d0f2:	2400      	movs	r4, #0
 800d0f4:	1cb1      	adds	r1, r6, #2
 800d0f6:	e7cc      	b.n	800d092 <__gethex+0xb6>
 800d0f8:	2401      	movs	r4, #1
 800d0fa:	e7fb      	b.n	800d0f4 <__gethex+0x118>
 800d0fc:	fb03 0002 	mla	r0, r3, r2, r0
 800d100:	e7ce      	b.n	800d0a0 <__gethex+0xc4>
 800d102:	4631      	mov	r1, r6
 800d104:	e7de      	b.n	800d0c4 <__gethex+0xe8>
 800d106:	4629      	mov	r1, r5
 800d108:	eba6 0309 	sub.w	r3, r6, r9
 800d10c:	3b01      	subs	r3, #1
 800d10e:	2b07      	cmp	r3, #7
 800d110:	dc0a      	bgt.n	800d128 <__gethex+0x14c>
 800d112:	9801      	ldr	r0, [sp, #4]
 800d114:	f7fe f978 	bl	800b408 <_Balloc>
 800d118:	4604      	mov	r4, r0
 800d11a:	b940      	cbnz	r0, 800d12e <__gethex+0x152>
 800d11c:	4602      	mov	r2, r0
 800d11e:	21e4      	movs	r1, #228	@ 0xe4
 800d120:	4b5b      	ldr	r3, [pc, #364]	@ (800d290 <__gethex+0x2b4>)
 800d122:	485c      	ldr	r0, [pc, #368]	@ (800d294 <__gethex+0x2b8>)
 800d124:	f7ff fec0 	bl	800cea8 <__assert_func>
 800d128:	3101      	adds	r1, #1
 800d12a:	105b      	asrs	r3, r3, #1
 800d12c:	e7ef      	b.n	800d10e <__gethex+0x132>
 800d12e:	2300      	movs	r3, #0
 800d130:	f100 0a14 	add.w	sl, r0, #20
 800d134:	4655      	mov	r5, sl
 800d136:	469b      	mov	fp, r3
 800d138:	45b1      	cmp	r9, r6
 800d13a:	d337      	bcc.n	800d1ac <__gethex+0x1d0>
 800d13c:	f845 bb04 	str.w	fp, [r5], #4
 800d140:	eba5 050a 	sub.w	r5, r5, sl
 800d144:	10ad      	asrs	r5, r5, #2
 800d146:	6125      	str	r5, [r4, #16]
 800d148:	4658      	mov	r0, fp
 800d14a:	f7fe fa4f 	bl	800b5ec <__hi0bits>
 800d14e:	016d      	lsls	r5, r5, #5
 800d150:	f8d8 6000 	ldr.w	r6, [r8]
 800d154:	1a2d      	subs	r5, r5, r0
 800d156:	42b5      	cmp	r5, r6
 800d158:	dd54      	ble.n	800d204 <__gethex+0x228>
 800d15a:	1bad      	subs	r5, r5, r6
 800d15c:	4629      	mov	r1, r5
 800d15e:	4620      	mov	r0, r4
 800d160:	f7fe fdd1 	bl	800bd06 <__any_on>
 800d164:	4681      	mov	r9, r0
 800d166:	b178      	cbz	r0, 800d188 <__gethex+0x1ac>
 800d168:	f04f 0901 	mov.w	r9, #1
 800d16c:	1e6b      	subs	r3, r5, #1
 800d16e:	1159      	asrs	r1, r3, #5
 800d170:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d174:	f003 021f 	and.w	r2, r3, #31
 800d178:	fa09 f202 	lsl.w	r2, r9, r2
 800d17c:	420a      	tst	r2, r1
 800d17e:	d003      	beq.n	800d188 <__gethex+0x1ac>
 800d180:	454b      	cmp	r3, r9
 800d182:	dc36      	bgt.n	800d1f2 <__gethex+0x216>
 800d184:	f04f 0902 	mov.w	r9, #2
 800d188:	4629      	mov	r1, r5
 800d18a:	4620      	mov	r0, r4
 800d18c:	f7ff febe 	bl	800cf0c <rshift>
 800d190:	442f      	add	r7, r5
 800d192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d196:	42bb      	cmp	r3, r7
 800d198:	da42      	bge.n	800d220 <__gethex+0x244>
 800d19a:	4621      	mov	r1, r4
 800d19c:	9801      	ldr	r0, [sp, #4]
 800d19e:	f7fe f973 	bl	800b488 <_Bfree>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1a6:	25a3      	movs	r5, #163	@ 0xa3
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	e793      	b.n	800d0d4 <__gethex+0xf8>
 800d1ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d1b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d1b2:	d012      	beq.n	800d1da <__gethex+0x1fe>
 800d1b4:	2b20      	cmp	r3, #32
 800d1b6:	d104      	bne.n	800d1c2 <__gethex+0x1e6>
 800d1b8:	f845 bb04 	str.w	fp, [r5], #4
 800d1bc:	f04f 0b00 	mov.w	fp, #0
 800d1c0:	465b      	mov	r3, fp
 800d1c2:	7830      	ldrb	r0, [r6, #0]
 800d1c4:	9303      	str	r3, [sp, #12]
 800d1c6:	f7ff fef4 	bl	800cfb2 <__hexdig_fun>
 800d1ca:	9b03      	ldr	r3, [sp, #12]
 800d1cc:	f000 000f 	and.w	r0, r0, #15
 800d1d0:	4098      	lsls	r0, r3
 800d1d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	e7ae      	b.n	800d138 <__gethex+0x15c>
 800d1da:	45b1      	cmp	r9, r6
 800d1dc:	d8ea      	bhi.n	800d1b4 <__gethex+0x1d8>
 800d1de:	2201      	movs	r2, #1
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	492a      	ldr	r1, [pc, #168]	@ (800d28c <__gethex+0x2b0>)
 800d1e4:	9303      	str	r3, [sp, #12]
 800d1e6:	f7ff fe47 	bl	800ce78 <strncmp>
 800d1ea:	9b03      	ldr	r3, [sp, #12]
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d1e1      	bne.n	800d1b4 <__gethex+0x1d8>
 800d1f0:	e7a2      	b.n	800d138 <__gethex+0x15c>
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	1ea9      	subs	r1, r5, #2
 800d1f6:	f7fe fd86 	bl	800bd06 <__any_on>
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	d0c2      	beq.n	800d184 <__gethex+0x1a8>
 800d1fe:	f04f 0903 	mov.w	r9, #3
 800d202:	e7c1      	b.n	800d188 <__gethex+0x1ac>
 800d204:	da09      	bge.n	800d21a <__gethex+0x23e>
 800d206:	1b75      	subs	r5, r6, r5
 800d208:	4621      	mov	r1, r4
 800d20a:	462a      	mov	r2, r5
 800d20c:	9801      	ldr	r0, [sp, #4]
 800d20e:	f7fe fb4b 	bl	800b8a8 <__lshift>
 800d212:	4604      	mov	r4, r0
 800d214:	1b7f      	subs	r7, r7, r5
 800d216:	f100 0a14 	add.w	sl, r0, #20
 800d21a:	f04f 0900 	mov.w	r9, #0
 800d21e:	e7b8      	b.n	800d192 <__gethex+0x1b6>
 800d220:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d224:	42bd      	cmp	r5, r7
 800d226:	dd6f      	ble.n	800d308 <__gethex+0x32c>
 800d228:	1bed      	subs	r5, r5, r7
 800d22a:	42ae      	cmp	r6, r5
 800d22c:	dc34      	bgt.n	800d298 <__gethex+0x2bc>
 800d22e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d232:	2b02      	cmp	r3, #2
 800d234:	d022      	beq.n	800d27c <__gethex+0x2a0>
 800d236:	2b03      	cmp	r3, #3
 800d238:	d024      	beq.n	800d284 <__gethex+0x2a8>
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d115      	bne.n	800d26a <__gethex+0x28e>
 800d23e:	42ae      	cmp	r6, r5
 800d240:	d113      	bne.n	800d26a <__gethex+0x28e>
 800d242:	2e01      	cmp	r6, #1
 800d244:	d10b      	bne.n	800d25e <__gethex+0x282>
 800d246:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d24a:	9a02      	ldr	r2, [sp, #8]
 800d24c:	2562      	movs	r5, #98	@ 0x62
 800d24e:	6013      	str	r3, [r2, #0]
 800d250:	2301      	movs	r3, #1
 800d252:	6123      	str	r3, [r4, #16]
 800d254:	f8ca 3000 	str.w	r3, [sl]
 800d258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d25a:	601c      	str	r4, [r3, #0]
 800d25c:	e73a      	b.n	800d0d4 <__gethex+0xf8>
 800d25e:	4620      	mov	r0, r4
 800d260:	1e71      	subs	r1, r6, #1
 800d262:	f7fe fd50 	bl	800bd06 <__any_on>
 800d266:	2800      	cmp	r0, #0
 800d268:	d1ed      	bne.n	800d246 <__gethex+0x26a>
 800d26a:	4621      	mov	r1, r4
 800d26c:	9801      	ldr	r0, [sp, #4]
 800d26e:	f7fe f90b 	bl	800b488 <_Bfree>
 800d272:	2300      	movs	r3, #0
 800d274:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d276:	2550      	movs	r5, #80	@ 0x50
 800d278:	6013      	str	r3, [r2, #0]
 800d27a:	e72b      	b.n	800d0d4 <__gethex+0xf8>
 800d27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1f3      	bne.n	800d26a <__gethex+0x28e>
 800d282:	e7e0      	b.n	800d246 <__gethex+0x26a>
 800d284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1dd      	bne.n	800d246 <__gethex+0x26a>
 800d28a:	e7ee      	b.n	800d26a <__gethex+0x28e>
 800d28c:	0801006b 	.word	0x0801006b
 800d290:	08010001 	.word	0x08010001
 800d294:	080100c2 	.word	0x080100c2
 800d298:	1e6f      	subs	r7, r5, #1
 800d29a:	f1b9 0f00 	cmp.w	r9, #0
 800d29e:	d130      	bne.n	800d302 <__gethex+0x326>
 800d2a0:	b127      	cbz	r7, 800d2ac <__gethex+0x2d0>
 800d2a2:	4639      	mov	r1, r7
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f7fe fd2e 	bl	800bd06 <__any_on>
 800d2aa:	4681      	mov	r9, r0
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	1b76      	subs	r6, r6, r5
 800d2b2:	2502      	movs	r5, #2
 800d2b4:	117a      	asrs	r2, r7, #5
 800d2b6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d2ba:	f007 071f 	and.w	r7, r7, #31
 800d2be:	40bb      	lsls	r3, r7
 800d2c0:	4213      	tst	r3, r2
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	bf18      	it	ne
 800d2c6:	f049 0902 	orrne.w	r9, r9, #2
 800d2ca:	f7ff fe1f 	bl	800cf0c <rshift>
 800d2ce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d2d2:	f1b9 0f00 	cmp.w	r9, #0
 800d2d6:	d047      	beq.n	800d368 <__gethex+0x38c>
 800d2d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	d015      	beq.n	800d30c <__gethex+0x330>
 800d2e0:	2b03      	cmp	r3, #3
 800d2e2:	d017      	beq.n	800d314 <__gethex+0x338>
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d109      	bne.n	800d2fc <__gethex+0x320>
 800d2e8:	f019 0f02 	tst.w	r9, #2
 800d2ec:	d006      	beq.n	800d2fc <__gethex+0x320>
 800d2ee:	f8da 3000 	ldr.w	r3, [sl]
 800d2f2:	ea49 0903 	orr.w	r9, r9, r3
 800d2f6:	f019 0f01 	tst.w	r9, #1
 800d2fa:	d10e      	bne.n	800d31a <__gethex+0x33e>
 800d2fc:	f045 0510 	orr.w	r5, r5, #16
 800d300:	e032      	b.n	800d368 <__gethex+0x38c>
 800d302:	f04f 0901 	mov.w	r9, #1
 800d306:	e7d1      	b.n	800d2ac <__gethex+0x2d0>
 800d308:	2501      	movs	r5, #1
 800d30a:	e7e2      	b.n	800d2d2 <__gethex+0x2f6>
 800d30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d30e:	f1c3 0301 	rsb	r3, r3, #1
 800d312:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d316:	2b00      	cmp	r3, #0
 800d318:	d0f0      	beq.n	800d2fc <__gethex+0x320>
 800d31a:	f04f 0c00 	mov.w	ip, #0
 800d31e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d322:	f104 0314 	add.w	r3, r4, #20
 800d326:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d32a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d32e:	4618      	mov	r0, r3
 800d330:	f853 2b04 	ldr.w	r2, [r3], #4
 800d334:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d338:	d01b      	beq.n	800d372 <__gethex+0x396>
 800d33a:	3201      	adds	r2, #1
 800d33c:	6002      	str	r2, [r0, #0]
 800d33e:	2d02      	cmp	r5, #2
 800d340:	f104 0314 	add.w	r3, r4, #20
 800d344:	d13c      	bne.n	800d3c0 <__gethex+0x3e4>
 800d346:	f8d8 2000 	ldr.w	r2, [r8]
 800d34a:	3a01      	subs	r2, #1
 800d34c:	42b2      	cmp	r2, r6
 800d34e:	d109      	bne.n	800d364 <__gethex+0x388>
 800d350:	2201      	movs	r2, #1
 800d352:	1171      	asrs	r1, r6, #5
 800d354:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d358:	f006 061f 	and.w	r6, r6, #31
 800d35c:	fa02 f606 	lsl.w	r6, r2, r6
 800d360:	421e      	tst	r6, r3
 800d362:	d13a      	bne.n	800d3da <__gethex+0x3fe>
 800d364:	f045 0520 	orr.w	r5, r5, #32
 800d368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d36a:	601c      	str	r4, [r3, #0]
 800d36c:	9b02      	ldr	r3, [sp, #8]
 800d36e:	601f      	str	r7, [r3, #0]
 800d370:	e6b0      	b.n	800d0d4 <__gethex+0xf8>
 800d372:	4299      	cmp	r1, r3
 800d374:	f843 cc04 	str.w	ip, [r3, #-4]
 800d378:	d8d9      	bhi.n	800d32e <__gethex+0x352>
 800d37a:	68a3      	ldr	r3, [r4, #8]
 800d37c:	459b      	cmp	fp, r3
 800d37e:	db17      	blt.n	800d3b0 <__gethex+0x3d4>
 800d380:	6861      	ldr	r1, [r4, #4]
 800d382:	9801      	ldr	r0, [sp, #4]
 800d384:	3101      	adds	r1, #1
 800d386:	f7fe f83f 	bl	800b408 <_Balloc>
 800d38a:	4681      	mov	r9, r0
 800d38c:	b918      	cbnz	r0, 800d396 <__gethex+0x3ba>
 800d38e:	4602      	mov	r2, r0
 800d390:	2184      	movs	r1, #132	@ 0x84
 800d392:	4b19      	ldr	r3, [pc, #100]	@ (800d3f8 <__gethex+0x41c>)
 800d394:	e6c5      	b.n	800d122 <__gethex+0x146>
 800d396:	6922      	ldr	r2, [r4, #16]
 800d398:	f104 010c 	add.w	r1, r4, #12
 800d39c:	3202      	adds	r2, #2
 800d39e:	0092      	lsls	r2, r2, #2
 800d3a0:	300c      	adds	r0, #12
 800d3a2:	f7fd f97a 	bl	800a69a <memcpy>
 800d3a6:	4621      	mov	r1, r4
 800d3a8:	9801      	ldr	r0, [sp, #4]
 800d3aa:	f7fe f86d 	bl	800b488 <_Bfree>
 800d3ae:	464c      	mov	r4, r9
 800d3b0:	6923      	ldr	r3, [r4, #16]
 800d3b2:	1c5a      	adds	r2, r3, #1
 800d3b4:	6122      	str	r2, [r4, #16]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d3bc:	615a      	str	r2, [r3, #20]
 800d3be:	e7be      	b.n	800d33e <__gethex+0x362>
 800d3c0:	6922      	ldr	r2, [r4, #16]
 800d3c2:	455a      	cmp	r2, fp
 800d3c4:	dd0b      	ble.n	800d3de <__gethex+0x402>
 800d3c6:	2101      	movs	r1, #1
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f7ff fd9f 	bl	800cf0c <rshift>
 800d3ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3d2:	3701      	adds	r7, #1
 800d3d4:	42bb      	cmp	r3, r7
 800d3d6:	f6ff aee0 	blt.w	800d19a <__gethex+0x1be>
 800d3da:	2501      	movs	r5, #1
 800d3dc:	e7c2      	b.n	800d364 <__gethex+0x388>
 800d3de:	f016 061f 	ands.w	r6, r6, #31
 800d3e2:	d0fa      	beq.n	800d3da <__gethex+0x3fe>
 800d3e4:	4453      	add	r3, sl
 800d3e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3ea:	f7fe f8ff 	bl	800b5ec <__hi0bits>
 800d3ee:	f1c6 0620 	rsb	r6, r6, #32
 800d3f2:	42b0      	cmp	r0, r6
 800d3f4:	dbe7      	blt.n	800d3c6 <__gethex+0x3ea>
 800d3f6:	e7f0      	b.n	800d3da <__gethex+0x3fe>
 800d3f8:	08010001 	.word	0x08010001

0800d3fc <L_shift>:
 800d3fc:	f1c2 0208 	rsb	r2, r2, #8
 800d400:	0092      	lsls	r2, r2, #2
 800d402:	b570      	push	{r4, r5, r6, lr}
 800d404:	f1c2 0620 	rsb	r6, r2, #32
 800d408:	6843      	ldr	r3, [r0, #4]
 800d40a:	6804      	ldr	r4, [r0, #0]
 800d40c:	fa03 f506 	lsl.w	r5, r3, r6
 800d410:	432c      	orrs	r4, r5
 800d412:	40d3      	lsrs	r3, r2
 800d414:	6004      	str	r4, [r0, #0]
 800d416:	f840 3f04 	str.w	r3, [r0, #4]!
 800d41a:	4288      	cmp	r0, r1
 800d41c:	d3f4      	bcc.n	800d408 <L_shift+0xc>
 800d41e:	bd70      	pop	{r4, r5, r6, pc}

0800d420 <__match>:
 800d420:	b530      	push	{r4, r5, lr}
 800d422:	6803      	ldr	r3, [r0, #0]
 800d424:	3301      	adds	r3, #1
 800d426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d42a:	b914      	cbnz	r4, 800d432 <__match+0x12>
 800d42c:	6003      	str	r3, [r0, #0]
 800d42e:	2001      	movs	r0, #1
 800d430:	bd30      	pop	{r4, r5, pc}
 800d432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d436:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d43a:	2d19      	cmp	r5, #25
 800d43c:	bf98      	it	ls
 800d43e:	3220      	addls	r2, #32
 800d440:	42a2      	cmp	r2, r4
 800d442:	d0f0      	beq.n	800d426 <__match+0x6>
 800d444:	2000      	movs	r0, #0
 800d446:	e7f3      	b.n	800d430 <__match+0x10>

0800d448 <__hexnan>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	2500      	movs	r5, #0
 800d44e:	680b      	ldr	r3, [r1, #0]
 800d450:	4682      	mov	sl, r0
 800d452:	115e      	asrs	r6, r3, #5
 800d454:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d458:	f013 031f 	ands.w	r3, r3, #31
 800d45c:	bf18      	it	ne
 800d45e:	3604      	addne	r6, #4
 800d460:	1f37      	subs	r7, r6, #4
 800d462:	4690      	mov	r8, r2
 800d464:	46b9      	mov	r9, r7
 800d466:	463c      	mov	r4, r7
 800d468:	46ab      	mov	fp, r5
 800d46a:	b087      	sub	sp, #28
 800d46c:	6801      	ldr	r1, [r0, #0]
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	f846 5c04 	str.w	r5, [r6, #-4]
 800d474:	9502      	str	r5, [sp, #8]
 800d476:	784a      	ldrb	r2, [r1, #1]
 800d478:	1c4b      	adds	r3, r1, #1
 800d47a:	9303      	str	r3, [sp, #12]
 800d47c:	b342      	cbz	r2, 800d4d0 <__hexnan+0x88>
 800d47e:	4610      	mov	r0, r2
 800d480:	9105      	str	r1, [sp, #20]
 800d482:	9204      	str	r2, [sp, #16]
 800d484:	f7ff fd95 	bl	800cfb2 <__hexdig_fun>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d151      	bne.n	800d530 <__hexnan+0xe8>
 800d48c:	9a04      	ldr	r2, [sp, #16]
 800d48e:	9905      	ldr	r1, [sp, #20]
 800d490:	2a20      	cmp	r2, #32
 800d492:	d818      	bhi.n	800d4c6 <__hexnan+0x7e>
 800d494:	9b02      	ldr	r3, [sp, #8]
 800d496:	459b      	cmp	fp, r3
 800d498:	dd13      	ble.n	800d4c2 <__hexnan+0x7a>
 800d49a:	454c      	cmp	r4, r9
 800d49c:	d206      	bcs.n	800d4ac <__hexnan+0x64>
 800d49e:	2d07      	cmp	r5, #7
 800d4a0:	dc04      	bgt.n	800d4ac <__hexnan+0x64>
 800d4a2:	462a      	mov	r2, r5
 800d4a4:	4649      	mov	r1, r9
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f7ff ffa8 	bl	800d3fc <L_shift>
 800d4ac:	4544      	cmp	r4, r8
 800d4ae:	d952      	bls.n	800d556 <__hexnan+0x10e>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f1a4 0904 	sub.w	r9, r4, #4
 800d4b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4ba:	461d      	mov	r5, r3
 800d4bc:	464c      	mov	r4, r9
 800d4be:	f8cd b008 	str.w	fp, [sp, #8]
 800d4c2:	9903      	ldr	r1, [sp, #12]
 800d4c4:	e7d7      	b.n	800d476 <__hexnan+0x2e>
 800d4c6:	2a29      	cmp	r2, #41	@ 0x29
 800d4c8:	d157      	bne.n	800d57a <__hexnan+0x132>
 800d4ca:	3102      	adds	r1, #2
 800d4cc:	f8ca 1000 	str.w	r1, [sl]
 800d4d0:	f1bb 0f00 	cmp.w	fp, #0
 800d4d4:	d051      	beq.n	800d57a <__hexnan+0x132>
 800d4d6:	454c      	cmp	r4, r9
 800d4d8:	d206      	bcs.n	800d4e8 <__hexnan+0xa0>
 800d4da:	2d07      	cmp	r5, #7
 800d4dc:	dc04      	bgt.n	800d4e8 <__hexnan+0xa0>
 800d4de:	462a      	mov	r2, r5
 800d4e0:	4649      	mov	r1, r9
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f7ff ff8a 	bl	800d3fc <L_shift>
 800d4e8:	4544      	cmp	r4, r8
 800d4ea:	d936      	bls.n	800d55a <__hexnan+0x112>
 800d4ec:	4623      	mov	r3, r4
 800d4ee:	f1a8 0204 	sub.w	r2, r8, #4
 800d4f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4f6:	429f      	cmp	r7, r3
 800d4f8:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4fc:	d2f9      	bcs.n	800d4f2 <__hexnan+0xaa>
 800d4fe:	1b3b      	subs	r3, r7, r4
 800d500:	f023 0303 	bic.w	r3, r3, #3
 800d504:	3304      	adds	r3, #4
 800d506:	3401      	adds	r4, #1
 800d508:	3e03      	subs	r6, #3
 800d50a:	42b4      	cmp	r4, r6
 800d50c:	bf88      	it	hi
 800d50e:	2304      	movhi	r3, #4
 800d510:	2200      	movs	r2, #0
 800d512:	4443      	add	r3, r8
 800d514:	f843 2b04 	str.w	r2, [r3], #4
 800d518:	429f      	cmp	r7, r3
 800d51a:	d2fb      	bcs.n	800d514 <__hexnan+0xcc>
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	b91b      	cbnz	r3, 800d528 <__hexnan+0xe0>
 800d520:	4547      	cmp	r7, r8
 800d522:	d128      	bne.n	800d576 <__hexnan+0x12e>
 800d524:	2301      	movs	r3, #1
 800d526:	603b      	str	r3, [r7, #0]
 800d528:	2005      	movs	r0, #5
 800d52a:	b007      	add	sp, #28
 800d52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d530:	3501      	adds	r5, #1
 800d532:	2d08      	cmp	r5, #8
 800d534:	f10b 0b01 	add.w	fp, fp, #1
 800d538:	dd06      	ble.n	800d548 <__hexnan+0x100>
 800d53a:	4544      	cmp	r4, r8
 800d53c:	d9c1      	bls.n	800d4c2 <__hexnan+0x7a>
 800d53e:	2300      	movs	r3, #0
 800d540:	2501      	movs	r5, #1
 800d542:	f844 3c04 	str.w	r3, [r4, #-4]
 800d546:	3c04      	subs	r4, #4
 800d548:	6822      	ldr	r2, [r4, #0]
 800d54a:	f000 000f 	and.w	r0, r0, #15
 800d54e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d552:	6020      	str	r0, [r4, #0]
 800d554:	e7b5      	b.n	800d4c2 <__hexnan+0x7a>
 800d556:	2508      	movs	r5, #8
 800d558:	e7b3      	b.n	800d4c2 <__hexnan+0x7a>
 800d55a:	9b01      	ldr	r3, [sp, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d0dd      	beq.n	800d51c <__hexnan+0xd4>
 800d560:	f04f 32ff 	mov.w	r2, #4294967295
 800d564:	f1c3 0320 	rsb	r3, r3, #32
 800d568:	40da      	lsrs	r2, r3
 800d56a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d56e:	4013      	ands	r3, r2
 800d570:	f846 3c04 	str.w	r3, [r6, #-4]
 800d574:	e7d2      	b.n	800d51c <__hexnan+0xd4>
 800d576:	3f04      	subs	r7, #4
 800d578:	e7d0      	b.n	800d51c <__hexnan+0xd4>
 800d57a:	2004      	movs	r0, #4
 800d57c:	e7d5      	b.n	800d52a <__hexnan+0xe2>

0800d57e <__ascii_mbtowc>:
 800d57e:	b082      	sub	sp, #8
 800d580:	b901      	cbnz	r1, 800d584 <__ascii_mbtowc+0x6>
 800d582:	a901      	add	r1, sp, #4
 800d584:	b142      	cbz	r2, 800d598 <__ascii_mbtowc+0x1a>
 800d586:	b14b      	cbz	r3, 800d59c <__ascii_mbtowc+0x1e>
 800d588:	7813      	ldrb	r3, [r2, #0]
 800d58a:	600b      	str	r3, [r1, #0]
 800d58c:	7812      	ldrb	r2, [r2, #0]
 800d58e:	1e10      	subs	r0, r2, #0
 800d590:	bf18      	it	ne
 800d592:	2001      	movne	r0, #1
 800d594:	b002      	add	sp, #8
 800d596:	4770      	bx	lr
 800d598:	4610      	mov	r0, r2
 800d59a:	e7fb      	b.n	800d594 <__ascii_mbtowc+0x16>
 800d59c:	f06f 0001 	mvn.w	r0, #1
 800d5a0:	e7f8      	b.n	800d594 <__ascii_mbtowc+0x16>

0800d5a2 <_realloc_r>:
 800d5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	460d      	mov	r5, r1
 800d5ac:	b921      	cbnz	r1, 800d5b8 <_realloc_r+0x16>
 800d5ae:	4611      	mov	r1, r2
 800d5b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b4:	f7fb bf86 	b.w	80094c4 <_malloc_r>
 800d5b8:	b92a      	cbnz	r2, 800d5c6 <_realloc_r+0x24>
 800d5ba:	f7fd fedd 	bl	800b378 <_free_r>
 800d5be:	4625      	mov	r5, r4
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c6:	f000 f840 	bl	800d64a <_malloc_usable_size_r>
 800d5ca:	4284      	cmp	r4, r0
 800d5cc:	4606      	mov	r6, r0
 800d5ce:	d802      	bhi.n	800d5d6 <_realloc_r+0x34>
 800d5d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5d4:	d8f4      	bhi.n	800d5c0 <_realloc_r+0x1e>
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f7fb ff73 	bl	80094c4 <_malloc_r>
 800d5de:	4680      	mov	r8, r0
 800d5e0:	b908      	cbnz	r0, 800d5e6 <_realloc_r+0x44>
 800d5e2:	4645      	mov	r5, r8
 800d5e4:	e7ec      	b.n	800d5c0 <_realloc_r+0x1e>
 800d5e6:	42b4      	cmp	r4, r6
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	bf28      	it	cs
 800d5ee:	4632      	movcs	r2, r6
 800d5f0:	f7fd f853 	bl	800a69a <memcpy>
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	4638      	mov	r0, r7
 800d5f8:	f7fd febe 	bl	800b378 <_free_r>
 800d5fc:	e7f1      	b.n	800d5e2 <_realloc_r+0x40>

0800d5fe <__ascii_wctomb>:
 800d5fe:	4603      	mov	r3, r0
 800d600:	4608      	mov	r0, r1
 800d602:	b141      	cbz	r1, 800d616 <__ascii_wctomb+0x18>
 800d604:	2aff      	cmp	r2, #255	@ 0xff
 800d606:	d904      	bls.n	800d612 <__ascii_wctomb+0x14>
 800d608:	228a      	movs	r2, #138	@ 0x8a
 800d60a:	f04f 30ff 	mov.w	r0, #4294967295
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	4770      	bx	lr
 800d612:	2001      	movs	r0, #1
 800d614:	700a      	strb	r2, [r1, #0]
 800d616:	4770      	bx	lr

0800d618 <fiprintf>:
 800d618:	b40e      	push	{r1, r2, r3}
 800d61a:	b503      	push	{r0, r1, lr}
 800d61c:	4601      	mov	r1, r0
 800d61e:	ab03      	add	r3, sp, #12
 800d620:	4805      	ldr	r0, [pc, #20]	@ (800d638 <fiprintf+0x20>)
 800d622:	f853 2b04 	ldr.w	r2, [r3], #4
 800d626:	6800      	ldr	r0, [r0, #0]
 800d628:	9301      	str	r3, [sp, #4]
 800d62a:	f000 f83d 	bl	800d6a8 <_vfiprintf_r>
 800d62e:	b002      	add	sp, #8
 800d630:	f85d eb04 	ldr.w	lr, [sp], #4
 800d634:	b003      	add	sp, #12
 800d636:	4770      	bx	lr
 800d638:	2000001c 	.word	0x2000001c

0800d63c <abort>:
 800d63c:	2006      	movs	r0, #6
 800d63e:	b508      	push	{r3, lr}
 800d640:	f000 fa06 	bl	800da50 <raise>
 800d644:	2001      	movs	r0, #1
 800d646:	f7fb fd44 	bl	80090d2 <_exit>

0800d64a <_malloc_usable_size_r>:
 800d64a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d64e:	1f18      	subs	r0, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	bfbc      	itt	lt
 800d654:	580b      	ldrlt	r3, [r1, r0]
 800d656:	18c0      	addlt	r0, r0, r3
 800d658:	4770      	bx	lr

0800d65a <__sfputc_r>:
 800d65a:	6893      	ldr	r3, [r2, #8]
 800d65c:	b410      	push	{r4}
 800d65e:	3b01      	subs	r3, #1
 800d660:	2b00      	cmp	r3, #0
 800d662:	6093      	str	r3, [r2, #8]
 800d664:	da07      	bge.n	800d676 <__sfputc_r+0x1c>
 800d666:	6994      	ldr	r4, [r2, #24]
 800d668:	42a3      	cmp	r3, r4
 800d66a:	db01      	blt.n	800d670 <__sfputc_r+0x16>
 800d66c:	290a      	cmp	r1, #10
 800d66e:	d102      	bne.n	800d676 <__sfputc_r+0x1c>
 800d670:	bc10      	pop	{r4}
 800d672:	f000 b931 	b.w	800d8d8 <__swbuf_r>
 800d676:	6813      	ldr	r3, [r2, #0]
 800d678:	1c58      	adds	r0, r3, #1
 800d67a:	6010      	str	r0, [r2, #0]
 800d67c:	7019      	strb	r1, [r3, #0]
 800d67e:	4608      	mov	r0, r1
 800d680:	bc10      	pop	{r4}
 800d682:	4770      	bx	lr

0800d684 <__sfputs_r>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	4606      	mov	r6, r0
 800d688:	460f      	mov	r7, r1
 800d68a:	4614      	mov	r4, r2
 800d68c:	18d5      	adds	r5, r2, r3
 800d68e:	42ac      	cmp	r4, r5
 800d690:	d101      	bne.n	800d696 <__sfputs_r+0x12>
 800d692:	2000      	movs	r0, #0
 800d694:	e007      	b.n	800d6a6 <__sfputs_r+0x22>
 800d696:	463a      	mov	r2, r7
 800d698:	4630      	mov	r0, r6
 800d69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d69e:	f7ff ffdc 	bl	800d65a <__sfputc_r>
 800d6a2:	1c43      	adds	r3, r0, #1
 800d6a4:	d1f3      	bne.n	800d68e <__sfputs_r+0xa>
 800d6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d6a8 <_vfiprintf_r>:
 800d6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ac:	460d      	mov	r5, r1
 800d6ae:	4614      	mov	r4, r2
 800d6b0:	4698      	mov	r8, r3
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	b09d      	sub	sp, #116	@ 0x74
 800d6b6:	b118      	cbz	r0, 800d6c0 <_vfiprintf_r+0x18>
 800d6b8:	6a03      	ldr	r3, [r0, #32]
 800d6ba:	b90b      	cbnz	r3, 800d6c0 <_vfiprintf_r+0x18>
 800d6bc:	f7fc fe7e 	bl	800a3bc <__sinit>
 800d6c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6c2:	07d9      	lsls	r1, r3, #31
 800d6c4:	d405      	bmi.n	800d6d2 <_vfiprintf_r+0x2a>
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	059a      	lsls	r2, r3, #22
 800d6ca:	d402      	bmi.n	800d6d2 <_vfiprintf_r+0x2a>
 800d6cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6ce:	f7fc ffd4 	bl	800a67a <__retarget_lock_acquire_recursive>
 800d6d2:	89ab      	ldrh	r3, [r5, #12]
 800d6d4:	071b      	lsls	r3, r3, #28
 800d6d6:	d501      	bpl.n	800d6dc <_vfiprintf_r+0x34>
 800d6d8:	692b      	ldr	r3, [r5, #16]
 800d6da:	b99b      	cbnz	r3, 800d704 <_vfiprintf_r+0x5c>
 800d6dc:	4629      	mov	r1, r5
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f000 f938 	bl	800d954 <__swsetup_r>
 800d6e4:	b170      	cbz	r0, 800d704 <_vfiprintf_r+0x5c>
 800d6e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6e8:	07dc      	lsls	r4, r3, #31
 800d6ea:	d504      	bpl.n	800d6f6 <_vfiprintf_r+0x4e>
 800d6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f0:	b01d      	add	sp, #116	@ 0x74
 800d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f6:	89ab      	ldrh	r3, [r5, #12]
 800d6f8:	0598      	lsls	r0, r3, #22
 800d6fa:	d4f7      	bmi.n	800d6ec <_vfiprintf_r+0x44>
 800d6fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6fe:	f7fc ffbd 	bl	800a67c <__retarget_lock_release_recursive>
 800d702:	e7f3      	b.n	800d6ec <_vfiprintf_r+0x44>
 800d704:	2300      	movs	r3, #0
 800d706:	9309      	str	r3, [sp, #36]	@ 0x24
 800d708:	2320      	movs	r3, #32
 800d70a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d70e:	2330      	movs	r3, #48	@ 0x30
 800d710:	f04f 0901 	mov.w	r9, #1
 800d714:	f8cd 800c 	str.w	r8, [sp, #12]
 800d718:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d8c4 <_vfiprintf_r+0x21c>
 800d71c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d720:	4623      	mov	r3, r4
 800d722:	469a      	mov	sl, r3
 800d724:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d728:	b10a      	cbz	r2, 800d72e <_vfiprintf_r+0x86>
 800d72a:	2a25      	cmp	r2, #37	@ 0x25
 800d72c:	d1f9      	bne.n	800d722 <_vfiprintf_r+0x7a>
 800d72e:	ebba 0b04 	subs.w	fp, sl, r4
 800d732:	d00b      	beq.n	800d74c <_vfiprintf_r+0xa4>
 800d734:	465b      	mov	r3, fp
 800d736:	4622      	mov	r2, r4
 800d738:	4629      	mov	r1, r5
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7ff ffa2 	bl	800d684 <__sfputs_r>
 800d740:	3001      	adds	r0, #1
 800d742:	f000 80a7 	beq.w	800d894 <_vfiprintf_r+0x1ec>
 800d746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d748:	445a      	add	r2, fp
 800d74a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d74c:	f89a 3000 	ldrb.w	r3, [sl]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 809f 	beq.w	800d894 <_vfiprintf_r+0x1ec>
 800d756:	2300      	movs	r3, #0
 800d758:	f04f 32ff 	mov.w	r2, #4294967295
 800d75c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d760:	f10a 0a01 	add.w	sl, sl, #1
 800d764:	9304      	str	r3, [sp, #16]
 800d766:	9307      	str	r3, [sp, #28]
 800d768:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d76c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d76e:	4654      	mov	r4, sl
 800d770:	2205      	movs	r2, #5
 800d772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d776:	4853      	ldr	r0, [pc, #332]	@ (800d8c4 <_vfiprintf_r+0x21c>)
 800d778:	f7fc ff81 	bl	800a67e <memchr>
 800d77c:	9a04      	ldr	r2, [sp, #16]
 800d77e:	b9d8      	cbnz	r0, 800d7b8 <_vfiprintf_r+0x110>
 800d780:	06d1      	lsls	r1, r2, #27
 800d782:	bf44      	itt	mi
 800d784:	2320      	movmi	r3, #32
 800d786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d78a:	0713      	lsls	r3, r2, #28
 800d78c:	bf44      	itt	mi
 800d78e:	232b      	movmi	r3, #43	@ 0x2b
 800d790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d794:	f89a 3000 	ldrb.w	r3, [sl]
 800d798:	2b2a      	cmp	r3, #42	@ 0x2a
 800d79a:	d015      	beq.n	800d7c8 <_vfiprintf_r+0x120>
 800d79c:	4654      	mov	r4, sl
 800d79e:	2000      	movs	r0, #0
 800d7a0:	f04f 0c0a 	mov.w	ip, #10
 800d7a4:	9a07      	ldr	r2, [sp, #28]
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7ac:	3b30      	subs	r3, #48	@ 0x30
 800d7ae:	2b09      	cmp	r3, #9
 800d7b0:	d94b      	bls.n	800d84a <_vfiprintf_r+0x1a2>
 800d7b2:	b1b0      	cbz	r0, 800d7e2 <_vfiprintf_r+0x13a>
 800d7b4:	9207      	str	r2, [sp, #28]
 800d7b6:	e014      	b.n	800d7e2 <_vfiprintf_r+0x13a>
 800d7b8:	eba0 0308 	sub.w	r3, r0, r8
 800d7bc:	fa09 f303 	lsl.w	r3, r9, r3
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	46a2      	mov	sl, r4
 800d7c4:	9304      	str	r3, [sp, #16]
 800d7c6:	e7d2      	b.n	800d76e <_vfiprintf_r+0xc6>
 800d7c8:	9b03      	ldr	r3, [sp, #12]
 800d7ca:	1d19      	adds	r1, r3, #4
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	9103      	str	r1, [sp, #12]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	bfbb      	ittet	lt
 800d7d4:	425b      	neglt	r3, r3
 800d7d6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7da:	9307      	strge	r3, [sp, #28]
 800d7dc:	9307      	strlt	r3, [sp, #28]
 800d7de:	bfb8      	it	lt
 800d7e0:	9204      	strlt	r2, [sp, #16]
 800d7e2:	7823      	ldrb	r3, [r4, #0]
 800d7e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7e6:	d10a      	bne.n	800d7fe <_vfiprintf_r+0x156>
 800d7e8:	7863      	ldrb	r3, [r4, #1]
 800d7ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7ec:	d132      	bne.n	800d854 <_vfiprintf_r+0x1ac>
 800d7ee:	9b03      	ldr	r3, [sp, #12]
 800d7f0:	3402      	adds	r4, #2
 800d7f2:	1d1a      	adds	r2, r3, #4
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	9203      	str	r2, [sp, #12]
 800d7f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7fc:	9305      	str	r3, [sp, #20]
 800d7fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d8c8 <_vfiprintf_r+0x220>
 800d802:	2203      	movs	r2, #3
 800d804:	4650      	mov	r0, sl
 800d806:	7821      	ldrb	r1, [r4, #0]
 800d808:	f7fc ff39 	bl	800a67e <memchr>
 800d80c:	b138      	cbz	r0, 800d81e <_vfiprintf_r+0x176>
 800d80e:	2240      	movs	r2, #64	@ 0x40
 800d810:	9b04      	ldr	r3, [sp, #16]
 800d812:	eba0 000a 	sub.w	r0, r0, sl
 800d816:	4082      	lsls	r2, r0
 800d818:	4313      	orrs	r3, r2
 800d81a:	3401      	adds	r4, #1
 800d81c:	9304      	str	r3, [sp, #16]
 800d81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d822:	2206      	movs	r2, #6
 800d824:	4829      	ldr	r0, [pc, #164]	@ (800d8cc <_vfiprintf_r+0x224>)
 800d826:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d82a:	f7fc ff28 	bl	800a67e <memchr>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d03f      	beq.n	800d8b2 <_vfiprintf_r+0x20a>
 800d832:	4b27      	ldr	r3, [pc, #156]	@ (800d8d0 <_vfiprintf_r+0x228>)
 800d834:	bb1b      	cbnz	r3, 800d87e <_vfiprintf_r+0x1d6>
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	3307      	adds	r3, #7
 800d83a:	f023 0307 	bic.w	r3, r3, #7
 800d83e:	3308      	adds	r3, #8
 800d840:	9303      	str	r3, [sp, #12]
 800d842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d844:	443b      	add	r3, r7
 800d846:	9309      	str	r3, [sp, #36]	@ 0x24
 800d848:	e76a      	b.n	800d720 <_vfiprintf_r+0x78>
 800d84a:	460c      	mov	r4, r1
 800d84c:	2001      	movs	r0, #1
 800d84e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d852:	e7a8      	b.n	800d7a6 <_vfiprintf_r+0xfe>
 800d854:	2300      	movs	r3, #0
 800d856:	f04f 0c0a 	mov.w	ip, #10
 800d85a:	4619      	mov	r1, r3
 800d85c:	3401      	adds	r4, #1
 800d85e:	9305      	str	r3, [sp, #20]
 800d860:	4620      	mov	r0, r4
 800d862:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d866:	3a30      	subs	r2, #48	@ 0x30
 800d868:	2a09      	cmp	r2, #9
 800d86a:	d903      	bls.n	800d874 <_vfiprintf_r+0x1cc>
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d0c6      	beq.n	800d7fe <_vfiprintf_r+0x156>
 800d870:	9105      	str	r1, [sp, #20]
 800d872:	e7c4      	b.n	800d7fe <_vfiprintf_r+0x156>
 800d874:	4604      	mov	r4, r0
 800d876:	2301      	movs	r3, #1
 800d878:	fb0c 2101 	mla	r1, ip, r1, r2
 800d87c:	e7f0      	b.n	800d860 <_vfiprintf_r+0x1b8>
 800d87e:	ab03      	add	r3, sp, #12
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	462a      	mov	r2, r5
 800d884:	4630      	mov	r0, r6
 800d886:	4b13      	ldr	r3, [pc, #76]	@ (800d8d4 <_vfiprintf_r+0x22c>)
 800d888:	a904      	add	r1, sp, #16
 800d88a:	f7fb ff45 	bl	8009718 <_printf_float>
 800d88e:	4607      	mov	r7, r0
 800d890:	1c78      	adds	r0, r7, #1
 800d892:	d1d6      	bne.n	800d842 <_vfiprintf_r+0x19a>
 800d894:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d896:	07d9      	lsls	r1, r3, #31
 800d898:	d405      	bmi.n	800d8a6 <_vfiprintf_r+0x1fe>
 800d89a:	89ab      	ldrh	r3, [r5, #12]
 800d89c:	059a      	lsls	r2, r3, #22
 800d89e:	d402      	bmi.n	800d8a6 <_vfiprintf_r+0x1fe>
 800d8a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8a2:	f7fc feeb 	bl	800a67c <__retarget_lock_release_recursive>
 800d8a6:	89ab      	ldrh	r3, [r5, #12]
 800d8a8:	065b      	lsls	r3, r3, #25
 800d8aa:	f53f af1f 	bmi.w	800d6ec <_vfiprintf_r+0x44>
 800d8ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8b0:	e71e      	b.n	800d6f0 <_vfiprintf_r+0x48>
 800d8b2:	ab03      	add	r3, sp, #12
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	4b06      	ldr	r3, [pc, #24]	@ (800d8d4 <_vfiprintf_r+0x22c>)
 800d8bc:	a904      	add	r1, sp, #16
 800d8be:	f7fc f9c9 	bl	8009c54 <_printf_i>
 800d8c2:	e7e4      	b.n	800d88e <_vfiprintf_r+0x1e6>
 800d8c4:	0801006d 	.word	0x0801006d
 800d8c8:	08010073 	.word	0x08010073
 800d8cc:	08010077 	.word	0x08010077
 800d8d0:	08009719 	.word	0x08009719
 800d8d4:	0800d685 	.word	0x0800d685

0800d8d8 <__swbuf_r>:
 800d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8da:	460e      	mov	r6, r1
 800d8dc:	4614      	mov	r4, r2
 800d8de:	4605      	mov	r5, r0
 800d8e0:	b118      	cbz	r0, 800d8ea <__swbuf_r+0x12>
 800d8e2:	6a03      	ldr	r3, [r0, #32]
 800d8e4:	b90b      	cbnz	r3, 800d8ea <__swbuf_r+0x12>
 800d8e6:	f7fc fd69 	bl	800a3bc <__sinit>
 800d8ea:	69a3      	ldr	r3, [r4, #24]
 800d8ec:	60a3      	str	r3, [r4, #8]
 800d8ee:	89a3      	ldrh	r3, [r4, #12]
 800d8f0:	071a      	lsls	r2, r3, #28
 800d8f2:	d501      	bpl.n	800d8f8 <__swbuf_r+0x20>
 800d8f4:	6923      	ldr	r3, [r4, #16]
 800d8f6:	b943      	cbnz	r3, 800d90a <__swbuf_r+0x32>
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f000 f82a 	bl	800d954 <__swsetup_r>
 800d900:	b118      	cbz	r0, 800d90a <__swbuf_r+0x32>
 800d902:	f04f 37ff 	mov.w	r7, #4294967295
 800d906:	4638      	mov	r0, r7
 800d908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	6922      	ldr	r2, [r4, #16]
 800d90e:	b2f6      	uxtb	r6, r6
 800d910:	1a98      	subs	r0, r3, r2
 800d912:	6963      	ldr	r3, [r4, #20]
 800d914:	4637      	mov	r7, r6
 800d916:	4283      	cmp	r3, r0
 800d918:	dc05      	bgt.n	800d926 <__swbuf_r+0x4e>
 800d91a:	4621      	mov	r1, r4
 800d91c:	4628      	mov	r0, r5
 800d91e:	f7ff fa69 	bl	800cdf4 <_fflush_r>
 800d922:	2800      	cmp	r0, #0
 800d924:	d1ed      	bne.n	800d902 <__swbuf_r+0x2a>
 800d926:	68a3      	ldr	r3, [r4, #8]
 800d928:	3b01      	subs	r3, #1
 800d92a:	60a3      	str	r3, [r4, #8]
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	1c5a      	adds	r2, r3, #1
 800d930:	6022      	str	r2, [r4, #0]
 800d932:	701e      	strb	r6, [r3, #0]
 800d934:	6962      	ldr	r2, [r4, #20]
 800d936:	1c43      	adds	r3, r0, #1
 800d938:	429a      	cmp	r2, r3
 800d93a:	d004      	beq.n	800d946 <__swbuf_r+0x6e>
 800d93c:	89a3      	ldrh	r3, [r4, #12]
 800d93e:	07db      	lsls	r3, r3, #31
 800d940:	d5e1      	bpl.n	800d906 <__swbuf_r+0x2e>
 800d942:	2e0a      	cmp	r6, #10
 800d944:	d1df      	bne.n	800d906 <__swbuf_r+0x2e>
 800d946:	4621      	mov	r1, r4
 800d948:	4628      	mov	r0, r5
 800d94a:	f7ff fa53 	bl	800cdf4 <_fflush_r>
 800d94e:	2800      	cmp	r0, #0
 800d950:	d0d9      	beq.n	800d906 <__swbuf_r+0x2e>
 800d952:	e7d6      	b.n	800d902 <__swbuf_r+0x2a>

0800d954 <__swsetup_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4b29      	ldr	r3, [pc, #164]	@ (800d9fc <__swsetup_r+0xa8>)
 800d958:	4605      	mov	r5, r0
 800d95a:	6818      	ldr	r0, [r3, #0]
 800d95c:	460c      	mov	r4, r1
 800d95e:	b118      	cbz	r0, 800d968 <__swsetup_r+0x14>
 800d960:	6a03      	ldr	r3, [r0, #32]
 800d962:	b90b      	cbnz	r3, 800d968 <__swsetup_r+0x14>
 800d964:	f7fc fd2a 	bl	800a3bc <__sinit>
 800d968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96c:	0719      	lsls	r1, r3, #28
 800d96e:	d422      	bmi.n	800d9b6 <__swsetup_r+0x62>
 800d970:	06da      	lsls	r2, r3, #27
 800d972:	d407      	bmi.n	800d984 <__swsetup_r+0x30>
 800d974:	2209      	movs	r2, #9
 800d976:	602a      	str	r2, [r5, #0]
 800d978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d97c:	f04f 30ff 	mov.w	r0, #4294967295
 800d980:	81a3      	strh	r3, [r4, #12]
 800d982:	e033      	b.n	800d9ec <__swsetup_r+0x98>
 800d984:	0758      	lsls	r0, r3, #29
 800d986:	d512      	bpl.n	800d9ae <__swsetup_r+0x5a>
 800d988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d98a:	b141      	cbz	r1, 800d99e <__swsetup_r+0x4a>
 800d98c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d990:	4299      	cmp	r1, r3
 800d992:	d002      	beq.n	800d99a <__swsetup_r+0x46>
 800d994:	4628      	mov	r0, r5
 800d996:	f7fd fcef 	bl	800b378 <_free_r>
 800d99a:	2300      	movs	r3, #0
 800d99c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d9a4:	81a3      	strh	r3, [r4, #12]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	6063      	str	r3, [r4, #4]
 800d9aa:	6923      	ldr	r3, [r4, #16]
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	89a3      	ldrh	r3, [r4, #12]
 800d9b0:	f043 0308 	orr.w	r3, r3, #8
 800d9b4:	81a3      	strh	r3, [r4, #12]
 800d9b6:	6923      	ldr	r3, [r4, #16]
 800d9b8:	b94b      	cbnz	r3, 800d9ce <__swsetup_r+0x7a>
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d9c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9c4:	d003      	beq.n	800d9ce <__swsetup_r+0x7a>
 800d9c6:	4621      	mov	r1, r4
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	f000 f882 	bl	800dad2 <__smakebuf_r>
 800d9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d2:	f013 0201 	ands.w	r2, r3, #1
 800d9d6:	d00a      	beq.n	800d9ee <__swsetup_r+0x9a>
 800d9d8:	2200      	movs	r2, #0
 800d9da:	60a2      	str	r2, [r4, #8]
 800d9dc:	6962      	ldr	r2, [r4, #20]
 800d9de:	4252      	negs	r2, r2
 800d9e0:	61a2      	str	r2, [r4, #24]
 800d9e2:	6922      	ldr	r2, [r4, #16]
 800d9e4:	b942      	cbnz	r2, 800d9f8 <__swsetup_r+0xa4>
 800d9e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9ea:	d1c5      	bne.n	800d978 <__swsetup_r+0x24>
 800d9ec:	bd38      	pop	{r3, r4, r5, pc}
 800d9ee:	0799      	lsls	r1, r3, #30
 800d9f0:	bf58      	it	pl
 800d9f2:	6962      	ldrpl	r2, [r4, #20]
 800d9f4:	60a2      	str	r2, [r4, #8]
 800d9f6:	e7f4      	b.n	800d9e2 <__swsetup_r+0x8e>
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	e7f7      	b.n	800d9ec <__swsetup_r+0x98>
 800d9fc:	2000001c 	.word	0x2000001c

0800da00 <_raise_r>:
 800da00:	291f      	cmp	r1, #31
 800da02:	b538      	push	{r3, r4, r5, lr}
 800da04:	4605      	mov	r5, r0
 800da06:	460c      	mov	r4, r1
 800da08:	d904      	bls.n	800da14 <_raise_r+0x14>
 800da0a:	2316      	movs	r3, #22
 800da0c:	6003      	str	r3, [r0, #0]
 800da0e:	f04f 30ff 	mov.w	r0, #4294967295
 800da12:	bd38      	pop	{r3, r4, r5, pc}
 800da14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da16:	b112      	cbz	r2, 800da1e <_raise_r+0x1e>
 800da18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da1c:	b94b      	cbnz	r3, 800da32 <_raise_r+0x32>
 800da1e:	4628      	mov	r0, r5
 800da20:	f000 f830 	bl	800da84 <_getpid_r>
 800da24:	4622      	mov	r2, r4
 800da26:	4601      	mov	r1, r0
 800da28:	4628      	mov	r0, r5
 800da2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da2e:	f000 b817 	b.w	800da60 <_kill_r>
 800da32:	2b01      	cmp	r3, #1
 800da34:	d00a      	beq.n	800da4c <_raise_r+0x4c>
 800da36:	1c59      	adds	r1, r3, #1
 800da38:	d103      	bne.n	800da42 <_raise_r+0x42>
 800da3a:	2316      	movs	r3, #22
 800da3c:	6003      	str	r3, [r0, #0]
 800da3e:	2001      	movs	r0, #1
 800da40:	e7e7      	b.n	800da12 <_raise_r+0x12>
 800da42:	2100      	movs	r1, #0
 800da44:	4620      	mov	r0, r4
 800da46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da4a:	4798      	blx	r3
 800da4c:	2000      	movs	r0, #0
 800da4e:	e7e0      	b.n	800da12 <_raise_r+0x12>

0800da50 <raise>:
 800da50:	4b02      	ldr	r3, [pc, #8]	@ (800da5c <raise+0xc>)
 800da52:	4601      	mov	r1, r0
 800da54:	6818      	ldr	r0, [r3, #0]
 800da56:	f7ff bfd3 	b.w	800da00 <_raise_r>
 800da5a:	bf00      	nop
 800da5c:	2000001c 	.word	0x2000001c

0800da60 <_kill_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	2300      	movs	r3, #0
 800da64:	4d06      	ldr	r5, [pc, #24]	@ (800da80 <_kill_r+0x20>)
 800da66:	4604      	mov	r4, r0
 800da68:	4608      	mov	r0, r1
 800da6a:	4611      	mov	r1, r2
 800da6c:	602b      	str	r3, [r5, #0]
 800da6e:	f7fb fb20 	bl	80090b2 <_kill>
 800da72:	1c43      	adds	r3, r0, #1
 800da74:	d102      	bne.n	800da7c <_kill_r+0x1c>
 800da76:	682b      	ldr	r3, [r5, #0]
 800da78:	b103      	cbz	r3, 800da7c <_kill_r+0x1c>
 800da7a:	6023      	str	r3, [r4, #0]
 800da7c:	bd38      	pop	{r3, r4, r5, pc}
 800da7e:	bf00      	nop
 800da80:	20001bac 	.word	0x20001bac

0800da84 <_getpid_r>:
 800da84:	f7fb bb0e 	b.w	80090a4 <_getpid>

0800da88 <__swhatbuf_r>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	460c      	mov	r4, r1
 800da8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da90:	4615      	mov	r5, r2
 800da92:	2900      	cmp	r1, #0
 800da94:	461e      	mov	r6, r3
 800da96:	b096      	sub	sp, #88	@ 0x58
 800da98:	da0c      	bge.n	800dab4 <__swhatbuf_r+0x2c>
 800da9a:	89a3      	ldrh	r3, [r4, #12]
 800da9c:	2100      	movs	r1, #0
 800da9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800daa2:	bf14      	ite	ne
 800daa4:	2340      	movne	r3, #64	@ 0x40
 800daa6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800daaa:	2000      	movs	r0, #0
 800daac:	6031      	str	r1, [r6, #0]
 800daae:	602b      	str	r3, [r5, #0]
 800dab0:	b016      	add	sp, #88	@ 0x58
 800dab2:	bd70      	pop	{r4, r5, r6, pc}
 800dab4:	466a      	mov	r2, sp
 800dab6:	f000 f849 	bl	800db4c <_fstat_r>
 800daba:	2800      	cmp	r0, #0
 800dabc:	dbed      	blt.n	800da9a <__swhatbuf_r+0x12>
 800dabe:	9901      	ldr	r1, [sp, #4]
 800dac0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dac4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dac8:	4259      	negs	r1, r3
 800daca:	4159      	adcs	r1, r3
 800dacc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dad0:	e7eb      	b.n	800daaa <__swhatbuf_r+0x22>

0800dad2 <__smakebuf_r>:
 800dad2:	898b      	ldrh	r3, [r1, #12]
 800dad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dad6:	079d      	lsls	r5, r3, #30
 800dad8:	4606      	mov	r6, r0
 800dada:	460c      	mov	r4, r1
 800dadc:	d507      	bpl.n	800daee <__smakebuf_r+0x1c>
 800dade:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	6123      	str	r3, [r4, #16]
 800dae6:	2301      	movs	r3, #1
 800dae8:	6163      	str	r3, [r4, #20]
 800daea:	b003      	add	sp, #12
 800daec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daee:	466a      	mov	r2, sp
 800daf0:	ab01      	add	r3, sp, #4
 800daf2:	f7ff ffc9 	bl	800da88 <__swhatbuf_r>
 800daf6:	9f00      	ldr	r7, [sp, #0]
 800daf8:	4605      	mov	r5, r0
 800dafa:	4639      	mov	r1, r7
 800dafc:	4630      	mov	r0, r6
 800dafe:	f7fb fce1 	bl	80094c4 <_malloc_r>
 800db02:	b948      	cbnz	r0, 800db18 <__smakebuf_r+0x46>
 800db04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db08:	059a      	lsls	r2, r3, #22
 800db0a:	d4ee      	bmi.n	800daea <__smakebuf_r+0x18>
 800db0c:	f023 0303 	bic.w	r3, r3, #3
 800db10:	f043 0302 	orr.w	r3, r3, #2
 800db14:	81a3      	strh	r3, [r4, #12]
 800db16:	e7e2      	b.n	800dade <__smakebuf_r+0xc>
 800db18:	89a3      	ldrh	r3, [r4, #12]
 800db1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db22:	81a3      	strh	r3, [r4, #12]
 800db24:	9b01      	ldr	r3, [sp, #4]
 800db26:	6020      	str	r0, [r4, #0]
 800db28:	b15b      	cbz	r3, 800db42 <__smakebuf_r+0x70>
 800db2a:	4630      	mov	r0, r6
 800db2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db30:	f000 f81e 	bl	800db70 <_isatty_r>
 800db34:	b128      	cbz	r0, 800db42 <__smakebuf_r+0x70>
 800db36:	89a3      	ldrh	r3, [r4, #12]
 800db38:	f023 0303 	bic.w	r3, r3, #3
 800db3c:	f043 0301 	orr.w	r3, r3, #1
 800db40:	81a3      	strh	r3, [r4, #12]
 800db42:	89a3      	ldrh	r3, [r4, #12]
 800db44:	431d      	orrs	r5, r3
 800db46:	81a5      	strh	r5, [r4, #12]
 800db48:	e7cf      	b.n	800daea <__smakebuf_r+0x18>
	...

0800db4c <_fstat_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	2300      	movs	r3, #0
 800db50:	4d06      	ldr	r5, [pc, #24]	@ (800db6c <_fstat_r+0x20>)
 800db52:	4604      	mov	r4, r0
 800db54:	4608      	mov	r0, r1
 800db56:	4611      	mov	r1, r2
 800db58:	602b      	str	r3, [r5, #0]
 800db5a:	f7fb fb09 	bl	8009170 <_fstat>
 800db5e:	1c43      	adds	r3, r0, #1
 800db60:	d102      	bne.n	800db68 <_fstat_r+0x1c>
 800db62:	682b      	ldr	r3, [r5, #0]
 800db64:	b103      	cbz	r3, 800db68 <_fstat_r+0x1c>
 800db66:	6023      	str	r3, [r4, #0]
 800db68:	bd38      	pop	{r3, r4, r5, pc}
 800db6a:	bf00      	nop
 800db6c:	20001bac 	.word	0x20001bac

0800db70 <_isatty_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	2300      	movs	r3, #0
 800db74:	4d05      	ldr	r5, [pc, #20]	@ (800db8c <_isatty_r+0x1c>)
 800db76:	4604      	mov	r4, r0
 800db78:	4608      	mov	r0, r1
 800db7a:	602b      	str	r3, [r5, #0]
 800db7c:	f7fb fb07 	bl	800918e <_isatty>
 800db80:	1c43      	adds	r3, r0, #1
 800db82:	d102      	bne.n	800db8a <_isatty_r+0x1a>
 800db84:	682b      	ldr	r3, [r5, #0]
 800db86:	b103      	cbz	r3, 800db8a <_isatty_r+0x1a>
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	bd38      	pop	{r3, r4, r5, pc}
 800db8c:	20001bac 	.word	0x20001bac

0800db90 <_init>:
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db92:	bf00      	nop
 800db94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db96:	bc08      	pop	{r3}
 800db98:	469e      	mov	lr, r3
 800db9a:	4770      	bx	lr

0800db9c <_fini>:
 800db9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9e:	bf00      	nop
 800dba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba2:	bc08      	pop	{r3}
 800dba4:	469e      	mov	lr, r3
 800dba6:	4770      	bx	lr
