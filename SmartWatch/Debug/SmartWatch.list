
SmartWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c108  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000279c  0800c218  0800c218  0000d218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9b4  0800e9b4  000101d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e9b4  0800e9b4  0000f9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9bc  0800e9bc  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9bc  0800e9bc  0000f9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e9c0  0800e9c0  0000f9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e9c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e8  200001d4  0800eb98  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  0800eb98  00010bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f5d  00000000  00000000  000101fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003395  00000000  00000000  0002215a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  000254f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c19  00000000  00000000  000264d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a372  00000000  00000000  000270e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bb1  00000000  00000000  0004145b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af28  00000000  00000000  0005600c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0f34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f8  00000000  00000000  000e0f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000e6670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c200 	.word	0x0800c200

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800c200 	.word	0x0800c200

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_uldivmod>:
 8001110:	b953      	cbnz	r3, 8001128 <__aeabi_uldivmod+0x18>
 8001112:	b94a      	cbnz	r2, 8001128 <__aeabi_uldivmod+0x18>
 8001114:	2900      	cmp	r1, #0
 8001116:	bf08      	it	eq
 8001118:	2800      	cmpeq	r0, #0
 800111a:	bf1c      	itt	ne
 800111c:	f04f 31ff 	movne.w	r1, #4294967295
 8001120:	f04f 30ff 	movne.w	r0, #4294967295
 8001124:	f000 b9c2 	b.w	80014ac <__aeabi_idiv0>
 8001128:	f1ad 0c08 	sub.w	ip, sp, #8
 800112c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001130:	f000 f83c 	bl	80011ac <__udivmoddi4>
 8001134:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800113c:	b004      	add	sp, #16
 800113e:	4770      	bx	lr

08001140 <__aeabi_d2lz>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x1c>
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4620      	mov	r0, r4
 800115e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <__udivmoddi4>:
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b0:	9d08      	ldr	r5, [sp, #32]
 80011b2:	468e      	mov	lr, r1
 80011b4:	4604      	mov	r4, r0
 80011b6:	4688      	mov	r8, r1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d14a      	bne.n	8001252 <__udivmoddi4+0xa6>
 80011bc:	428a      	cmp	r2, r1
 80011be:	4617      	mov	r7, r2
 80011c0:	d962      	bls.n	8001288 <__udivmoddi4+0xdc>
 80011c2:	fab2 f682 	clz	r6, r2
 80011c6:	b14e      	cbz	r6, 80011dc <__udivmoddi4+0x30>
 80011c8:	f1c6 0320 	rsb	r3, r6, #32
 80011cc:	fa01 f806 	lsl.w	r8, r1, r6
 80011d0:	fa20 f303 	lsr.w	r3, r0, r3
 80011d4:	40b7      	lsls	r7, r6
 80011d6:	ea43 0808 	orr.w	r8, r3, r8
 80011da:	40b4      	lsls	r4, r6
 80011dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80011e4:	fa1f fc87 	uxth.w	ip, r7
 80011e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80011ec:	fb01 f20c 	mul.w	r2, r1, ip
 80011f0:	0c23      	lsrs	r3, r4, #16
 80011f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d909      	bls.n	800120e <__udivmoddi4+0x62>
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	f101 30ff 	add.w	r0, r1, #4294967295
 8001200:	f080 80eb 	bcs.w	80013da <__udivmoddi4+0x22e>
 8001204:	429a      	cmp	r2, r3
 8001206:	f240 80e8 	bls.w	80013da <__udivmoddi4+0x22e>
 800120a:	3902      	subs	r1, #2
 800120c:	443b      	add	r3, r7
 800120e:	1a9a      	subs	r2, r3, r2
 8001210:	fbb2 f0fe 	udiv	r0, r2, lr
 8001214:	fb0e 2210 	mls	r2, lr, r0, r2
 8001218:	fb00 fc0c 	mul.w	ip, r0, ip
 800121c:	b2a3      	uxth	r3, r4
 800121e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001222:	459c      	cmp	ip, r3
 8001224:	d909      	bls.n	800123a <__udivmoddi4+0x8e>
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	f100 32ff 	add.w	r2, r0, #4294967295
 800122c:	f080 80d7 	bcs.w	80013de <__udivmoddi4+0x232>
 8001230:	459c      	cmp	ip, r3
 8001232:	f240 80d4 	bls.w	80013de <__udivmoddi4+0x232>
 8001236:	443b      	add	r3, r7
 8001238:	3802      	subs	r0, #2
 800123a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800123e:	2100      	movs	r1, #0
 8001240:	eba3 030c 	sub.w	r3, r3, ip
 8001244:	b11d      	cbz	r5, 800124e <__udivmoddi4+0xa2>
 8001246:	2200      	movs	r2, #0
 8001248:	40f3      	lsrs	r3, r6
 800124a:	e9c5 3200 	strd	r3, r2, [r5]
 800124e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001252:	428b      	cmp	r3, r1
 8001254:	d905      	bls.n	8001262 <__udivmoddi4+0xb6>
 8001256:	b10d      	cbz	r5, 800125c <__udivmoddi4+0xb0>
 8001258:	e9c5 0100 	strd	r0, r1, [r5]
 800125c:	2100      	movs	r1, #0
 800125e:	4608      	mov	r0, r1
 8001260:	e7f5      	b.n	800124e <__udivmoddi4+0xa2>
 8001262:	fab3 f183 	clz	r1, r3
 8001266:	2900      	cmp	r1, #0
 8001268:	d146      	bne.n	80012f8 <__udivmoddi4+0x14c>
 800126a:	4573      	cmp	r3, lr
 800126c:	d302      	bcc.n	8001274 <__udivmoddi4+0xc8>
 800126e:	4282      	cmp	r2, r0
 8001270:	f200 8108 	bhi.w	8001484 <__udivmoddi4+0x2d8>
 8001274:	1a84      	subs	r4, r0, r2
 8001276:	eb6e 0203 	sbc.w	r2, lr, r3
 800127a:	2001      	movs	r0, #1
 800127c:	4690      	mov	r8, r2
 800127e:	2d00      	cmp	r5, #0
 8001280:	d0e5      	beq.n	800124e <__udivmoddi4+0xa2>
 8001282:	e9c5 4800 	strd	r4, r8, [r5]
 8001286:	e7e2      	b.n	800124e <__udivmoddi4+0xa2>
 8001288:	2a00      	cmp	r2, #0
 800128a:	f000 8091 	beq.w	80013b0 <__udivmoddi4+0x204>
 800128e:	fab2 f682 	clz	r6, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	f040 80a5 	bne.w	80013e2 <__udivmoddi4+0x236>
 8001298:	1a8a      	subs	r2, r1, r2
 800129a:	2101      	movs	r1, #1
 800129c:	0c03      	lsrs	r3, r0, #16
 800129e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012a2:	b280      	uxth	r0, r0
 80012a4:	b2bc      	uxth	r4, r7
 80012a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80012aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80012ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012b2:	fb04 f20c 	mul.w	r2, r4, ip
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d907      	bls.n	80012ca <__udivmoddi4+0x11e>
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80012c0:	d202      	bcs.n	80012c8 <__udivmoddi4+0x11c>
 80012c2:	429a      	cmp	r2, r3
 80012c4:	f200 80e3 	bhi.w	800148e <__udivmoddi4+0x2e2>
 80012c8:	46c4      	mov	ip, r8
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80012d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80012d4:	fb02 f404 	mul.w	r4, r2, r4
 80012d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012dc:	429c      	cmp	r4, r3
 80012de:	d907      	bls.n	80012f0 <__udivmoddi4+0x144>
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	f102 30ff 	add.w	r0, r2, #4294967295
 80012e6:	d202      	bcs.n	80012ee <__udivmoddi4+0x142>
 80012e8:	429c      	cmp	r4, r3
 80012ea:	f200 80cd 	bhi.w	8001488 <__udivmoddi4+0x2dc>
 80012ee:	4602      	mov	r2, r0
 80012f0:	1b1b      	subs	r3, r3, r4
 80012f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80012f6:	e7a5      	b.n	8001244 <__udivmoddi4+0x98>
 80012f8:	f1c1 0620 	rsb	r6, r1, #32
 80012fc:	408b      	lsls	r3, r1
 80012fe:	fa22 f706 	lsr.w	r7, r2, r6
 8001302:	431f      	orrs	r7, r3
 8001304:	fa2e fa06 	lsr.w	sl, lr, r6
 8001308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800130c:	fbba f8f9 	udiv	r8, sl, r9
 8001310:	fa0e fe01 	lsl.w	lr, lr, r1
 8001314:	fa20 f306 	lsr.w	r3, r0, r6
 8001318:	fb09 aa18 	mls	sl, r9, r8, sl
 800131c:	fa1f fc87 	uxth.w	ip, r7
 8001320:	ea43 030e 	orr.w	r3, r3, lr
 8001324:	fa00 fe01 	lsl.w	lr, r0, r1
 8001328:	fb08 f00c 	mul.w	r0, r8, ip
 800132c:	0c1c      	lsrs	r4, r3, #16
 800132e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001332:	42a0      	cmp	r0, r4
 8001334:	fa02 f201 	lsl.w	r2, r2, r1
 8001338:	d90a      	bls.n	8001350 <__udivmoddi4+0x1a4>
 800133a:	193c      	adds	r4, r7, r4
 800133c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001340:	f080 809e 	bcs.w	8001480 <__udivmoddi4+0x2d4>
 8001344:	42a0      	cmp	r0, r4
 8001346:	f240 809b 	bls.w	8001480 <__udivmoddi4+0x2d4>
 800134a:	f1a8 0802 	sub.w	r8, r8, #2
 800134e:	443c      	add	r4, r7
 8001350:	1a24      	subs	r4, r4, r0
 8001352:	b298      	uxth	r0, r3
 8001354:	fbb4 f3f9 	udiv	r3, r4, r9
 8001358:	fb09 4413 	mls	r4, r9, r3, r4
 800135c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001364:	45a4      	cmp	ip, r4
 8001366:	d909      	bls.n	800137c <__udivmoddi4+0x1d0>
 8001368:	193c      	adds	r4, r7, r4
 800136a:	f103 30ff 	add.w	r0, r3, #4294967295
 800136e:	f080 8085 	bcs.w	800147c <__udivmoddi4+0x2d0>
 8001372:	45a4      	cmp	ip, r4
 8001374:	f240 8082 	bls.w	800147c <__udivmoddi4+0x2d0>
 8001378:	3b02      	subs	r3, #2
 800137a:	443c      	add	r4, r7
 800137c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001380:	eba4 040c 	sub.w	r4, r4, ip
 8001384:	fba0 8c02 	umull	r8, ip, r0, r2
 8001388:	4564      	cmp	r4, ip
 800138a:	4643      	mov	r3, r8
 800138c:	46e1      	mov	r9, ip
 800138e:	d364      	bcc.n	800145a <__udivmoddi4+0x2ae>
 8001390:	d061      	beq.n	8001456 <__udivmoddi4+0x2aa>
 8001392:	b15d      	cbz	r5, 80013ac <__udivmoddi4+0x200>
 8001394:	ebbe 0203 	subs.w	r2, lr, r3
 8001398:	eb64 0409 	sbc.w	r4, r4, r9
 800139c:	fa04 f606 	lsl.w	r6, r4, r6
 80013a0:	fa22 f301 	lsr.w	r3, r2, r1
 80013a4:	431e      	orrs	r6, r3
 80013a6:	40cc      	lsrs	r4, r1
 80013a8:	e9c5 6400 	strd	r6, r4, [r5]
 80013ac:	2100      	movs	r1, #0
 80013ae:	e74e      	b.n	800124e <__udivmoddi4+0xa2>
 80013b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80013b4:	0c01      	lsrs	r1, r0, #16
 80013b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013ba:	b280      	uxth	r0, r0
 80013bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013c0:	463b      	mov	r3, r7
 80013c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80013c6:	4638      	mov	r0, r7
 80013c8:	463c      	mov	r4, r7
 80013ca:	46b8      	mov	r8, r7
 80013cc:	46be      	mov	lr, r7
 80013ce:	2620      	movs	r6, #32
 80013d0:	eba2 0208 	sub.w	r2, r2, r8
 80013d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013d8:	e765      	b.n	80012a6 <__udivmoddi4+0xfa>
 80013da:	4601      	mov	r1, r0
 80013dc:	e717      	b.n	800120e <__udivmoddi4+0x62>
 80013de:	4610      	mov	r0, r2
 80013e0:	e72b      	b.n	800123a <__udivmoddi4+0x8e>
 80013e2:	f1c6 0120 	rsb	r1, r6, #32
 80013e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80013ea:	40b7      	lsls	r7, r6
 80013ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80013f0:	fa20 f101 	lsr.w	r1, r0, r1
 80013f4:	ea41 010e 	orr.w	r1, r1, lr
 80013f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013fc:	fbbc f8fe 	udiv	r8, ip, lr
 8001400:	b2bc      	uxth	r4, r7
 8001402:	fb0e cc18 	mls	ip, lr, r8, ip
 8001406:	fb08 f904 	mul.w	r9, r8, r4
 800140a:	0c0a      	lsrs	r2, r1, #16
 800140c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001410:	40b0      	lsls	r0, r6
 8001412:	4591      	cmp	r9, r2
 8001414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001418:	b280      	uxth	r0, r0
 800141a:	d93e      	bls.n	800149a <__udivmoddi4+0x2ee>
 800141c:	18ba      	adds	r2, r7, r2
 800141e:	f108 3cff 	add.w	ip, r8, #4294967295
 8001422:	d201      	bcs.n	8001428 <__udivmoddi4+0x27c>
 8001424:	4591      	cmp	r9, r2
 8001426:	d81f      	bhi.n	8001468 <__udivmoddi4+0x2bc>
 8001428:	eba2 0209 	sub.w	r2, r2, r9
 800142c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001430:	fb09 f804 	mul.w	r8, r9, r4
 8001434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001438:	b28a      	uxth	r2, r1
 800143a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800143e:	4542      	cmp	r2, r8
 8001440:	d229      	bcs.n	8001496 <__udivmoddi4+0x2ea>
 8001442:	18ba      	adds	r2, r7, r2
 8001444:	f109 31ff 	add.w	r1, r9, #4294967295
 8001448:	d2c2      	bcs.n	80013d0 <__udivmoddi4+0x224>
 800144a:	4542      	cmp	r2, r8
 800144c:	d2c0      	bcs.n	80013d0 <__udivmoddi4+0x224>
 800144e:	f1a9 0102 	sub.w	r1, r9, #2
 8001452:	443a      	add	r2, r7
 8001454:	e7bc      	b.n	80013d0 <__udivmoddi4+0x224>
 8001456:	45c6      	cmp	lr, r8
 8001458:	d29b      	bcs.n	8001392 <__udivmoddi4+0x1e6>
 800145a:	ebb8 0302 	subs.w	r3, r8, r2
 800145e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001462:	3801      	subs	r0, #1
 8001464:	46e1      	mov	r9, ip
 8001466:	e794      	b.n	8001392 <__udivmoddi4+0x1e6>
 8001468:	eba7 0909 	sub.w	r9, r7, r9
 800146c:	444a      	add	r2, r9
 800146e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001472:	f1a8 0c02 	sub.w	ip, r8, #2
 8001476:	fb09 f804 	mul.w	r8, r9, r4
 800147a:	e7db      	b.n	8001434 <__udivmoddi4+0x288>
 800147c:	4603      	mov	r3, r0
 800147e:	e77d      	b.n	800137c <__udivmoddi4+0x1d0>
 8001480:	46d0      	mov	r8, sl
 8001482:	e765      	b.n	8001350 <__udivmoddi4+0x1a4>
 8001484:	4608      	mov	r0, r1
 8001486:	e6fa      	b.n	800127e <__udivmoddi4+0xd2>
 8001488:	443b      	add	r3, r7
 800148a:	3a02      	subs	r2, #2
 800148c:	e730      	b.n	80012f0 <__udivmoddi4+0x144>
 800148e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001492:	443b      	add	r3, r7
 8001494:	e719      	b.n	80012ca <__udivmoddi4+0x11e>
 8001496:	4649      	mov	r1, r9
 8001498:	e79a      	b.n	80013d0 <__udivmoddi4+0x224>
 800149a:	eba2 0209 	sub.w	r2, r2, r9
 800149e:	fbb2 f9fe 	udiv	r9, r2, lr
 80014a2:	46c4      	mov	ip, r8
 80014a4:	fb09 f804 	mul.w	r8, r9, r4
 80014a8:	e7c4      	b.n	8001434 <__udivmoddi4+0x288>
 80014aa:	bf00      	nop

080014ac <__aeabi_idiv0>:
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_Init+0x28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <HAL_Init+0x28>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f947 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	200f      	movs	r0, #15
 80014c8:	f000 f808 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f005 ff9c 	bl	8007408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f95f 	bl	80017be <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 f927 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	@ (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000008 	.word	0x20000008
 8001534:	20000004 	.word	0x20000004
 8001538:	20000000 	.word	0x20000000

0800153c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_IncTick+0x1c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b05      	ldr	r3, [pc, #20]	@ (800155c <HAL_IncTick+0x20>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a03      	ldr	r2, [pc, #12]	@ (800155c <HAL_IncTick+0x20>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	20000004 	.word	0x20000004
 800155c:	200001f0 	.word	0x200001f0

08001560 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b02      	ldr	r3, [pc, #8]	@ (8001570 <HAL_GetTick+0x10>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	200001f0 	.word	0x200001f0

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fff0 	bl	8001560 <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffe0 	bl	8001560 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000004 	.word	0x20000004

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4906      	ldr	r1, [pc, #24]	@ (8001654 <__NVIC_EnableIRQ+0x34>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	@ (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	@ (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	@ 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff90 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff2d 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff42 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff35 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d008      	beq.n	8001800 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2204      	movs	r2, #4
 80017f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e020      	b.n	8001842 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 020e 	bic.w	r2, r2, #14
 800180e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d005      	beq.n	8001870 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2204      	movs	r2, #4
 8001868:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e051      	b.n	8001914 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 020e 	bic.w	r2, r2, #14
 800187e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a22      	ldr	r2, [pc, #136]	@ (8001920 <HAL_DMA_Abort_IT+0xd4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d029      	beq.n	80018ee <HAL_DMA_Abort_IT+0xa2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a21      	ldr	r2, [pc, #132]	@ (8001924 <HAL_DMA_Abort_IT+0xd8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d022      	beq.n	80018ea <HAL_DMA_Abort_IT+0x9e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001928 <HAL_DMA_Abort_IT+0xdc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01a      	beq.n	80018e4 <HAL_DMA_Abort_IT+0x98>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1e      	ldr	r2, [pc, #120]	@ (800192c <HAL_DMA_Abort_IT+0xe0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d012      	beq.n	80018de <HAL_DMA_Abort_IT+0x92>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <HAL_DMA_Abort_IT+0xe4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00a      	beq.n	80018d8 <HAL_DMA_Abort_IT+0x8c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <HAL_DMA_Abort_IT+0xe8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d102      	bne.n	80018d2 <HAL_DMA_Abort_IT+0x86>
 80018cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018d0:	e00e      	b.n	80018f0 <HAL_DMA_Abort_IT+0xa4>
 80018d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018d6:	e00b      	b.n	80018f0 <HAL_DMA_Abort_IT+0xa4>
 80018d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018dc:	e008      	b.n	80018f0 <HAL_DMA_Abort_IT+0xa4>
 80018de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e2:	e005      	b.n	80018f0 <HAL_DMA_Abort_IT+0xa4>
 80018e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018e8:	e002      	b.n	80018f0 <HAL_DMA_Abort_IT+0xa4>
 80018ea:	2310      	movs	r3, #16
 80018ec:	e000      	b.n	80018f0 <HAL_DMA_Abort_IT+0xa4>
 80018ee:	2301      	movs	r3, #1
 80018f0:	4a11      	ldr	r2, [pc, #68]	@ (8001938 <HAL_DMA_Abort_IT+0xec>)
 80018f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
    } 
  }
  return status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40020008 	.word	0x40020008
 8001924:	4002001c 	.word	0x4002001c
 8001928:	40020030 	.word	0x40020030
 800192c:	40020044 	.word	0x40020044
 8001930:	40020058 	.word	0x40020058
 8001934:	4002006c 	.word	0x4002006c
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b08b      	sub	sp, #44	@ 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e169      	b.n	8001c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001950:	2201      	movs	r2, #1
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 8158 	bne.w	8001c1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a9a      	ldr	r2, [pc, #616]	@ (8001bdc <HAL_GPIO_Init+0x2a0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d05e      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001978:	4a98      	ldr	r2, [pc, #608]	@ (8001bdc <HAL_GPIO_Init+0x2a0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d875      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800197e:	4a98      	ldr	r2, [pc, #608]	@ (8001be0 <HAL_GPIO_Init+0x2a4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d058      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001984:	4a96      	ldr	r2, [pc, #600]	@ (8001be0 <HAL_GPIO_Init+0x2a4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d86f      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800198a:	4a96      	ldr	r2, [pc, #600]	@ (8001be4 <HAL_GPIO_Init+0x2a8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d052      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001990:	4a94      	ldr	r2, [pc, #592]	@ (8001be4 <HAL_GPIO_Init+0x2a8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d869      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 8001996:	4a94      	ldr	r2, [pc, #592]	@ (8001be8 <HAL_GPIO_Init+0x2ac>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04c      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 800199c:	4a92      	ldr	r2, [pc, #584]	@ (8001be8 <HAL_GPIO_Init+0x2ac>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d863      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019a2:	4a92      	ldr	r2, [pc, #584]	@ (8001bec <HAL_GPIO_Init+0x2b0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d046      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 80019a8:	4a90      	ldr	r2, [pc, #576]	@ (8001bec <HAL_GPIO_Init+0x2b0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d85d      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d82a      	bhi.n	8001a08 <HAL_GPIO_Init+0xcc>
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d859      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019b6:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <HAL_GPIO_Init+0x80>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a11 	.word	0x08001a11
 80019c4:	08001a23 	.word	0x08001a23
 80019c8:	08001a65 	.word	0x08001a65
 80019cc:	08001a6b 	.word	0x08001a6b
 80019d0:	08001a6b 	.word	0x08001a6b
 80019d4:	08001a6b 	.word	0x08001a6b
 80019d8:	08001a6b 	.word	0x08001a6b
 80019dc:	08001a6b 	.word	0x08001a6b
 80019e0:	08001a6b 	.word	0x08001a6b
 80019e4:	08001a6b 	.word	0x08001a6b
 80019e8:	08001a6b 	.word	0x08001a6b
 80019ec:	08001a6b 	.word	0x08001a6b
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a6b 	.word	0x08001a6b
 80019f8:	08001a6b 	.word	0x08001a6b
 80019fc:	08001a6b 	.word	0x08001a6b
 8001a00:	08001a19 	.word	0x08001a19
 8001a04:	08001a2d 	.word	0x08001a2d
 8001a08:	4a79      	ldr	r2, [pc, #484]	@ (8001bf0 <HAL_GPIO_Init+0x2b4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0e:	e02c      	b.n	8001a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e029      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e024      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	3308      	adds	r3, #8
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e01f      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	330c      	adds	r3, #12
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e01a      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e013      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	611a      	str	r2, [r3, #16]
          break;
 8001a56:	e009      	b.n	8001a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	615a      	str	r2, [r3, #20]
          break;
 8001a62:	e003      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          break;
 8001a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	d801      	bhi.n	8001a76 <HAL_GPIO_Init+0x13a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_Init+0x13e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2bff      	cmp	r3, #255	@ 0xff
 8001a80:	d802      	bhi.n	8001a88 <HAL_GPIO_Init+0x14c>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x152>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	3b08      	subs	r3, #8
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	210f      	movs	r1, #15
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	6a39      	ldr	r1, [r7, #32]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80b1 	beq.w	8001c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001abc:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad4:	4a48      	ldr	r2, [pc, #288]	@ (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a40      	ldr	r2, [pc, #256]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_GPIO_Init+0x1ec>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3f      	ldr	r2, [pc, #252]	@ (8001c00 <HAL_GPIO_Init+0x2c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00d      	beq.n	8001b24 <HAL_GPIO_Init+0x1e8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0x1e4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3d      	ldr	r2, [pc, #244]	@ (8001c08 <HAL_GPIO_Init+0x2cc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_GPIO_Init+0x1e0>
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e004      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e002      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4093      	lsls	r3, r2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3a:	492f      	ldr	r1, [pc, #188]	@ (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b54:	4b2d      	ldr	r3, [pc, #180]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	492c      	ldr	r1, [pc, #176]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b62:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4928      	ldr	r1, [pc, #160]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7c:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4922      	ldr	r1, [pc, #136]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	491e      	ldr	r1, [pc, #120]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4918      	ldr	r1, [pc, #96]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4914      	ldr	r1, [pc, #80]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d021      	beq.n	8001c10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	490e      	ldr	r1, [pc, #56]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e021      	b.n	8001c1e <HAL_GPIO_Init+0x2e2>
 8001bda:	bf00      	nop
 8001bdc:	10320000 	.word	0x10320000
 8001be0:	10310000 	.word	0x10310000
 8001be4:	10220000 	.word	0x10220000
 8001be8:	10210000 	.word	0x10210000
 8001bec:	10120000 	.word	0x10120000
 8001bf0:	10110000 	.word	0x10110000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40011400 	.word	0x40011400
 8001c0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_GPIO_Init+0x304>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4909      	ldr	r1, [pc, #36]	@ (8001c40 <HAL_GPIO_Init+0x304>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	3301      	adds	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f47f ae8e 	bne.w	8001950 <HAL_GPIO_Init+0x14>
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	372c      	adds	r7, #44	@ 0x2c
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40010400 	.word	0x40010400

08001c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f920 	bl	8005ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e12b      	b.n	8001ede <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f005 fbe6 	bl	800746c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2224      	movs	r2, #36	@ 0x24
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cd8:	f002 f8c2 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8001cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a81      	ldr	r2, [pc, #516]	@ (8001ee8 <HAL_I2C_Init+0x274>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d807      	bhi.n	8001cf8 <HAL_I2C_Init+0x84>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a80      	ldr	r2, [pc, #512]	@ (8001eec <HAL_I2C_Init+0x278>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	bf94      	ite	ls
 8001cf0:	2301      	movls	r3, #1
 8001cf2:	2300      	movhi	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	e006      	b.n	8001d06 <HAL_I2C_Init+0x92>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4a7d      	ldr	r2, [pc, #500]	@ (8001ef0 <HAL_I2C_Init+0x27c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	bf94      	ite	ls
 8001d00:	2301      	movls	r3, #1
 8001d02:	2300      	movhi	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0e7      	b.n	8001ede <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a78      	ldr	r2, [pc, #480]	@ (8001ef4 <HAL_I2C_Init+0x280>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0c9b      	lsrs	r3, r3, #18
 8001d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ee8 <HAL_I2C_Init+0x274>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d802      	bhi.n	8001d48 <HAL_I2C_Init+0xd4>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3301      	adds	r3, #1
 8001d46:	e009      	b.n	8001d5c <HAL_I2C_Init+0xe8>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	4a69      	ldr	r2, [pc, #420]	@ (8001ef8 <HAL_I2C_Init+0x284>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	495c      	ldr	r1, [pc, #368]	@ (8001ee8 <HAL_I2C_Init+0x274>)
 8001d78:	428b      	cmp	r3, r1
 8001d7a:	d819      	bhi.n	8001db0 <HAL_I2C_Init+0x13c>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1e59      	subs	r1, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d8a:	1c59      	adds	r1, r3, #1
 8001d8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d90:	400b      	ands	r3, r1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_I2C_Init+0x138>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1e59      	subs	r1, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da4:	3301      	adds	r3, #1
 8001da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001daa:	e051      	b.n	8001e50 <HAL_I2C_Init+0x1dc>
 8001dac:	2304      	movs	r3, #4
 8001dae:	e04f      	b.n	8001e50 <HAL_I2C_Init+0x1dc>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d111      	bne.n	8001ddc <HAL_I2C_Init+0x168>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e58      	subs	r0, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	440b      	add	r3, r1
 8001dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e012      	b.n	8001e02 <HAL_I2C_Init+0x18e>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e58      	subs	r0, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	0099      	lsls	r1, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Init+0x196>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e022      	b.n	8001e50 <HAL_I2C_Init+0x1dc>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10e      	bne.n	8001e30 <HAL_I2C_Init+0x1bc>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1e58      	subs	r0, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6859      	ldr	r1, [r3, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	440b      	add	r3, r1
 8001e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e2e:	e00f      	b.n	8001e50 <HAL_I2C_Init+0x1dc>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e58      	subs	r0, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	0099      	lsls	r1, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	6809      	ldr	r1, [r1, #0]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6911      	ldr	r1, [r2, #16]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68d2      	ldr	r2, [r2, #12]
 8001e8a:	4311      	orrs	r1, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	000186a0 	.word	0x000186a0
 8001eec:	001e847f 	.word	0x001e847f
 8001ef0:	003d08ff 	.word	0x003d08ff
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	10624dd3 	.word	0x10624dd3

08001efc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	461a      	mov	r2, r3
 8001f08:	460b      	mov	r3, r1
 8001f0a:	817b      	strh	r3, [r7, #10]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff fb26 	bl	8001560 <HAL_GetTick>
 8001f14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	f040 80e0 	bne.w	80020e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2319      	movs	r3, #25
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4970      	ldr	r1, [pc, #448]	@ (80020f0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f001 f98a 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e0d3      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_I2C_Master_Transmit+0x50>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e0cc      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d007      	beq.n	8001f72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2221      	movs	r2, #33	@ 0x21
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a50      	ldr	r2, [pc, #320]	@ (80020f4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fb4:	8979      	ldrh	r1, [r7, #10]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	6a3a      	ldr	r2, [r7, #32]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fe76 	bl	8002cac <I2C_MasterRequestWrite>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e08d      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fe0:	e066      	b.n	80020b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	6a39      	ldr	r1, [r7, #32]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f001 fa48 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d107      	bne.n	800200a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002008:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06b      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b04      	cmp	r3, #4
 800204a:	d11b      	bne.n	8002084 <HAL_I2C_Master_Transmit+0x188>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d017      	beq.n	8002084 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	6a39      	ldr	r1, [r7, #32]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f001 fa3f 	bl	800350c <I2C_WaitOnBTFFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	2b04      	cmp	r3, #4
 800209a:	d107      	bne.n	80020ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e01a      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d194      	bne.n	8001fe2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	00100002 	.word	0x00100002
 80020f4:	ffff0000 	.word	0xffff0000

080020f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	@ 0x30
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	460b      	mov	r3, r1
 8002106:	817b      	strh	r3, [r7, #10]
 8002108:	4613      	mov	r3, r2
 800210a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff fa26 	bl	8001560 <HAL_GetTick>
 8002114:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b20      	cmp	r3, #32
 8002120:	f040 824b 	bne.w	80025ba <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2319      	movs	r3, #25
 800212a:	2201      	movs	r2, #1
 800212c:	497f      	ldr	r1, [pc, #508]	@ (800232c <HAL_I2C_Master_Receive+0x234>)
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f001 f88a 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800213a:	2302      	movs	r3, #2
 800213c:	e23e      	b.n	80025bc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_I2C_Master_Receive+0x54>
 8002148:	2302      	movs	r3, #2
 800214a:	e237      	b.n	80025bc <HAL_I2C_Master_Receive+0x4c4>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d007      	beq.n	8002172 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2222      	movs	r2, #34	@ 0x22
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2210      	movs	r2, #16
 800218e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	893a      	ldrh	r2, [r7, #8]
 80021a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002330 <HAL_I2C_Master_Receive+0x238>)
 80021b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fdf8 	bl	8002db0 <I2C_MasterRequestRead>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e1f8      	b.n	80025bc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d113      	bne.n	80021fa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e1cc      	b.n	8002594 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d11e      	bne.n	8002240 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002210:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002212:	b672      	cpsid	i
}
 8002214:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800223c:	b662      	cpsie	i
}
 800223e:	e035      	b.n	80022ac <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002244:	2b02      	cmp	r3, #2
 8002246:	d11e      	bne.n	8002286 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002256:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002280:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002282:	b662      	cpsie	i
}
 8002284:	e012      	b.n	80022ac <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80022ac:	e172      	b.n	8002594 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	f200 811f 	bhi.w	80024f6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d123      	bne.n	8002308 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f001 f969 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e173      	b.n	80025bc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002306:	e145      	b.n	8002594 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230c:	2b02      	cmp	r3, #2
 800230e:	d152      	bne.n	80023b6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002316:	2200      	movs	r2, #0
 8002318:	4906      	ldr	r1, [pc, #24]	@ (8002334 <HAL_I2C_Master_Receive+0x23c>)
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 ff94 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e148      	b.n	80025bc <HAL_I2C_Master_Receive+0x4c4>
 800232a:	bf00      	nop
 800232c:	00100002 	.word	0x00100002
 8002330:	ffff0000 	.word	0xffff0000
 8002334:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002338:	b672      	cpsid	i
}
 800233a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800234a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800237e:	b662      	cpsie	i
}
 8002380:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023b4:	e0ee      	b.n	8002594 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023bc:	2200      	movs	r2, #0
 80023be:	4981      	ldr	r1, [pc, #516]	@ (80025c4 <HAL_I2C_Master_Receive+0x4cc>)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 ff41 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0f5      	b.n	80025bc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002416:	4b6c      	ldr	r3, [pc, #432]	@ (80025c8 <HAL_I2C_Master_Receive+0x4d0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	4a6b      	ldr	r2, [pc, #428]	@ (80025cc <HAL_I2C_Master_Receive+0x4d4>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	0a1a      	lsrs	r2, r3, #8
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00da      	lsls	r2, r3, #3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	3b01      	subs	r3, #1
 8002434:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d118      	bne.n	800246e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f043 0220 	orr.w	r2, r3, #32
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800245e:	b662      	cpsie	i
}
 8002460:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0a6      	b.n	80025bc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b04      	cmp	r3, #4
 800247a:	d1d9      	bne.n	8002430 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800248a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024be:	b662      	cpsie	i
}
 80024c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024f4:	e04e      	b.n	8002594 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f001 f84e 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e058      	b.n	80025bc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b04      	cmp	r3, #4
 8002548:	d124      	bne.n	8002594 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254e:	2b03      	cmp	r3, #3
 8002550:	d107      	bne.n	8002562 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002560:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	f47f ae88 	bne.w	80022ae <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
  }
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3728      	adds	r7, #40	@ 0x28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	00010004 	.word	0x00010004
 80025c8:	20000008 	.word	0x20000008
 80025cc:	14f8b589 	.word	0x14f8b589

080025d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	817b      	strh	r3, [r7, #10]
 80025e2:	460b      	mov	r3, r1
 80025e4:	813b      	strh	r3, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ea:	f7fe ffb9 	bl	8001560 <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	f040 80d9 	bne.w	80027b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2319      	movs	r3, #25
 8002604:	2201      	movs	r2, #1
 8002606:	496d      	ldr	r1, [pc, #436]	@ (80027bc <HAL_I2C_Mem_Write+0x1ec>)
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fe1d 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	e0cc      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_I2C_Mem_Write+0x56>
 8002622:	2302      	movs	r3, #2
 8002624:	e0c5      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d007      	beq.n	800264c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2221      	movs	r2, #33	@ 0x21
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2240      	movs	r2, #64	@ 0x40
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800267c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a4d      	ldr	r2, [pc, #308]	@ (80027c0 <HAL_I2C_Mem_Write+0x1f0>)
 800268c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268e:	88f8      	ldrh	r0, [r7, #6]
 8002690:	893a      	ldrh	r2, [r7, #8]
 8002692:	8979      	ldrh	r1, [r7, #10]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4603      	mov	r3, r0
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fc54 	bl	8002f4c <I2C_RequestMemoryWrite>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d052      	beq.n	8002750 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e081      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fee2 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d107      	bne.n	80026d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06b      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b04      	cmp	r3, #4
 8002716:	d11b      	bne.n	8002750 <HAL_I2C_Mem_Write+0x180>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d017      	beq.n	8002750 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1aa      	bne.n	80026ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fed5 	bl	800350c <I2C_WaitOnBTFFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	2b04      	cmp	r3, #4
 800276e:	d107      	bne.n	8002780 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e016      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	00100002 	.word	0x00100002
 80027c0:	ffff0000 	.word	0xffff0000

080027c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	@ 0x30
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027e2:	f7fe febd 	bl	8001560 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	f040 8250 	bne.w	8002c96 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2319      	movs	r3, #25
 80027fc:	2201      	movs	r2, #1
 80027fe:	4982      	ldr	r1, [pc, #520]	@ (8002a08 <HAL_I2C_Mem_Read+0x244>)
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fd21 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
 800280e:	e243      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_I2C_Mem_Read+0x5a>
 800281a:	2302      	movs	r3, #2
 800281c:	e23c      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4d4>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d007      	beq.n	8002844 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2222      	movs	r2, #34	@ 0x22
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2240      	movs	r2, #64	@ 0x40
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800286e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a62      	ldr	r2, [pc, #392]	@ (8002a0c <HAL_I2C_Mem_Read+0x248>)
 8002884:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002886:	88f8      	ldrh	r0, [r7, #6]
 8002888:	893a      	ldrh	r2, [r7, #8]
 800288a:	8979      	ldrh	r1, [r7, #10]
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4603      	mov	r3, r0
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fbee 	bl	8003078 <I2C_RequestMemoryRead>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e1f8      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d113      	bne.n	80028d6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e1cc      	b.n	8002c70 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d11e      	bne.n	800291c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028ee:	b672      	cpsid	i
}
 80028f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002916:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002918:	b662      	cpsie	i
}
 800291a:	e035      	b.n	8002988 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002920:	2b02      	cmp	r3, #2
 8002922:	d11e      	bne.n	8002962 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002932:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
}
 8002936:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800295c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800295e:	b662      	cpsie	i
}
 8002960:	e012      	b.n	8002988 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002970:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002988:	e172      	b.n	8002c70 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298e:	2b03      	cmp	r3, #3
 8002990:	f200 811f 	bhi.w	8002bd2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002998:	2b01      	cmp	r3, #1
 800299a:	d123      	bne.n	80029e4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fdfb 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e173      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029e2:	e145      	b.n	8002c70 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d152      	bne.n	8002a92 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f2:	2200      	movs	r2, #0
 80029f4:	4906      	ldr	r1, [pc, #24]	@ (8002a10 <HAL_I2C_Mem_Read+0x24c>)
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fc26 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e148      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4d4>
 8002a06:	bf00      	nop
 8002a08:	00100002 	.word	0x00100002
 8002a0c:	ffff0000 	.word	0xffff0000
 8002a10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a14:	b672      	cpsid	i
}
 8002a16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a5a:	b662      	cpsie	i
}
 8002a5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a90:	e0ee      	b.n	8002c70 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4981      	ldr	r1, [pc, #516]	@ (8002ca0 <HAL_I2C_Mem_Read+0x4dc>)
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fbd3 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0f5      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002af2:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca4 <HAL_I2C_Mem_Read+0x4e0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	08db      	lsrs	r3, r3, #3
 8002af8:	4a6b      	ldr	r2, [pc, #428]	@ (8002ca8 <HAL_I2C_Mem_Read+0x4e4>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0a1a      	lsrs	r2, r3, #8
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00da      	lsls	r2, r3, #3
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d118      	bne.n	8002b4a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b3a:	b662      	cpsie	i
}
 8002b3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0a6      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d1d9      	bne.n	8002b0c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b9a:	b662      	cpsie	i
}
 8002b9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bd0:	e04e      	b.n	8002c70 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fce0 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e058      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d124      	bne.n	8002c70 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d107      	bne.n	8002c3e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f47f ae88 	bne.w	800298a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3728      	adds	r7, #40	@ 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	00010004 	.word	0x00010004
 8002ca4:	20000008 	.word	0x20000008
 8002ca8:	14f8b589 	.word	0x14f8b589

08002cac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d006      	beq.n	8002cd6 <I2C_MasterRequestWrite+0x2a>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d003      	beq.n	8002cd6 <I2C_MasterRequestWrite+0x2a>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cd4:	d108      	bne.n	8002ce8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e00b      	b.n	8002d00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	2b12      	cmp	r3, #18
 8002cee:	d107      	bne.n	8002d00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fa9b 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d26:	d103      	bne.n	8002d30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e035      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	e01b      	b.n	8002d88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d50:	897b      	ldrh	r3, [r7, #10]
 8002d52:	11db      	asrs	r3, r3, #7
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 0306 	and.w	r3, r3, #6
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f063 030f 	orn	r3, r3, #15
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	490e      	ldr	r1, [pc, #56]	@ (8002da8 <I2C_MasterRequestWrite+0xfc>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fae4 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e010      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4907      	ldr	r1, [pc, #28]	@ (8002dac <I2C_MasterRequestWrite+0x100>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fad4 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	00010008 	.word	0x00010008
 8002dac:	00010002 	.word	0x00010002

08002db0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d006      	beq.n	8002dea <I2C_MasterRequestRead+0x3a>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d003      	beq.n	8002dea <I2C_MasterRequestRead+0x3a>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002de8:	d108      	bne.n	8002dfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e00b      	b.n	8002e14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	2b11      	cmp	r3, #17
 8002e02:	d107      	bne.n	8002e14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fa11 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3a:	d103      	bne.n	8002e44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e079      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e50:	d108      	bne.n	8002e64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e52:	897b      	ldrh	r3, [r7, #10]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	e05f      	b.n	8002f24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	11db      	asrs	r3, r3, #7
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0306 	and.w	r3, r3, #6
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f063 030f 	orn	r3, r3, #15
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4930      	ldr	r1, [pc, #192]	@ (8002f44 <I2C_MasterRequestRead+0x194>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fa5a 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e054      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4929      	ldr	r1, [pc, #164]	@ (8002f48 <I2C_MasterRequestRead+0x198>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa4a 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e044      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f9af 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002efe:	d103      	bne.n	8002f08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e017      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f0c:	897b      	ldrh	r3, [r7, #10]
 8002f0e:	11db      	asrs	r3, r3, #7
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f003 0306 	and.w	r3, r3, #6
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f063 030e 	orn	r3, r3, #14
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4907      	ldr	r1, [pc, #28]	@ (8002f48 <I2C_MasterRequestRead+0x198>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fa06 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	00010008 	.word	0x00010008
 8002f48:	00010002 	.word	0x00010002

08002f4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	813b      	strh	r3, [r7, #8]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f960 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f9c:	d103      	bne.n	8002fa6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e05f      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	492d      	ldr	r1, [pc, #180]	@ (8003074 <I2C_RequestMemoryWrite+0x128>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f9bb 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e04c      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe8:	6a39      	ldr	r1, [r7, #32]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa46 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d107      	bne.n	800300e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e02b      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	e021      	b.n	8003068 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003024:	893b      	ldrh	r3, [r7, #8]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	b29b      	uxth	r3, r3
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003034:	6a39      	ldr	r1, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fa20 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	2b04      	cmp	r3, #4
 8003048:	d107      	bne.n	800305a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003058:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e005      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800305e:	893b      	ldrh	r3, [r7, #8]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	00010002 	.word	0x00010002

08003078 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	4603      	mov	r3, r0
 8003088:	817b      	strh	r3, [r7, #10]
 800308a:	460b      	mov	r3, r1
 800308c:	813b      	strh	r3, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8c2 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030d8:	d103      	bne.n	80030e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0aa      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	4952      	ldr	r1, [pc, #328]	@ (8003244 <I2C_RequestMemoryRead+0x1cc>)
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f91d 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e097      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f9a8 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	2b04      	cmp	r3, #4
 8003138:	d107      	bne.n	800314a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003148:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e076      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003154:	893b      	ldrh	r3, [r7, #8]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	611a      	str	r2, [r3, #16]
 800315e:	e021      	b.n	80031a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003160:	893b      	ldrh	r3, [r7, #8]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	b29b      	uxth	r3, r3
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003170:	6a39      	ldr	r1, [r7, #32]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f982 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	2b04      	cmp	r3, #4
 8003184:	d107      	bne.n	8003196 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003194:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e050      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800319a:	893b      	ldrh	r3, [r7, #8]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a6:	6a39      	ldr	r1, [r7, #32]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f967 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d107      	bne.n	80031cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e035      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f82b 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003206:	d103      	bne.n	8003210 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e013      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003214:	897b      	ldrh	r3, [r7, #10]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	6a3a      	ldr	r2, [r7, #32]
 8003228:	4906      	ldr	r1, [pc, #24]	@ (8003244 <I2C_RequestMemoryRead+0x1cc>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f886 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	00010002 	.word	0x00010002

08003248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003258:	e048      	b.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d044      	beq.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fe f97d 	bl	8001560 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d139      	bne.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10d      	bne.n	800329e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	43da      	mvns	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4013      	ands	r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	e00c      	b.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d116      	bne.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e023      	b.n	8003334 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d10d      	bne.n	8003312 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	e00c      	b.n	800332c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	43da      	mvns	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	429a      	cmp	r2, r3
 8003330:	d093      	beq.n	800325a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334a:	e071      	b.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335a:	d123      	bne.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800336a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e067      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d041      	beq.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	f7fe f8d8 	bl	8001560 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d136      	bne.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10c      	bne.n	80033e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	e00b      	b.n	80033fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	43da      	mvns	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4013      	ands	r3, r2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e021      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10c      	bne.n	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	43da      	mvns	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e00b      	b.n	800346c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	f47f af6d 	bne.w	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003488:	e034      	b.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f8e3 	bl	8003656 <I2C_IsAcknowledgeFailed>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e034      	b.n	8003504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d028      	beq.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fe f85d 	bl	8001560 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11d      	bne.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c2:	2b80      	cmp	r3, #128	@ 0x80
 80034c4:	d016      	beq.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e007      	b.n	8003504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fe:	2b80      	cmp	r3, #128	@ 0x80
 8003500:	d1c3      	bne.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003518:	e034      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f89b 	bl	8003656 <I2C_IsAcknowledgeFailed>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e034      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d028      	beq.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe f815 	bl	8001560 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d11d      	bne.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d016      	beq.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d1c3      	bne.n	800351a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a8:	e049      	b.n	800363e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d119      	bne.n	80035ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0210 	mvn.w	r2, #16
 80035c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e030      	b.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ec:	f7fd ffb8 	bl	8001560 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d302      	bcc.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	d016      	beq.n	800363e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e007      	b.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003648:	2b40      	cmp	r3, #64	@ 0x40
 800364a:	d1ae      	bne.n	80035aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366c:	d11b      	bne.n	80036a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003676:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f043 0204 	orr.w	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80036b8:	4b03      	ldr	r3, [pc, #12]	@ (80036c8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	420e0020 	.word	0x420e0020

080036cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e272      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8087 	beq.w	80037fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ec:	4b92      	ldr	r3, [pc, #584]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d00c      	beq.n	8003712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d112      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
 8003704:	4b8c      	ldr	r3, [pc, #560]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003710:	d10b      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003712:	4b89      	ldr	r3, [pc, #548]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d06c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x12c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d168      	bne.n	80037f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e24c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x76>
 8003734:	4b80      	ldr	r3, [pc, #512]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7f      	ldr	r2, [pc, #508]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e02e      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x98>
 800374a:	4b7b      	ldr	r3, [pc, #492]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7a      	ldr	r2, [pc, #488]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b78      	ldr	r3, [pc, #480]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a77      	ldr	r2, [pc, #476]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800375c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e01d      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0xbc>
 800376e:	4b72      	ldr	r3, [pc, #456]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a71      	ldr	r2, [pc, #452]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b6f      	ldr	r3, [pc, #444]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6e      	ldr	r2, [pc, #440]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e00b      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003788:	4b6b      	ldr	r3, [pc, #428]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a6a      	ldr	r2, [pc, #424]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b68      	ldr	r3, [pc, #416]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a67      	ldr	r2, [pc, #412]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800379a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800379e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fd feda 	bl	8001560 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fd fed6 	bl	8001560 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	@ 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e200      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0xe4>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fd fec6 	bl	8001560 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fd fec2 	bl	8001560 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	@ 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1ec      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x10c>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d063      	beq.n	80038ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003806:	4b4c      	ldr	r3, [pc, #304]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003812:	4b49      	ldr	r3, [pc, #292]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	d11c      	bne.n	8003858 <HAL_RCC_OscConfig+0x18c>
 800381e:	4b46      	ldr	r3, [pc, #280]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	4b43      	ldr	r3, [pc, #268]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x176>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e1c0      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	4b3d      	ldr	r3, [pc, #244]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4939      	ldr	r1, [pc, #228]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	e03a      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003860:	4b36      	ldr	r3, [pc, #216]	@ (800393c <HAL_RCC_OscConfig+0x270>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fd fe7b 	bl	8001560 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386e:	f7fd fe77 	bl	8001560 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e1a1      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b2a      	ldr	r3, [pc, #168]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4927      	ldr	r1, [pc, #156]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]
 80038a0:	e015      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a2:	4b26      	ldr	r3, [pc, #152]	@ (800393c <HAL_RCC_OscConfig+0x270>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd fe5a 	bl	8001560 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b0:	f7fd fe56 	bl	8001560 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e180      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d03a      	beq.n	8003950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d019      	beq.n	8003916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e2:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e8:	f7fd fe3a 	bl	8001560 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f0:	f7fd fe36 	bl	8001560 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e160      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f000 face 	bl	8003eb0 <RCC_Delay>
 8003914:	e01c      	b.n	8003950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003916:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fd fe20 	bl	8001560 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003922:	e00f      	b.n	8003944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7fd fe1c 	bl	8001560 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d908      	bls.n	8003944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e146      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
 800393c:	42420000 	.word	0x42420000
 8003940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	4b92      	ldr	r3, [pc, #584]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e9      	bne.n	8003924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80a6 	beq.w	8003aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003962:	4b8b      	ldr	r3, [pc, #556]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10d      	bne.n	800398a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	4b88      	ldr	r3, [pc, #544]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	4a87      	ldr	r2, [pc, #540]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003978:	61d3      	str	r3, [r2, #28]
 800397a:	4b85      	ldr	r3, [pc, #532]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	4b82      	ldr	r3, [pc, #520]	@ (8003b94 <HAL_RCC_OscConfig+0x4c8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d118      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003996:	4b7f      	ldr	r3, [pc, #508]	@ (8003b94 <HAL_RCC_OscConfig+0x4c8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b94 <HAL_RCC_OscConfig+0x4c8>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7fd fddd 	bl	8001560 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7fd fdd9 	bl	8001560 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	@ 0x64
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e103      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	4b75      	ldr	r3, [pc, #468]	@ (8003b94 <HAL_RCC_OscConfig+0x4c8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <HAL_RCC_OscConfig+0x312>
 80039d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	e02d      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x334>
 80039e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a69      	ldr	r2, [pc, #420]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6213      	str	r3, [r2, #32]
 80039f2:	4b67      	ldr	r3, [pc, #412]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a66      	ldr	r2, [pc, #408]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6213      	str	r3, [r2, #32]
 80039fe:	e01c      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b05      	cmp	r3, #5
 8003a06:	d10c      	bne.n	8003a22 <HAL_RCC_OscConfig+0x356>
 8003a08:	4b61      	ldr	r3, [pc, #388]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4a60      	ldr	r2, [pc, #384]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	6213      	str	r3, [r2, #32]
 8003a14:	4b5e      	ldr	r3, [pc, #376]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4a5d      	ldr	r2, [pc, #372]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	e00b      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 8003a22:	4b5b      	ldr	r3, [pc, #364]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a5a      	ldr	r2, [pc, #360]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6213      	str	r3, [r2, #32]
 8003a2e:	4b58      	ldr	r3, [pc, #352]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a57      	ldr	r2, [pc, #348]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d015      	beq.n	8003a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a42:	f7fd fd8d 	bl	8001560 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fd fd89 	bl	8001560 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0b1      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	4b4b      	ldr	r3, [pc, #300]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ee      	beq.n	8003a4a <HAL_RCC_OscConfig+0x37e>
 8003a6c:	e014      	b.n	8003a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fd77 	bl	8001560 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fd fd73 	bl	8001560 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e09b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	4b40      	ldr	r3, [pc, #256]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ee      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4a3b      	ldr	r2, [pc, #236]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8087 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab4:	4b36      	ldr	r3, [pc, #216]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d061      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d146      	bne.n	8003b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac8:	4b33      	ldr	r3, [pc, #204]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fd fd47 	bl	8001560 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fd fd43 	bl	8001560 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e06d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae8:	4b29      	ldr	r3, [pc, #164]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afc:	d108      	bne.n	8003b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003afe:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4921      	ldr	r1, [pc, #132]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b10:	4b1f      	ldr	r3, [pc, #124]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a19      	ldr	r1, [r3, #32]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	430b      	orrs	r3, r1
 8003b22:	491b      	ldr	r1, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b28:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fd fd17 	bl	8001560 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fd fd13 	bl	8001560 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e03d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b48:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x46a>
 8003b54:	e035      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b10      	ldr	r3, [pc, #64]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fd00 	bl	8001560 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b64:	f7fd fcfc 	bl	8001560 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e026      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x498>
 8003b82:	e01e      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e019      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40007000 	.word	0x40007000
 8003b98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_RCC_OscConfig+0x500>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d106      	bne.n	8003bbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0d0      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d910      	bls.n	8003c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b67      	ldr	r3, [pc, #412]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 0207 	bic.w	r2, r3, #7
 8003bfa:	4965      	ldr	r1, [pc, #404]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b63      	ldr	r3, [pc, #396]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0b8      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c2c:	4b59      	ldr	r3, [pc, #356]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a58      	ldr	r2, [pc, #352]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c44:	4b53      	ldr	r3, [pc, #332]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a52      	ldr	r2, [pc, #328]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c50:	4b50      	ldr	r3, [pc, #320]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	494d      	ldr	r1, [pc, #308]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d040      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b47      	ldr	r3, [pc, #284]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d115      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e07f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	4b41      	ldr	r3, [pc, #260]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e073      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e06b      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cae:	4b39      	ldr	r3, [pc, #228]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4936      	ldr	r1, [pc, #216]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc0:	f7fd fc4e 	bl	8001560 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7fd fc4a 	bl	8001560 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e053      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cde:	4b2d      	ldr	r3, [pc, #180]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 020c 	and.w	r2, r3, #12
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d1eb      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b27      	ldr	r3, [pc, #156]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d210      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 0207 	bic.w	r2, r3, #7
 8003d06:	4922      	ldr	r1, [pc, #136]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e032      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2c:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4916      	ldr	r1, [pc, #88]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d4a:	4b12      	ldr	r3, [pc, #72]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	490e      	ldr	r1, [pc, #56]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d5e:	f000 f821 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	490a      	ldr	r1, [pc, #40]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	5ccb      	ldrb	r3, [r1, r3]
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	4a09      	ldr	r2, [pc, #36]	@ (8003d9c <HAL_RCC_ClockConfig+0x1cc>)
 8003d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d7a:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <HAL_RCC_ClockConfig+0x1d0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd fbac 	bl	80014dc <HAL_InitTick>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40022000 	.word	0x40022000
 8003d94:	40021000 	.word	0x40021000
 8003d98:	0800e574 	.word	0x0800e574
 8003d9c:	20000008 	.word	0x20000008
 8003da0:	20000000 	.word	0x20000000

08003da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d002      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d003      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0x36>
 8003dd2:	e027      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dd4:	4b19      	ldr	r3, [pc, #100]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003dd6:	613b      	str	r3, [r7, #16]
      break;
 8003dd8:	e027      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	0c9b      	lsrs	r3, r3, #18
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4a17      	ldr	r2, [pc, #92]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d010      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003df2:	4b11      	ldr	r3, [pc, #68]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	0c5b      	lsrs	r3, r3, #17
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	4a11      	ldr	r2, [pc, #68]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a0d      	ldr	r2, [pc, #52]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e06:	fb03 f202 	mul.w	r2, r3, r2
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e004      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a0c      	ldr	r2, [pc, #48]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	613b      	str	r3, [r7, #16]
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e24:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e26:	613b      	str	r3, [r7, #16]
      break;
 8003e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2a:	693b      	ldr	r3, [r7, #16]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	007a1200 	.word	0x007a1200
 8003e40:	0800c2a8 	.word	0x0800c2a8
 8003e44:	0800c2b8 	.word	0x0800c2b8
 8003e48:	003d0900 	.word	0x003d0900

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e50:	4b02      	ldr	r3, [pc, #8]	@ (8003e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	20000008 	.word	0x20000008

08003e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e64:	f7ff fff2 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	@ (8003e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	0800e584 	.word	0x0800e584

08003e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e8c:	f7ff ffde 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	0adb      	lsrs	r3, r3, #11
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4903      	ldr	r1, [pc, #12]	@ (8003eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	0800e584 	.word	0x0800e584

08003eb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <RCC_Delay+0x34>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <RCC_Delay+0x38>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	0a5b      	lsrs	r3, r3, #9
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ecc:	bf00      	nop
  }
  while (Delay --);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1e5a      	subs	r2, r3, #1
 8003ed2:	60fa      	str	r2, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f9      	bne.n	8003ecc <RCC_Delay+0x1c>
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	20000008 	.word	0x20000008
 8003ee8:	10624dd3 	.word	0x10624dd3

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d07d      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0c:	4b4f      	ldr	r3, [pc, #316]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10d      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4b4c      	ldr	r3, [pc, #304]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	61d3      	str	r3, [r2, #28]
 8003f24:	4b49      	ldr	r3, [pc, #292]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	4b46      	ldr	r3, [pc, #280]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d118      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f40:	4b43      	ldr	r3, [pc, #268]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a42      	ldr	r2, [pc, #264]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4c:	f7fd fb08 	bl	8001560 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f52:	e008      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f54:	f7fd fb04 	bl	8001560 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	@ 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e06d      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f66:	4b3a      	ldr	r3, [pc, #232]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f72:	4b36      	ldr	r3, [pc, #216]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d02e      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d027      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f90:	4b2e      	ldr	r3, [pc, #184]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fa6:	4a29      	ldr	r2, [pc, #164]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d014      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fd fad3 	bl	8001560 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fd facf 	bl	8001560 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e036      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ee      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	4917      	ldr	r1, [pc, #92]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d105      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff8:	4b14      	ldr	r3, [pc, #80]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4a13      	ldr	r2, [pc, #76]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004002:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004010:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	490b      	ldr	r1, [pc, #44]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800402e:	4b07      	ldr	r3, [pc, #28]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	4904      	ldr	r1, [pc, #16]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403c:	4313      	orrs	r3, r2
 800403e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000
 8004050:	40007000 	.word	0x40007000
 8004054:	42420440 	.word	0x42420440

08004058 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b10      	cmp	r3, #16
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b10      	cmp	r3, #16
 800407e:	f200 808a 	bhi.w	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d045      	beq.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d075      	beq.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800408e:	e082      	b.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004090:	4b46      	ldr	r3, [pc, #280]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004096:	4b45      	ldr	r3, [pc, #276]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d07b      	beq.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	0c9b      	lsrs	r3, r3, #18
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	4a41      	ldr	r2, [pc, #260]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80040ac:	5cd3      	ldrb	r3, [r2, r3]
 80040ae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d015      	beq.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ba:	4b3c      	ldr	r3, [pc, #240]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	0c5b      	lsrs	r3, r3, #17
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	4a3b      	ldr	r2, [pc, #236]	@ (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80040c6:	5cd3      	ldrb	r3, [r2, r3]
 80040c8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80040d4:	4a38      	ldr	r2, [pc, #224]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	e004      	b.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4a34      	ldr	r2, [pc, #208]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80040f0:	4b2e      	ldr	r3, [pc, #184]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040fc:	d102      	bne.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	61bb      	str	r3, [r7, #24]
      break;
 8004102:	e04a      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4a2d      	ldr	r2, [pc, #180]	@ (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	61bb      	str	r3, [r7, #24]
      break;
 8004112:	e042      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004114:	4b25      	ldr	r3, [pc, #148]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004124:	d108      	bne.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e01f      	b.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800413e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004142:	d109      	bne.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004144:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004150:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e00f      	b.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004162:	d11c      	bne.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004164:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d016      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004170:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004174:	61bb      	str	r3, [r7, #24]
      break;
 8004176:	e012      	b.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004178:	e011      	b.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800417a:	f7ff fe85 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 800417e:	4602      	mov	r2, r0
 8004180:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	0b9b      	lsrs	r3, r3, #14
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	3301      	adds	r3, #1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	61bb      	str	r3, [r7, #24]
      break;
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800419e:	bf00      	nop
    }
  }
  return (frequency);
 80041a0:	69bb      	ldr	r3, [r7, #24]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	0800c2bc 	.word	0x0800c2bc
 80041b4:	0800c2cc 	.word	0x0800c2cc
 80041b8:	007a1200 	.word	0x007a1200
 80041bc:	003d0900 	.word	0x003d0900
 80041c0:	aaaaaaab 	.word	0xaaaaaaab

080041c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e07a      	b.n	80042d0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	7c5b      	ldrb	r3, [r3, #17]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d105      	bne.n	80041f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f003 f97c 	bl	80074e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fb1d 	bl	8004836 <HAL_RTC_WaitForSynchro>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2204      	movs	r2, #4
 8004206:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e061      	b.n	80042d0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fbd6 	bl	80049be <RTC_EnterInitMode>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2204      	movs	r2, #4
 800421c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e056      	b.n	80042d0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0207 	bic.w	r2, r2, #7
 8004230:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800423a:	4b27      	ldr	r3, [pc, #156]	@ (80042d8 <HAL_RTC_Init+0x114>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	4a26      	ldr	r2, [pc, #152]	@ (80042d8 <HAL_RTC_Init+0x114>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004246:	4b24      	ldr	r3, [pc, #144]	@ (80042d8 <HAL_RTC_Init+0x114>)
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	4921      	ldr	r1, [pc, #132]	@ (80042d8 <HAL_RTC_Init+0x114>)
 8004254:	4313      	orrs	r3, r2
 8004256:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d003      	beq.n	800426a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	e00e      	b.n	8004288 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800426a:	2001      	movs	r0, #1
 800426c:	f7ff fef4 	bl	8004058 <HAL_RCCEx_GetPeriphCLKFreq>
 8004270:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2204      	movs	r2, #4
 800427c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e026      	b.n	80042d0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3b01      	subs	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	0c1a      	lsrs	r2, r3, #16
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f002 020f 	and.w	r2, r2, #15
 8004294:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	b292      	uxth	r2, r2
 800429e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fbb4 	bl	8004a0e <RTC_ExitInitMode>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2204      	movs	r2, #4
 80042b0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00c      	b.n	80042d0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80042ce:	2300      	movs	r3, #0
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40006c00 	.word	0x40006c00

080042dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	2300      	movs	r3, #0
 80042ee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_RTC_SetTime+0x20>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e080      	b.n	8004402 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	7c1b      	ldrb	r3, [r3, #16]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_RTC_SetTime+0x30>
 8004308:	2302      	movs	r3, #2
 800430a:	e07a      	b.n	8004402 <HAL_RTC_SetTime+0x126>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2202      	movs	r2, #2
 8004316:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d113      	bne.n	8004346 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004328:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	4619      	mov	r1, r3
 8004332:	460b      	mov	r3, r1
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a5b      	subs	r3, r3, r1
 8004338:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800433a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004340:	4413      	add	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e01e      	b.n	8004384 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fba4 	bl	8004a98 <RTC_Bcd2ToByte>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004358:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fb99 	bl	8004a98 <RTC_Bcd2ToByte>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004372:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	789b      	ldrb	r3, [r3, #2]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fb8d 	bl	8004a98 <RTC_Bcd2ToByte>
 800437e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004380:	4423      	add	r3, r4
 8004382:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004384:	6979      	ldr	r1, [r7, #20]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fab2 	bl	80048f0 <RTC_WriteTimeCounter>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2204      	movs	r2, #4
 8004396:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e02f      	b.n	8004402 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0205 	bic.w	r2, r2, #5
 80043b0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fac3 	bl	800493e <RTC_ReadAlarmCounter>
 80043b8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d018      	beq.n	80043f4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d214      	bcs.n	80043f4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80043d0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80043d4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043d6:	6939      	ldr	r1, [r7, #16]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fac9 	bl	8004970 <RTC_WriteAlarmCounter>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2204      	movs	r2, #4
 80043e8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e006      	b.n	8004402 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004400:	2300      	movs	r3, #0
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd90      	pop	{r4, r7, pc}
	...

0800440c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_RTC_GetTime+0x28>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0b5      	b.n	80045a4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e0ac      	b.n	80045a4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fa20 	bl	8004890 <RTC_ReadTimeCounter>
 8004450:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	4a55      	ldr	r2, [pc, #340]	@ (80045ac <HAL_RTC_GetTime+0x1a0>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	0adb      	lsrs	r3, r3, #11
 800445c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4b52      	ldr	r3, [pc, #328]	@ (80045ac <HAL_RTC_GetTime+0x1a0>)
 8004462:	fba3 1302 	umull	r1, r3, r3, r2
 8004466:	0adb      	lsrs	r3, r3, #11
 8004468:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	4a4f      	ldr	r2, [pc, #316]	@ (80045b0 <HAL_RTC_GetTime+0x1a4>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	4a4a      	ldr	r2, [pc, #296]	@ (80045ac <HAL_RTC_GetTime+0x1a0>)
 8004484:	fba2 1203 	umull	r1, r2, r2, r3
 8004488:	0ad2      	lsrs	r2, r2, #11
 800448a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800448e:	fb01 f202 	mul.w	r2, r1, r2
 8004492:	1a9a      	subs	r2, r3, r2
 8004494:	4b46      	ldr	r3, [pc, #280]	@ (80045b0 <HAL_RTC_GetTime+0x1a4>)
 8004496:	fba3 1302 	umull	r1, r3, r3, r2
 800449a:	0959      	lsrs	r1, r3, #5
 800449c:	460b      	mov	r3, r1
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a5b      	subs	r3, r3, r1
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	1ad1      	subs	r1, r2, r3
 80044a6:	b2ca      	uxtb	r2, r1
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b17      	cmp	r3, #23
 80044b0:	d955      	bls.n	800455e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4a3f      	ldr	r2, [pc, #252]	@ (80045b4 <HAL_RTC_GetTime+0x1a8>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80044be:	6939      	ldr	r1, [r7, #16]
 80044c0:	4b3c      	ldr	r3, [pc, #240]	@ (80045b4 <HAL_RTC_GetTime+0x1a8>)
 80044c2:	fba3 2301 	umull	r2, r3, r3, r1
 80044c6:	091a      	lsrs	r2, r3, #4
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	1aca      	subs	r2, r1, r3
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fa30 	bl	800493e <RTC_ReadAlarmCounter>
 80044de:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d008      	beq.n	80044fa <HAL_RTC_GetTime+0xee>
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d904      	bls.n	80044fa <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	e002      	b.n	8004500 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4a2d      	ldr	r2, [pc, #180]	@ (80045b8 <HAL_RTC_GetTime+0x1ac>)
 8004504:	fb02 f303 	mul.w	r3, r2, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800450e:	69b9      	ldr	r1, [r7, #24]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f9ed 	bl	80048f0 <RTC_WriteTimeCounter>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e041      	b.n	80045a4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d00c      	beq.n	8004542 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4413      	add	r3, r2
 800452e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004530:	69f9      	ldr	r1, [r7, #28]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fa1c 	bl	8004970 <RTC_WriteAlarmCounter>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e030      	b.n	80045a4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004542:	69f9      	ldr	r1, [r7, #28]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fa13 	bl	8004970 <RTC_WriteAlarmCounter>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e027      	b.n	80045a4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fabb 	bl	8004ad2 <RTC_DateUpdate>
 800455c:	e003      	b.n	8004566 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01a      	beq.n	80045a2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fa74 	bl	8004a5e <RTC_ByteToBcd2>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fa6b 	bl	8004a5e <RTC_ByteToBcd2>
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	789b      	ldrb	r3, [r3, #2]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fa62 	bl	8004a5e <RTC_ByteToBcd2>
 800459a:	4603      	mov	r3, r0
 800459c:	461a      	mov	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	91a2b3c5 	.word	0x91a2b3c5
 80045b0:	88888889 	.word	0x88888889
 80045b4:	aaaaaaab 	.word	0xaaaaaaab
 80045b8:	00015180 	.word	0x00015180

080045bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_RTC_SetDate+0x24>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e097      	b.n	8004714 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	7c1b      	ldrb	r3, [r3, #16]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_RTC_SetDate+0x34>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e091      	b.n	8004714 <HAL_RTC_SetDate+0x158>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2202      	movs	r2, #2
 80045fa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10c      	bne.n	800461c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	78da      	ldrb	r2, [r3, #3]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	785a      	ldrb	r2, [r3, #1]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	789a      	ldrb	r2, [r3, #2]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	739a      	strb	r2, [r3, #14]
 800461a:	e01a      	b.n	8004652 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	78db      	ldrb	r3, [r3, #3]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fa39 	bl	8004a98 <RTC_Bcd2ToByte>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa30 	bl	8004a98 <RTC_Bcd2ToByte>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	789b      	ldrb	r3, [r3, #2]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fa27 	bl	8004a98 <RTC_Bcd2ToByte>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	7bdb      	ldrb	r3, [r3, #15]
 8004656:	4618      	mov	r0, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	7b59      	ldrb	r1, [r3, #13]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	7b9b      	ldrb	r3, [r3, #14]
 8004660:	461a      	mov	r2, r3
 8004662:	f000 fb11 	bl	8004c88 <RTC_WeekDayNum>
 8004666:	4603      	mov	r3, r0
 8004668:	461a      	mov	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	7b1a      	ldrb	r2, [r3, #12]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f90a 	bl	8004890 <RTC_ReadTimeCounter>
 800467c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4a26      	ldr	r2, [pc, #152]	@ (800471c <HAL_RTC_SetDate+0x160>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	0adb      	lsrs	r3, r3, #11
 8004688:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b18      	cmp	r3, #24
 800468e:	d93a      	bls.n	8004706 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4a23      	ldr	r2, [pc, #140]	@ (8004720 <HAL_RTC_SetDate+0x164>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	4a22      	ldr	r2, [pc, #136]	@ (8004724 <HAL_RTC_SetDate+0x168>)
 800469c:	fb02 f303 	mul.w	r3, r2, r3
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80046a6:	69f9      	ldr	r1, [r7, #28]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f921 	bl	80048f0 <RTC_WriteTimeCounter>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2204      	movs	r2, #4
 80046b8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e027      	b.n	8004714 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f93a 	bl	800493e <RTC_ReadAlarmCounter>
 80046ca:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d018      	beq.n	8004706 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d214      	bcs.n	8004706 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80046e2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80046e6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046e8:	69b9      	ldr	r1, [r7, #24]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f940 	bl	8004970 <RTC_WriteAlarmCounter>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2204      	movs	r2, #4
 80046fa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e006      	b.n	8004714 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	91a2b3c5 	.word	0x91a2b3c5
 8004720:	aaaaaaab 	.word	0xaaaaaaab
 8004724:	00015180 	.word	0x00015180

08004728 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004734:	f107 0314 	add.w	r3, r7, #20
 8004738:	2100      	movs	r1, #0
 800473a:	460a      	mov	r2, r1
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	460a      	mov	r2, r1
 8004740:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_RTC_GetDate+0x26>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e03a      	b.n	80047c8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004752:	f107 0314 	add.w	r3, r7, #20
 8004756:	2200      	movs	r2, #0
 8004758:	4619      	mov	r1, r3
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fe56 	bl	800440c <HAL_RTC_GetTime>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e02e      	b.n	80047c8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	7b1a      	ldrb	r2, [r3, #12]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	7bda      	ldrb	r2, [r3, #15]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	7b5a      	ldrb	r2, [r3, #13]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	7b9a      	ldrb	r2, [r3, #14]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01a      	beq.n	80047c6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	78db      	ldrb	r3, [r3, #3]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f962 	bl	8004a5e <RTC_ByteToBcd2>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f959 	bl	8004a5e <RTC_ByteToBcd2>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	789b      	ldrb	r3, [r3, #2]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f950 	bl	8004a5e <RTC_ByteToBcd2>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d011      	beq.n	800480a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f815 	bl	8004824 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0202 	bic.w	r2, r2, #2
 8004808:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <HAL_RTC_AlarmIRQHandler+0x50>)
 800480c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004810:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	745a      	strb	r2, [r3, #17]
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40010400 	.word	0x40010400

08004824 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e01d      	b.n	8004888 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0208 	bic.w	r2, r2, #8
 800485a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800485c:	f7fc fe80 	bl	8001560 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004862:	e009      	b.n	8004878 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004864:	f7fc fe7c 	bl	8001560 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004872:	d901      	bls.n	8004878 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e007      	b.n	8004888 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ee      	beq.n	8004864 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	827b      	strh	r3, [r7, #18]
 800489c:	2300      	movs	r3, #0
 800489e:	823b      	strh	r3, [r7, #16]
 80048a0:	2300      	movs	r3, #0
 80048a2:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80048c0:	8a7a      	ldrh	r2, [r7, #18]
 80048c2:	8a3b      	ldrh	r3, [r7, #16]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d008      	beq.n	80048da <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80048c8:	8a3b      	ldrh	r3, [r7, #16]
 80048ca:	041a      	lsls	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e004      	b.n	80048e4 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80048da:	8a7b      	ldrh	r3, [r7, #18]
 80048dc:	041a      	lsls	r2, r3, #16
 80048de:	89fb      	ldrh	r3, [r7, #14]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80048e4:	697b      	ldr	r3, [r7, #20]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f85d 	bl	80049be <RTC_EnterInitMode>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	e011      	b.n	8004934 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	0c12      	lsrs	r2, r2, #16
 8004918:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	b292      	uxth	r2, r2
 8004922:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f872 	bl	8004a0e <RTC_ExitInitMode>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	81fb      	strh	r3, [r7, #14]
 800494a:	2300      	movs	r3, #0
 800494c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800495e:	89fb      	ldrh	r3, [r7, #14]
 8004960:	041a      	lsls	r2, r3, #16
 8004962:	89bb      	ldrh	r3, [r7, #12]
 8004964:	4313      	orrs	r3, r2
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f81d 	bl	80049be <RTC_EnterInitMode>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
 800498e:	e011      	b.n	80049b4 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	0c12      	lsrs	r2, r2, #16
 8004998:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	b292      	uxth	r2, r2
 80049a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f832 	bl	8004a0e <RTC_ExitInitMode>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80049ca:	f7fc fdc9 	bl	8001560 <HAL_GetTick>
 80049ce:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049d0:	e009      	b.n	80049e6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80049d2:	f7fc fdc5 	bl	8001560 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049e0:	d901      	bls.n	80049e6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e00f      	b.n	8004a06 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ee      	beq.n	80049d2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0210 	orr.w	r2, r2, #16
 8004a02:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0210 	bic.w	r2, r2, #16
 8004a28:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004a2a:	f7fc fd99 	bl	8001560 <HAL_GetTick>
 8004a2e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a30:	e009      	b.n	8004a46 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a32:	f7fc fd95 	bl	8001560 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a40:	d901      	bls.n	8004a46 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e007      	b.n	8004a56 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ee      	beq.n	8004a32 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b085      	sub	sp, #20
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4603      	mov	r3, r0
 8004a66:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004a6c:	e005      	b.n	8004a7a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	3b0a      	subs	r3, #10
 8004a78:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	2b09      	cmp	r3, #9
 8004a7e:	d8f6      	bhi.n	8004a6e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	b2db      	uxtb	r3, r3
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	b2db      	uxtb	r3, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b086      	sub	sp, #24
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7bdb      	ldrb	r3, [r3, #15]
 8004af0:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	7b5b      	ldrb	r3, [r3, #13]
 8004af6:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	7b9b      	ldrb	r3, [r3, #14]
 8004afc:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	e06f      	b.n	8004be4 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d011      	beq.n	8004b2e <RTC_DateUpdate+0x5c>
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d00e      	beq.n	8004b2e <RTC_DateUpdate+0x5c>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d00b      	beq.n	8004b2e <RTC_DateUpdate+0x5c>
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b07      	cmp	r3, #7
 8004b1a:	d008      	beq.n	8004b2e <RTC_DateUpdate+0x5c>
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d005      	beq.n	8004b2e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b0a      	cmp	r3, #10
 8004b26:	d002      	beq.n	8004b2e <RTC_DateUpdate+0x5c>
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d117      	bne.n	8004b5e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b1e      	cmp	r3, #30
 8004b32:	d803      	bhi.n	8004b3c <RTC_DateUpdate+0x6a>
      {
        day++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004b3a:	e050      	b.n	8004bde <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d005      	beq.n	8004b4e <RTC_DateUpdate+0x7c>
        {
          month++;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	3301      	adds	r3, #1
 8004b46:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004b4c:	e047      	b.n	8004bde <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004b52:	2301      	movs	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
          year++;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004b5c:	e03f      	b.n	8004bde <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d008      	beq.n	8004b76 <RTC_DateUpdate+0xa4>
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b06      	cmp	r3, #6
 8004b68:	d005      	beq.n	8004b76 <RTC_DateUpdate+0xa4>
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b09      	cmp	r3, #9
 8004b6e:	d002      	beq.n	8004b76 <RTC_DateUpdate+0xa4>
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b0b      	cmp	r3, #11
 8004b74:	d10c      	bne.n	8004b90 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b1d      	cmp	r3, #29
 8004b7a:	d803      	bhi.n	8004b84 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004b82:	e02c      	b.n	8004bde <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	3301      	adds	r3, #1
 8004b88:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004b8e:	e026      	b.n	8004bde <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d123      	bne.n	8004bde <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b1b      	cmp	r3, #27
 8004b9a:	d803      	bhi.n	8004ba4 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e01c      	b.n	8004bde <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b1c      	cmp	r3, #28
 8004ba8:	d111      	bne.n	8004bce <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f838 	bl	8004c24 <RTC_IsLeapYear>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e00d      	b.n	8004bde <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	e007      	b.n	8004bde <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b1d      	cmp	r3, #29
 8004bd2:	d104      	bne.n	8004bde <RTC_DateUpdate+0x10c>
      {
        month++;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3301      	adds	r3, #1
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d38b      	bcc.n	8004b04 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f000 f83a 	bl	8004c88 <RTC_WeekDayNum>
 8004c14:	4603      	mov	r3, r0
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	731a      	strb	r2, [r3, #12]
}
 8004c1c:	bf00      	nop
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e01d      	b.n	8004c7a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	4a10      	ldr	r2, [pc, #64]	@ (8004c84 <RTC_IsLeapYear+0x60>)
 8004c42:	fba2 1203 	umull	r1, r2, r2, r3
 8004c46:	0952      	lsrs	r2, r2, #5
 8004c48:	2164      	movs	r1, #100	@ 0x64
 8004c4a:	fb01 f202 	mul.w	r2, r1, r2
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e00f      	b.n	8004c7a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <RTC_IsLeapYear+0x60>)
 8004c5e:	fba2 1203 	umull	r1, r2, r2, r3
 8004c62:	09d2      	lsrs	r2, r2, #7
 8004c64:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004c68:	fb01 f202 	mul.w	r2, r1, r2
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004c78:	2300      	movs	r3, #0
  }
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr
 8004c84:	51eb851f 	.word	0x51eb851f

08004c88 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
 8004c94:	4613      	mov	r3, r2
 8004c96:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004ca6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d82d      	bhi.n	8004d0a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	4a2c      	ldr	r2, [pc, #176]	@ (8004d6c <RTC_WeekDayNum+0xe4>)
 8004cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc0:	085a      	lsrs	r2, r3, #1
 8004cc2:	78bb      	ldrb	r3, [r7, #2]
 8004cc4:	441a      	add	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	441a      	add	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	4926      	ldr	r1, [pc, #152]	@ (8004d70 <RTC_WeekDayNum+0xe8>)
 8004cd8:	fba1 1303 	umull	r1, r3, r1, r3
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	1ad2      	subs	r2, r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	4922      	ldr	r1, [pc, #136]	@ (8004d70 <RTC_WeekDayNum+0xe8>)
 8004ce6:	fba1 1303 	umull	r1, r3, r1, r3
 8004cea:	09db      	lsrs	r3, r3, #7
 8004cec:	4413      	add	r3, r2
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <RTC_WeekDayNum+0xec>)
 8004cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf6:	1ad1      	subs	r1, r2, r3
 8004cf8:	0849      	lsrs	r1, r1, #1
 8004cfa:	440b      	add	r3, r1
 8004cfc:	0899      	lsrs	r1, r3, #2
 8004cfe:	460b      	mov	r3, r1
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	1a5b      	subs	r3, r3, r1
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e029      	b.n	8004d5e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <RTC_WeekDayNum+0xe4>)
 8004d18:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1c:	085a      	lsrs	r2, r3, #1
 8004d1e:	78bb      	ldrb	r3, [r7, #2]
 8004d20:	441a      	add	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	441a      	add	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	089b      	lsrs	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4910      	ldr	r1, [pc, #64]	@ (8004d70 <RTC_WeekDayNum+0xe8>)
 8004d30:	fba1 1303 	umull	r1, r3, r1, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	1ad2      	subs	r2, r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	490d      	ldr	r1, [pc, #52]	@ (8004d70 <RTC_WeekDayNum+0xe8>)
 8004d3c:	fba1 1303 	umull	r1, r3, r1, r3
 8004d40:	09db      	lsrs	r3, r3, #7
 8004d42:	4413      	add	r3, r2
 8004d44:	1c9a      	adds	r2, r3, #2
 8004d46:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <RTC_WeekDayNum+0xec>)
 8004d48:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4c:	1ad1      	subs	r1, r2, r3
 8004d4e:	0849      	lsrs	r1, r1, #1
 8004d50:	440b      	add	r3, r1
 8004d52:	0899      	lsrs	r1, r3, #2
 8004d54:	460b      	mov	r3, r1
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	1a5b      	subs	r3, r3, r1
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	b2db      	uxtb	r3, r3
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	38e38e39 	.word	0x38e38e39
 8004d70:	51eb851f 	.word	0x51eb851f
 8004d74:	24924925 	.word	0x24924925

08004d78 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8004d88:	4b07      	ldr	r3, [pc, #28]	@ (8004da8 <HAL_RTCEx_BKUPWrite+0x30>)
 8004d8a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4413      	add	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	b292      	uxth	r2, r2
 8004d9c:	601a      	str	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr
 8004da8:	40006c00 	.word	0x40006c00

08004dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e042      	b.n	8004e44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f002 fbb4 	bl	8007540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2224      	movs	r2, #36	@ 0x24
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fdb7 	bl	8005964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	@ 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d175      	bne.n	8004f58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_UART_Transmit+0x2c>
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e06e      	b.n	8004f5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2221      	movs	r2, #33	@ 0x21
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fb69 	bl	8001560 <HAL_GetTick>
 8004e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	88fa      	ldrh	r2, [r7, #6]
 8004e94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	88fa      	ldrh	r2, [r7, #6]
 8004e9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_UART_Transmit+0x6c>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e003      	b.n	8004ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ec0:	e02e      	b.n	8004f20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2180      	movs	r1, #128	@ 0x80
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fb1c 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e03a      	b.n	8004f5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	3302      	adds	r3, #2
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e007      	b.n	8004f12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1cb      	bne.n	8004ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2140      	movs	r1, #64	@ 0x40
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fae8 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e006      	b.n	8004f5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d112      	bne.n	8004fa2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_UART_Receive_IT+0x26>
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e00b      	b.n	8004fa4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	461a      	mov	r2, r3
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fb0f 	bl	80055bc <UART_Start_Receive_IT>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	e000      	b.n	8004fa4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b0ba      	sub	sp, #232	@ 0xe8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_UART_IRQHandler+0x66>
 8004ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fbec 	bl	80057e8 <UART_Receive_IT>
      return;
 8005010:	e25b      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80de 	beq.w	80051d8 <HAL_UART_IRQHandler+0x22c>
 800501c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80d1 	beq.w	80051d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <HAL_UART_IRQHandler+0xae>
 8005042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800505a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <HAL_UART_IRQHandler+0xd2>
 8005066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f043 0202 	orr.w	r2, r3, #2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800507e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_UART_IRQHandler+0xf6>
 800508a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f043 0204 	orr.w	r2, r3, #4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d011      	beq.n	80050d2 <HAL_UART_IRQHandler+0x126>
 80050ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f043 0208 	orr.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 81f2 	beq.w	80054c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_UART_IRQHandler+0x14e>
 80050e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb77 	bl	80057e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <HAL_UART_IRQHandler+0x17a>
 800511e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d04f      	beq.n	80051c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa81 	bl	800562e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d041      	beq.n	80051be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3314      	adds	r3, #20
 8005162:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005166:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800516a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005172:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800517e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1d9      	bne.n	800513a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d013      	beq.n	80051b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005192:	4a7e      	ldr	r2, [pc, #504]	@ (800538c <HAL_UART_IRQHandler+0x3e0>)
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519a:	4618      	mov	r0, r3
 800519c:	f7fc fb56 	bl	800184c <HAL_DMA_Abort_IT>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051b0:	4610      	mov	r0, r2
 80051b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	e00e      	b.n	80051d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f993 	bl	80054e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051bc:	e00a      	b.n	80051d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f98f 	bl	80054e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	e006      	b.n	80051d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f98b 	bl	80054e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051d2:	e175      	b.n	80054c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	bf00      	nop
    return;
 80051d6:	e173      	b.n	80054c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 814f 	bne.w	8005480 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8148 	beq.w	8005480 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8141 	beq.w	8005480 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80b6 	beq.w	8005390 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005230:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8145 	beq.w	80054c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800523e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005242:	429a      	cmp	r2, r3
 8005244:	f080 813e 	bcs.w	80054c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800524e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b20      	cmp	r3, #32
 8005258:	f000 8088 	beq.w	800536c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005272:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005276:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800527a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005288:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800528c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005294:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1d9      	bne.n	800525c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3314      	adds	r3, #20
 80052ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052ba:	f023 0301 	bic.w	r3, r3, #1
 80052be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3314      	adds	r3, #20
 80052c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052cc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e1      	bne.n	80052a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3314      	adds	r3, #20
 8005304:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005308:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800530a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800530e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e3      	bne.n	80052e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800533a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533c:	f023 0310 	bic.w	r3, r3, #16
 8005340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800534e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005350:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800535c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e3      	bne.n	800532a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005366:	4618      	mov	r0, r3
 8005368:	f7fc fa35 	bl	80017d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800537a:	b29b      	uxth	r3, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	b29b      	uxth	r3, r3
 8005380:	4619      	mov	r1, r3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8b6 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005388:	e09c      	b.n	80054c4 <HAL_UART_IRQHandler+0x518>
 800538a:	bf00      	nop
 800538c:	080056f3 	.word	0x080056f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005398:	b29b      	uxth	r3, r3
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 808e 	beq.w	80054c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8089 	beq.w	80054c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053da:	647a      	str	r2, [r7, #68]	@ 0x44
 80053dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e3      	bne.n	80053b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3314      	adds	r3, #20
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	623b      	str	r3, [r7, #32]
   return(result);
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3314      	adds	r3, #20
 800540e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005412:	633a      	str	r2, [r7, #48]	@ 0x30
 8005414:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e3      	bne.n	80053ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	60fb      	str	r3, [r7, #12]
   return(result);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0310 	bic.w	r3, r3, #16
 800544a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005458:	61fa      	str	r2, [r7, #28]
 800545a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	617b      	str	r3, [r7, #20]
   return(result);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e3      	bne.n	8005434 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005472:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f83b 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800547e:	e023      	b.n	80054c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <HAL_UART_IRQHandler+0x4f4>
 800548c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f93e 	bl	800571a <UART_Transmit_IT>
    return;
 800549e:	e014      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <HAL_UART_IRQHandler+0x51e>
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f97d 	bl	80057b8 <UART_EndTransmit_IT>
    return;
 80054be:	e004      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
    return;
 80054c0:	bf00      	nop
 80054c2:	e002      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
      return;
 80054c4:	bf00      	nop
 80054c6:	e000      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
      return;
 80054c8:	bf00      	nop
  }
}
 80054ca:	37e8      	adds	r7, #232	@ 0xe8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551a:	e03b      	b.n	8005594 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	d037      	beq.n	8005594 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005524:	f7fc f81c 	bl	8001560 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <UART_WaitOnFlagUntilTimeout+0x30>
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e03a      	b.n	80055b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d023      	beq.n	8005594 <UART_WaitOnFlagUntilTimeout+0x8a>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b80      	cmp	r3, #128	@ 0x80
 8005550:	d020      	beq.n	8005594 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b40      	cmp	r3, #64	@ 0x40
 8005556:	d01d      	beq.n	8005594 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b08      	cmp	r3, #8
 8005564:	d116      	bne.n	8005594 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f856 	bl	800562e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2208      	movs	r2, #8
 8005586:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e00f      	b.n	80055b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4013      	ands	r3, r2
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	bf0c      	ite	eq
 80055a4:	2301      	moveq	r3, #1
 80055a6:	2300      	movne	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d0b4      	beq.n	800551c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	88fa      	ldrh	r2, [r7, #6]
 80055da:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2222      	movs	r2, #34	@ 0x22
 80055e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005600:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0220 	orr.w	r2, r2, #32
 8005620:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800562e:	b480      	push	{r7}
 8005630:	b095      	sub	sp, #84	@ 0x54
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	330c      	adds	r3, #12
 800563c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800564c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005656:	643a      	str	r2, [r7, #64]	@ 0x40
 8005658:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800565c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e5      	bne.n	8005636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	61fb      	str	r3, [r7, #28]
   return(result);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800568a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e5      	bne.n	800566a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d119      	bne.n	80056da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f023 0310 	bic.w	r3, r3, #16
 80056bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056c6:	61ba      	str	r2, [r7, #24]
 80056c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6979      	ldr	r1, [r7, #20]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	613b      	str	r3, [r7, #16]
   return(result);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e5      	bne.n	80056a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056e8:	bf00      	nop
 80056ea:	3754      	adds	r7, #84	@ 0x54
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff fee8 	bl	80054e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b21      	cmp	r3, #33	@ 0x21
 800572c:	d13e      	bne.n	80057ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005736:	d114      	bne.n	8005762 <UART_Transmit_IT+0x48>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d110      	bne.n	8005762 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005754:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	1c9a      	adds	r2, r3, #2
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	621a      	str	r2, [r3, #32]
 8005760:	e008      	b.n	8005774 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	1c59      	adds	r1, r3, #1
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6211      	str	r1, [r2, #32]
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29b      	uxth	r3, r3
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4619      	mov	r1, r3
 8005782:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10f      	bne.n	80057a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005796:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e000      	b.n	80057ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
  }
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fe79 	bl	80054d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	@ 0x30
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b22      	cmp	r3, #34	@ 0x22
 80057fa:	f040 80ae 	bne.w	800595a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005806:	d117      	bne.n	8005838 <UART_Receive_IT+0x50>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d113      	bne.n	8005838 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005818:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	b29a      	uxth	r2, r3
 8005828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	1c9a      	adds	r2, r3, #2
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	629a      	str	r2, [r3, #40]	@ 0x28
 8005836:	e026      	b.n	8005886 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584a:	d007      	beq.n	800585c <UART_Receive_IT+0x74>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <UART_Receive_IT+0x82>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e008      	b.n	800587c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005876:	b2da      	uxtb	r2, r3
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	4619      	mov	r1, r3
 8005894:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005896:	2b00      	cmp	r3, #0
 8005898:	d15d      	bne.n	8005956 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0220 	bic.w	r2, r2, #32
 80058a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d135      	bne.n	800594c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	613b      	str	r3, [r7, #16]
   return(result);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f023 0310 	bic.w	r3, r3, #16
 80058fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	330c      	adds	r3, #12
 8005904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005906:	623a      	str	r2, [r7, #32]
 8005908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	69f9      	ldr	r1, [r7, #28]
 800590c:	6a3a      	ldr	r2, [r7, #32]
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	61bb      	str	r3, [r7, #24]
   return(result);
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e5      	bne.n	80058e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	2b10      	cmp	r3, #16
 8005926:	d10a      	bne.n	800593e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fdd5 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
 800594a:	e002      	b.n	8005952 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fa53 	bl	8005df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	e002      	b.n	800595c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e000      	b.n	800595c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
  }
}
 800595c:	4618      	mov	r0, r3
 800595e:	3730      	adds	r7, #48	@ 0x30
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800599e:	f023 030c 	bic.w	r3, r3, #12
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	430b      	orrs	r3, r1
 80059aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a78 <UART_SetConfig+0x114>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d103      	bne.n	80059d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059cc:	f7fe fa5c 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	e002      	b.n	80059da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fe fa44 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 80059d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009a      	lsls	r2, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	4a22      	ldr	r2, [pc, #136]	@ (8005a7c <UART_SetConfig+0x118>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	0119      	lsls	r1, r3, #4
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009a      	lsls	r2, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a10:	4b1a      	ldr	r3, [pc, #104]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a12:	fba3 0302 	umull	r0, r3, r3, r2
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2064      	movs	r0, #100	@ 0x64
 8005a1a:	fb00 f303 	mul.w	r3, r0, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	3332      	adds	r3, #50	@ 0x32
 8005a24:	4a15      	ldr	r2, [pc, #84]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a30:	4419      	add	r1, r3
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009a      	lsls	r2, r3, #2
 8005a3c:	441a      	add	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2064      	movs	r0, #100	@ 0x64
 8005a52:	fb00 f303 	mul.w	r3, r0, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	@ 0x32
 8005a5c:	4a07      	ldr	r2, [pc, #28]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 020f 	and.w	r2, r3, #15
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40013800 	.word	0x40013800
 8005a7c:	51eb851f 	.word	0x51eb851f

08005a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a84:	f7fb fd14 	bl	80014b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a88:	f000 f842 	bl	8005b10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a8c:	f000 f966 	bl	8005d5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8005a90:	f000 f898 	bl	8005bc4 <MX_I2C1_Init>
  MX_RTC_Init();
 8005a94:	f000 f8c4 	bl	8005c20 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8005a98:	f000 f90c 	bl	8005cb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005a9c:	f000 f934 	bl	8005d08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize MAX30102 and SSD1306
  ssd1306_Init();
 8005aa0:	f001 fab0 	bl	8007004 <ssd1306_Init>
  configure_MAX30102();
 8005aa4:	f000 fd6a 	bl	800657c <configure_MAX30102>
  configure_MPU6050();
 8005aa8:	f001 f9e0 	bl	8006e6c <configure_MPU6050>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);  // Start first receive
 8005aac:	2201      	movs	r2, #1
 8005aae:	4913      	ldr	r1, [pc, #76]	@ (8005afc <main+0x7c>)
 8005ab0:	4813      	ldr	r0, [pc, #76]	@ (8005b00 <main+0x80>)
 8005ab2:	f7ff fa56 	bl	8004f62 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, (uint8_t*)"Ready\n", 6, 100);  // Test message
 8005ab6:	2364      	movs	r3, #100	@ 0x64
 8005ab8:	2206      	movs	r2, #6
 8005aba:	4912      	ldr	r1, [pc, #72]	@ (8005b04 <main+0x84>)
 8005abc:	4812      	ldr	r0, [pc, #72]	@ (8005b08 <main+0x88>)
 8005abe:	f7ff f9c5 	bl	8004e4c <HAL_UART_Transmit>
  __ASM volatile ("cpsid i" : : : "memory");
 8005ac2:	b672      	cpsid	i
}
 8005ac4:	bf00      	nop
    while (1)
    {
    	// Disable interrupts on moment of reading of the shared variable
    	// Avoid racing condition in case if two buttons pressed simultaneously
    	__disable_irq();
    	switch (ui_state) {
 8005ac6:	4b11      	ldr	r3, [pc, #68]	@ (8005b0c <main+0x8c>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d00c      	beq.n	8005ae8 <main+0x68>
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	dc0d      	bgt.n	8005aee <main+0x6e>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <main+0x5c>
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d003      	beq.n	8005ae2 <main+0x62>
 8005ada:	e008      	b.n	8005aee <main+0x6e>

    	case TIME:
    		render_time();
 8005adc:	f001 ffa4 	bl	8007a28 <render_time>
    		break;
 8005ae0:	e005      	b.n	8005aee <main+0x6e>
    	case BPM:
    		render_bpm();
 8005ae2:	f000 feb3 	bl	800684c <render_bpm>
    		break;
 8005ae6:	e002      	b.n	8005aee <main+0x6e>
    	case ACCEL:
    		render_accel();
 8005ae8:	f001 f9e6 	bl	8006eb8 <render_accel>
    		break;
 8005aec:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8005aee:	b662      	cpsie	i
}
 8005af0:	bf00      	nop
    	}
    	__enable_irq();
        HAL_Delay(1);
 8005af2:	2001      	movs	r0, #1
 8005af4:	f7fb fd3e 	bl	8001574 <HAL_Delay>
    	__disable_irq();
 8005af8:	e7e3      	b.n	8005ac2 <main+0x42>
 8005afa:	bf00      	nop
 8005afc:	20000a60 	.word	0x20000a60
 8005b00:	2000025c 	.word	0x2000025c
 8005b04:	0800c218 	.word	0x0800c218
 8005b08:	200002a4 	.word	0x200002a4
 8005b0c:	200002ec 	.word	0x200002ec

08005b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b094      	sub	sp, #80	@ 0x50
 8005b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b1a:	2228      	movs	r2, #40	@ 0x28
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f003 f855 	bl	8008bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b24:	f107 0314 	add.w	r3, r7, #20
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	609a      	str	r2, [r3, #8]
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b34:	1d3b      	adds	r3, r7, #4
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	605a      	str	r2, [r3, #4]
 8005b3c:	609a      	str	r2, [r3, #8]
 8005b3e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005b40:	230a      	movs	r3, #10
 8005b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b44:	2301      	movs	r3, #1
 8005b46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005b48:	2310      	movs	r3, #16
 8005b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b50:	2302      	movs	r3, #2
 8005b52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8005b54:	2300      	movs	r3, #0
 8005b56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8005b58:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8005b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd fdb2 	bl	80036cc <HAL_RCC_OscConfig>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8005b6e:	f000 f9e7 	bl	8005f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b72:	230f      	movs	r3, #15
 8005b74:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b76:	2302      	movs	r3, #2
 8005b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b84:	2300      	movs	r3, #0
 8005b86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005b88:	f107 0314 	add.w	r3, r7, #20
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe f81e 	bl	8003bd0 <HAL_RCC_ClockConfig>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8005b9a:	f000 f9d1 	bl	8005f40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005ba2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ba8:	1d3b      	adds	r3, r7, #4
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe f99e 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8005bb6:	f000 f9c3 	bl	8005f40 <Error_Handler>
  }
}
 8005bba:	bf00      	nop
 8005bbc:	3750      	adds	r7, #80	@ 0x50
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005bc8:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005bca:	4a13      	ldr	r2, [pc, #76]	@ (8005c18 <MX_I2C1_Init+0x54>)
 8005bcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005bce:	4b11      	ldr	r3, [pc, #68]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005bd0:	4a12      	ldr	r2, [pc, #72]	@ (8005c1c <MX_I2C1_Init+0x58>)
 8005bd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005bda:	4b0e      	ldr	r3, [pc, #56]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005be0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005be2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005be6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005be8:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005bee:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bf4:	4b07      	ldr	r3, [pc, #28]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005bfa:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c00:	4804      	ldr	r0, [pc, #16]	@ (8005c14 <MX_I2C1_Init+0x50>)
 8005c02:	f7fc f837 	bl	8001c74 <HAL_I2C_Init>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005c0c:	f000 f998 	bl	8005f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8005c10:	bf00      	nop
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	200001f4 	.word	0x200001f4
 8005c18:	40005400 	.word	0x40005400
 8005c1c:	00061a80 	.word	0x00061a80

08005c20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	2100      	movs	r1, #0
 8005c2a:	460a      	mov	r2, r1
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	460a      	mov	r2, r1
 8005c30:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8005c32:	2300      	movs	r3, #0
 8005c34:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005c36:	4b1d      	ldr	r3, [pc, #116]	@ (8005cac <MX_RTC_Init+0x8c>)
 8005c38:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb0 <MX_RTC_Init+0x90>)
 8005c3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <MX_RTC_Init+0x8c>)
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8005c44:	4b19      	ldr	r3, [pc, #100]	@ (8005cac <MX_RTC_Init+0x8c>)
 8005c46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c4a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005c4c:	4817      	ldr	r0, [pc, #92]	@ (8005cac <MX_RTC_Init+0x8c>)
 8005c4e:	f7fe fab9 	bl	80041c4 <HAL_RTC_Init>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8005c58:	f000 f972 	bl	8005f40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	480f      	ldr	r0, [pc, #60]	@ (8005cac <MX_RTC_Init+0x8c>)
 8005c70:	f7fe fb34 	bl	80042dc <HAL_RTC_SetTime>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8005c7a:	f000 f961 	bl	8005f40 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005c82:	2301      	movs	r3, #1
 8005c84:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8005c86:	2301      	movs	r3, #1
 8005c88:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8005c8e:	463b      	mov	r3, r7
 8005c90:	2200      	movs	r2, #0
 8005c92:	4619      	mov	r1, r3
 8005c94:	4805      	ldr	r0, [pc, #20]	@ (8005cac <MX_RTC_Init+0x8c>)
 8005c96:	f7fe fc91 	bl	80045bc <HAL_RTC_SetDate>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8005ca0:	f000 f94e 	bl	8005f40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20000248 	.word	0x20000248
 8005cb0:	40002800 	.word	0x40002800

08005cb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005cb8:	4b11      	ldr	r3, [pc, #68]	@ (8005d00 <MX_USART1_UART_Init+0x4c>)
 8005cba:	4a12      	ldr	r2, [pc, #72]	@ (8005d04 <MX_USART1_UART_Init+0x50>)
 8005cbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8005cbe:	4b10      	ldr	r3, [pc, #64]	@ (8005d00 <MX_USART1_UART_Init+0x4c>)
 8005cc0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8005cc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <MX_USART1_UART_Init+0x4c>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <MX_USART1_UART_Init+0x4c>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <MX_USART1_UART_Init+0x4c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005cd8:	4b09      	ldr	r3, [pc, #36]	@ (8005d00 <MX_USART1_UART_Init+0x4c>)
 8005cda:	220c      	movs	r2, #12
 8005cdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cde:	4b08      	ldr	r3, [pc, #32]	@ (8005d00 <MX_USART1_UART_Init+0x4c>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ce4:	4b06      	ldr	r3, [pc, #24]	@ (8005d00 <MX_USART1_UART_Init+0x4c>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005cea:	4805      	ldr	r0, [pc, #20]	@ (8005d00 <MX_USART1_UART_Init+0x4c>)
 8005cec:	f7ff f85e 	bl	8004dac <HAL_UART_Init>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005cf6:	f000 f923 	bl	8005f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005cfa:	bf00      	nop
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	2000025c 	.word	0x2000025c
 8005d04:	40013800 	.word	0x40013800

08005d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005d0c:	4b11      	ldr	r3, [pc, #68]	@ (8005d54 <MX_USART2_UART_Init+0x4c>)
 8005d0e:	4a12      	ldr	r2, [pc, #72]	@ (8005d58 <MX_USART2_UART_Init+0x50>)
 8005d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8005d12:	4b10      	ldr	r3, [pc, #64]	@ (8005d54 <MX_USART2_UART_Init+0x4c>)
 8005d14:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8005d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <MX_USART2_UART_Init+0x4c>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005d20:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <MX_USART2_UART_Init+0x4c>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005d26:	4b0b      	ldr	r3, [pc, #44]	@ (8005d54 <MX_USART2_UART_Init+0x4c>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d2c:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <MX_USART2_UART_Init+0x4c>)
 8005d2e:	220c      	movs	r2, #12
 8005d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d32:	4b08      	ldr	r3, [pc, #32]	@ (8005d54 <MX_USART2_UART_Init+0x4c>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d38:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <MX_USART2_UART_Init+0x4c>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005d3e:	4805      	ldr	r0, [pc, #20]	@ (8005d54 <MX_USART2_UART_Init+0x4c>)
 8005d40:	f7ff f834 	bl	8004dac <HAL_UART_Init>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005d4a:	f000 f8f9 	bl	8005f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200002a4 	.word	0x200002a4
 8005d58:	40004400 	.word	0x40004400

08005d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d62:	f107 0310 	add.w	r3, r7, #16
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	609a      	str	r2, [r3, #8]
 8005d6e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d70:	4b1e      	ldr	r3, [pc, #120]	@ (8005dec <MX_GPIO_Init+0x90>)
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	4a1d      	ldr	r2, [pc, #116]	@ (8005dec <MX_GPIO_Init+0x90>)
 8005d76:	f043 0310 	orr.w	r3, r3, #16
 8005d7a:	6193      	str	r3, [r2, #24]
 8005d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <MX_GPIO_Init+0x90>)
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d88:	4b18      	ldr	r3, [pc, #96]	@ (8005dec <MX_GPIO_Init+0x90>)
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	4a17      	ldr	r2, [pc, #92]	@ (8005dec <MX_GPIO_Init+0x90>)
 8005d8e:	f043 0304 	orr.w	r3, r3, #4
 8005d92:	6193      	str	r3, [r2, #24]
 8005d94:	4b15      	ldr	r3, [pc, #84]	@ (8005dec <MX_GPIO_Init+0x90>)
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005da0:	4b12      	ldr	r3, [pc, #72]	@ (8005dec <MX_GPIO_Init+0x90>)
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	4a11      	ldr	r2, [pc, #68]	@ (8005dec <MX_GPIO_Init+0x90>)
 8005da6:	f043 0308 	orr.w	r3, r3, #8
 8005daa:	6193      	str	r3, [r2, #24]
 8005dac:	4b0f      	ldr	r3, [pc, #60]	@ (8005dec <MX_GPIO_Init+0x90>)
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	607b      	str	r3, [r7, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Left_UI_Pin Right_UI_Pin */
  GPIO_InitStruct.Pin = Left_UI_Pin|Right_UI_Pin;
 8005db8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005df0 <MX_GPIO_Init+0x94>)
 8005dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dc6:	f107 0310 	add.w	r3, r7, #16
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4809      	ldr	r0, [pc, #36]	@ (8005df4 <MX_GPIO_Init+0x98>)
 8005dce:	f7fb fdb5 	bl	800193c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2104      	movs	r1, #4
 8005dd6:	2028      	movs	r0, #40	@ 0x28
 8005dd8:	f7fb fcc7 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005ddc:	2028      	movs	r0, #40	@ 0x28
 8005dde:	f7fb fce0 	bl	80017a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8005de2:	bf00      	nop
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000
 8005df0:	10110000 	.word	0x10110000
 8005df4:	40010c00 	.word	0x40010c00

08005df8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART1) {
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a22      	ldr	r2, [pc, #136]	@ (8005e90 <HAL_UART_RxCpltCallback+0x98>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d13e      	bne.n	8005e88 <HAL_UART_RxCpltCallback+0x90>
		 // Echo back for debugging (optional)
	        if (uart_rx_buf[0] == '\n') {
 8005e0a:	4b22      	ldr	r3, [pc, #136]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b0a      	cmp	r3, #10
 8005e10:	d11e      	bne.n	8005e50 <HAL_UART_RxCpltCallback+0x58>
	            // Only store if we're expecting more data
	            if (toFill < 7) {
 8005e12:	4b21      	ldr	r3, [pc, #132]	@ (8005e98 <HAL_UART_RxCpltCallback+0xa0>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b06      	cmp	r3, #6
 8005e18:	d831      	bhi.n	8005e7e <HAL_UART_RxCpltCallback+0x86>
	                hhmmss[toFill] = prevNum;
 8005e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8005e98 <HAL_UART_RxCpltCallback+0xa0>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4b1e      	ldr	r3, [pc, #120]	@ (8005e9c <HAL_UART_RxCpltCallback+0xa4>)
 8005e22:	7819      	ldrb	r1, [r3, #0]
 8005e24:	4b1e      	ldr	r3, [pc, #120]	@ (8005ea0 <HAL_UART_RxCpltCallback+0xa8>)
 8005e26:	5499      	strb	r1, [r3, r2]
	                toFill++;
 8005e28:	4b1b      	ldr	r3, [pc, #108]	@ (8005e98 <HAL_UART_RxCpltCallback+0xa0>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	4b19      	ldr	r3, [pc, #100]	@ (8005e98 <HAL_UART_RxCpltCallback+0xa0>)
 8005e32:	701a      	strb	r2, [r3, #0]
	                prevNum = 0;
 8005e34:	4b19      	ldr	r3, [pc, #100]	@ (8005e9c <HAL_UART_RxCpltCallback+0xa4>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	701a      	strb	r2, [r3, #0]
	                if (toFill == 7) {
 8005e3a:	4b17      	ldr	r3, [pc, #92]	@ (8005e98 <HAL_UART_RxCpltCallback+0xa0>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b07      	cmp	r3, #7
 8005e40:	d11d      	bne.n	8005e7e <HAL_UART_RxCpltCallback+0x86>
	                	parseTime(hhmmss);
 8005e42:	4817      	ldr	r0, [pc, #92]	@ (8005ea0 <HAL_UART_RxCpltCallback+0xa8>)
 8005e44:	f001 fdbe 	bl	80079c4 <parseTime>
	                	toFill = 0;
 8005e48:	4b13      	ldr	r3, [pc, #76]	@ (8005e98 <HAL_UART_RxCpltCallback+0xa0>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	e016      	b.n	8005e7e <HAL_UART_RxCpltCallback+0x86>
	                }
	            }
	        }
	        else if (uart_rx_buf[0] >= '0' && uart_rx_buf[0] <= '9') {
 8005e50:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e56:	d912      	bls.n	8005e7e <HAL_UART_RxCpltCallback+0x86>
 8005e58:	4b0e      	ldr	r3, [pc, #56]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b39      	cmp	r3, #57	@ 0x39
 8005e5e:	d80e      	bhi.n	8005e7e <HAL_UART_RxCpltCallback+0x86>
	            prevNum = prevNum * 10 + (uart_rx_buf[0] - '0');
 8005e60:	4b0e      	ldr	r3, [pc, #56]	@ (8005e9c <HAL_UART_RxCpltCallback+0xa4>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	0092      	lsls	r2, r2, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	4b09      	ldr	r3, [pc, #36]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	4413      	add	r3, r2
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	3b30      	subs	r3, #48	@ 0x30
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	4b08      	ldr	r3, [pc, #32]	@ (8005e9c <HAL_UART_RxCpltCallback+0xa4>)
 8005e7c:	701a      	strb	r2, [r3, #0]
	        }

	        // Always restart UART receive
	        HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8005e7e:	2201      	movs	r2, #1
 8005e80:	4904      	ldr	r1, [pc, #16]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e82:	4808      	ldr	r0, [pc, #32]	@ (8005ea4 <HAL_UART_RxCpltCallback+0xac>)
 8005e84:	f7ff f86d 	bl	8004f62 <HAL_UART_Receive_IT>

	    }
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40013800 	.word	0x40013800
 8005e94:	20000a60 	.word	0x20000a60
 8005e98:	20000a6d 	.word	0x20000a6d
 8005e9c:	20000a6e 	.word	0x20000a6e
 8005ea0:	20000a64 	.word	0x20000a64
 8005ea4:	2000025c 	.word	0x2000025c

08005ea8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin==Left_UI_Pin) {
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb8:	d10f      	bne.n	8005eda <HAL_GPIO_EXTI_Callback+0x32>
    ui_state = (ui_state + 1) % 3;
 8005eba:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f38 <HAL_GPIO_EXTI_Callback+0x90>)
 8005ec2:	fb83 3102 	smull	r3, r1, r3, r2
 8005ec6:	17d3      	asrs	r3, r2, #31
 8005ec8:	1ac9      	subs	r1, r1, r3
 8005eca:	460b      	mov	r3, r1
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	440b      	add	r3, r1
 8005ed0:	1ad1      	subs	r1, r2, r3
 8005ed2:	b2ca      	uxtb	r2, r1
 8005ed4:	4b17      	ldr	r3, [pc, #92]	@ (8005f34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	e022      	b.n	8005f20 <HAL_GPIO_EXTI_Callback+0x78>
  } else if(GPIO_Pin==Right_UI_Pin) {
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ee0:	d11d      	bne.n	8005f1e <HAL_GPIO_EXTI_Callback+0x76>
	  if (ui_state == 0) {
 8005ee2:	4b14      	ldr	r3, [pc, #80]	@ (8005f34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <HAL_GPIO_EXTI_Callback+0x56>
		  // Then set to tail and return from callback
		  ui_state = 2;
 8005eea:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005eec:	2202      	movs	r2, #2
 8005eee:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &ui_state, 1, 10);
 8005ef0:	230a      	movs	r3, #10
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	490f      	ldr	r1, [pc, #60]	@ (8005f34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005ef6:	4811      	ldr	r0, [pc, #68]	@ (8005f3c <HAL_GPIO_EXTI_Callback+0x94>)
 8005ef8:	f7fe ffa8 	bl	8004e4c <HAL_UART_Transmit>
		  return;
 8005efc:	e016      	b.n	8005f2c <HAL_GPIO_EXTI_Callback+0x84>
	  }
    ui_state = (ui_state - 1) % 3;
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	1e5a      	subs	r2, r3, #1
 8005f04:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <HAL_GPIO_EXTI_Callback+0x90>)
 8005f06:	fb83 3102 	smull	r3, r1, r3, r2
 8005f0a:	17d3      	asrs	r3, r2, #31
 8005f0c:	1ac9      	subs	r1, r1, r3
 8005f0e:	460b      	mov	r3, r1
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	440b      	add	r3, r1
 8005f14:	1ad1      	subs	r1, r2, r3
 8005f16:	b2ca      	uxtb	r2, r1
 8005f18:	4b06      	ldr	r3, [pc, #24]	@ (8005f34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	e000      	b.n	8005f20 <HAL_GPIO_EXTI_Callback+0x78>
  }else {
	  // Do nothing
	    __NOP();
 8005f1e:	bf00      	nop
	  }
  HAL_UART_Transmit(&huart2, &ui_state, 1, 10);
 8005f20:	230a      	movs	r3, #10
 8005f22:	2201      	movs	r2, #1
 8005f24:	4903      	ldr	r1, [pc, #12]	@ (8005f34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005f26:	4805      	ldr	r0, [pc, #20]	@ (8005f3c <HAL_GPIO_EXTI_Callback+0x94>)
 8005f28:	f7fe ff90 	bl	8004e4c <HAL_UART_Transmit>

}
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200002ec 	.word	0x200002ec
 8005f38:	55555556 	.word	0x55555556
 8005f3c:	200002a4 	.word	0x200002a4

08005f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005f44:	b672      	cpsid	i
}
 8005f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <Error_Handler+0x8>

08005f4c <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr

08005f60 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	2280      	movs	r2, #128	@ 0x80
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f002 fe24 	bl	8008bce <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3384      	adds	r3, #132	@ 0x84
 8005f8a:	2280      	movs	r2, #128	@ 0x80
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f002 fe1d 	bl	8008bce <memset>
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	607a      	str	r2, [r7, #4]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	460b      	mov	r3, r1
 8005faa:	72fb      	strb	r3, [r7, #11]
 8005fac:	4613      	mov	r3, r2
 8005fae:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8005fb0:	893b      	ldrh	r3, [r7, #8]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 fd8b 	bl	8007ad0 <malloc>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	7afa      	ldrb	r2, [r7, #11]
 8005fc2:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <max30102_write+0x42>
 8005fca:	893b      	ldrh	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d006      	beq.n	8005fde <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	893a      	ldrh	r2, [r7, #8]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f002 fe96 	bl	8008d0a <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	893b      	ldrh	r3, [r7, #8]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005fec:	9200      	str	r2, [sp, #0]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	21ae      	movs	r1, #174	@ 0xae
 8005ff2:	f7fb ff83 	bl	8001efc <HAL_I2C_Master_Transmit>
    free(payload);
 8005ff6:	6978      	ldr	r0, [r7, #20]
 8005ff8:	f001 fd72 	bl	8007ae0 <free>
}
 8005ffc:	bf00      	nop
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	461a      	mov	r2, r3
 8006010:	460b      	mov	r3, r1
 8006012:	72fb      	strb	r3, [r7, #11]
 8006014:	4613      	mov	r3, r2
 8006016:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8006018:	7afb      	ldrb	r3, [r7, #11]
 800601a:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	f107 0217 	add.w	r2, r7, #23
 8006024:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	2301      	movs	r3, #1
 800602c:	21ae      	movs	r1, #174	@ 0xae
 800602e:	f7fb ff65 	bl	8001efc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	893b      	ldrh	r3, [r7, #8]
 8006038:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800603c:	9200      	str	r2, [sp, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	21ae      	movs	r1, #174	@ 0xae
 8006042:	f7fc f859 	bl	80020f8 <HAL_I2C_Master_Receive>
}
 8006046:	bf00      	nop
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8006056:	2340      	movs	r3, #64	@ 0x40
 8006058:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 800605a:	f107 020f 	add.w	r2, r7, #15
 800605e:	2301      	movs	r3, #1
 8006060:	2109      	movs	r1, #9
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff ff9a 	bl	8005f9c <max30102_write>
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8006080:	f107 020f 	add.w	r2, r7, #15
 8006084:	2301      	movs	r3, #1
 8006086:	2102      	movs	r1, #2
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff ffbb 	bl	8006004 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006094:	b2db      	uxtb	r3, r3
 8006096:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8006098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800609c:	01db      	lsls	r3, r3, #7
 800609e:	b25a      	sxtb	r2, r3
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	b25b      	sxtb	r3, r3
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b25b      	sxtb	r3, r3
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80060ac:	f107 020f 	add.w	r2, r7, #15
 80060b0:	2301      	movs	r3, #1
 80060b2:	2102      	movs	r1, #2
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff ff71 	bl	8005f9c <max30102_write>
}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <max30102_set_ppg_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_ppg_rdy(max30102_t *obj, uint8_t enable)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80060d2:	f107 020f 	add.w	r2, r7, #15
 80060d6:	2301      	movs	r3, #1
 80060d8:	2102      	movs	r1, #2
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff ff92 	bl	8006004 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_PPG_RDY);
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_PPG_RDY);
 80060ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060ee:	019b      	lsls	r3, r3, #6
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f6:	b25a      	sxtb	r2, r3
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b25b      	sxtb	r3, r3
 8006100:	b2db      	uxtb	r3, r3
 8006102:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8006104:	f107 020f 	add.w	r2, r7, #15
 8006108:	2301      	movs	r3, #1
 800610a:	2102      	movs	r1, #2
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ff45 	bl	8005f9c <max30102_write>
}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8006126:	f107 020f 	add.w	r2, r7, #15
 800612a:	2301      	movs	r3, #1
 800612c:	2109      	movs	r1, #9
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff ff68 	bl	8006004 <max30102_read>
    config = (config & 0xf8) | mode;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	b25b      	sxtb	r3, r3
 8006138:	f023 0307 	bic.w	r3, r3, #7
 800613c:	b25a      	sxtb	r2, r3
 800613e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006142:	4313      	orrs	r3, r2
 8006144:	b25b      	sxtb	r3, r3
 8006146:	b2db      	uxtb	r3, r3
 8006148:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800614a:	f107 020f 	add.w	r2, r7, #15
 800614e:	2301      	movs	r3, #1
 8006150:	2109      	movs	r1, #9
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff ff22 	bl	8005f9c <max30102_write>
    max30102_clear_fifo(obj);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f909 	bl	8006370 <max30102_clear_fifo>
}
 800615e:	bf00      	nop
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006172:	f107 020f 	add.w	r2, r7, #15
 8006176:	2301      	movs	r3, #1
 8006178:	210a      	movs	r1, #10
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff ff42 	bl	8006004 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	b25b      	sxtb	r3, r3
 8006184:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 8006188:	b25a      	sxtb	r2, r3
 800618a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	b25b      	sxtb	r3, r3
 8006192:	4313      	orrs	r3, r2
 8006194:	b25b      	sxtb	r3, r3
 8006196:	b2db      	uxtb	r3, r3
 8006198:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800619a:	f107 020f 	add.w	r2, r7, #15
 800619e:	2301      	movs	r3, #1
 80061a0:	210a      	movs	r1, #10
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fefa 	bl	8005f9c <max30102_write>
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80061bc:	f107 020f 	add.w	r2, r7, #15
 80061c0:	2301      	movs	r3, #1
 80061c2:	210a      	movs	r1, #10
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff ff1d 	bl	8006004 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	b25b      	sxtb	r3, r3
 80061ce:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80061d2:	b25a      	sxtb	r2, r3
 80061d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061d8:	4313      	orrs	r3, r2
 80061da:	b25b      	sxtb	r3, r3
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80061e0:	f107 020f 	add.w	r2, r7, #15
 80061e4:	2301      	movs	r3, #1
 80061e6:	210a      	movs	r1, #10
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fed7 	bl	8005f9c <max30102_write>
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	460b      	mov	r3, r1
 8006200:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006202:	f107 020f 	add.w	r2, r7, #15
 8006206:	2301      	movs	r3, #1
 8006208:	210a      	movs	r1, #10
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fefa 	bl	8006004 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	b25b      	sxtb	r3, r3
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	b25a      	sxtb	r2, r3
 800621a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800621e:	015b      	lsls	r3, r3, #5
 8006220:	b25b      	sxtb	r3, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	b25b      	sxtb	r3, r3
 8006226:	b2db      	uxtb	r3, r3
 8006228:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800622a:	f107 020f 	add.w	r2, r7, #15
 800622e:	2301      	movs	r3, #1
 8006230:	210a      	movs	r1, #10
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff feb2 	bl	8005f9c <max30102_write>
}
 8006238:	bf00      	nop
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
	if (ma<51){
 800624a:	4915      	ldr	r1, [pc, #84]	@ (80062a0 <max30102_set_led_current_1+0x60>)
 800624c:	6838      	ldr	r0, [r7, #0]
 800624e:	f7fa ff37 	bl	80010c0 <__aeabi_fcmplt>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d100      	bne.n	800625a <max30102_set_led_current_1+0x1a>
		uint8_t pa = ma / 0.2;
		max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
	}
}
 8006258:	e017      	b.n	800628a <max30102_set_led_current_1+0x4a>
		uint8_t pa = ma / 0.2;
 800625a:	6838      	ldr	r0, [r7, #0]
 800625c:	f7fa f8e4 	bl	8000428 <__aeabi_f2d>
 8006260:	a30d      	add	r3, pc, #52	@ (adr r3, 8006298 <max30102_set_led_current_1+0x58>)
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f7fa fa61 	bl	800072c <__aeabi_ddiv>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	f7fa fc09 	bl	8000a88 <__aeabi_d2uiz>
 8006276:	4603      	mov	r3, r0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	73fb      	strb	r3, [r7, #15]
		max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 800627c:	f107 020f 	add.w	r2, r7, #15
 8006280:	2301      	movs	r3, #1
 8006282:	210c      	movs	r1, #12
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff fe89 	bl	8005f9c <max30102_write>
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	f3af 8000 	nop.w
 8006298:	9999999a 	.word	0x9999999a
 800629c:	3fc99999 	.word	0x3fc99999
 80062a0:	424c0000 	.word	0x424c0000
 80062a4:	00000000 	.word	0x00000000

080062a8 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 80062b2:	6838      	ldr	r0, [r7, #0]
 80062b4:	f7fa f8b8 	bl	8000428 <__aeabi_f2d>
 80062b8:	a30d      	add	r3, pc, #52	@ (adr r3, 80062f0 <max30102_set_led_current_2+0x48>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f7fa fa35 	bl	800072c <__aeabi_ddiv>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4610      	mov	r0, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	f7fa fbdd 	bl	8000a88 <__aeabi_d2uiz>
 80062ce:	4603      	mov	r3, r0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 80062d4:	f107 020f 	add.w	r2, r7, #15
 80062d8:	2301      	movs	r3, #1
 80062da:	210d      	movs	r1, #13
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff fe5d 	bl	8005f9c <max30102_write>
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w
 80062f0:	9999999a 	.word	0x9999999a
 80062f4:	3fc99999 	.word	0x3fc99999

080062f8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	4608      	mov	r0, r1
 8006302:	4611      	mov	r1, r2
 8006304:	461a      	mov	r2, r3
 8006306:	4603      	mov	r3, r0
 8006308:	70fb      	strb	r3, [r7, #3]
 800630a:	460b      	mov	r3, r1
 800630c:	70bb      	strb	r3, [r7, #2]
 800630e:	4613      	mov	r3, r2
 8006310:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8006316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800631a:	015b      	lsls	r3, r3, #5
 800631c:	b25a      	sxtb	r2, r3
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	b25b      	sxtb	r3, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	b25b      	sxtb	r3, r3
 8006326:	b2db      	uxtb	r3, r3
 8006328:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 800632a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	b25b      	sxtb	r3, r3
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	b25a      	sxtb	r2, r3
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	b25b      	sxtb	r3, r3
 800633c:	4313      	orrs	r3, r2
 800633e:	b25b      	sxtb	r3, r3
 8006340:	b2db      	uxtb	r3, r3
 8006342:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8006344:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	b25a      	sxtb	r2, r3
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	b25b      	sxtb	r3, r3
 8006352:	4313      	orrs	r3, r2
 8006354:	b25b      	sxtb	r3, r3
 8006356:	b2db      	uxtb	r3, r3
 8006358:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800635a:	f107 020f 	add.w	r2, r7, #15
 800635e:	2301      	movs	r3, #1
 8006360:	2108      	movs	r1, #8
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fe1a 	bl	8005f9c <max30102_write>
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 800637c:	f107 020f 	add.w	r2, r7, #15
 8006380:	2303      	movs	r3, #3
 8006382:	2104      	movs	r1, #4
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fe09 	bl	8005f9c <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 800638a:	f107 020f 	add.w	r2, r7, #15
 800638e:	2303      	movs	r3, #3
 8006390:	2106      	movs	r1, #6
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fe02 	bl	8005f9c <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8006398:	f107 020f 	add.w	r2, r7, #15
 800639c:	2303      	movs	r3, #3
 800639e:	2105      	movs	r1, #5
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fdfb 	bl	8005f9c <max30102_write>
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b088      	sub	sp, #32
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	74fb      	strb	r3, [r7, #19]
 80063ba:	2300      	movs	r3, #0
 80063bc:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 80063be:	f107 0213 	add.w	r2, r7, #19
 80063c2:	2301      	movs	r3, #1
 80063c4:	2104      	movs	r1, #4
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fe1c 	bl	8006004 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 80063cc:	f107 0212 	add.w	r2, r7, #18
 80063d0:	2301      	movs	r3, #1
 80063d2:	2106      	movs	r1, #6
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fe15 	bl	8006004 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 80063da:	7cfa      	ldrb	r2, [r7, #19]
 80063dc:	7cbb      	ldrb	r3, [r7, #18]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 80063e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	dc03      	bgt.n	80063f4 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 80063ec:	7ffb      	ldrb	r3, [r7, #31]
 80063ee:	3320      	adds	r3, #32
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 80063f4:	2300      	movs	r3, #0
 80063f6:	77bb      	strb	r3, [r7, #30]
 80063f8:	e033      	b.n	8006462 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 80063fa:	f107 020c 	add.w	r2, r7, #12
 80063fe:	2306      	movs	r3, #6
 8006400:	2107      	movs	r1, #7
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff fdfe 	bl	8006004 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8006408:	7b3b      	ldrb	r3, [r7, #12]
 800640a:	041a      	lsls	r2, r3, #16
 800640c:	7b7b      	ldrb	r3, [r7, #13]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	4313      	orrs	r3, r2
 8006412:	7bba      	ldrb	r2, [r7, #14]
 8006414:	4313      	orrs	r3, r2
 8006416:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800641a:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	041a      	lsls	r2, r3, #16
 8006420:	7c3b      	ldrb	r3, [r7, #16]
 8006422:	021b      	lsls	r3, r3, #8
 8006424:	4313      	orrs	r3, r2
 8006426:	7c7a      	ldrb	r2, [r7, #17]
 8006428:	4313      	orrs	r3, r2
 800642a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800642e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8006430:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800643e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	3320      	adds	r3, #32
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800644e:	6979      	ldr	r1, [r7, #20]
 8006450:	69b8      	ldr	r0, [r7, #24]
 8006452:	f7ff fd7b 	bl	8005f4c <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8006456:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	3301      	adds	r3, #1
 800645e:	b2db      	uxtb	r3, r3
 8006460:	77bb      	strb	r3, [r7, #30]
 8006462:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8006466:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800646a:	429a      	cmp	r2, r3
 800646c:	dbc5      	blt.n	80063fa <max30102_read_fifo+0x4c>
    }
    obj->_sample_count = num_samples;
 800646e:	7ffa      	ldrb	r2, [r7, #31]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
}
 8006476:	bf00      	nop
 8006478:	3720      	adds	r7, #32
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <apply_moving_average>:
uint32_t startup_samples = 0;

// MAX30102 object
max30102_t max30102;

uint32_t apply_moving_average(uint32_t new_sample, uint32_t *filter_buffer, int *filter_index) {
 8006480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006484:	b088      	sub	sp, #32
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
    filter_buffer[*filter_index] = new_sample;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	4413      	add	r3, r2
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]
    *filter_index = (*filter_index + 1) % FILTER_SIZE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	1c59      	adds	r1, r3, #1
 80064a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006518 <apply_moving_average+0x98>)
 80064a4:	fb83 2301 	smull	r2, r3, r3, r1
 80064a8:	105a      	asrs	r2, r3, #1
 80064aa:	17cb      	asrs	r3, r1, #31
 80064ac:	1ad2      	subs	r2, r2, r3
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	1aca      	subs	r2, r1, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]

    uint64_t sum = 0;
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for(int i = 0; i < FILTER_SIZE; i++) {
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	e012      	b.n	80064f2 <apply_moving_average+0x72>
        sum += filter_buffer[i];
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	4413      	add	r3, r2
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	461c      	mov	r4, r3
 80064da:	4615      	mov	r5, r2
 80064dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064e0:	eb12 0804 	adds.w	r8, r2, r4
 80064e4:	eb43 0905 	adc.w	r9, r3, r5
 80064e8:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(int i = 0; i < FILTER_SIZE; i++) {
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	3301      	adds	r3, #1
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	dde9      	ble.n	80064cc <apply_moving_average+0x4c>
    }
    return sum / FILTER_SIZE;
 80064f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064fc:	f04f 0205 	mov.w	r2, #5
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	f7fa fe04 	bl	8001110 <__aeabi_uldivmod>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4613      	mov	r3, r2
}
 800650e:	4618      	mov	r0, r3
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006518:	66666667 	.word	0x66666667

0800651c <calculate_bpm_average>:

float calculate_bpm_average(float *bpm_array, int count) {
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
    if (count == 0) return 0.0;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <calculate_bpm_average+0x16>
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	e020      	b.n	8006574 <calculate_bpm_average+0x58>

    float sum = 0.0;
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < count; i++) {
 8006538:	2300      	movs	r3, #0
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	e00d      	b.n	800655a <calculate_bpm_average+0x3e>
        sum += bpm_array[i];
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4619      	mov	r1, r3
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7fa fb12 	bl	8000b74 <__addsf3>
 8006550:	4603      	mov	r3, r0
 8006552:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < count; i++) {
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	3301      	adds	r3, #1
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	dbed      	blt.n	800653e <calculate_bpm_average+0x22>
    }
    return sum / count;
 8006562:	6838      	ldr	r0, [r7, #0]
 8006564:	f7fa fbba 	bl	8000cdc <__aeabi_i2f>
 8006568:	4603      	mov	r3, r0
 800656a:	4619      	mov	r1, r3
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7fa fcbd 	bl	8000eec <__aeabi_fdiv>
 8006572:	4603      	mov	r3, r0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <configure_MAX30102>:

void configure_MAX30102 (void) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
	max30102_init(&max30102, &hi2c1);
 8006582:	4923      	ldr	r1, [pc, #140]	@ (8006610 <configure_MAX30102+0x94>)
 8006584:	4823      	ldr	r0, [pc, #140]	@ (8006614 <configure_MAX30102+0x98>)
 8006586:	f7ff fceb 	bl	8005f60 <max30102_init>
    max30102_reset(&max30102);
 800658a:	4822      	ldr	r0, [pc, #136]	@ (8006614 <configure_MAX30102+0x98>)
 800658c:	f7ff fd5f 	bl	800604e <max30102_reset>
    HAL_Delay(100); // Allow reset to complete
 8006590:	2064      	movs	r0, #100	@ 0x64
 8006592:	f7fa ffef 	bl	8001574 <HAL_Delay>
    max30102_clear_fifo(&max30102);
 8006596:	481f      	ldr	r0, [pc, #124]	@ (8006614 <configure_MAX30102+0x98>)
 8006598:	f7ff feea 	bl	8006370 <max30102_clear_fifo>

    // FIFO configuration
    max30102_set_fifo_config(&max30102, max30102_smp_ave_4, 1, 15);
 800659c:	230f      	movs	r3, #15
 800659e:	2201      	movs	r2, #1
 80065a0:	2102      	movs	r1, #2
 80065a2:	481c      	ldr	r0, [pc, #112]	@ (8006614 <configure_MAX30102+0x98>)
 80065a4:	f7ff fea8 	bl	80062f8 <max30102_set_fifo_config>

    // Sensor settings
    max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80065a8:	2101      	movs	r1, #1
 80065aa:	481a      	ldr	r0, [pc, #104]	@ (8006614 <configure_MAX30102+0x98>)
 80065ac:	f7ff fe00 	bl	80061b0 <max30102_set_led_pulse_width>
    max30102_set_adc_resolution(&max30102, max30102_adc_4096);
 80065b0:	2101      	movs	r1, #1
 80065b2:	4818      	ldr	r0, [pc, #96]	@ (8006614 <configure_MAX30102+0x98>)
 80065b4:	f7ff fe1f 	bl	80061f6 <max30102_set_adc_resolution>
    max30102_set_sampling_rate(&max30102, max30102_sr_100);
 80065b8:	2101      	movs	r1, #1
 80065ba:	4816      	ldr	r0, [pc, #88]	@ (8006614 <configure_MAX30102+0x98>)
 80065bc:	f7ff fdd3 	bl	8006166 <max30102_set_sampling_rate>

    // LED current settings
    max30102_set_led_current_1(&max30102, 10.0);
 80065c0:	4915      	ldr	r1, [pc, #84]	@ (8006618 <configure_MAX30102+0x9c>)
 80065c2:	4814      	ldr	r0, [pc, #80]	@ (8006614 <configure_MAX30102+0x98>)
 80065c4:	f7ff fe3c 	bl	8006240 <max30102_set_led_current_1>
    max30102_set_led_current_2(&max30102, 10.0);
 80065c8:	4913      	ldr	r1, [pc, #76]	@ (8006618 <configure_MAX30102+0x9c>)
 80065ca:	4812      	ldr	r0, [pc, #72]	@ (8006614 <configure_MAX30102+0x98>)
 80065cc:	f7ff fe6c 	bl	80062a8 <max30102_set_led_current_2>

    // Enter SpO2 mode
    max30102_set_mode(&max30102, max30102_spo2);
 80065d0:	2103      	movs	r1, #3
 80065d2:	4810      	ldr	r0, [pc, #64]	@ (8006614 <configure_MAX30102+0x98>)
 80065d4:	f7ff fda1 	bl	800611a <max30102_set_mode>
    max30102_set_a_full(&max30102, 1);
 80065d8:	2101      	movs	r1, #1
 80065da:	480e      	ldr	r0, [pc, #56]	@ (8006614 <configure_MAX30102+0x98>)
 80065dc:	f7ff fd48 	bl	8006070 <max30102_set_a_full>
    max30102_set_ppg_rdy(&max30102, 1);
 80065e0:	2101      	movs	r1, #1
 80065e2:	480c      	ldr	r0, [pc, #48]	@ (8006614 <configure_MAX30102+0x98>)
 80065e4:	f7ff fd6d 	bl	80060c2 <max30102_set_ppg_rdy>

    // Initialize BPM array
    for (int i = 0; i < BPM_AVERAGE_SIZE; i++) {
 80065e8:	2300      	movs	r3, #0
 80065ea:	607b      	str	r3, [r7, #4]
 80065ec:	e008      	b.n	8006600 <configure_MAX30102+0x84>
    	bpm_array[i] = 0.0;
 80065ee:	4a0b      	ldr	r2, [pc, #44]	@ (800661c <configure_MAX30102+0xa0>)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f04f 0100 	mov.w	r1, #0
 80065f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < BPM_AVERAGE_SIZE; i++) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3301      	adds	r3, #1
 80065fe:	607b      	str	r3, [r7, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b09      	cmp	r3, #9
 8006604:	ddf3      	ble.n	80065ee <configure_MAX30102+0x72>
    }
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	200001f4 	.word	0x200001f4
 8006614:	200004e4 	.word	0x200004e4
 8006618:	41200000 	.word	0x41200000
 800661c:	200004b0 	.word	0x200004b0

08006620 <calc_curr_avg_bpm>:

float* calc_curr_avg_bpm (void) {
 8006620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006624:	b08a      	sub	sp, #40	@ 0x28
 8006626:	af00      	add	r7, sp, #0
	static float curr_avg_ir[3] = {0.0, 0.0, 0.0};
	// Read FIFO
	max30102_read_fifo(&max30102);
 8006628:	4877      	ldr	r0, [pc, #476]	@ (8006808 <calc_curr_avg_bpm+0x1e8>)
 800662a:	f7ff fec0 	bl	80063ae <max30102_read_fifo>
	uint32_t ir_value = max30102._ir_samples[0];
 800662e:	4b76      	ldr	r3, [pc, #472]	@ (8006808 <calc_curr_avg_bpm+0x1e8>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	61bb      	str	r3, [r7, #24]

	// Apply moving average filter
	uint32_t filtered_value = apply_moving_average(ir_value, filtered_buffer, &filter_index);
 8006634:	4a75      	ldr	r2, [pc, #468]	@ (800680c <calc_curr_avg_bpm+0x1ec>)
 8006636:	4976      	ldr	r1, [pc, #472]	@ (8006810 <calc_curr_avg_bpm+0x1f0>)
 8006638:	69b8      	ldr	r0, [r7, #24]
 800663a:	f7ff ff21 	bl	8006480 <apply_moving_average>
 800663e:	6178      	str	r0, [r7, #20]

	// Store in circular buffer for baseline calculation
	ir_buffer[buffer_index++] = filtered_value;
 8006640:	4b74      	ldr	r3, [pc, #464]	@ (8006814 <calc_curr_avg_bpm+0x1f4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	4973      	ldr	r1, [pc, #460]	@ (8006814 <calc_curr_avg_bpm+0x1f4>)
 8006648:	600a      	str	r2, [r1, #0]
 800664a:	4973      	ldr	r1, [pc, #460]	@ (8006818 <calc_curr_avg_bpm+0x1f8>)
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (buffer_index >= BUFFER_SIZE) buffer_index = 0;
 8006652:	4b70      	ldr	r3, [pc, #448]	@ (8006814 <calc_curr_avg_bpm+0x1f4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b63      	cmp	r3, #99	@ 0x63
 8006658:	dd02      	ble.n	8006660 <calc_curr_avg_bpm+0x40>
 800665a:	4b6e      	ldr	r3, [pc, #440]	@ (8006814 <calc_curr_avg_bpm+0x1f4>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
		continue;
	}*/

	// Calculate baseline as average
	uint64_t sum = 0;
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800666c:	2300      	movs	r3, #0
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e011      	b.n	8006696 <calc_curr_avg_bpm+0x76>
		sum += ir_buffer[i];
 8006672:	4a69      	ldr	r2, [pc, #420]	@ (8006818 <calc_curr_avg_bpm+0x1f8>)
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667a:	2200      	movs	r2, #0
 800667c:	461c      	mov	r4, r3
 800667e:	4615      	mov	r5, r2
 8006680:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006684:	eb12 0804 	adds.w	r8, r2, r4
 8006688:	eb43 0905 	adc.w	r9, r3, r5
 800668c:	e9c7 8908 	strd	r8, r9, [r7, #32]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	3301      	adds	r3, #1
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	2b63      	cmp	r3, #99	@ 0x63
 800669a:	ddea      	ble.n	8006672 <calc_curr_avg_bpm+0x52>
	}
	uint32_t baseline = sum / BUFFER_SIZE;
 800669c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80066a0:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	f7fa fd32 	bl	8001110 <__aeabi_uldivmod>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4613      	mov	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]

	// AC component (signal minus baseline)
	int32_t ir_ac = (int32_t)filtered_value - (int32_t)baseline;
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	60fb      	str	r3, [r7, #12]

	uint32_t current_time = HAL_GetTick();
 80066bc:	f7fa ff50 	bl	8001560 <HAL_GetTick>
 80066c0:	60b8      	str	r0, [r7, #8]

	// 3-point peak detection
	if (ir_ac > prev_signal && prev_signal > prev_prev_signal &&
 80066c2:	4b56      	ldr	r3, [pc, #344]	@ (800681c <calc_curr_avg_bpm+0x1fc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	dd73      	ble.n	80067b4 <calc_curr_avg_bpm+0x194>
 80066cc:	4b53      	ldr	r3, [pc, #332]	@ (800681c <calc_curr_avg_bpm+0x1fc>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4b53      	ldr	r3, [pc, #332]	@ (8006820 <calc_curr_avg_bpm+0x200>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	dd6d      	ble.n	80067b4 <calc_curr_avg_bpm+0x194>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b1e      	cmp	r3, #30
 80066dc:	dd6a      	ble.n	80067b4 <calc_curr_avg_bpm+0x194>
			ir_ac > SIGNAL_THRESHOLD && !peak_found) {
 80066de:	4b51      	ldr	r3, [pc, #324]	@ (8006824 <calc_curr_avg_bpm+0x204>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f083 0301 	eor.w	r3, r3, #1
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d063      	beq.n	80067b4 <calc_curr_avg_bpm+0x194>

		// Peak detected at previous point
		if (current_time - last_peak_time > MIN_PEAK_DISTANCE) {
 80066ec:	4b4e      	ldr	r3, [pc, #312]	@ (8006828 <calc_curr_avg_bpm+0x208>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80066f6:	d965      	bls.n	80067c4 <calc_curr_avg_bpm+0x1a4>

			// Calculate BPM
			if (last_peak_time > 0) {
 80066f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006828 <calc_curr_avg_bpm+0x208>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d052      	beq.n	80067a6 <calc_curr_avg_bpm+0x186>
				uint32_t interval = current_time - last_peak_time;
 8006700:	4b49      	ldr	r3, [pc, #292]	@ (8006828 <calc_curr_avg_bpm+0x208>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	607b      	str	r3, [r7, #4]
				current_bpm = 60000.0 / interval;
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7f9 fe6a 	bl	80003e4 <__aeabi_ui2d>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	a13a      	add	r1, pc, #232	@ (adr r1, 8006800 <calc_curr_avg_bpm+0x1e0>)
 8006716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800671a:	f7fa f807 	bl	800072c <__aeabi_ddiv>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4610      	mov	r0, r2
 8006724:	4619      	mov	r1, r3
 8006726:	f7fa f9cf 	bl	8000ac8 <__aeabi_d2f>
 800672a:	4603      	mov	r3, r0
 800672c:	4a3f      	ldr	r2, [pc, #252]	@ (800682c <calc_curr_avg_bpm+0x20c>)
 800672e:	6013      	str	r3, [r2, #0]

				// Validate BPM range (40-200 BPM)
				if (current_bpm >= 40 && current_bpm <= 200) {
 8006730:	4b3e      	ldr	r3, [pc, #248]	@ (800682c <calc_curr_avg_bpm+0x20c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	493e      	ldr	r1, [pc, #248]	@ (8006830 <calc_curr_avg_bpm+0x210>)
 8006736:	4618      	mov	r0, r3
 8006738:	f7fa fcd6 	bl	80010e8 <__aeabi_fcmpge>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d031      	beq.n	80067a6 <calc_curr_avg_bpm+0x186>
 8006742:	4b3a      	ldr	r3, [pc, #232]	@ (800682c <calc_curr_avg_bpm+0x20c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	493b      	ldr	r1, [pc, #236]	@ (8006834 <calc_curr_avg_bpm+0x214>)
 8006748:	4618      	mov	r0, r3
 800674a:	f7fa fcc3 	bl	80010d4 <__aeabi_fcmple>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d028      	beq.n	80067a6 <calc_curr_avg_bpm+0x186>

					// Add to BPM array for averaging
					bpm_array[bpm_counter] = current_bpm;
 8006754:	4b38      	ldr	r3, [pc, #224]	@ (8006838 <calc_curr_avg_bpm+0x218>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a34      	ldr	r2, [pc, #208]	@ (800682c <calc_curr_avg_bpm+0x20c>)
 800675a:	6812      	ldr	r2, [r2, #0]
 800675c:	4937      	ldr	r1, [pc, #220]	@ (800683c <calc_curr_avg_bpm+0x21c>)
 800675e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					bpm_counter++;
 8006762:	4b35      	ldr	r3, [pc, #212]	@ (8006838 <calc_curr_avg_bpm+0x218>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3301      	adds	r3, #1
 8006768:	4a33      	ldr	r2, [pc, #204]	@ (8006838 <calc_curr_avg_bpm+0x218>)
 800676a:	6013      	str	r3, [r2, #0]

					// Check if array is full
					if (bpm_counter >= BPM_AVERAGE_SIZE) {
 800676c:	4b32      	ldr	r3, [pc, #200]	@ (8006838 <calc_curr_avg_bpm+0x218>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b09      	cmp	r3, #9
 8006772:	dd05      	ble.n	8006780 <calc_curr_avg_bpm+0x160>
						bpm_counter = 0;
 8006774:	4b30      	ldr	r3, [pc, #192]	@ (8006838 <calc_curr_avg_bpm+0x218>)
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
						array_filled = true;
 800677a:	4b31      	ldr	r3, [pc, #196]	@ (8006840 <calc_curr_avg_bpm+0x220>)
 800677c:	2201      	movs	r2, #1
 800677e:	701a      	strb	r2, [r3, #0]
					}

					// Calculate average BPM
					int count_for_average = array_filled ? BPM_AVERAGE_SIZE : bpm_counter;
 8006780:	4b2f      	ldr	r3, [pc, #188]	@ (8006840 <calc_curr_avg_bpm+0x220>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <calc_curr_avg_bpm+0x16c>
 8006788:	230a      	movs	r3, #10
 800678a:	e001      	b.n	8006790 <calc_curr_avg_bpm+0x170>
 800678c:	4b2a      	ldr	r3, [pc, #168]	@ (8006838 <calc_curr_avg_bpm+0x218>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	603b      	str	r3, [r7, #0]
					if (count_for_average > 0) {
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	dd06      	ble.n	80067a6 <calc_curr_avg_bpm+0x186>
						average_bpm = calculate_bpm_average(bpm_array, count_for_average);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	4828      	ldr	r0, [pc, #160]	@ (800683c <calc_curr_avg_bpm+0x21c>)
 800679c:	f7ff febe 	bl	800651c <calculate_bpm_average>
 80067a0:	4603      	mov	r3, r0
 80067a2:	4a28      	ldr	r2, [pc, #160]	@ (8006844 <calc_curr_avg_bpm+0x224>)
 80067a4:	6013      	str	r3, [r2, #0]
					}
				}
			}
			last_peak_time = current_time;
 80067a6:	4a20      	ldr	r2, [pc, #128]	@ (8006828 <calc_curr_avg_bpm+0x208>)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6013      	str	r3, [r2, #0]
			peak_found = true;
 80067ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006824 <calc_curr_avg_bpm+0x204>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
		if (current_time - last_peak_time > MIN_PEAK_DISTANCE) {
 80067b2:	e007      	b.n	80067c4 <calc_curr_avg_bpm+0x1a4>
		}
	} else if (ir_ac < prev_signal) {
 80067b4:	4b19      	ldr	r3, [pc, #100]	@ (800681c <calc_curr_avg_bpm+0x1fc>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	da02      	bge.n	80067c4 <calc_curr_avg_bpm+0x1a4>
		peak_found = false;
 80067be:	4b19      	ldr	r3, [pc, #100]	@ (8006824 <calc_curr_avg_bpm+0x204>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	701a      	strb	r2, [r3, #0]
	}

	// Update signal history
	prev_prev_signal = prev_signal;
 80067c4:	4b15      	ldr	r3, [pc, #84]	@ (800681c <calc_curr_avg_bpm+0x1fc>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a15      	ldr	r2, [pc, #84]	@ (8006820 <calc_curr_avg_bpm+0x200>)
 80067ca:	6013      	str	r3, [r2, #0]
	prev_signal = ir_ac;
 80067cc:	4a13      	ldr	r2, [pc, #76]	@ (800681c <calc_curr_avg_bpm+0x1fc>)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6013      	str	r3, [r2, #0]
	curr_avg_ir[0] = current_bpm;
 80067d2:	4b16      	ldr	r3, [pc, #88]	@ (800682c <calc_curr_avg_bpm+0x20c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006848 <calc_curr_avg_bpm+0x228>)
 80067d8:	6013      	str	r3, [r2, #0]
	curr_avg_ir[1] = average_bpm;
 80067da:	4b1a      	ldr	r3, [pc, #104]	@ (8006844 <calc_curr_avg_bpm+0x224>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1a      	ldr	r2, [pc, #104]	@ (8006848 <calc_curr_avg_bpm+0x228>)
 80067e0:	6053      	str	r3, [r2, #4]
	curr_avg_ir[2] = ir_value;
 80067e2:	69b8      	ldr	r0, [r7, #24]
 80067e4:	f7fa fa76 	bl	8000cd4 <__aeabi_ui2f>
 80067e8:	4603      	mov	r3, r0
 80067ea:	4a17      	ldr	r2, [pc, #92]	@ (8006848 <calc_curr_avg_bpm+0x228>)
 80067ec:	6093      	str	r3, [r2, #8]
	return curr_avg_ir;
 80067ee:	4b16      	ldr	r3, [pc, #88]	@ (8006848 <calc_curr_avg_bpm+0x228>)
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3728      	adds	r7, #40	@ 0x28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80067fa:	bf00      	nop
 80067fc:	f3af 8000 	nop.w
 8006800:	00000000 	.word	0x00000000
 8006804:	40ed4c00 	.word	0x40ed4c00
 8006808:	200004e4 	.word	0x200004e4
 800680c:	20000498 	.word	0x20000498
 8006810:	20000484 	.word	0x20000484
 8006814:	20000480 	.word	0x20000480
 8006818:	200002f0 	.word	0x200002f0
 800681c:	200004a4 	.word	0x200004a4
 8006820:	200004a8 	.word	0x200004a8
 8006824:	200004ac 	.word	0x200004ac
 8006828:	2000049c 	.word	0x2000049c
 800682c:	200004a0 	.word	0x200004a0
 8006830:	42200000 	.word	0x42200000
 8006834:	43480000 	.word	0x43480000
 8006838:	200004d8 	.word	0x200004d8
 800683c:	200004b0 	.word	0x200004b0
 8006840:	200004e0 	.word	0x200004e0
 8006844:	200004dc 	.word	0x200004dc
 8006848:	200005ec 	.word	0x200005ec

0800684c <render_bpm>:

float* render_bpm (void) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b08c      	sub	sp, #48	@ 0x30
 8006850:	af02      	add	r7, sp, #8
	float* curr_avg_ir;
	// Potentially dangerous
	curr_avg_ir = calc_curr_avg_bpm();
 8006852:	f7ff fee5 	bl	8006620 <calc_curr_avg_bpm>
 8006856:	6278      	str	r0, [r7, #36]	@ 0x24
	// Display on OLED
	ssd1306_Fill(0); // Clear screen
 8006858:	2000      	movs	r0, #0
 800685a:	f000 fc3d 	bl	80070d8 <ssd1306_Fill>
	if (curr_avg_ir[2] < 10000) {
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	3308      	adds	r3, #8
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4930      	ldr	r1, [pc, #192]	@ (8006928 <render_bpm+0xdc>)
 8006866:	4618      	mov	r0, r3
 8006868:	f7fa fc2a 	bl	80010c0 <__aeabi_fcmplt>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00b      	beq.n	800688a <render_bpm+0x3e>
		ssd1306_SetCursor(0, 0);
 8006872:	2100      	movs	r1, #0
 8006874:	2000      	movs	r0, #0
 8006876:	f000 fd7d 	bl	8007374 <ssd1306_SetCursor>
		ssd1306_WriteString("No finger detected!", Font_7x10, White);
 800687a:	4b2c      	ldr	r3, [pc, #176]	@ (800692c <render_bpm+0xe0>)
 800687c:	2201      	movs	r2, #1
 800687e:	9200      	str	r2, [sp, #0]
 8006880:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006882:	482b      	ldr	r0, [pc, #172]	@ (8006930 <render_bpm+0xe4>)
 8006884:	f000 fd50 	bl	8007328 <ssd1306_WriteString>
 8006888:	e047      	b.n	800691a <render_bpm+0xce>
	} else {
		// Display current BPM
		if (curr_avg_ir[0] > 0) {
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f04f 0100 	mov.w	r1, #0
 8006892:	4618      	mov	r0, r3
 8006894:	f7fa fc32 	bl	80010fc <__aeabi_fcmpgt>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <render_bpm+0x84>
			char bpm_str[32];
			snprintf(bpm_str, sizeof(bpm_str), "BPM: %.0f", curr_avg_ir[0]);
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7f9 fdc0 	bl	8000428 <__aeabi_f2d>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	1d38      	adds	r0, r7, #4
 80068ae:	e9cd 2300 	strd	r2, r3, [sp]
 80068b2:	4a20      	ldr	r2, [pc, #128]	@ (8006934 <render_bpm+0xe8>)
 80068b4:	2120      	movs	r1, #32
 80068b6:	f002 f8ef 	bl	8008a98 <sniprintf>
			ssd1306_SetCursor(0, 15);
 80068ba:	210f      	movs	r1, #15
 80068bc:	2000      	movs	r0, #0
 80068be:	f000 fd59 	bl	8007374 <ssd1306_SetCursor>
			ssd1306_WriteString(bpm_str, Font_7x10, White);
 80068c2:	4b1a      	ldr	r3, [pc, #104]	@ (800692c <render_bpm+0xe0>)
 80068c4:	1d38      	adds	r0, r7, #4
 80068c6:	2201      	movs	r2, #1
 80068c8:	9200      	str	r2, [sp, #0]
 80068ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068cc:	f000 fd2c 	bl	8007328 <ssd1306_WriteString>
		}

		// Display average BPM
		if (curr_avg_ir[1] > 0) {
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	3304      	adds	r3, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f04f 0100 	mov.w	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fa fc0e 	bl	80010fc <__aeabi_fcmpgt>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d019      	beq.n	800691a <render_bpm+0xce>
			char avg_bpm_str[32];
			snprintf(avg_bpm_str, sizeof(avg_bpm_str), "Avg: %.1f", curr_avg_ir[1]);
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	3304      	adds	r3, #4
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7f9 fd9b 	bl	8000428 <__aeabi_f2d>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	1d38      	adds	r0, r7, #4
 80068f8:	e9cd 2300 	strd	r2, r3, [sp]
 80068fc:	4a0e      	ldr	r2, [pc, #56]	@ (8006938 <render_bpm+0xec>)
 80068fe:	2120      	movs	r1, #32
 8006900:	f002 f8ca 	bl	8008a98 <sniprintf>
			ssd1306_SetCursor(0, 30);
 8006904:	211e      	movs	r1, #30
 8006906:	2000      	movs	r0, #0
 8006908:	f000 fd34 	bl	8007374 <ssd1306_SetCursor>
			ssd1306_WriteString(avg_bpm_str, Font_7x10, White);
 800690c:	4b07      	ldr	r3, [pc, #28]	@ (800692c <render_bpm+0xe0>)
 800690e:	1d38      	adds	r0, r7, #4
 8006910:	2201      	movs	r2, #1
 8006912:	9200      	str	r2, [sp, #0]
 8006914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006916:	f000 fd07 	bl	8007328 <ssd1306_WriteString>
		}
	}

	ssd1306_UpdateScreen();
 800691a:	f000 fbf5 	bl	8007108 <ssd1306_UpdateScreen>
	return curr_avg_ir;
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006920:	4618      	mov	r0, r3
 8006922:	3728      	adds	r7, #40	@ 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	461c4000 	.word	0x461c4000
 800692c:	0800e568 	.word	0x0800e568
 8006930:	0800c220 	.word	0x0800c220
 8006934:	0800c234 	.word	0x0800c234
 8006938:	0800c240 	.word	0x0800c240

0800693c <MPU6050_Init>:
#include <stdbool.h>
#include <string.h>


void MPU6050_Init (mpu6050_t *mpu6050, I2C_HandleTypeDef *hi2c1) // WHO AM I is to verify the identity of device
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	@ 0x28
 8006940:	af04      	add	r7, sp, #16
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint8_t check;
  uint8_t Data;
  mpu6050->_I2C = hi2c1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	64da      	str	r2, [r3, #76]	@ 0x4c

  HAL_I2C_Mem_Read (hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);  // read WHO_AM_I
 800694c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006950:	9302      	str	r3, [sp, #8]
 8006952:	2301      	movs	r3, #1
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	f107 030f 	add.w	r3, r7, #15
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	2301      	movs	r3, #1
 800695e:	2275      	movs	r2, #117	@ 0x75
 8006960:	21d0      	movs	r1, #208	@ 0xd0
 8006962:	6838      	ldr	r0, [r7, #0]
 8006964:	f7fb ff2e 	bl	80027c4 <HAL_I2C_Mem_Read>

  HAL_Delay(100); // Small delay
 8006968:	2064      	movs	r0, #100	@ 0x64
 800696a:	f7fa fe03 	bl	8001574 <HAL_Delay>

   if (check == MPU6050_ADDR_WO_SHIFT)  // 0x68 will be returned by the sensor if everything goes well
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b68      	cmp	r3, #104	@ 0x68
 8006972:	f040 808d 	bne.w	8006a90 <MPU6050_Init+0x154>
  {
	  Data = 0x80; // Device reset
 8006976:	2380      	movs	r3, #128	@ 0x80
 8006978:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 800697a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800697e:	9302      	str	r3, [sp, #8]
 8006980:	2301      	movs	r3, #1
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	f107 030e 	add.w	r3, r7, #14
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	2301      	movs	r3, #1
 800698c:	226b      	movs	r2, #107	@ 0x6b
 800698e:	21d0      	movs	r1, #208	@ 0xd0
 8006990:	6838      	ldr	r0, [r7, #0]
 8006992:	f7fb fe1d 	bl	80025d0 <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 8006996:	2064      	movs	r0, #100	@ 0x64
 8006998:	f7fa fdec 	bl	8001574 <HAL_Delay>

	  // Wake up and set clock source to PLL with X-axis gyro reference
	  Data = 0x01; // Use PLL with X-axis gyro, not internal oscillator
 800699c:	2301      	movs	r3, #1
 800699e:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 80069a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069a4:	9302      	str	r3, [sp, #8]
 80069a6:	2301      	movs	r3, #1
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	f107 030e 	add.w	r3, r7, #14
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	2301      	movs	r3, #1
 80069b2:	226b      	movs	r2, #107	@ 0x6b
 80069b4:	21d0      	movs	r1, #208	@ 0xd0
 80069b6:	6838      	ldr	r0, [r7, #0]
 80069b8:	f7fb fe0a 	bl	80025d0 <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 80069bc:	2064      	movs	r0, #100	@ 0x64
 80069be:	f7fa fdd9 	bl	8001574 <HAL_Delay>

	  // Ensure all sensors are enabled
	  Data = 0x00; // Enable all accelerometer and gyroscope axes
 80069c2:	2300      	movs	r3, #0
 80069c4:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_2, 1, &Data, 1, 1000);
 80069c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069ca:	9302      	str	r3, [sp, #8]
 80069cc:	2301      	movs	r3, #1
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	f107 030e 	add.w	r3, r7, #14
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	2301      	movs	r3, #1
 80069d8:	226c      	movs	r2, #108	@ 0x6c
 80069da:	21d0      	movs	r1, #208	@ 0xd0
 80069dc:	6838      	ldr	r0, [r7, #0]
 80069de:	f7fb fdf7 	bl	80025d0 <HAL_I2C_Mem_Write>
	  HAL_Delay(50);
 80069e2:	2032      	movs	r0, #50	@ 0x32
 80069e4:	f7fa fdc6 	bl	8001574 <HAL_Delay>

	  // Configure DLPF first (affects sample rate)
	  MPU6050_Configure_DLPF(hi2c1, 0x03); // 42Hz bandwidth instead of 0x01
 80069e8:	2103      	movs	r1, #3
 80069ea:	6838      	ldr	r0, [r7, #0]
 80069ec:	f000 f880 	bl	8006af0 <MPU6050_Configure_DLPF>

	  // Set sample rate: Sample Rate = 1kHz / (1 + SMPLRT_DIV)
	  // For 100Hz: SMPLRT_DIV = 9
	  Data = 0x09; // 100Hz sample rate
 80069f0:	2309      	movs	r3, #9
 80069f2:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 80069f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069f8:	9302      	str	r3, [sp, #8]
 80069fa:	2301      	movs	r3, #1
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	f107 030e 	add.w	r3, r7, #14
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	2301      	movs	r3, #1
 8006a06:	2219      	movs	r2, #25
 8006a08:	21d0      	movs	r1, #208	@ 0xd0
 8006a0a:	6838      	ldr	r0, [r7, #0]
 8006a0c:	f7fb fde0 	bl	80025d0 <HAL_I2C_Mem_Write>

	  // Set accelerometer configuration in ACCEL_CONFIG Register
	  Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> <strong>±</strong> 2g
 8006a10:	2300      	movs	r3, #0
 8006a12:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8006a14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	f107 030e 	add.w	r3, r7, #14
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	2301      	movs	r3, #1
 8006a26:	221c      	movs	r2, #28
 8006a28:	21d0      	movs	r1, #208	@ 0xd0
 8006a2a:	6838      	ldr	r0, [r7, #0]
 8006a2c:	f7fb fdd0 	bl	80025d0 <HAL_I2C_Mem_Write>

	  // Set Gyroscopic configuration in GYRO_CONFIG Register
	  Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> <strong>±</strong> 250 ̐/s
 8006a30:	2300      	movs	r3, #0
 8006a32:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8006a34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a38:	9302      	str	r3, [sp, #8]
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	f107 030e 	add.w	r3, r7, #14
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	2301      	movs	r3, #1
 8006a46:	221b      	movs	r2, #27
 8006a48:	21d0      	movs	r1, #208	@ 0xd0
 8006a4a:	6838      	ldr	r0, [r7, #0]
 8006a4c:	f7fb fdc0 	bl	80025d0 <HAL_I2C_Mem_Write>

	  for (int i = 0; i < 3; i++){
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	e009      	b.n	8006a6a <MPU6050_Init+0x12e>
		  mpu6050->accelerometer.scaleXYZ[i] = LSB_SENSITIVITY_ACC_DEFAULT;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	3206      	adds	r2, #6
 8006a5c:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8006a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for (int i = 0; i < 3; i++){
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	3301      	adds	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	ddf2      	ble.n	8006a56 <MPU6050_Init+0x11a>
	  }

	  for (int i = 0; i < 3; i++){
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	e009      	b.n	8006a8a <MPU6050_Init+0x14e>
		  mpu6050->gyroscope.scaleXYZ[i] = LSB_SENSITIVITY_GYRO_DEFAULT;
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	330e      	adds	r3, #14
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	4a0e      	ldr	r2, [pc, #56]	@ (8006abc <MPU6050_Init+0x180>)
 8006a82:	605a      	str	r2, [r3, #4]
	  for (int i = 0; i < 3; i++){
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	3301      	adds	r3, #1
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	ddf2      	ble.n	8006a76 <MPU6050_Init+0x13a>
	  }

  }
   // FIFO init
   // TODO: check if it's sequence of functions actually necessary
   MPU6050_Reset_FIFO(mpu6050);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f844 	bl	8006b1e <MPU6050_Reset_FIFO>
   HAL_Delay(50);
 8006a96:	2032      	movs	r0, #50	@ 0x32
 8006a98:	f7fa fd6c 	bl	8001574 <HAL_Delay>
   MPU6050_configure_Fifo(mpu6050);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f8c9 	bl	8006c34 <MPU6050_configure_Fifo>
   HAL_Delay(50);
 8006aa2:	2032      	movs	r0, #50	@ 0x32
 8006aa4:	f7fa fd66 	bl	8001574 <HAL_Delay>
   MPU6050_Enable_FIFO(mpu6050);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f897 	bl	8006bdc <MPU6050_Enable_FIFO>
   HAL_Delay(100); // Allow FIFO to fill
 8006aae:	2064      	movs	r0, #100	@ 0x64
 8006ab0:	f7fa fd60 	bl	8001574 <HAL_Delay>
}
 8006ab4:	bf00      	nop
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	43030000 	.word	0x43030000

08006ac0 <MPU6050_Set_Accel_Offset_Scale>:
	}
}

// For six point calibration.
// Note: scale is the same as for sensitivity calibration. Generally this function is for purpose when user want to put different scales on each axis
void MPU6050_Set_Accel_Offset_Scale (mpu6050_t *mpu6050, float* offsetXYZ, float* scaleXYZ) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
	memcpy(mpu6050->accelerometer.offsetXYZ, offsetXYZ, 3*sizeof(float));
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	220c      	movs	r2, #12
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f002 f918 	bl	8008d0a <memcpy>
	memcpy(mpu6050->accelerometer.scaleXYZ, scaleXYZ, 3*sizeof(float));
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3318      	adds	r3, #24
 8006ade:	220c      	movs	r2, #12
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f002 f911 	bl	8008d0a <memcpy>
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <MPU6050_Configure_DLPF>:
	memcpy(mpu6050->gyroscope.offsetXYZ, offsetXYZ, 3*sizeof(float));
	memcpy(mpu6050->gyroscope.scaleXYZ, scaleXYZ, 3*sizeof(float));
}

void MPU6050_Configure_DLPF(I2C_HandleTypeDef *hi2c1, uint8_t dlpf_value)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af04      	add	r7, sp, #16
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
    // Configure DLPF - Register 0x1A (CONFIG)
    // dlpf_value: 1=188Hz, 2=98Hz, 3=42Hz, 4=20Hz, 5=10Hz, 6=5Hz
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, CONFIG, 1, &dlpf_value, 1, 1000);
 8006afc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b00:	9302      	str	r3, [sp, #8]
 8006b02:	2301      	movs	r3, #1
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	1cfb      	adds	r3, r7, #3
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	221a      	movs	r2, #26
 8006b0e:	21d0      	movs	r1, #208	@ 0xd0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7fb fd5d 	bl	80025d0 <HAL_I2C_Mem_Write>
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <MPU6050_Reset_FIFO>:

void MPU6050_Reset_FIFO(mpu6050_t *mpu6050) {
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b088      	sub	sp, #32
 8006b22:	af04      	add	r7, sp, #16
 8006b24:	6078      	str	r0, [r7, #4]
    uint8_t current_value = 0x00;
 8006b26:	2300      	movs	r3, #0
 8006b28:	72fb      	strb	r3, [r7, #11]
    I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b2e:	60fb      	str	r3, [r7, #12]
    // Read current USER_CTRL register
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8006b30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b34:	9302      	str	r3, [sp, #8]
 8006b36:	2301      	movs	r3, #1
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	f107 030b 	add.w	r3, r7, #11
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	2301      	movs	r3, #1
 8006b42:	226a      	movs	r2, #106	@ 0x6a
 8006b44:	21d0      	movs	r1, #208	@ 0xd0
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7fb fe3c 	bl	80027c4 <HAL_I2C_Mem_Read>

    // Disable FIFO
    // In that way we remember what registers were on previously and "switch" only one bit
    current_value &= ~0x40; // Clear FIFO_EN bit
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8006b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b5a:	9302      	str	r3, [sp, #8]
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	f107 030b 	add.w	r3, r7, #11
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	2301      	movs	r3, #1
 8006b68:	226a      	movs	r2, #106	@ 0x6a
 8006b6a:	21d0      	movs	r1, #208	@ 0xd0
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7fb fd2f 	bl	80025d0 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8006b72:	2001      	movs	r0, #1
 8006b74:	f7fa fcfe 	bl	8001574 <HAL_Delay>

    // Reset FIFO
    current_value |= 0x04; // Set FIFO_RESET bit
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	f043 0304 	orr.w	r3, r3, #4
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8006b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b86:	9302      	str	r3, [sp, #8]
 8006b88:	2301      	movs	r3, #1
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	f107 030b 	add.w	r3, r7, #11
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	2301      	movs	r3, #1
 8006b94:	226a      	movs	r2, #106	@ 0x6a
 8006b96:	21d0      	movs	r1, #208	@ 0xd0
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7fb fd19 	bl	80025d0 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	f7fa fce8 	bl	8001574 <HAL_Delay>

    // Clear reset bit and re-enable FIFO
    // Here after we reseted FIFO we set this bit to 0 again but "remembering"  what value was stored
    current_value &= ~0x04; // Clear FIFO_RESET bit
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	f023 0304 	bic.w	r3, r3, #4
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	72fb      	strb	r3, [r7, #11]
    current_value |= 0x40;  // Set FIFO_EN bit
 8006bae:	7afb      	ldrb	r3, [r7, #11]
 8006bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8006bb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006bbc:	9302      	str	r3, [sp, #8]
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	f107 030b 	add.w	r3, r7, #11
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	2301      	movs	r3, #1
 8006bca:	226a      	movs	r2, #106	@ 0x6a
 8006bcc:	21d0      	movs	r1, #208	@ 0xd0
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7fb fcfe 	bl	80025d0 <HAL_I2C_Mem_Write>
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <MPU6050_Enable_FIFO>:
	float Gz = ((float)Gyro_Z_RAW - mpu6050->gyroscope.offsetXYZ[2])/mpu6050->gyroscope.scaleXYZ[2];
	mpu6050->gyroscope.Gxyz[2] = Gz;
	return Gz;
}

void MPU6050_Enable_FIFO(mpu6050_t *mpu6050) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af04      	add	r7, sp, #16
 8006be2:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be8:	60fb      	str	r3, [r7, #12]
    uint8_t current_value;
    // Read current USER_CTRL register value
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8006bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006bee:	9302      	str	r3, [sp, #8]
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	f107 030b 	add.w	r3, r7, #11
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	226a      	movs	r2, #106	@ 0x6a
 8006bfe:	21d0      	movs	r1, #208	@ 0xd0
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7fb fddf 	bl	80027c4 <HAL_I2C_Mem_Read>

    // Set FIFO_EN bit (bit 6) while preserving other bits
    current_value |= 0x40;
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8006c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c14:	9302      	str	r3, [sp, #8]
 8006c16:	2301      	movs	r3, #1
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	f107 030b 	add.w	r3, r7, #11
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	2301      	movs	r3, #1
 8006c22:	226a      	movs	r2, #106	@ 0x6a
 8006c24:	21d0      	movs	r1, #208	@ 0xd0
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7fb fcd2 	bl	80025d0 <HAL_I2C_Mem_Write>
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <MPU6050_configure_Fifo>:

void MPU6050_configure_Fifo (mpu6050_t *mpu6050) // temperature is first 1, next 111 is enable gyroscope from Gx to Gz, and last 1 is for acceleration (000 is about i2c slaves - not relevant in my case)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af04      	add	r7, sp, #16
 8006c3a:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c40:	60fb      	str	r3, [r7, #12]
	uint8_t Data = 0xF8; // To enable fifo on Temperature, gyro and accel (1111 1000)
 8006c42:	23f8      	movs	r3, #248	@ 0xf8
 8006c44:	72fb      	strb	r3, [r7, #11]
	// If want to change Data to read different in FIFO DON'T FORGET to change FIFO_SAMPLE_SIZE in mpu6050.h
	HAL_I2C_Mem_Write (hi2c1, MPU6050_ADDR, FIFO_ENABLE, 1, &Data, 1, 1000); // 1 byte to transmit
 8006c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	f107 030b 	add.w	r3, r7, #11
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	2301      	movs	r3, #1
 8006c58:	2223      	movs	r2, #35	@ 0x23
 8006c5a:	21d0      	movs	r1, #208	@ 0xd0
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f7fb fcb7 	bl	80025d0 <HAL_I2C_Mem_Write>
}
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <MPU6050_Get_FIFO_Count>:

uint16_t MPU6050_Get_FIFO_Count (mpu6050_t *mpu6050)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b088      	sub	sp, #32
 8006c6e:	af04      	add	r7, sp, #16
 8006c70:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c76:	60fb      	str	r3, [r7, #12]
    uint8_t Data_H, Data_L;
    uint16_t FIFO_Count;

    // Read FIFO_COUNT_H first (this updates both registers)
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_COUNT_H, 1, &Data_H, 1, 1000);
 8006c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c7c:	9302      	str	r3, [sp, #8]
 8006c7e:	2301      	movs	r3, #1
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	f107 0309 	add.w	r3, r7, #9
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2301      	movs	r3, #1
 8006c8a:	2272      	movs	r2, #114	@ 0x72
 8006c8c:	21d0      	movs	r1, #208	@ 0xd0
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7fb fd98 	bl	80027c4 <HAL_I2C_Mem_Read>
    // Then read FIFO_COUNT_L
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_COUNT_L, 1, &Data_L, 1, 1000);
 8006c94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c98:	9302      	str	r3, [sp, #8]
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	f107 0308 	add.w	r3, r7, #8
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	2273      	movs	r2, #115	@ 0x73
 8006ca8:	21d0      	movs	r1, #208	@ 0xd0
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7fb fd8a 	bl	80027c4 <HAL_I2C_Mem_Read>

    FIFO_Count = (Data_H << 8) | Data_L; // same trick with assembling data from low and high register
 8006cb0:	7a7b      	ldrb	r3, [r7, #9]
 8006cb2:	b21b      	sxth	r3, r3
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	b21a      	sxth	r2, r3
 8006cb8:	7a3b      	ldrb	r3, [r7, #8]
 8006cba:	b21b      	sxth	r3, r3
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	b21b      	sxth	r3, r3
 8006cc0:	817b      	strh	r3, [r7, #10]
    return FIFO_Count;
 8006cc2:	897b      	ldrh	r3, [r7, #10]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <MPU6050_Read_Fifo>:

void MPU6050_Read_Fifo(mpu6050_t *mpu6050) {
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b095      	sub	sp, #84	@ 0x54
 8006cd0:	af04      	add	r7, sp, #16
 8006cd2:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t fifo_buffer[FIFO_SAMPLE_SIZE];
    uint16_t fifo_count = MPU6050_Get_FIFO_Count(mpu6050);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff ffc5 	bl	8006c6a <MPU6050_Get_FIFO_Count>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    int16_t raw_data[FIFO_SAMPLE_SIZE / 2];
    // Check for FIFO overflow
    if (fifo_count >= 1024) {
 8006ce4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cea:	d306      	bcc.n	8006cfa <MPU6050_Read_Fifo+0x2e>
        MPU6050_Reset_FIFO(mpu6050);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ff16 	bl	8006b1e <MPU6050_Reset_FIFO>
        HAL_Delay(100); // Allow time for new data
 8006cf2:	2064      	movs	r0, #100	@ 0x64
 8006cf4:	f7fa fc3e 	bl	8001574 <HAL_Delay>
 8006cf8:	e0b1      	b.n	8006e5e <MPU6050_Read_Fifo+0x192>
        return;
    }

    // Only read if we have at least one complete sample
    if (fifo_count >= FIFO_SAMPLE_SIZE) {
 8006cfa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006cfc:	2b0d      	cmp	r3, #13
 8006cfe:	f240 80ae 	bls.w	8006e5e <MPU6050_Read_Fifo+0x192>
        // Read multiple samples if available to prevent overflow
        while (fifo_count >= FIFO_SAMPLE_SIZE && fifo_count < 1024) {
 8006d02:	e0a4      	b.n	8006e4e <MPU6050_Read_Fifo+0x182>
            HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_R_W, 1,
 8006d04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006d08:	9302      	str	r3, [sp, #8]
 8006d0a:	230e      	movs	r3, #14
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	f107 031c 	add.w	r3, r7, #28
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	2301      	movs	r3, #1
 8006d16:	2274      	movs	r2, #116	@ 0x74
 8006d18:	21d0      	movs	r1, #208	@ 0xd0
 8006d1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d1c:	f7fb fd52 	bl	80027c4 <HAL_I2C_Mem_Read>
                           fifo_buffer, FIFO_SAMPLE_SIZE, 1000);

            // Process the data (your existing processing code)
            for (int i = 0; i < FIFO_SAMPLE_SIZE / 2; i++) {
 8006d20:	2300      	movs	r3, #0
 8006d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d24:	e01b      	b.n	8006d5e <MPU6050_Read_Fifo+0x92>
                raw_data[i] = (int16_t)((fifo_buffer[2 * i] << 8) |
 8006d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	3340      	adds	r3, #64	@ 0x40
 8006d2c:	443b      	add	r3, r7
 8006d2e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006d32:	b21b      	sxth	r3, r3
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	b21a      	sxth	r2, r3
                                      fifo_buffer[2 * i + 1]);
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	3340      	adds	r3, #64	@ 0x40
 8006d40:	443b      	add	r3, r7
 8006d42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006d46:	b21b      	sxth	r3, r3
                raw_data[i] = (int16_t)((fifo_buffer[2 * i] << 8) |
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	b21a      	sxth	r2, r3
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	3340      	adds	r3, #64	@ 0x40
 8006d52:	443b      	add	r3, r7
 8006d54:	f823 2c34 	strh.w	r2, [r3, #-52]
            for (int i = 0; i < FIFO_SAMPLE_SIZE / 2; i++) {
 8006d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	2b06      	cmp	r3, #6
 8006d62:	dde0      	ble.n	8006d26 <MPU6050_Read_Fifo+0x5a>
            }

            for (int i = 0; i < 3; i++) {
 8006d64:	2300      	movs	r3, #0
 8006d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d68:	e024      	b.n	8006db4 <MPU6050_Read_Fifo+0xe8>
            	mpu6050->accelerometer.Axyz[i] = ((float)raw_data[i] - mpu6050->accelerometer.offsetXYZ[i]) / mpu6050->accelerometer.scaleXYZ[i];
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	3340      	adds	r3, #64	@ 0x40
 8006d70:	443b      	add	r3, r7
 8006d72:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7f9 ffb0 	bl	8000cdc <__aeabi_i2f>
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d80:	3302      	adds	r3, #2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	f7f9 fef1 	bl	8000b70 <__aeabi_fsub>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4618      	mov	r0, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d96:	3206      	adds	r2, #6
 8006d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	f7fa f8a5 	bl	8000eec <__aeabi_fdiv>
 8006da2:	4603      	mov	r3, r0
 8006da4:	4619      	mov	r1, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int i = 0; i < 3; i++) {
 8006dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db0:	3301      	adds	r3, #1
 8006db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	ddd7      	ble.n	8006d6a <MPU6050_Read_Fifo+0x9e>
            }

            mpu6050->temperature      = ((float)raw_data[3] / 340.0f) + 36.53f;
 8006dba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7f9 ff8c 	bl	8000cdc <__aeabi_i2f>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	4927      	ldr	r1, [pc, #156]	@ (8006e64 <MPU6050_Read_Fifo+0x198>)
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fa f88f 	bl	8000eec <__aeabi_fdiv>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	4925      	ldr	r1, [pc, #148]	@ (8006e68 <MPU6050_Read_Fifo+0x19c>)
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7f9 fece 	bl	8000b74 <__addsf3>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	461a      	mov	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	649a      	str	r2, [r3, #72]	@ 0x48

            for (int i = 4; i < 7; i++) {
 8006de0:	2304      	movs	r3, #4
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de4:	e02b      	b.n	8006e3e <MPU6050_Read_Fifo+0x172>
            	// "[i-4]" due to i beginning from 4 and offsetXYZ being size of 3 float elements
            	mpu6050->gyroscope.Gxyz[i - 4] = ((float)raw_data[i]- mpu6050->gyroscope.offsetXYZ[i - 4])/mpu6050->gyroscope.scaleXYZ[i - 4];
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	3340      	adds	r3, #64	@ 0x40
 8006dec:	443b      	add	r3, r7
 8006dee:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7f9 ff72 	bl	8000cdc <__aeabi_i2f>
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	3b04      	subs	r3, #4
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	330a      	adds	r3, #10
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4619      	mov	r1, r3
 8006e08:	f7f9 feb2 	bl	8000b70 <__aeabi_fsub>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e12:	3b04      	subs	r3, #4
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	330e      	adds	r3, #14
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	1f1c      	subs	r4, r3, #4
 8006e22:	4611      	mov	r1, r2
 8006e24:	f7fa f862 	bl	8000eec <__aeabi_fdiv>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	f104 0308 	add.w	r3, r4, #8
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	6059      	str	r1, [r3, #4]
            for (int i = 4; i < 7; i++) {
 8006e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	2b06      	cmp	r3, #6
 8006e42:	ddd0      	ble.n	8006de6 <MPU6050_Read_Fifo+0x11a>
            }


            // Check remaining FIFO count
            fifo_count = MPU6050_Get_FIFO_Count(mpu6050);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ff10 	bl	8006c6a <MPU6050_Get_FIFO_Count>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        while (fifo_count >= FIFO_SAMPLE_SIZE && fifo_count < 1024) {
 8006e4e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e50:	2b0d      	cmp	r3, #13
 8006e52:	d904      	bls.n	8006e5e <MPU6050_Read_Fifo+0x192>
 8006e54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5a:	f4ff af53 	bcc.w	8006d04 <MPU6050_Read_Fifo+0x38>
        }
    }
}
 8006e5e:	3744      	adds	r7, #68	@ 0x44
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd90      	pop	{r4, r7, pc}
 8006e64:	43aa0000 	.word	0x43aa0000
 8006e68:	42121eb8 	.word	0x42121eb8

08006e6c <configure_MPU6050>:
#include <stdio.h>

mpu6050_t mpu6050;

// Function exists to hide driver for main, so it won't get access to inner structure: mpu6050
void configure_MPU6050(void) {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
	// hi2c1 is global
	MPU6050_Init(&mpu6050, &hi2c1);
 8006e72:	490d      	ldr	r1, [pc, #52]	@ (8006ea8 <configure_MPU6050+0x3c>)
 8006e74:	480d      	ldr	r0, [pc, #52]	@ (8006eac <configure_MPU6050+0x40>)
 8006e76:	f7ff fd61 	bl	800693c <MPU6050_Init>
    float offsetXYZ[3] = {188.75, 240, 3361.5}; // enter your values
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb0 <configure_MPU6050+0x44>)
 8006e7c:	f107 030c 	add.w	r3, r7, #12
 8006e80:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    float scaleXYZ[3] = {16358.75, 16312.67, 16721.5}; // enter your values
 8006e86:	4a0b      	ldr	r2, [pc, #44]	@ (8006eb4 <configure_MPU6050+0x48>)
 8006e88:	463b      	mov	r3, r7
 8006e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    MPU6050_Set_Accel_Offset_Scale(&mpu6050, offsetXYZ, scaleXYZ);
 8006e90:	463a      	mov	r2, r7
 8006e92:	f107 030c 	add.w	r3, r7, #12
 8006e96:	4619      	mov	r1, r3
 8006e98:	4804      	ldr	r0, [pc, #16]	@ (8006eac <configure_MPU6050+0x40>)
 8006e9a:	f7ff fe11 	bl	8006ac0 <MPU6050_Set_Accel_Offset_Scale>
}
 8006e9e:	bf00      	nop
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	200001f4 	.word	0x200001f4
 8006eac:	200005f8 	.word	0x200005f8
 8006eb0:	0800c24c 	.word	0x0800c24c
 8006eb4:	0800c258 	.word	0x0800c258

08006eb8 <render_accel>:

float* render_accel (void) {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b09c      	sub	sp, #112	@ 0x70
 8006ebc:	af02      	add	r7, sp, #8
	static float accels[3];
	char buf[100];

	MPU6050_Read_Fifo(&mpu6050);
 8006ebe:	482f      	ldr	r0, [pc, #188]	@ (8006f7c <render_accel+0xc4>)
 8006ec0:	f7ff ff04 	bl	8006ccc <MPU6050_Read_Fifo>
	ssd1306_Fill(0);
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	f000 f907 	bl	80070d8 <ssd1306_Fill>

	ssd1306_SetCursor (0,0);
 8006eca:	2100      	movs	r1, #0
 8006ecc:	2000      	movs	r0, #0
 8006ece:	f000 fa51 	bl	8007374 <ssd1306_SetCursor>
	accels[0] = mpu6050.accelerometer.Axyz[0];
 8006ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8006f7c <render_accel+0xc4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8006f80 <render_accel+0xc8>)
 8006ed8:	6013      	str	r3, [r2, #0]
	sprintf (buf, "Ax: %.2f ", mpu6050.accelerometer.Axyz[0]);
 8006eda:	4b28      	ldr	r3, [pc, #160]	@ (8006f7c <render_accel+0xc4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7f9 faa2 	bl	8000428 <__aeabi_f2d>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	1d38      	adds	r0, r7, #4
 8006eea:	4926      	ldr	r1, [pc, #152]	@ (8006f84 <render_accel+0xcc>)
 8006eec:	f001 fe0a 	bl	8008b04 <siprintf>
	ssd1306_WriteString (buf, Font_14x15, White);
 8006ef0:	4b25      	ldr	r3, [pc, #148]	@ (8006f88 <render_accel+0xd0>)
 8006ef2:	1d38      	adds	r0, r7, #4
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	9200      	str	r2, [sp, #0]
 8006ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006efa:	f000 fa15 	bl	8007328 <ssd1306_WriteString>

	ssd1306_SetCursor (0,20);
 8006efe:	2114      	movs	r1, #20
 8006f00:	2000      	movs	r0, #0
 8006f02:	f000 fa37 	bl	8007374 <ssd1306_SetCursor>
	strcpy(buf, "");
 8006f06:	2300      	movs	r3, #0
 8006f08:	713b      	strb	r3, [r7, #4]
	accels[1] = mpu6050.accelerometer.Axyz[1];
 8006f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006f7c <render_accel+0xc4>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006f80 <render_accel+0xc8>)
 8006f10:	6053      	str	r3, [r2, #4]
	sprintf (buf, "Ay: %.2f ", mpu6050.accelerometer.Axyz[1]);
 8006f12:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <render_accel+0xc4>)
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7f9 fa86 	bl	8000428 <__aeabi_f2d>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	1d38      	adds	r0, r7, #4
 8006f22:	491a      	ldr	r1, [pc, #104]	@ (8006f8c <render_accel+0xd4>)
 8006f24:	f001 fdee 	bl	8008b04 <siprintf>
	ssd1306_WriteString (buf, Font_14x15, White);
 8006f28:	4b17      	ldr	r3, [pc, #92]	@ (8006f88 <render_accel+0xd0>)
 8006f2a:	1d38      	adds	r0, r7, #4
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	9200      	str	r2, [sp, #0]
 8006f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f32:	f000 f9f9 	bl	8007328 <ssd1306_WriteString>

	ssd1306_SetCursor (0,40);
 8006f36:	2128      	movs	r1, #40	@ 0x28
 8006f38:	2000      	movs	r0, #0
 8006f3a:	f000 fa1b 	bl	8007374 <ssd1306_SetCursor>
	strcpy(buf, "");
 8006f3e:	2300      	movs	r3, #0
 8006f40:	713b      	strb	r3, [r7, #4]
	accels[2] = mpu6050.accelerometer.Axyz[2];
 8006f42:	4b0e      	ldr	r3, [pc, #56]	@ (8006f7c <render_accel+0xc4>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	4a0e      	ldr	r2, [pc, #56]	@ (8006f80 <render_accel+0xc8>)
 8006f48:	6093      	str	r3, [r2, #8]
	sprintf (buf, "Az: %.2f ", mpu6050.accelerometer.Axyz[2]);
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f7c <render_accel+0xc4>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7f9 fa6a 	bl	8000428 <__aeabi_f2d>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	1d38      	adds	r0, r7, #4
 8006f5a:	490d      	ldr	r1, [pc, #52]	@ (8006f90 <render_accel+0xd8>)
 8006f5c:	f001 fdd2 	bl	8008b04 <siprintf>
	ssd1306_WriteString (buf, Font_14x15, White);
 8006f60:	4b09      	ldr	r3, [pc, #36]	@ (8006f88 <render_accel+0xd0>)
 8006f62:	1d38      	adds	r0, r7, #4
 8006f64:	2201      	movs	r2, #1
 8006f66:	9200      	str	r2, [sp, #0]
 8006f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f6a:	f000 f9dd 	bl	8007328 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8006f6e:	f000 f8cb 	bl	8007108 <ssd1306_UpdateScreen>
	return accels;
 8006f72:	4b03      	ldr	r3, [pc, #12]	@ (8006f80 <render_accel+0xc8>)
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3768      	adds	r7, #104	@ 0x68
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200005f8 	.word	0x200005f8
 8006f80:	20000648 	.word	0x20000648
 8006f84:	0800c264 	.word	0x0800c264
 8006f88:	0800e55c 	.word	0x0800e55c
 8006f8c:	0800c270 	.word	0x0800c270
 8006f90:	0800c27c 	.word	0x0800c27c

08006f94 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006f98:	bf00      	nop
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af04      	add	r7, sp, #16
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	9302      	str	r3, [sp, #8]
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	1dfb      	adds	r3, r7, #7
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	2301      	movs	r3, #1
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2178      	movs	r1, #120	@ 0x78
 8006fbe:	4803      	ldr	r0, [pc, #12]	@ (8006fcc <ssd1306_WriteCommand+0x2c>)
 8006fc0:	f7fb fb06 	bl	80025d0 <HAL_I2C_Mem_Write>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	200001f4 	.word	0x200001f4

08006fd0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af04      	add	r7, sp, #16
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe2:	9202      	str	r2, [sp, #8]
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	2301      	movs	r3, #1
 8006fec:	2240      	movs	r2, #64	@ 0x40
 8006fee:	2178      	movs	r1, #120	@ 0x78
 8006ff0:	4803      	ldr	r0, [pc, #12]	@ (8007000 <ssd1306_WriteData+0x30>)
 8006ff2:	f7fb faed 	bl	80025d0 <HAL_I2C_Mem_Write>
}
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	200001f4 	.word	0x200001f4

08007004 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8007008:	f7ff ffc4 	bl	8006f94 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800700c:	2064      	movs	r0, #100	@ 0x64
 800700e:	f7fa fab1 	bl	8001574 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8007012:	2000      	movs	r0, #0
 8007014:	f000 f9da 	bl	80073cc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8007018:	2020      	movs	r0, #32
 800701a:	f7ff ffc1 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800701e:	2000      	movs	r0, #0
 8007020:	f7ff ffbe 	bl	8006fa0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007024:	20b0      	movs	r0, #176	@ 0xb0
 8007026:	f7ff ffbb 	bl	8006fa0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800702a:	20c8      	movs	r0, #200	@ 0xc8
 800702c:	f7ff ffb8 	bl	8006fa0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8007030:	2000      	movs	r0, #0
 8007032:	f7ff ffb5 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8007036:	2010      	movs	r0, #16
 8007038:	f7ff ffb2 	bl	8006fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800703c:	2040      	movs	r0, #64	@ 0x40
 800703e:	f7ff ffaf 	bl	8006fa0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8007042:	20ff      	movs	r0, #255	@ 0xff
 8007044:	f000 f9ae 	bl	80073a4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8007048:	20a1      	movs	r0, #161	@ 0xa1
 800704a:	f7ff ffa9 	bl	8006fa0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800704e:	20a6      	movs	r0, #166	@ 0xa6
 8007050:	f7ff ffa6 	bl	8006fa0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8007054:	20a8      	movs	r0, #168	@ 0xa8
 8007056:	f7ff ffa3 	bl	8006fa0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800705a:	203f      	movs	r0, #63	@ 0x3f
 800705c:	f7ff ffa0 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007060:	20a4      	movs	r0, #164	@ 0xa4
 8007062:	f7ff ff9d 	bl	8006fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8007066:	20d3      	movs	r0, #211	@ 0xd3
 8007068:	f7ff ff9a 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800706c:	2000      	movs	r0, #0
 800706e:	f7ff ff97 	bl	8006fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8007072:	20d5      	movs	r0, #213	@ 0xd5
 8007074:	f7ff ff94 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8007078:	20f0      	movs	r0, #240	@ 0xf0
 800707a:	f7ff ff91 	bl	8006fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800707e:	20d9      	movs	r0, #217	@ 0xd9
 8007080:	f7ff ff8e 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8007084:	2022      	movs	r0, #34	@ 0x22
 8007086:	f7ff ff8b 	bl	8006fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800708a:	20da      	movs	r0, #218	@ 0xda
 800708c:	f7ff ff88 	bl	8006fa0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8007090:	2012      	movs	r0, #18
 8007092:	f7ff ff85 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8007096:	20db      	movs	r0, #219	@ 0xdb
 8007098:	f7ff ff82 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800709c:	2020      	movs	r0, #32
 800709e:	f7ff ff7f 	bl	8006fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80070a2:	208d      	movs	r0, #141	@ 0x8d
 80070a4:	f7ff ff7c 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80070a8:	2014      	movs	r0, #20
 80070aa:	f7ff ff79 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80070ae:	2001      	movs	r0, #1
 80070b0:	f000 f98c 	bl	80073cc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80070b4:	2000      	movs	r0, #0
 80070b6:	f000 f80f 	bl	80070d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80070ba:	f000 f825 	bl	8007108 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80070be:	4b05      	ldr	r3, [pc, #20]	@ (80070d4 <ssd1306_Init+0xd0>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80070c4:	4b03      	ldr	r3, [pc, #12]	@ (80070d4 <ssd1306_Init+0xd0>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80070ca:	4b02      	ldr	r3, [pc, #8]	@ (80070d4 <ssd1306_Init+0xd0>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	711a      	strb	r2, [r3, #4]
}
 80070d0:	bf00      	nop
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20000a54 	.word	0x20000a54

080070d8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <ssd1306_Fill+0x14>
 80070e8:	2300      	movs	r3, #0
 80070ea:	e000      	b.n	80070ee <ssd1306_Fill+0x16>
 80070ec:	23ff      	movs	r3, #255	@ 0xff
 80070ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80070f2:	4619      	mov	r1, r3
 80070f4:	4803      	ldr	r0, [pc, #12]	@ (8007104 <ssd1306_Fill+0x2c>)
 80070f6:	f001 fd6a 	bl	8008bce <memset>
}
 80070fa:	bf00      	nop
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20000654 	.word	0x20000654

08007108 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800710e:	2300      	movs	r3, #0
 8007110:	71fb      	strb	r3, [r7, #7]
 8007112:	e016      	b.n	8007142 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	3b50      	subs	r3, #80	@ 0x50
 8007118:	b2db      	uxtb	r3, r3
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff ff40 	bl	8006fa0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8007120:	2000      	movs	r0, #0
 8007122:	f7ff ff3d 	bl	8006fa0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8007126:	2010      	movs	r0, #16
 8007128:	f7ff ff3a 	bl	8006fa0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	01db      	lsls	r3, r3, #7
 8007130:	4a08      	ldr	r2, [pc, #32]	@ (8007154 <ssd1306_UpdateScreen+0x4c>)
 8007132:	4413      	add	r3, r2
 8007134:	2180      	movs	r1, #128	@ 0x80
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff ff4a 	bl	8006fd0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	3301      	adds	r3, #1
 8007140:	71fb      	strb	r3, [r7, #7]
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	2b07      	cmp	r3, #7
 8007146:	d9e5      	bls.n	8007114 <ssd1306_UpdateScreen+0xc>
    }
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000654 	.word	0x20000654

08007158 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	71fb      	strb	r3, [r7, #7]
 8007162:	460b      	mov	r3, r1
 8007164:	71bb      	strb	r3, [r7, #6]
 8007166:	4613      	mov	r3, r2
 8007168:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800716a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800716e:	2b00      	cmp	r3, #0
 8007170:	db3d      	blt.n	80071ee <ssd1306_DrawPixel+0x96>
 8007172:	79bb      	ldrb	r3, [r7, #6]
 8007174:	2b3f      	cmp	r3, #63	@ 0x3f
 8007176:	d83a      	bhi.n	80071ee <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8007178:	797b      	ldrb	r3, [r7, #5]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d11a      	bne.n	80071b4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800717e:	79fa      	ldrb	r2, [r7, #7]
 8007180:	79bb      	ldrb	r3, [r7, #6]
 8007182:	08db      	lsrs	r3, r3, #3
 8007184:	b2d8      	uxtb	r0, r3
 8007186:	4603      	mov	r3, r0
 8007188:	01db      	lsls	r3, r3, #7
 800718a:	4413      	add	r3, r2
 800718c:	4a1a      	ldr	r2, [pc, #104]	@ (80071f8 <ssd1306_DrawPixel+0xa0>)
 800718e:	5cd3      	ldrb	r3, [r2, r3]
 8007190:	b25a      	sxtb	r2, r3
 8007192:	79bb      	ldrb	r3, [r7, #6]
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	2101      	movs	r1, #1
 800719a:	fa01 f303 	lsl.w	r3, r1, r3
 800719e:	b25b      	sxtb	r3, r3
 80071a0:	4313      	orrs	r3, r2
 80071a2:	b259      	sxtb	r1, r3
 80071a4:	79fa      	ldrb	r2, [r7, #7]
 80071a6:	4603      	mov	r3, r0
 80071a8:	01db      	lsls	r3, r3, #7
 80071aa:	4413      	add	r3, r2
 80071ac:	b2c9      	uxtb	r1, r1
 80071ae:	4a12      	ldr	r2, [pc, #72]	@ (80071f8 <ssd1306_DrawPixel+0xa0>)
 80071b0:	54d1      	strb	r1, [r2, r3]
 80071b2:	e01d      	b.n	80071f0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80071b4:	79fa      	ldrb	r2, [r7, #7]
 80071b6:	79bb      	ldrb	r3, [r7, #6]
 80071b8:	08db      	lsrs	r3, r3, #3
 80071ba:	b2d8      	uxtb	r0, r3
 80071bc:	4603      	mov	r3, r0
 80071be:	01db      	lsls	r3, r3, #7
 80071c0:	4413      	add	r3, r2
 80071c2:	4a0d      	ldr	r2, [pc, #52]	@ (80071f8 <ssd1306_DrawPixel+0xa0>)
 80071c4:	5cd3      	ldrb	r3, [r2, r3]
 80071c6:	b25a      	sxtb	r2, r3
 80071c8:	79bb      	ldrb	r3, [r7, #6]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	2101      	movs	r1, #1
 80071d0:	fa01 f303 	lsl.w	r3, r1, r3
 80071d4:	b25b      	sxtb	r3, r3
 80071d6:	43db      	mvns	r3, r3
 80071d8:	b25b      	sxtb	r3, r3
 80071da:	4013      	ands	r3, r2
 80071dc:	b259      	sxtb	r1, r3
 80071de:	79fa      	ldrb	r2, [r7, #7]
 80071e0:	4603      	mov	r3, r0
 80071e2:	01db      	lsls	r3, r3, #7
 80071e4:	4413      	add	r3, r2
 80071e6:	b2c9      	uxtb	r1, r1
 80071e8:	4a03      	ldr	r2, [pc, #12]	@ (80071f8 <ssd1306_DrawPixel+0xa0>)
 80071ea:	54d1      	strb	r1, [r2, r3]
 80071ec:	e000      	b.n	80071f0 <ssd1306_DrawPixel+0x98>
        return;
 80071ee:	bf00      	nop
    }
}
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr
 80071f8:	20000654 	.word	0x20000654

080071fc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b089      	sub	sp, #36	@ 0x24
 8007200:	af00      	add	r7, sp, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4638      	mov	r0, r7
 8007206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800720a:	4623      	mov	r3, r4
 800720c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800720e:	4b45      	ldr	r3, [pc, #276]	@ (8007324 <ssd1306_WriteChar+0x128>)
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	783b      	ldrb	r3, [r7, #0]
 8007216:	4413      	add	r3, r2
 8007218:	2b80      	cmp	r3, #128	@ 0x80
 800721a:	dc06      	bgt.n	800722a <ssd1306_WriteChar+0x2e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800721c:	4b41      	ldr	r3, [pc, #260]	@ (8007324 <ssd1306_WriteChar+0x128>)
 800721e:	885b      	ldrh	r3, [r3, #2]
 8007220:	461a      	mov	r2, r3
 8007222:	787b      	ldrb	r3, [r7, #1]
 8007224:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8007226:	2b40      	cmp	r3, #64	@ 0x40
 8007228:	dd01      	ble.n	800722e <ssd1306_WriteChar+0x32>
    {
        // Not enough space on current line
        return 0;
 800722a:	2300      	movs	r3, #0
 800722c:	e075      	b.n	800731a <ssd1306_WriteChar+0x11e>
    }
    
    uint8_t sh = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]
    if(Font.width > 16)
 8007232:	783b      	ldrb	r3, [r7, #0]
 8007234:	2b10      	cmp	r3, #16
 8007236:	d901      	bls.n	800723c <ssd1306_WriteChar+0x40>
    	sh = 1;
 8007238:	2301      	movs	r3, #1
 800723a:	75fb      	strb	r3, [r7, #23]
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800723c:	2300      	movs	r3, #0
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	e055      	b.n	80072ee <ssd1306_WriteChar+0xf2>
    	uint16_t idx = (ch - 32) * Font.height + i;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	3b20      	subs	r3, #32
 8007246:	b29b      	uxth	r3, r3
 8007248:	787a      	ldrb	r2, [r7, #1]
 800724a:	fb02 f303 	mul.w	r3, r2, r3
 800724e:	b29a      	uxth	r2, r3
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	b29b      	uxth	r3, r3
 8007254:	4413      	add	r3, r2
 8007256:	82bb      	strh	r3, [r7, #20]
        b = Font.data[idx<<sh];
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	8ab9      	ldrh	r1, [r7, #20]
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	fa01 f303 	lsl.w	r3, r1, r3
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	4413      	add	r3, r2
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	613b      	str	r3, [r7, #16]
        for(j = 0; j < Font.width; j++) {
 800726a:	2300      	movs	r3, #0
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	e036      	b.n	80072de <ssd1306_WriteChar+0xe2>
            if((b << j) & 0x8000)  {
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	fa02 f303 	lsl.w	r3, r2, r3
 8007278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d013      	beq.n	80072a8 <ssd1306_WriteChar+0xac>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8007280:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <ssd1306_WriteChar+0x128>)
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b2da      	uxtb	r2, r3
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	4413      	add	r3, r2
 800728c:	b2d8      	uxtb	r0, r3
 800728e:	4b25      	ldr	r3, [pc, #148]	@ (8007324 <ssd1306_WriteChar+0x128>)
 8007290:	885b      	ldrh	r3, [r3, #2]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	4413      	add	r3, r2
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80072a0:	4619      	mov	r1, r3
 80072a2:	f7ff ff59 	bl	8007158 <ssd1306_DrawPixel>
 80072a6:	e017      	b.n	80072d8 <ssd1306_WriteChar+0xdc>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80072a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007324 <ssd1306_WriteChar+0x128>)
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	4413      	add	r3, r2
 80072b4:	b2d8      	uxtb	r0, r3
 80072b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007324 <ssd1306_WriteChar+0x128>)
 80072b8:	885b      	ldrh	r3, [r3, #2]
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	4413      	add	r3, r2
 80072c2:	b2d9      	uxtb	r1, r3
 80072c4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bf0c      	ite	eq
 80072cc:	2301      	moveq	r3, #1
 80072ce:	2300      	movne	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	f7ff ff40 	bl	8007158 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	3301      	adds	r3, #1
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	783b      	ldrb	r3, [r7, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d3c3      	bcc.n	8007270 <ssd1306_WriteChar+0x74>
    for(i = 0; i < Font.height; i++) {
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	3301      	adds	r3, #1
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	787b      	ldrb	r3, [r7, #1]
 80072f0:	461a      	mov	r2, r3
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d3a4      	bcc.n	8007242 <ssd1306_WriteChar+0x46>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80072f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007324 <ssd1306_WriteChar+0x128>)
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	2a00      	cmp	r2, #0
 8007300:	d005      	beq.n	800730e <ssd1306_WriteChar+0x112>
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	7bfa      	ldrb	r2, [r7, #15]
 8007306:	3a20      	subs	r2, #32
 8007308:	440a      	add	r2, r1
 800730a:	7812      	ldrb	r2, [r2, #0]
 800730c:	e000      	b.n	8007310 <ssd1306_WriteChar+0x114>
 800730e:	783a      	ldrb	r2, [r7, #0]
 8007310:	4413      	add	r3, r2
 8007312:	b29a      	uxth	r2, r3
 8007314:	4b03      	ldr	r3, [pc, #12]	@ (8007324 <ssd1306_WriteChar+0x128>)
 8007316:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3724      	adds	r7, #36	@ 0x24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd90      	pop	{r4, r7, pc}
 8007322:	bf00      	nop
 8007324:	20000a54 	.word	0x20000a54

08007328 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af02      	add	r7, sp, #8
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	4638      	mov	r0, r7
 8007332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8007336:	e013      	b.n	8007360 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	7818      	ldrb	r0, [r3, #0]
 800733c:	7e3b      	ldrb	r3, [r7, #24]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	463b      	mov	r3, r7
 8007342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007344:	f7ff ff5a 	bl	80071fc <ssd1306_WriteChar>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d002      	beq.n	800735a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	e008      	b.n	800736c <ssd1306_WriteString+0x44>
        }
        str++;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e7      	bne.n	8007338 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	781b      	ldrb	r3, [r3, #0]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	460a      	mov	r2, r1
 800737e:	71fb      	strb	r3, [r7, #7]
 8007380:	4613      	mov	r3, r2
 8007382:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	b29a      	uxth	r2, r3
 8007388:	4b05      	ldr	r3, [pc, #20]	@ (80073a0 <ssd1306_SetCursor+0x2c>)
 800738a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800738c:	79bb      	ldrb	r3, [r7, #6]
 800738e:	b29a      	uxth	r2, r3
 8007390:	4b03      	ldr	r3, [pc, #12]	@ (80073a0 <ssd1306_SetCursor+0x2c>)
 8007392:	805a      	strh	r2, [r3, #2]
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	bc80      	pop	{r7}
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000a54 	.word	0x20000a54

080073a4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80073ae:	2381      	movs	r3, #129	@ 0x81
 80073b0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fdf3 	bl	8006fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fdef 	bl	8006fa0 <ssd1306_WriteCommand>
}
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80073dc:	23af      	movs	r3, #175	@ 0xaf
 80073de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80073e0:	4b08      	ldr	r3, [pc, #32]	@ (8007404 <ssd1306_SetDisplayOn+0x38>)
 80073e2:	2201      	movs	r2, #1
 80073e4:	715a      	strb	r2, [r3, #5]
 80073e6:	e004      	b.n	80073f2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80073e8:	23ae      	movs	r3, #174	@ 0xae
 80073ea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80073ec:	4b05      	ldr	r3, [pc, #20]	@ (8007404 <ssd1306_SetDisplayOn+0x38>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fdd3 	bl	8006fa0 <ssd1306_WriteCommand>
}
 80073fa:	bf00      	nop
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000a54 	.word	0x20000a54

08007408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800740e:	4b15      	ldr	r3, [pc, #84]	@ (8007464 <HAL_MspInit+0x5c>)
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	4a14      	ldr	r2, [pc, #80]	@ (8007464 <HAL_MspInit+0x5c>)
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	6193      	str	r3, [r2, #24]
 800741a:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <HAL_MspInit+0x5c>)
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	60bb      	str	r3, [r7, #8]
 8007424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007426:	4b0f      	ldr	r3, [pc, #60]	@ (8007464 <HAL_MspInit+0x5c>)
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	4a0e      	ldr	r2, [pc, #56]	@ (8007464 <HAL_MspInit+0x5c>)
 800742c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007430:	61d3      	str	r3, [r2, #28]
 8007432:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <HAL_MspInit+0x5c>)
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800743a:	607b      	str	r3, [r7, #4]
 800743c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800743e:	4b0a      	ldr	r3, [pc, #40]	@ (8007468 <HAL_MspInit+0x60>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	4a04      	ldr	r2, [pc, #16]	@ (8007468 <HAL_MspInit+0x60>)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr
 8007464:	40021000 	.word	0x40021000
 8007468:	40010000 	.word	0x40010000

0800746c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007474:	f107 0310 	add.w	r3, r7, #16
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	609a      	str	r2, [r3, #8]
 8007480:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a15      	ldr	r2, [pc, #84]	@ (80074dc <HAL_I2C_MspInit+0x70>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d123      	bne.n	80074d4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800748c:	4b14      	ldr	r3, [pc, #80]	@ (80074e0 <HAL_I2C_MspInit+0x74>)
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	4a13      	ldr	r2, [pc, #76]	@ (80074e0 <HAL_I2C_MspInit+0x74>)
 8007492:	f043 0308 	orr.w	r3, r3, #8
 8007496:	6193      	str	r3, [r2, #24]
 8007498:	4b11      	ldr	r3, [pc, #68]	@ (80074e0 <HAL_I2C_MspInit+0x74>)
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80074a4:	23c0      	movs	r3, #192	@ 0xc0
 80074a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074a8:	2312      	movs	r3, #18
 80074aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074ac:	2303      	movs	r3, #3
 80074ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074b0:	f107 0310 	add.w	r3, r7, #16
 80074b4:	4619      	mov	r1, r3
 80074b6:	480b      	ldr	r0, [pc, #44]	@ (80074e4 <HAL_I2C_MspInit+0x78>)
 80074b8:	f7fa fa40 	bl	800193c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80074bc:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <HAL_I2C_MspInit+0x74>)
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	4a07      	ldr	r2, [pc, #28]	@ (80074e0 <HAL_I2C_MspInit+0x74>)
 80074c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074c6:	61d3      	str	r3, [r2, #28]
 80074c8:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <HAL_I2C_MspInit+0x74>)
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80074d4:	bf00      	nop
 80074d6:	3720      	adds	r7, #32
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	40005400 	.word	0x40005400
 80074e0:	40021000 	.word	0x40021000
 80074e4:	40010c00 	.word	0x40010c00

080074e8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007534 <HAL_RTC_MspInit+0x4c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d118      	bne.n	800752c <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80074fa:	f7fc f8db 	bl	80036b4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80074fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007538 <HAL_RTC_MspInit+0x50>)
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	4a0d      	ldr	r2, [pc, #52]	@ (8007538 <HAL_RTC_MspInit+0x50>)
 8007504:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007508:	61d3      	str	r3, [r2, #28]
 800750a:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <HAL_RTC_MspInit+0x50>)
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007516:	4b09      	ldr	r3, [pc, #36]	@ (800753c <HAL_RTC_MspInit+0x54>)
 8007518:	2201      	movs	r2, #1
 800751a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800751c:	2200      	movs	r2, #0
 800751e:	2105      	movs	r1, #5
 8007520:	2029      	movs	r0, #41	@ 0x29
 8007522:	f7fa f922 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8007526:	2029      	movs	r0, #41	@ 0x29
 8007528:	f7fa f93b 	bl	80017a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	40002800 	.word	0x40002800
 8007538:	40021000 	.word	0x40021000
 800753c:	4242043c 	.word	0x4242043c

08007540 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	@ 0x28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007548:	f107 0318 	add.w	r3, r7, #24
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	609a      	str	r2, [r3, #8]
 8007554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a3f      	ldr	r2, [pc, #252]	@ (8007658 <HAL_UART_MspInit+0x118>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d13a      	bne.n	80075d6 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007560:	4b3e      	ldr	r3, [pc, #248]	@ (800765c <HAL_UART_MspInit+0x11c>)
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	4a3d      	ldr	r2, [pc, #244]	@ (800765c <HAL_UART_MspInit+0x11c>)
 8007566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800756a:	6193      	str	r3, [r2, #24]
 800756c:	4b3b      	ldr	r3, [pc, #236]	@ (800765c <HAL_UART_MspInit+0x11c>)
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007574:	617b      	str	r3, [r7, #20]
 8007576:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007578:	4b38      	ldr	r3, [pc, #224]	@ (800765c <HAL_UART_MspInit+0x11c>)
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	4a37      	ldr	r2, [pc, #220]	@ (800765c <HAL_UART_MspInit+0x11c>)
 800757e:	f043 0304 	orr.w	r3, r3, #4
 8007582:	6193      	str	r3, [r2, #24]
 8007584:	4b35      	ldr	r3, [pc, #212]	@ (800765c <HAL_UART_MspInit+0x11c>)
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007596:	2302      	movs	r3, #2
 8007598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800759a:	2303      	movs	r3, #3
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800759e:	f107 0318 	add.w	r3, r7, #24
 80075a2:	4619      	mov	r1, r3
 80075a4:	482e      	ldr	r0, [pc, #184]	@ (8007660 <HAL_UART_MspInit+0x120>)
 80075a6:	f7fa f9c9 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80075aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075b8:	f107 0318 	add.w	r3, r7, #24
 80075bc:	4619      	mov	r1, r3
 80075be:	4828      	ldr	r0, [pc, #160]	@ (8007660 <HAL_UART_MspInit+0x120>)
 80075c0:	f7fa f9bc 	bl	800193c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80075c4:	2200      	movs	r2, #0
 80075c6:	2101      	movs	r1, #1
 80075c8:	2025      	movs	r0, #37	@ 0x25
 80075ca:	f7fa f8ce 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80075ce:	2025      	movs	r0, #37	@ 0x25
 80075d0:	f7fa f8e7 	bl	80017a2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80075d4:	e03c      	b.n	8007650 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a22      	ldr	r2, [pc, #136]	@ (8007664 <HAL_UART_MspInit+0x124>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d137      	bne.n	8007650 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80075e0:	4b1e      	ldr	r3, [pc, #120]	@ (800765c <HAL_UART_MspInit+0x11c>)
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	4a1d      	ldr	r2, [pc, #116]	@ (800765c <HAL_UART_MspInit+0x11c>)
 80075e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ea:	61d3      	str	r3, [r2, #28]
 80075ec:	4b1b      	ldr	r3, [pc, #108]	@ (800765c <HAL_UART_MspInit+0x11c>)
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075f8:	4b18      	ldr	r3, [pc, #96]	@ (800765c <HAL_UART_MspInit+0x11c>)
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	4a17      	ldr	r2, [pc, #92]	@ (800765c <HAL_UART_MspInit+0x11c>)
 80075fe:	f043 0304 	orr.w	r3, r3, #4
 8007602:	6193      	str	r3, [r2, #24]
 8007604:	4b15      	ldr	r3, [pc, #84]	@ (800765c <HAL_UART_MspInit+0x11c>)
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007610:	2304      	movs	r3, #4
 8007612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007614:	2302      	movs	r3, #2
 8007616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007618:	2303      	movs	r3, #3
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800761c:	f107 0318 	add.w	r3, r7, #24
 8007620:	4619      	mov	r1, r3
 8007622:	480f      	ldr	r0, [pc, #60]	@ (8007660 <HAL_UART_MspInit+0x120>)
 8007624:	f7fa f98a 	bl	800193c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007628:	2308      	movs	r3, #8
 800762a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007630:	2300      	movs	r3, #0
 8007632:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007634:	f107 0318 	add.w	r3, r7, #24
 8007638:	4619      	mov	r1, r3
 800763a:	4809      	ldr	r0, [pc, #36]	@ (8007660 <HAL_UART_MspInit+0x120>)
 800763c:	f7fa f97e 	bl	800193c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8007640:	2200      	movs	r2, #0
 8007642:	2102      	movs	r1, #2
 8007644:	2026      	movs	r0, #38	@ 0x26
 8007646:	f7fa f890 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800764a:	2026      	movs	r0, #38	@ 0x26
 800764c:	f7fa f8a9 	bl	80017a2 <HAL_NVIC_EnableIRQ>
}
 8007650:	bf00      	nop
 8007652:	3728      	adds	r7, #40	@ 0x28
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40013800 	.word	0x40013800
 800765c:	40021000 	.word	0x40021000
 8007660:	40010800 	.word	0x40010800
 8007664:	40004400 	.word	0x40004400

08007668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <NMI_Handler+0x4>

08007670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007674:	bf00      	nop
 8007676:	e7fd      	b.n	8007674 <HardFault_Handler+0x4>

08007678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800767c:	bf00      	nop
 800767e:	e7fd      	b.n	800767c <MemManage_Handler+0x4>

08007680 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <BusFault_Handler+0x4>

08007688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <UsageFault_Handler+0x4>

08007690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr

0800769c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076a0:	bf00      	nop
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr

080076a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076ac:	bf00      	nop
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076b8:	f7f9 ff40 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076bc:	bf00      	nop
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80076c4:	4802      	ldr	r0, [pc, #8]	@ (80076d0 <USART1_IRQHandler+0x10>)
 80076c6:	f7fd fc71 	bl	8004fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	2000025c 	.word	0x2000025c

080076d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80076d8:	4802      	ldr	r0, [pc, #8]	@ (80076e4 <USART2_IRQHandler+0x10>)
 80076da:	f7fd fc67 	bl	8004fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80076de:	bf00      	nop
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200002a4 	.word	0x200002a4

080076e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_UI_Pin);
 80076ec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80076f0:	f7fa faa8 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Right_UI_Pin);
 80076f4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80076f8:	f7fa faa4 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80076fc:	bf00      	nop
 80076fe:	bd80      	pop	{r7, pc}

08007700 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007704:	4802      	ldr	r0, [pc, #8]	@ (8007710 <RTC_Alarm_IRQHandler+0x10>)
 8007706:	f7fd f863 	bl	80047d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800770a:	bf00      	nop
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000248 	.word	0x20000248

08007714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
  return 1;
 8007718:	2301      	movs	r3, #1
}
 800771a:	4618      	mov	r0, r3
 800771c:	46bd      	mov	sp, r7
 800771e:	bc80      	pop	{r7}
 8007720:	4770      	bx	lr

08007722 <_kill>:

int _kill(int pid, int sig)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800772c:	f001 fab2 	bl	8008c94 <__errno>
 8007730:	4603      	mov	r3, r0
 8007732:	2216      	movs	r2, #22
 8007734:	601a      	str	r2, [r3, #0]
  return -1;
 8007736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <_exit>:

void _exit (int status)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800774a:	f04f 31ff 	mov.w	r1, #4294967295
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7ff ffe7 	bl	8007722 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <_exit+0x12>

08007758 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e00a      	b.n	8007780 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800776a:	f3af 8000 	nop.w
 800776e:	4601      	mov	r1, r0
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	60ba      	str	r2, [r7, #8]
 8007776:	b2ca      	uxtb	r2, r1
 8007778:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	3301      	adds	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	dbf0      	blt.n	800776a <_read+0x12>
  }

  return len;
 8007788:	687b      	ldr	r3, [r7, #4]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b086      	sub	sp, #24
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	e009      	b.n	80077b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	60ba      	str	r2, [r7, #8]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	3301      	adds	r3, #1
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	dbf1      	blt.n	80077a4 <_write+0x12>
  }
  return len;
 80077c0:	687b      	ldr	r3, [r7, #4]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <_close>:

int _close(int file)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80077d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80077f0:	605a      	str	r2, [r3, #4]
  return 0;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr

080077fe <_isatty>:

int _isatty(int file)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007806:	2301      	movs	r3, #1
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	bc80      	pop	{r7}
 8007810:	4770      	bx	lr

08007812 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007812:	b480      	push	{r7}
 8007814:	b085      	sub	sp, #20
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr
	...

0800782c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007834:	4a14      	ldr	r2, [pc, #80]	@ (8007888 <_sbrk+0x5c>)
 8007836:	4b15      	ldr	r3, [pc, #84]	@ (800788c <_sbrk+0x60>)
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007840:	4b13      	ldr	r3, [pc, #76]	@ (8007890 <_sbrk+0x64>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007848:	4b11      	ldr	r3, [pc, #68]	@ (8007890 <_sbrk+0x64>)
 800784a:	4a12      	ldr	r2, [pc, #72]	@ (8007894 <_sbrk+0x68>)
 800784c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800784e:	4b10      	ldr	r3, [pc, #64]	@ (8007890 <_sbrk+0x64>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	429a      	cmp	r2, r3
 800785a:	d207      	bcs.n	800786c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800785c:	f001 fa1a 	bl	8008c94 <__errno>
 8007860:	4603      	mov	r3, r0
 8007862:	220c      	movs	r2, #12
 8007864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295
 800786a:	e009      	b.n	8007880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800786c:	4b08      	ldr	r3, [pc, #32]	@ (8007890 <_sbrk+0x64>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007872:	4b07      	ldr	r3, [pc, #28]	@ (8007890 <_sbrk+0x64>)
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	4a05      	ldr	r2, [pc, #20]	@ (8007890 <_sbrk+0x64>)
 800787c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800787e:	68fb      	ldr	r3, [r7, #12]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20005000 	.word	0x20005000
 800788c:	00000400 	.word	0x00000400
 8007890:	20000a5c 	.word	0x20000a5c
 8007894:	20000bc0 	.word	0x20000bc0

08007898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800789c:	bf00      	nop
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr

080078a4 <set_time>:
uint8_t uart_rx_buf [1] = {0};
uint8_t hhmmss[9] = {0};
uint8_t toFill = 0;
uint8_t prevNum = 0;

void set_time (uint8_t hr, uint8_t min, uint8_t sec) {
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	71fb      	strb	r3, [r7, #7]
 80078ae:	460b      	mov	r3, r1
 80078b0:	71bb      	strb	r3, [r7, #6]
 80078b2:	4613      	mov	r3, r2
 80078b4:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime = {0};
 80078b6:	f107 030c 	add.w	r3, r7, #12
 80078ba:	2100      	movs	r1, #0
 80078bc:	460a      	mov	r2, r1
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	460a      	mov	r2, r1
 80078c2:	709a      	strb	r2, [r3, #2]
	sTime.Hours = hr;
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = min;
 80078c8:	79bb      	ldrb	r3, [r7, #6]
 80078ca:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = sec;
 80078cc:	797b      	ldrb	r3, [r7, #5]
 80078ce:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80078d0:	f107 030c 	add.w	r3, r7, #12
 80078d4:	2200      	movs	r2, #0
 80078d6:	4619      	mov	r1, r3
 80078d8:	4805      	ldr	r0, [pc, #20]	@ (80078f0 <set_time+0x4c>)
 80078da:	f7fc fcff 	bl	80042dc <HAL_RTC_SetTime>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <set_time+0x44>
		Error_Handler();
 80078e4:	f7fe fb2c 	bl	8005f40 <Error_Handler>
	}
}
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20000248 	.word	0x20000248

080078f4 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date, uint8_t day) { // monday = 1
 80078f4:	b590      	push	{r4, r7, lr}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	4611      	mov	r1, r2
 8007900:	461a      	mov	r2, r3
 8007902:	4623      	mov	r3, r4
 8007904:	71fb      	strb	r3, [r7, #7]
 8007906:	4603      	mov	r3, r0
 8007908:	71bb      	strb	r3, [r7, #6]
 800790a:	460b      	mov	r3, r1
 800790c:	717b      	strb	r3, [r7, #5]
 800790e:	4613      	mov	r3, r2
 8007910:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate = {0};
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
	sDate.WeekDay = day;
 8007916:	793b      	ldrb	r3, [r7, #4]
 8007918:	733b      	strb	r3, [r7, #12]
	sDate.Month = month;
 800791a:	79bb      	ldrb	r3, [r7, #6]
 800791c:	737b      	strb	r3, [r7, #13]
	sDate.Date = date;
 800791e:	797b      	ldrb	r3, [r7, #5]
 8007920:	73bb      	strb	r3, [r7, #14]
	sDate.Year = year;
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	73fb      	strb	r3, [r7, #15]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8007926:	f107 030c 	add.w	r3, r7, #12
 800792a:	2200      	movs	r2, #0
 800792c:	4619      	mov	r1, r3
 800792e:	4809      	ldr	r0, [pc, #36]	@ (8007954 <set_date+0x60>)
 8007930:	f7fc fe44 	bl	80045bc <HAL_RTC_SetDate>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <set_date+0x4a>
		Error_Handler();
 800793a:	f7fe fb01 	bl	8005f40 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
 800793e:	f242 3245 	movw	r2, #9029	@ 0x2345
 8007942:	2101      	movs	r1, #1
 8007944:	4803      	ldr	r0, [pc, #12]	@ (8007954 <set_date+0x60>)
 8007946:	f7fd fa17 	bl	8004d78 <HAL_RTCEx_BKUPWrite>
	// If in main loop RTC_BKP_DR1 register contains 0x2345 -> don't update time
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	bd90      	pop	{r4, r7, pc}
 8007952:	bf00      	nop
 8007954:	20000248 	.word	0x20000248

08007958 <get_time_date>:

void get_time_date(char *time, char *date)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af02      	add	r7, sp, #8
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8007962:	f107 0308 	add.w	r3, r7, #8
 8007966:	2200      	movs	r2, #0
 8007968:	4619      	mov	r1, r3
 800796a:	4813      	ldr	r0, [pc, #76]	@ (80079b8 <get_time_date+0x60>)
 800796c:	f7fc fd4e 	bl	800440c <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8007970:	f107 030c 	add.w	r3, r7, #12
 8007974:	2200      	movs	r2, #0
 8007976:	4619      	mov	r1, r3
 8007978:	480f      	ldr	r0, [pc, #60]	@ (80079b8 <get_time_date+0x60>)
 800797a:	f7fc fed5 	bl	8004728 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800797e:	7a3b      	ldrb	r3, [r7, #8]
 8007980:	461a      	mov	r2, r3
 8007982:	7a7b      	ldrb	r3, [r7, #9]
 8007984:	4619      	mov	r1, r3
 8007986:	7abb      	ldrb	r3, [r7, #10]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	460b      	mov	r3, r1
 800798c:	490b      	ldr	r1, [pc, #44]	@ (80079bc <get_time_date+0x64>)
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 f8b8 	bl	8008b04 <siprintf>

  /* Display date Format: dd-mm-yyyy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	461a      	mov	r2, r3
 8007998:	7b7b      	ldrb	r3, [r7, #13]
 800799a:	4619      	mov	r1, r3
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	460b      	mov	r3, r1
 80079a6:	4906      	ldr	r1, [pc, #24]	@ (80079c0 <get_time_date+0x68>)
 80079a8:	6838      	ldr	r0, [r7, #0]
 80079aa:	f001 f8ab 	bl	8008b04 <siprintf>
}
 80079ae:	bf00      	nop
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000248 	.word	0x20000248
 80079bc:	0800c288 	.word	0x0800c288
 80079c0:	0800c298 	.word	0x0800c298

080079c4 <parseTime>:

void parseTime(uint8_t* hhmmss) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	set_time(hhmmss[2], hhmmss[1], hhmmss[0]);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3302      	adds	r3, #2
 80079d0:	7818      	ldrb	r0, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3301      	adds	r3, #1
 80079d6:	7819      	ldrb	r1, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	f7ff ff61 	bl	80078a4 <set_time>
	set_date(hhmmss[6], hhmmss[3], hhmmss[5], hhmmss[4]+1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3306      	adds	r3, #6
 80079e6:	7818      	ldrb	r0, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3303      	adds	r3, #3
 80079ec:	7819      	ldrb	r1, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3305      	adds	r3, #5
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	3301      	adds	r3, #1
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f7ff ff79 	bl	80078f4 <set_date>
	HAL_UART_Transmit(&huart2, &hhmmss[6], 1, 10);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	1d99      	adds	r1, r3, #6
 8007a06:	230a      	movs	r3, #10
 8007a08:	2201      	movs	r2, #1
 8007a0a:	4806      	ldr	r0, [pc, #24]	@ (8007a24 <parseTime+0x60>)
 8007a0c:	f7fd fa1e 	bl	8004e4c <HAL_UART_Transmit>
	// no need to divide as each element of hhmmss is uint8_t == 1 byte
	memset(hhmmss, 0, sizeof(*hhmmss));
 8007a10:	2201      	movs	r2, #1
 8007a12:	2100      	movs	r1, #0
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 f8da 	bl	8008bce <memset>
}
 8007a1a:	bf00      	nop
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	200002a4 	.word	0x200002a4

08007a28 <render_time>:

void render_time(void) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af02      	add	r7, sp, #8
	// HH:MM:SS\n
	char time[9];
	// yyyy:mm:dd\n
	char date[11];
	get_time_date(time, date);
 8007a2e:	463a      	mov	r2, r7
 8007a30:	f107 030c 	add.w	r3, r7, #12
 8007a34:	4611      	mov	r1, r2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff ff8e 	bl	8007958 <get_time_date>
	// Forward byte to UART2
	//HAL_UART_Transmit(&huart2, (uint8_t*)time, 8, 100);
	ssd1306_Fill(0);
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f7ff fb4b 	bl	80070d8 <ssd1306_Fill>
	ssd1306_SetCursor (0,0);
 8007a42:	2100      	movs	r1, #0
 8007a44:	2000      	movs	r0, #0
 8007a46:	f7ff fc95 	bl	8007374 <ssd1306_SetCursor>
	ssd1306_WriteString (time, Font_14x15, White);
 8007a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a7c <render_time+0x54>)
 8007a4c:	f107 000c 	add.w	r0, r7, #12
 8007a50:	2201      	movs	r2, #1
 8007a52:	9200      	str	r2, [sp, #0]
 8007a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a56:	f7ff fc67 	bl	8007328 <ssd1306_WriteString>
	ssd1306_SetCursor (0,30);
 8007a5a:	211e      	movs	r1, #30
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	f7ff fc89 	bl	8007374 <ssd1306_SetCursor>
	ssd1306_WriteString (date, Font_7x10, White);
 8007a62:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <render_time+0x58>)
 8007a64:	4638      	mov	r0, r7
 8007a66:	2201      	movs	r2, #1
 8007a68:	9200      	str	r2, [sp, #0]
 8007a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a6c:	f7ff fc5c 	bl	8007328 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8007a70:	f7ff fb4a 	bl	8007108 <ssd1306_UpdateScreen>
}
 8007a74:	bf00      	nop
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	0800e55c 	.word	0x0800e55c
 8007a80:	0800e568 	.word	0x0800e568

08007a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007a84:	f7ff ff08 	bl	8007898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007a88:	480b      	ldr	r0, [pc, #44]	@ (8007ab8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007a8a:	490c      	ldr	r1, [pc, #48]	@ (8007abc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8007ac0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a90:	e002      	b.n	8007a98 <LoopCopyDataInit>

08007a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a96:	3304      	adds	r3, #4

08007a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a9c:	d3f9      	bcc.n	8007a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a9e:	4a09      	ldr	r2, [pc, #36]	@ (8007ac4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007aa0:	4c09      	ldr	r4, [pc, #36]	@ (8007ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007aa4:	e001      	b.n	8007aaa <LoopFillZerobss>

08007aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007aa8:	3204      	adds	r2, #4

08007aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007aac:	d3fb      	bcc.n	8007aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007aae:	f001 f8f7 	bl	8008ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007ab2:	f7fd ffe5 	bl	8005a80 <main>
  bx lr
 8007ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8007ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007abc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8007ac0:	0800e9c4 	.word	0x0800e9c4
  ldr r2, =_sbss
 8007ac4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8007ac8:	20000bbc 	.word	0x20000bbc

08007acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007acc:	e7fe      	b.n	8007acc <ADC1_2_IRQHandler>
	...

08007ad0 <malloc>:
 8007ad0:	4b02      	ldr	r3, [pc, #8]	@ (8007adc <malloc+0xc>)
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	f000 b82d 	b.w	8007b34 <_malloc_r>
 8007ada:	bf00      	nop
 8007adc:	20000018 	.word	0x20000018

08007ae0 <free>:
 8007ae0:	4b02      	ldr	r3, [pc, #8]	@ (8007aec <free+0xc>)
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f001 bf7f 	b.w	80099e8 <_free_r>
 8007aea:	bf00      	nop
 8007aec:	20000018 	.word	0x20000018

08007af0 <sbrk_aligned>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	4e0f      	ldr	r6, [pc, #60]	@ (8007b30 <sbrk_aligned+0x40>)
 8007af4:	460c      	mov	r4, r1
 8007af6:	6831      	ldr	r1, [r6, #0]
 8007af8:	4605      	mov	r5, r0
 8007afa:	b911      	cbnz	r1, 8007b02 <sbrk_aligned+0x12>
 8007afc:	f001 f8a8 	bl	8008c50 <_sbrk_r>
 8007b00:	6030      	str	r0, [r6, #0]
 8007b02:	4621      	mov	r1, r4
 8007b04:	4628      	mov	r0, r5
 8007b06:	f001 f8a3 	bl	8008c50 <_sbrk_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	d103      	bne.n	8007b16 <sbrk_aligned+0x26>
 8007b0e:	f04f 34ff 	mov.w	r4, #4294967295
 8007b12:	4620      	mov	r0, r4
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
 8007b16:	1cc4      	adds	r4, r0, #3
 8007b18:	f024 0403 	bic.w	r4, r4, #3
 8007b1c:	42a0      	cmp	r0, r4
 8007b1e:	d0f8      	beq.n	8007b12 <sbrk_aligned+0x22>
 8007b20:	1a21      	subs	r1, r4, r0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f001 f894 	bl	8008c50 <_sbrk_r>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d1f2      	bne.n	8007b12 <sbrk_aligned+0x22>
 8007b2c:	e7ef      	b.n	8007b0e <sbrk_aligned+0x1e>
 8007b2e:	bf00      	nop
 8007b30:	20000a70 	.word	0x20000a70

08007b34 <_malloc_r>:
 8007b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	1ccd      	adds	r5, r1, #3
 8007b3a:	f025 0503 	bic.w	r5, r5, #3
 8007b3e:	3508      	adds	r5, #8
 8007b40:	2d0c      	cmp	r5, #12
 8007b42:	bf38      	it	cc
 8007b44:	250c      	movcc	r5, #12
 8007b46:	2d00      	cmp	r5, #0
 8007b48:	4606      	mov	r6, r0
 8007b4a:	db01      	blt.n	8007b50 <_malloc_r+0x1c>
 8007b4c:	42a9      	cmp	r1, r5
 8007b4e:	d904      	bls.n	8007b5a <_malloc_r+0x26>
 8007b50:	230c      	movs	r3, #12
 8007b52:	6033      	str	r3, [r6, #0]
 8007b54:	2000      	movs	r0, #0
 8007b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c30 <_malloc_r+0xfc>
 8007b5e:	f000 f869 	bl	8007c34 <__malloc_lock>
 8007b62:	f8d8 3000 	ldr.w	r3, [r8]
 8007b66:	461c      	mov	r4, r3
 8007b68:	bb44      	cbnz	r4, 8007bbc <_malloc_r+0x88>
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff ffbf 	bl	8007af0 <sbrk_aligned>
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	4604      	mov	r4, r0
 8007b76:	d158      	bne.n	8007c2a <_malloc_r+0xf6>
 8007b78:	f8d8 4000 	ldr.w	r4, [r8]
 8007b7c:	4627      	mov	r7, r4
 8007b7e:	2f00      	cmp	r7, #0
 8007b80:	d143      	bne.n	8007c0a <_malloc_r+0xd6>
 8007b82:	2c00      	cmp	r4, #0
 8007b84:	d04b      	beq.n	8007c1e <_malloc_r+0xea>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	4639      	mov	r1, r7
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	eb04 0903 	add.w	r9, r4, r3
 8007b90:	f001 f85e 	bl	8008c50 <_sbrk_r>
 8007b94:	4581      	cmp	r9, r0
 8007b96:	d142      	bne.n	8007c1e <_malloc_r+0xea>
 8007b98:	6821      	ldr	r1, [r4, #0]
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	1a6d      	subs	r5, r5, r1
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7ff ffa6 	bl	8007af0 <sbrk_aligned>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d03a      	beq.n	8007c1e <_malloc_r+0xea>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	442b      	add	r3, r5
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	bb62      	cbnz	r2, 8007c10 <_malloc_r+0xdc>
 8007bb6:	f8c8 7000 	str.w	r7, [r8]
 8007bba:	e00f      	b.n	8007bdc <_malloc_r+0xa8>
 8007bbc:	6822      	ldr	r2, [r4, #0]
 8007bbe:	1b52      	subs	r2, r2, r5
 8007bc0:	d420      	bmi.n	8007c04 <_malloc_r+0xd0>
 8007bc2:	2a0b      	cmp	r2, #11
 8007bc4:	d917      	bls.n	8007bf6 <_malloc_r+0xc2>
 8007bc6:	1961      	adds	r1, r4, r5
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	6025      	str	r5, [r4, #0]
 8007bcc:	bf18      	it	ne
 8007bce:	6059      	strne	r1, [r3, #4]
 8007bd0:	6863      	ldr	r3, [r4, #4]
 8007bd2:	bf08      	it	eq
 8007bd4:	f8c8 1000 	streq.w	r1, [r8]
 8007bd8:	5162      	str	r2, [r4, r5]
 8007bda:	604b      	str	r3, [r1, #4]
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 f82f 	bl	8007c40 <__malloc_unlock>
 8007be2:	f104 000b 	add.w	r0, r4, #11
 8007be6:	1d23      	adds	r3, r4, #4
 8007be8:	f020 0007 	bic.w	r0, r0, #7
 8007bec:	1ac2      	subs	r2, r0, r3
 8007bee:	bf1c      	itt	ne
 8007bf0:	1a1b      	subne	r3, r3, r0
 8007bf2:	50a3      	strne	r3, [r4, r2]
 8007bf4:	e7af      	b.n	8007b56 <_malloc_r+0x22>
 8007bf6:	6862      	ldr	r2, [r4, #4]
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	bf0c      	ite	eq
 8007bfc:	f8c8 2000 	streq.w	r2, [r8]
 8007c00:	605a      	strne	r2, [r3, #4]
 8007c02:	e7eb      	b.n	8007bdc <_malloc_r+0xa8>
 8007c04:	4623      	mov	r3, r4
 8007c06:	6864      	ldr	r4, [r4, #4]
 8007c08:	e7ae      	b.n	8007b68 <_malloc_r+0x34>
 8007c0a:	463c      	mov	r4, r7
 8007c0c:	687f      	ldr	r7, [r7, #4]
 8007c0e:	e7b6      	b.n	8007b7e <_malloc_r+0x4a>
 8007c10:	461a      	mov	r2, r3
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d1fb      	bne.n	8007c10 <_malloc_r+0xdc>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	6053      	str	r3, [r2, #4]
 8007c1c:	e7de      	b.n	8007bdc <_malloc_r+0xa8>
 8007c1e:	230c      	movs	r3, #12
 8007c20:	4630      	mov	r0, r6
 8007c22:	6033      	str	r3, [r6, #0]
 8007c24:	f000 f80c 	bl	8007c40 <__malloc_unlock>
 8007c28:	e794      	b.n	8007b54 <_malloc_r+0x20>
 8007c2a:	6005      	str	r5, [r0, #0]
 8007c2c:	e7d6      	b.n	8007bdc <_malloc_r+0xa8>
 8007c2e:	bf00      	nop
 8007c30:	20000a74 	.word	0x20000a74

08007c34 <__malloc_lock>:
 8007c34:	4801      	ldr	r0, [pc, #4]	@ (8007c3c <__malloc_lock+0x8>)
 8007c36:	f001 b858 	b.w	8008cea <__retarget_lock_acquire_recursive>
 8007c3a:	bf00      	nop
 8007c3c:	20000bb8 	.word	0x20000bb8

08007c40 <__malloc_unlock>:
 8007c40:	4801      	ldr	r0, [pc, #4]	@ (8007c48 <__malloc_unlock+0x8>)
 8007c42:	f001 b853 	b.w	8008cec <__retarget_lock_release_recursive>
 8007c46:	bf00      	nop
 8007c48:	20000bb8 	.word	0x20000bb8

08007c4c <__cvt>:
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c52:	461d      	mov	r5, r3
 8007c54:	bfbb      	ittet	lt
 8007c56:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007c5a:	461d      	movlt	r5, r3
 8007c5c:	2300      	movge	r3, #0
 8007c5e:	232d      	movlt	r3, #45	@ 0x2d
 8007c60:	b088      	sub	sp, #32
 8007c62:	4614      	mov	r4, r2
 8007c64:	bfb8      	it	lt
 8007c66:	4614      	movlt	r4, r2
 8007c68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007c6a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007c6c:	7013      	strb	r3, [r2, #0]
 8007c6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c70:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007c74:	f023 0820 	bic.w	r8, r3, #32
 8007c78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c7c:	d005      	beq.n	8007c8a <__cvt+0x3e>
 8007c7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c82:	d100      	bne.n	8007c86 <__cvt+0x3a>
 8007c84:	3601      	adds	r6, #1
 8007c86:	2302      	movs	r3, #2
 8007c88:	e000      	b.n	8007c8c <__cvt+0x40>
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	aa07      	add	r2, sp, #28
 8007c8e:	9204      	str	r2, [sp, #16]
 8007c90:	aa06      	add	r2, sp, #24
 8007c92:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007c96:	e9cd 3600 	strd	r3, r6, [sp]
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	462b      	mov	r3, r5
 8007c9e:	f001 f8cf 	bl	8008e40 <_dtoa_r>
 8007ca2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ca6:	4607      	mov	r7, r0
 8007ca8:	d119      	bne.n	8007cde <__cvt+0x92>
 8007caa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007cac:	07db      	lsls	r3, r3, #31
 8007cae:	d50e      	bpl.n	8007cce <__cvt+0x82>
 8007cb0:	eb00 0906 	add.w	r9, r0, r6
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4620      	mov	r0, r4
 8007cba:	4629      	mov	r1, r5
 8007cbc:	f7f8 fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8007cc0:	b108      	cbz	r0, 8007cc6 <__cvt+0x7a>
 8007cc2:	f8cd 901c 	str.w	r9, [sp, #28]
 8007cc6:	2230      	movs	r2, #48	@ 0x30
 8007cc8:	9b07      	ldr	r3, [sp, #28]
 8007cca:	454b      	cmp	r3, r9
 8007ccc:	d31e      	bcc.n	8007d0c <__cvt+0xc0>
 8007cce:	4638      	mov	r0, r7
 8007cd0:	9b07      	ldr	r3, [sp, #28]
 8007cd2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007cd4:	1bdb      	subs	r3, r3, r7
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	b008      	add	sp, #32
 8007cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cde:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ce2:	eb00 0906 	add.w	r9, r0, r6
 8007ce6:	d1e5      	bne.n	8007cb4 <__cvt+0x68>
 8007ce8:	7803      	ldrb	r3, [r0, #0]
 8007cea:	2b30      	cmp	r3, #48	@ 0x30
 8007cec:	d10a      	bne.n	8007d04 <__cvt+0xb8>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f7f8 fe57 	bl	80009a8 <__aeabi_dcmpeq>
 8007cfa:	b918      	cbnz	r0, 8007d04 <__cvt+0xb8>
 8007cfc:	f1c6 0601 	rsb	r6, r6, #1
 8007d00:	f8ca 6000 	str.w	r6, [sl]
 8007d04:	f8da 3000 	ldr.w	r3, [sl]
 8007d08:	4499      	add	r9, r3
 8007d0a:	e7d3      	b.n	8007cb4 <__cvt+0x68>
 8007d0c:	1c59      	adds	r1, r3, #1
 8007d0e:	9107      	str	r1, [sp, #28]
 8007d10:	701a      	strb	r2, [r3, #0]
 8007d12:	e7d9      	b.n	8007cc8 <__cvt+0x7c>

08007d14 <__exponent>:
 8007d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d16:	2900      	cmp	r1, #0
 8007d18:	bfb6      	itet	lt
 8007d1a:	232d      	movlt	r3, #45	@ 0x2d
 8007d1c:	232b      	movge	r3, #43	@ 0x2b
 8007d1e:	4249      	neglt	r1, r1
 8007d20:	2909      	cmp	r1, #9
 8007d22:	7002      	strb	r2, [r0, #0]
 8007d24:	7043      	strb	r3, [r0, #1]
 8007d26:	dd29      	ble.n	8007d7c <__exponent+0x68>
 8007d28:	f10d 0307 	add.w	r3, sp, #7
 8007d2c:	461d      	mov	r5, r3
 8007d2e:	270a      	movs	r7, #10
 8007d30:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d34:	461a      	mov	r2, r3
 8007d36:	fb07 1416 	mls	r4, r7, r6, r1
 8007d3a:	3430      	adds	r4, #48	@ 0x30
 8007d3c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d40:	460c      	mov	r4, r1
 8007d42:	2c63      	cmp	r4, #99	@ 0x63
 8007d44:	4631      	mov	r1, r6
 8007d46:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d4a:	dcf1      	bgt.n	8007d30 <__exponent+0x1c>
 8007d4c:	3130      	adds	r1, #48	@ 0x30
 8007d4e:	1e94      	subs	r4, r2, #2
 8007d50:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d54:	4623      	mov	r3, r4
 8007d56:	1c41      	adds	r1, r0, #1
 8007d58:	42ab      	cmp	r3, r5
 8007d5a:	d30a      	bcc.n	8007d72 <__exponent+0x5e>
 8007d5c:	f10d 0309 	add.w	r3, sp, #9
 8007d60:	1a9b      	subs	r3, r3, r2
 8007d62:	42ac      	cmp	r4, r5
 8007d64:	bf88      	it	hi
 8007d66:	2300      	movhi	r3, #0
 8007d68:	3302      	adds	r3, #2
 8007d6a:	4403      	add	r3, r0
 8007d6c:	1a18      	subs	r0, r3, r0
 8007d6e:	b003      	add	sp, #12
 8007d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d72:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d76:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d7a:	e7ed      	b.n	8007d58 <__exponent+0x44>
 8007d7c:	2330      	movs	r3, #48	@ 0x30
 8007d7e:	3130      	adds	r1, #48	@ 0x30
 8007d80:	7083      	strb	r3, [r0, #2]
 8007d82:	70c1      	strb	r1, [r0, #3]
 8007d84:	1d03      	adds	r3, r0, #4
 8007d86:	e7f1      	b.n	8007d6c <__exponent+0x58>

08007d88 <_printf_float>:
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	b091      	sub	sp, #68	@ 0x44
 8007d8e:	460c      	mov	r4, r1
 8007d90:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007d94:	4616      	mov	r6, r2
 8007d96:	461f      	mov	r7, r3
 8007d98:	4605      	mov	r5, r0
 8007d9a:	f000 ff21 	bl	8008be0 <_localeconv_r>
 8007d9e:	6803      	ldr	r3, [r0, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	9308      	str	r3, [sp, #32]
 8007da4:	f7f8 f9d4 	bl	8000150 <strlen>
 8007da8:	2300      	movs	r3, #0
 8007daa:	930e      	str	r3, [sp, #56]	@ 0x38
 8007dac:	f8d8 3000 	ldr.w	r3, [r8]
 8007db0:	9009      	str	r0, [sp, #36]	@ 0x24
 8007db2:	3307      	adds	r3, #7
 8007db4:	f023 0307 	bic.w	r3, r3, #7
 8007db8:	f103 0208 	add.w	r2, r3, #8
 8007dbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007dc0:	f8d4 b000 	ldr.w	fp, [r4]
 8007dc4:	f8c8 2000 	str.w	r2, [r8]
 8007dc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dcc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007dd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dd2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007de2:	4b9c      	ldr	r3, [pc, #624]	@ (8008054 <_printf_float+0x2cc>)
 8007de4:	f7f8 fe12 	bl	8000a0c <__aeabi_dcmpun>
 8007de8:	bb70      	cbnz	r0, 8007e48 <_printf_float+0xc0>
 8007dea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dee:	f04f 32ff 	mov.w	r2, #4294967295
 8007df2:	4b98      	ldr	r3, [pc, #608]	@ (8008054 <_printf_float+0x2cc>)
 8007df4:	f7f8 fdec 	bl	80009d0 <__aeabi_dcmple>
 8007df8:	bb30      	cbnz	r0, 8007e48 <_printf_float+0xc0>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4640      	mov	r0, r8
 8007e00:	4649      	mov	r1, r9
 8007e02:	f7f8 fddb 	bl	80009bc <__aeabi_dcmplt>
 8007e06:	b110      	cbz	r0, 8007e0e <_printf_float+0x86>
 8007e08:	232d      	movs	r3, #45	@ 0x2d
 8007e0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e0e:	4a92      	ldr	r2, [pc, #584]	@ (8008058 <_printf_float+0x2d0>)
 8007e10:	4b92      	ldr	r3, [pc, #584]	@ (800805c <_printf_float+0x2d4>)
 8007e12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e16:	bf8c      	ite	hi
 8007e18:	4690      	movhi	r8, r2
 8007e1a:	4698      	movls	r8, r3
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	f04f 0900 	mov.w	r9, #0
 8007e22:	6123      	str	r3, [r4, #16]
 8007e24:	f02b 0304 	bic.w	r3, fp, #4
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	4633      	mov	r3, r6
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	9700      	str	r7, [sp, #0]
 8007e32:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007e34:	f000 f9d4 	bl	80081e0 <_printf_common>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	f040 8090 	bne.w	8007f5e <_printf_float+0x1d6>
 8007e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e42:	b011      	add	sp, #68	@ 0x44
 8007e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	4642      	mov	r2, r8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	4649      	mov	r1, r9
 8007e50:	f7f8 fddc 	bl	8000a0c <__aeabi_dcmpun>
 8007e54:	b148      	cbz	r0, 8007e6a <_printf_float+0xe2>
 8007e56:	464b      	mov	r3, r9
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bfb8      	it	lt
 8007e5c:	232d      	movlt	r3, #45	@ 0x2d
 8007e5e:	4a80      	ldr	r2, [pc, #512]	@ (8008060 <_printf_float+0x2d8>)
 8007e60:	bfb8      	it	lt
 8007e62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e66:	4b7f      	ldr	r3, [pc, #508]	@ (8008064 <_printf_float+0x2dc>)
 8007e68:	e7d3      	b.n	8007e12 <_printf_float+0x8a>
 8007e6a:	6863      	ldr	r3, [r4, #4]
 8007e6c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	d13f      	bne.n	8007ef4 <_printf_float+0x16c>
 8007e74:	2306      	movs	r3, #6
 8007e76:	6063      	str	r3, [r4, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	9206      	str	r2, [sp, #24]
 8007e82:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e84:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007e88:	aa0d      	add	r2, sp, #52	@ 0x34
 8007e8a:	9203      	str	r2, [sp, #12]
 8007e8c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007e90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e94:	6863      	ldr	r3, [r4, #4]
 8007e96:	4642      	mov	r2, r8
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007ea0:	f7ff fed4 	bl	8007c4c <__cvt>
 8007ea4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ea6:	4680      	mov	r8, r0
 8007ea8:	2947      	cmp	r1, #71	@ 0x47
 8007eaa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007eac:	d128      	bne.n	8007f00 <_printf_float+0x178>
 8007eae:	1cc8      	adds	r0, r1, #3
 8007eb0:	db02      	blt.n	8007eb8 <_printf_float+0x130>
 8007eb2:	6863      	ldr	r3, [r4, #4]
 8007eb4:	4299      	cmp	r1, r3
 8007eb6:	dd40      	ble.n	8007f3a <_printf_float+0x1b2>
 8007eb8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ebc:	fa5f fa8a 	uxtb.w	sl, sl
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	3901      	subs	r1, #1
 8007ec4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ec8:	910d      	str	r1, [sp, #52]	@ 0x34
 8007eca:	f7ff ff23 	bl	8007d14 <__exponent>
 8007ece:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ed0:	4681      	mov	r9, r0
 8007ed2:	1813      	adds	r3, r2, r0
 8007ed4:	2a01      	cmp	r2, #1
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	dc02      	bgt.n	8007ee0 <_printf_float+0x158>
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	07d2      	lsls	r2, r2, #31
 8007ede:	d501      	bpl.n	8007ee4 <_printf_float+0x15c>
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d09e      	beq.n	8007e2a <_printf_float+0xa2>
 8007eec:	232d      	movs	r3, #45	@ 0x2d
 8007eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef2:	e79a      	b.n	8007e2a <_printf_float+0xa2>
 8007ef4:	2947      	cmp	r1, #71	@ 0x47
 8007ef6:	d1bf      	bne.n	8007e78 <_printf_float+0xf0>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1bd      	bne.n	8007e78 <_printf_float+0xf0>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e7ba      	b.n	8007e76 <_printf_float+0xee>
 8007f00:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f04:	d9dc      	bls.n	8007ec0 <_printf_float+0x138>
 8007f06:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007f0a:	d118      	bne.n	8007f3e <_printf_float+0x1b6>
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	dd0b      	ble.n	8007f2a <_printf_float+0x1a2>
 8007f12:	6121      	str	r1, [r4, #16]
 8007f14:	b913      	cbnz	r3, 8007f1c <_printf_float+0x194>
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	07d0      	lsls	r0, r2, #31
 8007f1a:	d502      	bpl.n	8007f22 <_printf_float+0x19a>
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	440b      	add	r3, r1
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	f04f 0900 	mov.w	r9, #0
 8007f26:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f28:	e7dc      	b.n	8007ee4 <_printf_float+0x15c>
 8007f2a:	b913      	cbnz	r3, 8007f32 <_printf_float+0x1aa>
 8007f2c:	6822      	ldr	r2, [r4, #0]
 8007f2e:	07d2      	lsls	r2, r2, #31
 8007f30:	d501      	bpl.n	8007f36 <_printf_float+0x1ae>
 8007f32:	3302      	adds	r3, #2
 8007f34:	e7f4      	b.n	8007f20 <_printf_float+0x198>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e7f2      	b.n	8007f20 <_printf_float+0x198>
 8007f3a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f40:	4299      	cmp	r1, r3
 8007f42:	db05      	blt.n	8007f50 <_printf_float+0x1c8>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	6121      	str	r1, [r4, #16]
 8007f48:	07d8      	lsls	r0, r3, #31
 8007f4a:	d5ea      	bpl.n	8007f22 <_printf_float+0x19a>
 8007f4c:	1c4b      	adds	r3, r1, #1
 8007f4e:	e7e7      	b.n	8007f20 <_printf_float+0x198>
 8007f50:	2900      	cmp	r1, #0
 8007f52:	bfcc      	ite	gt
 8007f54:	2201      	movgt	r2, #1
 8007f56:	f1c1 0202 	rsble	r2, r1, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	e7e0      	b.n	8007f20 <_printf_float+0x198>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	055a      	lsls	r2, r3, #21
 8007f62:	d407      	bmi.n	8007f74 <_printf_float+0x1ec>
 8007f64:	6923      	ldr	r3, [r4, #16]
 8007f66:	4642      	mov	r2, r8
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	d12b      	bne.n	8007fca <_printf_float+0x242>
 8007f72:	e764      	b.n	8007e3e <_printf_float+0xb6>
 8007f74:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f78:	f240 80dc 	bls.w	8008134 <_printf_float+0x3ac>
 8007f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f80:	2200      	movs	r2, #0
 8007f82:	2300      	movs	r3, #0
 8007f84:	f7f8 fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d033      	beq.n	8007ff4 <_printf_float+0x26c>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	4a35      	ldr	r2, [pc, #212]	@ (8008068 <_printf_float+0x2e0>)
 8007f94:	47b8      	blx	r7
 8007f96:	3001      	adds	r0, #1
 8007f98:	f43f af51 	beq.w	8007e3e <_printf_float+0xb6>
 8007f9c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007fa0:	4543      	cmp	r3, r8
 8007fa2:	db02      	blt.n	8007faa <_printf_float+0x222>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	07d8      	lsls	r0, r3, #31
 8007fa8:	d50f      	bpl.n	8007fca <_printf_float+0x242>
 8007faa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b8      	blx	r7
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	f43f af42 	beq.w	8007e3e <_printf_float+0xb6>
 8007fba:	f04f 0900 	mov.w	r9, #0
 8007fbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fc2:	f104 0a1a 	add.w	sl, r4, #26
 8007fc6:	45c8      	cmp	r8, r9
 8007fc8:	dc09      	bgt.n	8007fde <_printf_float+0x256>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	079b      	lsls	r3, r3, #30
 8007fce:	f100 8102 	bmi.w	80081d6 <_printf_float+0x44e>
 8007fd2:	68e0      	ldr	r0, [r4, #12]
 8007fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fd6:	4298      	cmp	r0, r3
 8007fd8:	bfb8      	it	lt
 8007fda:	4618      	movlt	r0, r3
 8007fdc:	e731      	b.n	8007e42 <_printf_float+0xba>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f af28 	beq.w	8007e3e <_printf_float+0xb6>
 8007fee:	f109 0901 	add.w	r9, r9, #1
 8007ff2:	e7e8      	b.n	8007fc6 <_printf_float+0x23e>
 8007ff4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	dc38      	bgt.n	800806c <_printf_float+0x2e4>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	4a19      	ldr	r2, [pc, #100]	@ (8008068 <_printf_float+0x2e0>)
 8008002:	47b8      	blx	r7
 8008004:	3001      	adds	r0, #1
 8008006:	f43f af1a 	beq.w	8007e3e <_printf_float+0xb6>
 800800a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800800e:	ea59 0303 	orrs.w	r3, r9, r3
 8008012:	d102      	bne.n	800801a <_printf_float+0x292>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	07d9      	lsls	r1, r3, #31
 8008018:	d5d7      	bpl.n	8007fca <_printf_float+0x242>
 800801a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800801e:	4631      	mov	r1, r6
 8008020:	4628      	mov	r0, r5
 8008022:	47b8      	blx	r7
 8008024:	3001      	adds	r0, #1
 8008026:	f43f af0a 	beq.w	8007e3e <_printf_float+0xb6>
 800802a:	f04f 0a00 	mov.w	sl, #0
 800802e:	f104 0b1a 	add.w	fp, r4, #26
 8008032:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008034:	425b      	negs	r3, r3
 8008036:	4553      	cmp	r3, sl
 8008038:	dc01      	bgt.n	800803e <_printf_float+0x2b6>
 800803a:	464b      	mov	r3, r9
 800803c:	e793      	b.n	8007f66 <_printf_float+0x1de>
 800803e:	2301      	movs	r3, #1
 8008040:	465a      	mov	r2, fp
 8008042:	4631      	mov	r1, r6
 8008044:	4628      	mov	r0, r5
 8008046:	47b8      	blx	r7
 8008048:	3001      	adds	r0, #1
 800804a:	f43f aef8 	beq.w	8007e3e <_printf_float+0xb6>
 800804e:	f10a 0a01 	add.w	sl, sl, #1
 8008052:	e7ee      	b.n	8008032 <_printf_float+0x2aa>
 8008054:	7fefffff 	.word	0x7fefffff
 8008058:	0800e590 	.word	0x0800e590
 800805c:	0800e58c 	.word	0x0800e58c
 8008060:	0800e598 	.word	0x0800e598
 8008064:	0800e594 	.word	0x0800e594
 8008068:	0800e59c 	.word	0x0800e59c
 800806c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800806e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008072:	4553      	cmp	r3, sl
 8008074:	bfa8      	it	ge
 8008076:	4653      	movge	r3, sl
 8008078:	2b00      	cmp	r3, #0
 800807a:	4699      	mov	r9, r3
 800807c:	dc36      	bgt.n	80080ec <_printf_float+0x364>
 800807e:	f04f 0b00 	mov.w	fp, #0
 8008082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008086:	f104 021a 	add.w	r2, r4, #26
 800808a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800808c:	930a      	str	r3, [sp, #40]	@ 0x28
 800808e:	eba3 0309 	sub.w	r3, r3, r9
 8008092:	455b      	cmp	r3, fp
 8008094:	dc31      	bgt.n	80080fa <_printf_float+0x372>
 8008096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008098:	459a      	cmp	sl, r3
 800809a:	dc3a      	bgt.n	8008112 <_printf_float+0x38a>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	07da      	lsls	r2, r3, #31
 80080a0:	d437      	bmi.n	8008112 <_printf_float+0x38a>
 80080a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080a4:	ebaa 0903 	sub.w	r9, sl, r3
 80080a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080aa:	ebaa 0303 	sub.w	r3, sl, r3
 80080ae:	4599      	cmp	r9, r3
 80080b0:	bfa8      	it	ge
 80080b2:	4699      	movge	r9, r3
 80080b4:	f1b9 0f00 	cmp.w	r9, #0
 80080b8:	dc33      	bgt.n	8008122 <_printf_float+0x39a>
 80080ba:	f04f 0800 	mov.w	r8, #0
 80080be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c2:	f104 0b1a 	add.w	fp, r4, #26
 80080c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080c8:	ebaa 0303 	sub.w	r3, sl, r3
 80080cc:	eba3 0309 	sub.w	r3, r3, r9
 80080d0:	4543      	cmp	r3, r8
 80080d2:	f77f af7a 	ble.w	8007fca <_printf_float+0x242>
 80080d6:	2301      	movs	r3, #1
 80080d8:	465a      	mov	r2, fp
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	f43f aeac 	beq.w	8007e3e <_printf_float+0xb6>
 80080e6:	f108 0801 	add.w	r8, r8, #1
 80080ea:	e7ec      	b.n	80080c6 <_printf_float+0x33e>
 80080ec:	4642      	mov	r2, r8
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d1c2      	bne.n	800807e <_printf_float+0x2f6>
 80080f8:	e6a1      	b.n	8007e3e <_printf_float+0xb6>
 80080fa:	2301      	movs	r3, #1
 80080fc:	4631      	mov	r1, r6
 80080fe:	4628      	mov	r0, r5
 8008100:	920a      	str	r2, [sp, #40]	@ 0x28
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	f43f ae9a 	beq.w	8007e3e <_printf_float+0xb6>
 800810a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800810c:	f10b 0b01 	add.w	fp, fp, #1
 8008110:	e7bb      	b.n	800808a <_printf_float+0x302>
 8008112:	4631      	mov	r1, r6
 8008114:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	d1c0      	bne.n	80080a2 <_printf_float+0x31a>
 8008120:	e68d      	b.n	8007e3e <_printf_float+0xb6>
 8008122:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008124:	464b      	mov	r3, r9
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	4442      	add	r2, r8
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	d1c3      	bne.n	80080ba <_printf_float+0x332>
 8008132:	e684      	b.n	8007e3e <_printf_float+0xb6>
 8008134:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008138:	f1ba 0f01 	cmp.w	sl, #1
 800813c:	dc01      	bgt.n	8008142 <_printf_float+0x3ba>
 800813e:	07db      	lsls	r3, r3, #31
 8008140:	d536      	bpl.n	80081b0 <_printf_float+0x428>
 8008142:	2301      	movs	r3, #1
 8008144:	4642      	mov	r2, r8
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f ae76 	beq.w	8007e3e <_printf_float+0xb6>
 8008152:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008156:	4631      	mov	r1, r6
 8008158:	4628      	mov	r0, r5
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	f43f ae6e 	beq.w	8007e3e <_printf_float+0xb6>
 8008162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008166:	2200      	movs	r2, #0
 8008168:	2300      	movs	r3, #0
 800816a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800816e:	f7f8 fc1b 	bl	80009a8 <__aeabi_dcmpeq>
 8008172:	b9c0      	cbnz	r0, 80081a6 <_printf_float+0x41e>
 8008174:	4653      	mov	r3, sl
 8008176:	f108 0201 	add.w	r2, r8, #1
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	d10c      	bne.n	800819e <_printf_float+0x416>
 8008184:	e65b      	b.n	8007e3e <_printf_float+0xb6>
 8008186:	2301      	movs	r3, #1
 8008188:	465a      	mov	r2, fp
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	f43f ae54 	beq.w	8007e3e <_printf_float+0xb6>
 8008196:	f108 0801 	add.w	r8, r8, #1
 800819a:	45d0      	cmp	r8, sl
 800819c:	dbf3      	blt.n	8008186 <_printf_float+0x3fe>
 800819e:	464b      	mov	r3, r9
 80081a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80081a4:	e6e0      	b.n	8007f68 <_printf_float+0x1e0>
 80081a6:	f04f 0800 	mov.w	r8, #0
 80081aa:	f104 0b1a 	add.w	fp, r4, #26
 80081ae:	e7f4      	b.n	800819a <_printf_float+0x412>
 80081b0:	2301      	movs	r3, #1
 80081b2:	4642      	mov	r2, r8
 80081b4:	e7e1      	b.n	800817a <_printf_float+0x3f2>
 80081b6:	2301      	movs	r3, #1
 80081b8:	464a      	mov	r2, r9
 80081ba:	4631      	mov	r1, r6
 80081bc:	4628      	mov	r0, r5
 80081be:	47b8      	blx	r7
 80081c0:	3001      	adds	r0, #1
 80081c2:	f43f ae3c 	beq.w	8007e3e <_printf_float+0xb6>
 80081c6:	f108 0801 	add.w	r8, r8, #1
 80081ca:	68e3      	ldr	r3, [r4, #12]
 80081cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80081ce:	1a5b      	subs	r3, r3, r1
 80081d0:	4543      	cmp	r3, r8
 80081d2:	dcf0      	bgt.n	80081b6 <_printf_float+0x42e>
 80081d4:	e6fd      	b.n	8007fd2 <_printf_float+0x24a>
 80081d6:	f04f 0800 	mov.w	r8, #0
 80081da:	f104 0919 	add.w	r9, r4, #25
 80081de:	e7f4      	b.n	80081ca <_printf_float+0x442>

080081e0 <_printf_common>:
 80081e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	4616      	mov	r6, r2
 80081e6:	4698      	mov	r8, r3
 80081e8:	688a      	ldr	r2, [r1, #8]
 80081ea:	690b      	ldr	r3, [r1, #16]
 80081ec:	4607      	mov	r7, r0
 80081ee:	4293      	cmp	r3, r2
 80081f0:	bfb8      	it	lt
 80081f2:	4613      	movlt	r3, r2
 80081f4:	6033      	str	r3, [r6, #0]
 80081f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081fa:	460c      	mov	r4, r1
 80081fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008200:	b10a      	cbz	r2, 8008206 <_printf_common+0x26>
 8008202:	3301      	adds	r3, #1
 8008204:	6033      	str	r3, [r6, #0]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	0699      	lsls	r1, r3, #26
 800820a:	bf42      	ittt	mi
 800820c:	6833      	ldrmi	r3, [r6, #0]
 800820e:	3302      	addmi	r3, #2
 8008210:	6033      	strmi	r3, [r6, #0]
 8008212:	6825      	ldr	r5, [r4, #0]
 8008214:	f015 0506 	ands.w	r5, r5, #6
 8008218:	d106      	bne.n	8008228 <_printf_common+0x48>
 800821a:	f104 0a19 	add.w	sl, r4, #25
 800821e:	68e3      	ldr	r3, [r4, #12]
 8008220:	6832      	ldr	r2, [r6, #0]
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	42ab      	cmp	r3, r5
 8008226:	dc2b      	bgt.n	8008280 <_printf_common+0xa0>
 8008228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800822c:	6822      	ldr	r2, [r4, #0]
 800822e:	3b00      	subs	r3, #0
 8008230:	bf18      	it	ne
 8008232:	2301      	movne	r3, #1
 8008234:	0692      	lsls	r2, r2, #26
 8008236:	d430      	bmi.n	800829a <_printf_common+0xba>
 8008238:	4641      	mov	r1, r8
 800823a:	4638      	mov	r0, r7
 800823c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008240:	47c8      	blx	r9
 8008242:	3001      	adds	r0, #1
 8008244:	d023      	beq.n	800828e <_printf_common+0xae>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	6922      	ldr	r2, [r4, #16]
 800824a:	f003 0306 	and.w	r3, r3, #6
 800824e:	2b04      	cmp	r3, #4
 8008250:	bf14      	ite	ne
 8008252:	2500      	movne	r5, #0
 8008254:	6833      	ldreq	r3, [r6, #0]
 8008256:	f04f 0600 	mov.w	r6, #0
 800825a:	bf08      	it	eq
 800825c:	68e5      	ldreq	r5, [r4, #12]
 800825e:	f104 041a 	add.w	r4, r4, #26
 8008262:	bf08      	it	eq
 8008264:	1aed      	subeq	r5, r5, r3
 8008266:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800826a:	bf08      	it	eq
 800826c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008270:	4293      	cmp	r3, r2
 8008272:	bfc4      	itt	gt
 8008274:	1a9b      	subgt	r3, r3, r2
 8008276:	18ed      	addgt	r5, r5, r3
 8008278:	42b5      	cmp	r5, r6
 800827a:	d11a      	bne.n	80082b2 <_printf_common+0xd2>
 800827c:	2000      	movs	r0, #0
 800827e:	e008      	b.n	8008292 <_printf_common+0xb2>
 8008280:	2301      	movs	r3, #1
 8008282:	4652      	mov	r2, sl
 8008284:	4641      	mov	r1, r8
 8008286:	4638      	mov	r0, r7
 8008288:	47c8      	blx	r9
 800828a:	3001      	adds	r0, #1
 800828c:	d103      	bne.n	8008296 <_printf_common+0xb6>
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	3501      	adds	r5, #1
 8008298:	e7c1      	b.n	800821e <_printf_common+0x3e>
 800829a:	2030      	movs	r0, #48	@ 0x30
 800829c:	18e1      	adds	r1, r4, r3
 800829e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082a8:	4422      	add	r2, r4
 80082aa:	3302      	adds	r3, #2
 80082ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082b0:	e7c2      	b.n	8008238 <_printf_common+0x58>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4622      	mov	r2, r4
 80082b6:	4641      	mov	r1, r8
 80082b8:	4638      	mov	r0, r7
 80082ba:	47c8      	blx	r9
 80082bc:	3001      	adds	r0, #1
 80082be:	d0e6      	beq.n	800828e <_printf_common+0xae>
 80082c0:	3601      	adds	r6, #1
 80082c2:	e7d9      	b.n	8008278 <_printf_common+0x98>

080082c4 <_printf_i>:
 80082c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	7e0f      	ldrb	r7, [r1, #24]
 80082ca:	4691      	mov	r9, r2
 80082cc:	2f78      	cmp	r7, #120	@ 0x78
 80082ce:	4680      	mov	r8, r0
 80082d0:	460c      	mov	r4, r1
 80082d2:	469a      	mov	sl, r3
 80082d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082da:	d807      	bhi.n	80082ec <_printf_i+0x28>
 80082dc:	2f62      	cmp	r7, #98	@ 0x62
 80082de:	d80a      	bhi.n	80082f6 <_printf_i+0x32>
 80082e0:	2f00      	cmp	r7, #0
 80082e2:	f000 80d1 	beq.w	8008488 <_printf_i+0x1c4>
 80082e6:	2f58      	cmp	r7, #88	@ 0x58
 80082e8:	f000 80b8 	beq.w	800845c <_printf_i+0x198>
 80082ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082f4:	e03a      	b.n	800836c <_printf_i+0xa8>
 80082f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082fa:	2b15      	cmp	r3, #21
 80082fc:	d8f6      	bhi.n	80082ec <_printf_i+0x28>
 80082fe:	a101      	add	r1, pc, #4	@ (adr r1, 8008304 <_printf_i+0x40>)
 8008300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008304:	0800835d 	.word	0x0800835d
 8008308:	08008371 	.word	0x08008371
 800830c:	080082ed 	.word	0x080082ed
 8008310:	080082ed 	.word	0x080082ed
 8008314:	080082ed 	.word	0x080082ed
 8008318:	080082ed 	.word	0x080082ed
 800831c:	08008371 	.word	0x08008371
 8008320:	080082ed 	.word	0x080082ed
 8008324:	080082ed 	.word	0x080082ed
 8008328:	080082ed 	.word	0x080082ed
 800832c:	080082ed 	.word	0x080082ed
 8008330:	0800846f 	.word	0x0800846f
 8008334:	0800839b 	.word	0x0800839b
 8008338:	08008429 	.word	0x08008429
 800833c:	080082ed 	.word	0x080082ed
 8008340:	080082ed 	.word	0x080082ed
 8008344:	08008491 	.word	0x08008491
 8008348:	080082ed 	.word	0x080082ed
 800834c:	0800839b 	.word	0x0800839b
 8008350:	080082ed 	.word	0x080082ed
 8008354:	080082ed 	.word	0x080082ed
 8008358:	08008431 	.word	0x08008431
 800835c:	6833      	ldr	r3, [r6, #0]
 800835e:	1d1a      	adds	r2, r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6032      	str	r2, [r6, #0]
 8008364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800836c:	2301      	movs	r3, #1
 800836e:	e09c      	b.n	80084aa <_printf_i+0x1e6>
 8008370:	6833      	ldr	r3, [r6, #0]
 8008372:	6820      	ldr	r0, [r4, #0]
 8008374:	1d19      	adds	r1, r3, #4
 8008376:	6031      	str	r1, [r6, #0]
 8008378:	0606      	lsls	r6, r0, #24
 800837a:	d501      	bpl.n	8008380 <_printf_i+0xbc>
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	e003      	b.n	8008388 <_printf_i+0xc4>
 8008380:	0645      	lsls	r5, r0, #25
 8008382:	d5fb      	bpl.n	800837c <_printf_i+0xb8>
 8008384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008388:	2d00      	cmp	r5, #0
 800838a:	da03      	bge.n	8008394 <_printf_i+0xd0>
 800838c:	232d      	movs	r3, #45	@ 0x2d
 800838e:	426d      	negs	r5, r5
 8008390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008394:	230a      	movs	r3, #10
 8008396:	4858      	ldr	r0, [pc, #352]	@ (80084f8 <_printf_i+0x234>)
 8008398:	e011      	b.n	80083be <_printf_i+0xfa>
 800839a:	6821      	ldr	r1, [r4, #0]
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	0608      	lsls	r0, r1, #24
 80083a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80083a4:	d402      	bmi.n	80083ac <_printf_i+0xe8>
 80083a6:	0649      	lsls	r1, r1, #25
 80083a8:	bf48      	it	mi
 80083aa:	b2ad      	uxthmi	r5, r5
 80083ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80083ae:	6033      	str	r3, [r6, #0]
 80083b0:	bf14      	ite	ne
 80083b2:	230a      	movne	r3, #10
 80083b4:	2308      	moveq	r3, #8
 80083b6:	4850      	ldr	r0, [pc, #320]	@ (80084f8 <_printf_i+0x234>)
 80083b8:	2100      	movs	r1, #0
 80083ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083be:	6866      	ldr	r6, [r4, #4]
 80083c0:	2e00      	cmp	r6, #0
 80083c2:	60a6      	str	r6, [r4, #8]
 80083c4:	db05      	blt.n	80083d2 <_printf_i+0x10e>
 80083c6:	6821      	ldr	r1, [r4, #0]
 80083c8:	432e      	orrs	r6, r5
 80083ca:	f021 0104 	bic.w	r1, r1, #4
 80083ce:	6021      	str	r1, [r4, #0]
 80083d0:	d04b      	beq.n	800846a <_printf_i+0x1a6>
 80083d2:	4616      	mov	r6, r2
 80083d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80083d8:	fb03 5711 	mls	r7, r3, r1, r5
 80083dc:	5dc7      	ldrb	r7, [r0, r7]
 80083de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083e2:	462f      	mov	r7, r5
 80083e4:	42bb      	cmp	r3, r7
 80083e6:	460d      	mov	r5, r1
 80083e8:	d9f4      	bls.n	80083d4 <_printf_i+0x110>
 80083ea:	2b08      	cmp	r3, #8
 80083ec:	d10b      	bne.n	8008406 <_printf_i+0x142>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	07df      	lsls	r7, r3, #31
 80083f2:	d508      	bpl.n	8008406 <_printf_i+0x142>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	6861      	ldr	r1, [r4, #4]
 80083f8:	4299      	cmp	r1, r3
 80083fa:	bfde      	ittt	le
 80083fc:	2330      	movle	r3, #48	@ 0x30
 80083fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008402:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008406:	1b92      	subs	r2, r2, r6
 8008408:	6122      	str	r2, [r4, #16]
 800840a:	464b      	mov	r3, r9
 800840c:	4621      	mov	r1, r4
 800840e:	4640      	mov	r0, r8
 8008410:	f8cd a000 	str.w	sl, [sp]
 8008414:	aa03      	add	r2, sp, #12
 8008416:	f7ff fee3 	bl	80081e0 <_printf_common>
 800841a:	3001      	adds	r0, #1
 800841c:	d14a      	bne.n	80084b4 <_printf_i+0x1f0>
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	b004      	add	sp, #16
 8008424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	f043 0320 	orr.w	r3, r3, #32
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	2778      	movs	r7, #120	@ 0x78
 8008432:	4832      	ldr	r0, [pc, #200]	@ (80084fc <_printf_i+0x238>)
 8008434:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	6831      	ldr	r1, [r6, #0]
 800843c:	061f      	lsls	r7, r3, #24
 800843e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008442:	d402      	bmi.n	800844a <_printf_i+0x186>
 8008444:	065f      	lsls	r7, r3, #25
 8008446:	bf48      	it	mi
 8008448:	b2ad      	uxthmi	r5, r5
 800844a:	6031      	str	r1, [r6, #0]
 800844c:	07d9      	lsls	r1, r3, #31
 800844e:	bf44      	itt	mi
 8008450:	f043 0320 	orrmi.w	r3, r3, #32
 8008454:	6023      	strmi	r3, [r4, #0]
 8008456:	b11d      	cbz	r5, 8008460 <_printf_i+0x19c>
 8008458:	2310      	movs	r3, #16
 800845a:	e7ad      	b.n	80083b8 <_printf_i+0xf4>
 800845c:	4826      	ldr	r0, [pc, #152]	@ (80084f8 <_printf_i+0x234>)
 800845e:	e7e9      	b.n	8008434 <_printf_i+0x170>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	f023 0320 	bic.w	r3, r3, #32
 8008466:	6023      	str	r3, [r4, #0]
 8008468:	e7f6      	b.n	8008458 <_printf_i+0x194>
 800846a:	4616      	mov	r6, r2
 800846c:	e7bd      	b.n	80083ea <_printf_i+0x126>
 800846e:	6833      	ldr	r3, [r6, #0]
 8008470:	6825      	ldr	r5, [r4, #0]
 8008472:	1d18      	adds	r0, r3, #4
 8008474:	6961      	ldr	r1, [r4, #20]
 8008476:	6030      	str	r0, [r6, #0]
 8008478:	062e      	lsls	r6, r5, #24
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	d501      	bpl.n	8008482 <_printf_i+0x1be>
 800847e:	6019      	str	r1, [r3, #0]
 8008480:	e002      	b.n	8008488 <_printf_i+0x1c4>
 8008482:	0668      	lsls	r0, r5, #25
 8008484:	d5fb      	bpl.n	800847e <_printf_i+0x1ba>
 8008486:	8019      	strh	r1, [r3, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	4616      	mov	r6, r2
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	e7bc      	b.n	800840a <_printf_i+0x146>
 8008490:	6833      	ldr	r3, [r6, #0]
 8008492:	2100      	movs	r1, #0
 8008494:	1d1a      	adds	r2, r3, #4
 8008496:	6032      	str	r2, [r6, #0]
 8008498:	681e      	ldr	r6, [r3, #0]
 800849a:	6862      	ldr	r2, [r4, #4]
 800849c:	4630      	mov	r0, r6
 800849e:	f000 fc26 	bl	8008cee <memchr>
 80084a2:	b108      	cbz	r0, 80084a8 <_printf_i+0x1e4>
 80084a4:	1b80      	subs	r0, r0, r6
 80084a6:	6060      	str	r0, [r4, #4]
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	6123      	str	r3, [r4, #16]
 80084ac:	2300      	movs	r3, #0
 80084ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b2:	e7aa      	b.n	800840a <_printf_i+0x146>
 80084b4:	4632      	mov	r2, r6
 80084b6:	4649      	mov	r1, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	47d0      	blx	sl
 80084be:	3001      	adds	r0, #1
 80084c0:	d0ad      	beq.n	800841e <_printf_i+0x15a>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	079b      	lsls	r3, r3, #30
 80084c6:	d413      	bmi.n	80084f0 <_printf_i+0x22c>
 80084c8:	68e0      	ldr	r0, [r4, #12]
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	4298      	cmp	r0, r3
 80084ce:	bfb8      	it	lt
 80084d0:	4618      	movlt	r0, r3
 80084d2:	e7a6      	b.n	8008422 <_printf_i+0x15e>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4632      	mov	r2, r6
 80084d8:	4649      	mov	r1, r9
 80084da:	4640      	mov	r0, r8
 80084dc:	47d0      	blx	sl
 80084de:	3001      	adds	r0, #1
 80084e0:	d09d      	beq.n	800841e <_printf_i+0x15a>
 80084e2:	3501      	adds	r5, #1
 80084e4:	68e3      	ldr	r3, [r4, #12]
 80084e6:	9903      	ldr	r1, [sp, #12]
 80084e8:	1a5b      	subs	r3, r3, r1
 80084ea:	42ab      	cmp	r3, r5
 80084ec:	dcf2      	bgt.n	80084d4 <_printf_i+0x210>
 80084ee:	e7eb      	b.n	80084c8 <_printf_i+0x204>
 80084f0:	2500      	movs	r5, #0
 80084f2:	f104 0619 	add.w	r6, r4, #25
 80084f6:	e7f5      	b.n	80084e4 <_printf_i+0x220>
 80084f8:	0800e59e 	.word	0x0800e59e
 80084fc:	0800e5af 	.word	0x0800e5af

08008500 <_scanf_float>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	b087      	sub	sp, #28
 8008506:	9303      	str	r3, [sp, #12]
 8008508:	688b      	ldr	r3, [r1, #8]
 800850a:	4691      	mov	r9, r2
 800850c:	1e5a      	subs	r2, r3, #1
 800850e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008512:	bf82      	ittt	hi
 8008514:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008518:	eb03 0b05 	addhi.w	fp, r3, r5
 800851c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008520:	460a      	mov	r2, r1
 8008522:	f04f 0500 	mov.w	r5, #0
 8008526:	bf88      	it	hi
 8008528:	608b      	strhi	r3, [r1, #8]
 800852a:	680b      	ldr	r3, [r1, #0]
 800852c:	4680      	mov	r8, r0
 800852e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008532:	f842 3b1c 	str.w	r3, [r2], #28
 8008536:	460c      	mov	r4, r1
 8008538:	bf98      	it	ls
 800853a:	f04f 0b00 	movls.w	fp, #0
 800853e:	4616      	mov	r6, r2
 8008540:	46aa      	mov	sl, r5
 8008542:	462f      	mov	r7, r5
 8008544:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008548:	9201      	str	r2, [sp, #4]
 800854a:	9502      	str	r5, [sp, #8]
 800854c:	68a2      	ldr	r2, [r4, #8]
 800854e:	b15a      	cbz	r2, 8008568 <_scanf_float+0x68>
 8008550:	f8d9 3000 	ldr.w	r3, [r9]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b4e      	cmp	r3, #78	@ 0x4e
 8008558:	d862      	bhi.n	8008620 <_scanf_float+0x120>
 800855a:	2b40      	cmp	r3, #64	@ 0x40
 800855c:	d83a      	bhi.n	80085d4 <_scanf_float+0xd4>
 800855e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008562:	b2c8      	uxtb	r0, r1
 8008564:	280e      	cmp	r0, #14
 8008566:	d938      	bls.n	80085da <_scanf_float+0xda>
 8008568:	b11f      	cbz	r7, 8008572 <_scanf_float+0x72>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008576:	f1ba 0f01 	cmp.w	sl, #1
 800857a:	f200 8114 	bhi.w	80087a6 <_scanf_float+0x2a6>
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	429e      	cmp	r6, r3
 8008582:	f200 8105 	bhi.w	8008790 <_scanf_float+0x290>
 8008586:	2001      	movs	r0, #1
 8008588:	b007      	add	sp, #28
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008592:	2a0d      	cmp	r2, #13
 8008594:	d8e8      	bhi.n	8008568 <_scanf_float+0x68>
 8008596:	a101      	add	r1, pc, #4	@ (adr r1, 800859c <_scanf_float+0x9c>)
 8008598:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800859c:	080086e5 	.word	0x080086e5
 80085a0:	08008569 	.word	0x08008569
 80085a4:	08008569 	.word	0x08008569
 80085a8:	08008569 	.word	0x08008569
 80085ac:	08008741 	.word	0x08008741
 80085b0:	0800871b 	.word	0x0800871b
 80085b4:	08008569 	.word	0x08008569
 80085b8:	08008569 	.word	0x08008569
 80085bc:	080086f3 	.word	0x080086f3
 80085c0:	08008569 	.word	0x08008569
 80085c4:	08008569 	.word	0x08008569
 80085c8:	08008569 	.word	0x08008569
 80085cc:	08008569 	.word	0x08008569
 80085d0:	080086af 	.word	0x080086af
 80085d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80085d8:	e7db      	b.n	8008592 <_scanf_float+0x92>
 80085da:	290e      	cmp	r1, #14
 80085dc:	d8c4      	bhi.n	8008568 <_scanf_float+0x68>
 80085de:	a001      	add	r0, pc, #4	@ (adr r0, 80085e4 <_scanf_float+0xe4>)
 80085e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085e4:	0800869f 	.word	0x0800869f
 80085e8:	08008569 	.word	0x08008569
 80085ec:	0800869f 	.word	0x0800869f
 80085f0:	0800872f 	.word	0x0800872f
 80085f4:	08008569 	.word	0x08008569
 80085f8:	08008641 	.word	0x08008641
 80085fc:	08008685 	.word	0x08008685
 8008600:	08008685 	.word	0x08008685
 8008604:	08008685 	.word	0x08008685
 8008608:	08008685 	.word	0x08008685
 800860c:	08008685 	.word	0x08008685
 8008610:	08008685 	.word	0x08008685
 8008614:	08008685 	.word	0x08008685
 8008618:	08008685 	.word	0x08008685
 800861c:	08008685 	.word	0x08008685
 8008620:	2b6e      	cmp	r3, #110	@ 0x6e
 8008622:	d809      	bhi.n	8008638 <_scanf_float+0x138>
 8008624:	2b60      	cmp	r3, #96	@ 0x60
 8008626:	d8b2      	bhi.n	800858e <_scanf_float+0x8e>
 8008628:	2b54      	cmp	r3, #84	@ 0x54
 800862a:	d07b      	beq.n	8008724 <_scanf_float+0x224>
 800862c:	2b59      	cmp	r3, #89	@ 0x59
 800862e:	d19b      	bne.n	8008568 <_scanf_float+0x68>
 8008630:	2d07      	cmp	r5, #7
 8008632:	d199      	bne.n	8008568 <_scanf_float+0x68>
 8008634:	2508      	movs	r5, #8
 8008636:	e02f      	b.n	8008698 <_scanf_float+0x198>
 8008638:	2b74      	cmp	r3, #116	@ 0x74
 800863a:	d073      	beq.n	8008724 <_scanf_float+0x224>
 800863c:	2b79      	cmp	r3, #121	@ 0x79
 800863e:	e7f6      	b.n	800862e <_scanf_float+0x12e>
 8008640:	6821      	ldr	r1, [r4, #0]
 8008642:	05c8      	lsls	r0, r1, #23
 8008644:	d51e      	bpl.n	8008684 <_scanf_float+0x184>
 8008646:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800864a:	6021      	str	r1, [r4, #0]
 800864c:	3701      	adds	r7, #1
 800864e:	f1bb 0f00 	cmp.w	fp, #0
 8008652:	d003      	beq.n	800865c <_scanf_float+0x15c>
 8008654:	3201      	adds	r2, #1
 8008656:	f10b 3bff 	add.w	fp, fp, #4294967295
 800865a:	60a2      	str	r2, [r4, #8]
 800865c:	68a3      	ldr	r3, [r4, #8]
 800865e:	3b01      	subs	r3, #1
 8008660:	60a3      	str	r3, [r4, #8]
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	3301      	adds	r3, #1
 8008666:	6123      	str	r3, [r4, #16]
 8008668:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800866c:	3b01      	subs	r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	f8c9 3004 	str.w	r3, [r9, #4]
 8008674:	f340 8083 	ble.w	800877e <_scanf_float+0x27e>
 8008678:	f8d9 3000 	ldr.w	r3, [r9]
 800867c:	3301      	adds	r3, #1
 800867e:	f8c9 3000 	str.w	r3, [r9]
 8008682:	e763      	b.n	800854c <_scanf_float+0x4c>
 8008684:	eb1a 0105 	adds.w	r1, sl, r5
 8008688:	f47f af6e 	bne.w	8008568 <_scanf_float+0x68>
 800868c:	460d      	mov	r5, r1
 800868e:	468a      	mov	sl, r1
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008696:	6022      	str	r2, [r4, #0]
 8008698:	f806 3b01 	strb.w	r3, [r6], #1
 800869c:	e7de      	b.n	800865c <_scanf_float+0x15c>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	0610      	lsls	r0, r2, #24
 80086a2:	f57f af61 	bpl.w	8008568 <_scanf_float+0x68>
 80086a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086aa:	6022      	str	r2, [r4, #0]
 80086ac:	e7f4      	b.n	8008698 <_scanf_float+0x198>
 80086ae:	f1ba 0f00 	cmp.w	sl, #0
 80086b2:	d10c      	bne.n	80086ce <_scanf_float+0x1ce>
 80086b4:	b977      	cbnz	r7, 80086d4 <_scanf_float+0x1d4>
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086c0:	d108      	bne.n	80086d4 <_scanf_float+0x1d4>
 80086c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086c6:	f04f 0a01 	mov.w	sl, #1
 80086ca:	6022      	str	r2, [r4, #0]
 80086cc:	e7e4      	b.n	8008698 <_scanf_float+0x198>
 80086ce:	f1ba 0f02 	cmp.w	sl, #2
 80086d2:	d051      	beq.n	8008778 <_scanf_float+0x278>
 80086d4:	2d01      	cmp	r5, #1
 80086d6:	d002      	beq.n	80086de <_scanf_float+0x1de>
 80086d8:	2d04      	cmp	r5, #4
 80086da:	f47f af45 	bne.w	8008568 <_scanf_float+0x68>
 80086de:	3501      	adds	r5, #1
 80086e0:	b2ed      	uxtb	r5, r5
 80086e2:	e7d9      	b.n	8008698 <_scanf_float+0x198>
 80086e4:	f1ba 0f01 	cmp.w	sl, #1
 80086e8:	f47f af3e 	bne.w	8008568 <_scanf_float+0x68>
 80086ec:	f04f 0a02 	mov.w	sl, #2
 80086f0:	e7d2      	b.n	8008698 <_scanf_float+0x198>
 80086f2:	b975      	cbnz	r5, 8008712 <_scanf_float+0x212>
 80086f4:	2f00      	cmp	r7, #0
 80086f6:	f47f af38 	bne.w	800856a <_scanf_float+0x6a>
 80086fa:	6822      	ldr	r2, [r4, #0]
 80086fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008700:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008704:	f040 80ff 	bne.w	8008906 <_scanf_float+0x406>
 8008708:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800870c:	2501      	movs	r5, #1
 800870e:	6022      	str	r2, [r4, #0]
 8008710:	e7c2      	b.n	8008698 <_scanf_float+0x198>
 8008712:	2d03      	cmp	r5, #3
 8008714:	d0e3      	beq.n	80086de <_scanf_float+0x1de>
 8008716:	2d05      	cmp	r5, #5
 8008718:	e7df      	b.n	80086da <_scanf_float+0x1da>
 800871a:	2d02      	cmp	r5, #2
 800871c:	f47f af24 	bne.w	8008568 <_scanf_float+0x68>
 8008720:	2503      	movs	r5, #3
 8008722:	e7b9      	b.n	8008698 <_scanf_float+0x198>
 8008724:	2d06      	cmp	r5, #6
 8008726:	f47f af1f 	bne.w	8008568 <_scanf_float+0x68>
 800872a:	2507      	movs	r5, #7
 800872c:	e7b4      	b.n	8008698 <_scanf_float+0x198>
 800872e:	6822      	ldr	r2, [r4, #0]
 8008730:	0591      	lsls	r1, r2, #22
 8008732:	f57f af19 	bpl.w	8008568 <_scanf_float+0x68>
 8008736:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800873a:	6022      	str	r2, [r4, #0]
 800873c:	9702      	str	r7, [sp, #8]
 800873e:	e7ab      	b.n	8008698 <_scanf_float+0x198>
 8008740:	6822      	ldr	r2, [r4, #0]
 8008742:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008746:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800874a:	d005      	beq.n	8008758 <_scanf_float+0x258>
 800874c:	0550      	lsls	r0, r2, #21
 800874e:	f57f af0b 	bpl.w	8008568 <_scanf_float+0x68>
 8008752:	2f00      	cmp	r7, #0
 8008754:	f000 80d7 	beq.w	8008906 <_scanf_float+0x406>
 8008758:	0591      	lsls	r1, r2, #22
 800875a:	bf58      	it	pl
 800875c:	9902      	ldrpl	r1, [sp, #8]
 800875e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008762:	bf58      	it	pl
 8008764:	1a79      	subpl	r1, r7, r1
 8008766:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800876a:	f04f 0700 	mov.w	r7, #0
 800876e:	bf58      	it	pl
 8008770:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008774:	6022      	str	r2, [r4, #0]
 8008776:	e78f      	b.n	8008698 <_scanf_float+0x198>
 8008778:	f04f 0a03 	mov.w	sl, #3
 800877c:	e78c      	b.n	8008698 <_scanf_float+0x198>
 800877e:	4649      	mov	r1, r9
 8008780:	4640      	mov	r0, r8
 8008782:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008786:	4798      	blx	r3
 8008788:	2800      	cmp	r0, #0
 800878a:	f43f aedf 	beq.w	800854c <_scanf_float+0x4c>
 800878e:	e6eb      	b.n	8008568 <_scanf_float+0x68>
 8008790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008794:	464a      	mov	r2, r9
 8008796:	4640      	mov	r0, r8
 8008798:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800879c:	4798      	blx	r3
 800879e:	6923      	ldr	r3, [r4, #16]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	6123      	str	r3, [r4, #16]
 80087a4:	e6eb      	b.n	800857e <_scanf_float+0x7e>
 80087a6:	1e6b      	subs	r3, r5, #1
 80087a8:	2b06      	cmp	r3, #6
 80087aa:	d824      	bhi.n	80087f6 <_scanf_float+0x2f6>
 80087ac:	2d02      	cmp	r5, #2
 80087ae:	d836      	bhi.n	800881e <_scanf_float+0x31e>
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	429e      	cmp	r6, r3
 80087b4:	f67f aee7 	bls.w	8008586 <_scanf_float+0x86>
 80087b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087bc:	464a      	mov	r2, r9
 80087be:	4640      	mov	r0, r8
 80087c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087c4:	4798      	blx	r3
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	e7f0      	b.n	80087b0 <_scanf_float+0x2b0>
 80087ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087d2:	464a      	mov	r2, r9
 80087d4:	4640      	mov	r0, r8
 80087d6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80087da:	4798      	blx	r3
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	3b01      	subs	r3, #1
 80087e0:	6123      	str	r3, [r4, #16]
 80087e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087e6:	fa5f fa8a 	uxtb.w	sl, sl
 80087ea:	f1ba 0f02 	cmp.w	sl, #2
 80087ee:	d1ee      	bne.n	80087ce <_scanf_float+0x2ce>
 80087f0:	3d03      	subs	r5, #3
 80087f2:	b2ed      	uxtb	r5, r5
 80087f4:	1b76      	subs	r6, r6, r5
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	05da      	lsls	r2, r3, #23
 80087fa:	d530      	bpl.n	800885e <_scanf_float+0x35e>
 80087fc:	055b      	lsls	r3, r3, #21
 80087fe:	d511      	bpl.n	8008824 <_scanf_float+0x324>
 8008800:	9b01      	ldr	r3, [sp, #4]
 8008802:	429e      	cmp	r6, r3
 8008804:	f67f aebf 	bls.w	8008586 <_scanf_float+0x86>
 8008808:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800880c:	464a      	mov	r2, r9
 800880e:	4640      	mov	r0, r8
 8008810:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008814:	4798      	blx	r3
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	3b01      	subs	r3, #1
 800881a:	6123      	str	r3, [r4, #16]
 800881c:	e7f0      	b.n	8008800 <_scanf_float+0x300>
 800881e:	46aa      	mov	sl, r5
 8008820:	46b3      	mov	fp, r6
 8008822:	e7de      	b.n	80087e2 <_scanf_float+0x2e2>
 8008824:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	2965      	cmp	r1, #101	@ 0x65
 800882c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008830:	f106 35ff 	add.w	r5, r6, #4294967295
 8008834:	6123      	str	r3, [r4, #16]
 8008836:	d00c      	beq.n	8008852 <_scanf_float+0x352>
 8008838:	2945      	cmp	r1, #69	@ 0x45
 800883a:	d00a      	beq.n	8008852 <_scanf_float+0x352>
 800883c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008840:	464a      	mov	r2, r9
 8008842:	4640      	mov	r0, r8
 8008844:	4798      	blx	r3
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800884c:	3b01      	subs	r3, #1
 800884e:	1eb5      	subs	r5, r6, #2
 8008850:	6123      	str	r3, [r4, #16]
 8008852:	464a      	mov	r2, r9
 8008854:	4640      	mov	r0, r8
 8008856:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800885a:	4798      	blx	r3
 800885c:	462e      	mov	r6, r5
 800885e:	6822      	ldr	r2, [r4, #0]
 8008860:	f012 0210 	ands.w	r2, r2, #16
 8008864:	d001      	beq.n	800886a <_scanf_float+0x36a>
 8008866:	2000      	movs	r0, #0
 8008868:	e68e      	b.n	8008588 <_scanf_float+0x88>
 800886a:	7032      	strb	r2, [r6, #0]
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008876:	d125      	bne.n	80088c4 <_scanf_float+0x3c4>
 8008878:	9b02      	ldr	r3, [sp, #8]
 800887a:	429f      	cmp	r7, r3
 800887c:	d00a      	beq.n	8008894 <_scanf_float+0x394>
 800887e:	1bda      	subs	r2, r3, r7
 8008880:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008884:	429e      	cmp	r6, r3
 8008886:	bf28      	it	cs
 8008888:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800888c:	4630      	mov	r0, r6
 800888e:	491f      	ldr	r1, [pc, #124]	@ (800890c <_scanf_float+0x40c>)
 8008890:	f000 f938 	bl	8008b04 <siprintf>
 8008894:	2200      	movs	r2, #0
 8008896:	4640      	mov	r0, r8
 8008898:	9901      	ldr	r1, [sp, #4]
 800889a:	f002 fb89 	bl	800afb0 <_strtod_r>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	6825      	ldr	r5, [r4, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f015 0f02 	tst.w	r5, #2
 80088a8:	4606      	mov	r6, r0
 80088aa:	460f      	mov	r7, r1
 80088ac:	f103 0204 	add.w	r2, r3, #4
 80088b0:	d015      	beq.n	80088de <_scanf_float+0x3de>
 80088b2:	9903      	ldr	r1, [sp, #12]
 80088b4:	600a      	str	r2, [r1, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	e9c3 6700 	strd	r6, r7, [r3]
 80088bc:	68e3      	ldr	r3, [r4, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60e3      	str	r3, [r4, #12]
 80088c2:	e7d0      	b.n	8008866 <_scanf_float+0x366>
 80088c4:	9b04      	ldr	r3, [sp, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0e4      	beq.n	8008894 <_scanf_float+0x394>
 80088ca:	9905      	ldr	r1, [sp, #20]
 80088cc:	230a      	movs	r3, #10
 80088ce:	4640      	mov	r0, r8
 80088d0:	3101      	adds	r1, #1
 80088d2:	f002 fbed 	bl	800b0b0 <_strtol_r>
 80088d6:	9b04      	ldr	r3, [sp, #16]
 80088d8:	9e05      	ldr	r6, [sp, #20]
 80088da:	1ac2      	subs	r2, r0, r3
 80088dc:	e7d0      	b.n	8008880 <_scanf_float+0x380>
 80088de:	076d      	lsls	r5, r5, #29
 80088e0:	d4e7      	bmi.n	80088b2 <_scanf_float+0x3b2>
 80088e2:	9d03      	ldr	r5, [sp, #12]
 80088e4:	602a      	str	r2, [r5, #0]
 80088e6:	681d      	ldr	r5, [r3, #0]
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	f7f8 f88e 	bl	8000a0c <__aeabi_dcmpun>
 80088f0:	b120      	cbz	r0, 80088fc <_scanf_float+0x3fc>
 80088f2:	4807      	ldr	r0, [pc, #28]	@ (8008910 <_scanf_float+0x410>)
 80088f4:	f000 fa18 	bl	8008d28 <nanf>
 80088f8:	6028      	str	r0, [r5, #0]
 80088fa:	e7df      	b.n	80088bc <_scanf_float+0x3bc>
 80088fc:	4630      	mov	r0, r6
 80088fe:	4639      	mov	r1, r7
 8008900:	f7f8 f8e2 	bl	8000ac8 <__aeabi_d2f>
 8008904:	e7f8      	b.n	80088f8 <_scanf_float+0x3f8>
 8008906:	2700      	movs	r7, #0
 8008908:	e633      	b.n	8008572 <_scanf_float+0x72>
 800890a:	bf00      	nop
 800890c:	0800e5c0 	.word	0x0800e5c0
 8008910:	0800e701 	.word	0x0800e701

08008914 <std>:
 8008914:	2300      	movs	r3, #0
 8008916:	b510      	push	{r4, lr}
 8008918:	4604      	mov	r4, r0
 800891a:	e9c0 3300 	strd	r3, r3, [r0]
 800891e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008922:	6083      	str	r3, [r0, #8]
 8008924:	8181      	strh	r1, [r0, #12]
 8008926:	6643      	str	r3, [r0, #100]	@ 0x64
 8008928:	81c2      	strh	r2, [r0, #14]
 800892a:	6183      	str	r3, [r0, #24]
 800892c:	4619      	mov	r1, r3
 800892e:	2208      	movs	r2, #8
 8008930:	305c      	adds	r0, #92	@ 0x5c
 8008932:	f000 f94c 	bl	8008bce <memset>
 8008936:	4b0d      	ldr	r3, [pc, #52]	@ (800896c <std+0x58>)
 8008938:	6224      	str	r4, [r4, #32]
 800893a:	6263      	str	r3, [r4, #36]	@ 0x24
 800893c:	4b0c      	ldr	r3, [pc, #48]	@ (8008970 <std+0x5c>)
 800893e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008940:	4b0c      	ldr	r3, [pc, #48]	@ (8008974 <std+0x60>)
 8008942:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <std+0x64>)
 8008946:	6323      	str	r3, [r4, #48]	@ 0x30
 8008948:	4b0c      	ldr	r3, [pc, #48]	@ (800897c <std+0x68>)
 800894a:	429c      	cmp	r4, r3
 800894c:	d006      	beq.n	800895c <std+0x48>
 800894e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008952:	4294      	cmp	r4, r2
 8008954:	d002      	beq.n	800895c <std+0x48>
 8008956:	33d0      	adds	r3, #208	@ 0xd0
 8008958:	429c      	cmp	r4, r3
 800895a:	d105      	bne.n	8008968 <std+0x54>
 800895c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008964:	f000 b9c0 	b.w	8008ce8 <__retarget_lock_init_recursive>
 8008968:	bd10      	pop	{r4, pc}
 800896a:	bf00      	nop
 800896c:	08008b49 	.word	0x08008b49
 8008970:	08008b6b 	.word	0x08008b6b
 8008974:	08008ba3 	.word	0x08008ba3
 8008978:	08008bc7 	.word	0x08008bc7
 800897c:	20000a78 	.word	0x20000a78

08008980 <stdio_exit_handler>:
 8008980:	4a02      	ldr	r2, [pc, #8]	@ (800898c <stdio_exit_handler+0xc>)
 8008982:	4903      	ldr	r1, [pc, #12]	@ (8008990 <stdio_exit_handler+0x10>)
 8008984:	4803      	ldr	r0, [pc, #12]	@ (8008994 <stdio_exit_handler+0x14>)
 8008986:	f000 b869 	b.w	8008a5c <_fwalk_sglue>
 800898a:	bf00      	nop
 800898c:	2000000c 	.word	0x2000000c
 8008990:	0800b465 	.word	0x0800b465
 8008994:	2000001c 	.word	0x2000001c

08008998 <cleanup_stdio>:
 8008998:	6841      	ldr	r1, [r0, #4]
 800899a:	4b0c      	ldr	r3, [pc, #48]	@ (80089cc <cleanup_stdio+0x34>)
 800899c:	b510      	push	{r4, lr}
 800899e:	4299      	cmp	r1, r3
 80089a0:	4604      	mov	r4, r0
 80089a2:	d001      	beq.n	80089a8 <cleanup_stdio+0x10>
 80089a4:	f002 fd5e 	bl	800b464 <_fflush_r>
 80089a8:	68a1      	ldr	r1, [r4, #8]
 80089aa:	4b09      	ldr	r3, [pc, #36]	@ (80089d0 <cleanup_stdio+0x38>)
 80089ac:	4299      	cmp	r1, r3
 80089ae:	d002      	beq.n	80089b6 <cleanup_stdio+0x1e>
 80089b0:	4620      	mov	r0, r4
 80089b2:	f002 fd57 	bl	800b464 <_fflush_r>
 80089b6:	68e1      	ldr	r1, [r4, #12]
 80089b8:	4b06      	ldr	r3, [pc, #24]	@ (80089d4 <cleanup_stdio+0x3c>)
 80089ba:	4299      	cmp	r1, r3
 80089bc:	d004      	beq.n	80089c8 <cleanup_stdio+0x30>
 80089be:	4620      	mov	r0, r4
 80089c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c4:	f002 bd4e 	b.w	800b464 <_fflush_r>
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	bf00      	nop
 80089cc:	20000a78 	.word	0x20000a78
 80089d0:	20000ae0 	.word	0x20000ae0
 80089d4:	20000b48 	.word	0x20000b48

080089d8 <global_stdio_init.part.0>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	4b0b      	ldr	r3, [pc, #44]	@ (8008a08 <global_stdio_init.part.0+0x30>)
 80089dc:	4c0b      	ldr	r4, [pc, #44]	@ (8008a0c <global_stdio_init.part.0+0x34>)
 80089de:	4a0c      	ldr	r2, [pc, #48]	@ (8008a10 <global_stdio_init.part.0+0x38>)
 80089e0:	4620      	mov	r0, r4
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	2104      	movs	r1, #4
 80089e6:	2200      	movs	r2, #0
 80089e8:	f7ff ff94 	bl	8008914 <std>
 80089ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089f0:	2201      	movs	r2, #1
 80089f2:	2109      	movs	r1, #9
 80089f4:	f7ff ff8e 	bl	8008914 <std>
 80089f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089fc:	2202      	movs	r2, #2
 80089fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a02:	2112      	movs	r1, #18
 8008a04:	f7ff bf86 	b.w	8008914 <std>
 8008a08:	20000bb0 	.word	0x20000bb0
 8008a0c:	20000a78 	.word	0x20000a78
 8008a10:	08008981 	.word	0x08008981

08008a14 <__sfp_lock_acquire>:
 8008a14:	4801      	ldr	r0, [pc, #4]	@ (8008a1c <__sfp_lock_acquire+0x8>)
 8008a16:	f000 b968 	b.w	8008cea <__retarget_lock_acquire_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20000bb9 	.word	0x20000bb9

08008a20 <__sfp_lock_release>:
 8008a20:	4801      	ldr	r0, [pc, #4]	@ (8008a28 <__sfp_lock_release+0x8>)
 8008a22:	f000 b963 	b.w	8008cec <__retarget_lock_release_recursive>
 8008a26:	bf00      	nop
 8008a28:	20000bb9 	.word	0x20000bb9

08008a2c <__sinit>:
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	4604      	mov	r4, r0
 8008a30:	f7ff fff0 	bl	8008a14 <__sfp_lock_acquire>
 8008a34:	6a23      	ldr	r3, [r4, #32]
 8008a36:	b11b      	cbz	r3, 8008a40 <__sinit+0x14>
 8008a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a3c:	f7ff bff0 	b.w	8008a20 <__sfp_lock_release>
 8008a40:	4b04      	ldr	r3, [pc, #16]	@ (8008a54 <__sinit+0x28>)
 8008a42:	6223      	str	r3, [r4, #32]
 8008a44:	4b04      	ldr	r3, [pc, #16]	@ (8008a58 <__sinit+0x2c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1f5      	bne.n	8008a38 <__sinit+0xc>
 8008a4c:	f7ff ffc4 	bl	80089d8 <global_stdio_init.part.0>
 8008a50:	e7f2      	b.n	8008a38 <__sinit+0xc>
 8008a52:	bf00      	nop
 8008a54:	08008999 	.word	0x08008999
 8008a58:	20000bb0 	.word	0x20000bb0

08008a5c <_fwalk_sglue>:
 8008a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a60:	4607      	mov	r7, r0
 8008a62:	4688      	mov	r8, r1
 8008a64:	4614      	mov	r4, r2
 8008a66:	2600      	movs	r6, #0
 8008a68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a6c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a70:	d505      	bpl.n	8008a7e <_fwalk_sglue+0x22>
 8008a72:	6824      	ldr	r4, [r4, #0]
 8008a74:	2c00      	cmp	r4, #0
 8008a76:	d1f7      	bne.n	8008a68 <_fwalk_sglue+0xc>
 8008a78:	4630      	mov	r0, r6
 8008a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7e:	89ab      	ldrh	r3, [r5, #12]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d907      	bls.n	8008a94 <_fwalk_sglue+0x38>
 8008a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	d003      	beq.n	8008a94 <_fwalk_sglue+0x38>
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4638      	mov	r0, r7
 8008a90:	47c0      	blx	r8
 8008a92:	4306      	orrs	r6, r0
 8008a94:	3568      	adds	r5, #104	@ 0x68
 8008a96:	e7e9      	b.n	8008a6c <_fwalk_sglue+0x10>

08008a98 <sniprintf>:
 8008a98:	b40c      	push	{r2, r3}
 8008a9a:	b530      	push	{r4, r5, lr}
 8008a9c:	4b18      	ldr	r3, [pc, #96]	@ (8008b00 <sniprintf+0x68>)
 8008a9e:	1e0c      	subs	r4, r1, #0
 8008aa0:	681d      	ldr	r5, [r3, #0]
 8008aa2:	b09d      	sub	sp, #116	@ 0x74
 8008aa4:	da08      	bge.n	8008ab8 <sniprintf+0x20>
 8008aa6:	238b      	movs	r3, #139	@ 0x8b
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	b01d      	add	sp, #116	@ 0x74
 8008ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab4:	b002      	add	sp, #8
 8008ab6:	4770      	bx	lr
 8008ab8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008abc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008ac6:	bf0c      	ite	eq
 8008ac8:	4623      	moveq	r3, r4
 8008aca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ad6:	9002      	str	r0, [sp, #8]
 8008ad8:	9006      	str	r0, [sp, #24]
 8008ada:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ade:	4628      	mov	r0, r5
 8008ae0:	ab21      	add	r3, sp, #132	@ 0x84
 8008ae2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008ae4:	a902      	add	r1, sp, #8
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	f002 fb40 	bl	800b16c <_svfiprintf_r>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	bfbc      	itt	lt
 8008af0:	238b      	movlt	r3, #139	@ 0x8b
 8008af2:	602b      	strlt	r3, [r5, #0]
 8008af4:	2c00      	cmp	r4, #0
 8008af6:	d0da      	beq.n	8008aae <sniprintf+0x16>
 8008af8:	2200      	movs	r2, #0
 8008afa:	9b02      	ldr	r3, [sp, #8]
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e7d6      	b.n	8008aae <sniprintf+0x16>
 8008b00:	20000018 	.word	0x20000018

08008b04 <siprintf>:
 8008b04:	b40e      	push	{r1, r2, r3}
 8008b06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b0a:	b510      	push	{r4, lr}
 8008b0c:	2400      	movs	r4, #0
 8008b0e:	b09d      	sub	sp, #116	@ 0x74
 8008b10:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008b12:	9002      	str	r0, [sp, #8]
 8008b14:	9006      	str	r0, [sp, #24]
 8008b16:	9107      	str	r1, [sp, #28]
 8008b18:	9104      	str	r1, [sp, #16]
 8008b1a:	4809      	ldr	r0, [pc, #36]	@ (8008b40 <siprintf+0x3c>)
 8008b1c:	4909      	ldr	r1, [pc, #36]	@ (8008b44 <siprintf+0x40>)
 8008b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b22:	9105      	str	r1, [sp, #20]
 8008b24:	6800      	ldr	r0, [r0, #0]
 8008b26:	a902      	add	r1, sp, #8
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008b2c:	f002 fb1e 	bl	800b16c <_svfiprintf_r>
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	701c      	strb	r4, [r3, #0]
 8008b34:	b01d      	add	sp, #116	@ 0x74
 8008b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b3a:	b003      	add	sp, #12
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	20000018 	.word	0x20000018
 8008b44:	ffff0208 	.word	0xffff0208

08008b48 <__sread>:
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b50:	f000 f86c 	bl	8008c2c <_read_r>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	bfab      	itete	ge
 8008b58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b5c:	181b      	addge	r3, r3, r0
 8008b5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b62:	bfac      	ite	ge
 8008b64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b66:	81a3      	strhlt	r3, [r4, #12]
 8008b68:	bd10      	pop	{r4, pc}

08008b6a <__swrite>:
 8008b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6e:	461f      	mov	r7, r3
 8008b70:	898b      	ldrh	r3, [r1, #12]
 8008b72:	4605      	mov	r5, r0
 8008b74:	05db      	lsls	r3, r3, #23
 8008b76:	460c      	mov	r4, r1
 8008b78:	4616      	mov	r6, r2
 8008b7a:	d505      	bpl.n	8008b88 <__swrite+0x1e>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b84:	f000 f840 	bl	8008c08 <_lseek_r>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	4632      	mov	r2, r6
 8008b8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b90:	81a3      	strh	r3, [r4, #12]
 8008b92:	4628      	mov	r0, r5
 8008b94:	463b      	mov	r3, r7
 8008b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9e:	f000 b867 	b.w	8008c70 <_write_r>

08008ba2 <__sseek>:
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008baa:	f000 f82d 	bl	8008c08 <_lseek_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	bf15      	itete	ne
 8008bb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bbe:	81a3      	strheq	r3, [r4, #12]
 8008bc0:	bf18      	it	ne
 8008bc2:	81a3      	strhne	r3, [r4, #12]
 8008bc4:	bd10      	pop	{r4, pc}

08008bc6 <__sclose>:
 8008bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bca:	f000 b80d 	b.w	8008be8 <_close_r>

08008bce <memset>:
 8008bce:	4603      	mov	r3, r0
 8008bd0:	4402      	add	r2, r0
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d100      	bne.n	8008bd8 <memset+0xa>
 8008bd6:	4770      	bx	lr
 8008bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8008bdc:	e7f9      	b.n	8008bd2 <memset+0x4>
	...

08008be0 <_localeconv_r>:
 8008be0:	4800      	ldr	r0, [pc, #0]	@ (8008be4 <_localeconv_r+0x4>)
 8008be2:	4770      	bx	lr
 8008be4:	20000158 	.word	0x20000158

08008be8 <_close_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	2300      	movs	r3, #0
 8008bec:	4d05      	ldr	r5, [pc, #20]	@ (8008c04 <_close_r+0x1c>)
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	602b      	str	r3, [r5, #0]
 8008bf4:	f7fe fde9 	bl	80077ca <_close>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_close_r+0x1a>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_close_r+0x1a>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	20000bb4 	.word	0x20000bb4

08008c08 <_lseek_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	2200      	movs	r2, #0
 8008c12:	4d05      	ldr	r5, [pc, #20]	@ (8008c28 <_lseek_r+0x20>)
 8008c14:	602a      	str	r2, [r5, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f7fe fdfb 	bl	8007812 <_lseek>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_lseek_r+0x1e>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_lseek_r+0x1e>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	20000bb4 	.word	0x20000bb4

08008c2c <_read_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	2200      	movs	r2, #0
 8008c36:	4d05      	ldr	r5, [pc, #20]	@ (8008c4c <_read_r+0x20>)
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f7fe fd8c 	bl	8007758 <_read>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_read_r+0x1e>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_read_r+0x1e>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	20000bb4 	.word	0x20000bb4

08008c50 <_sbrk_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	2300      	movs	r3, #0
 8008c54:	4d05      	ldr	r5, [pc, #20]	@ (8008c6c <_sbrk_r+0x1c>)
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7fe fde6 	bl	800782c <_sbrk>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_sbrk_r+0x1a>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_sbrk_r+0x1a>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	20000bb4 	.word	0x20000bb4

08008c70 <_write_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	4611      	mov	r1, r2
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4d05      	ldr	r5, [pc, #20]	@ (8008c90 <_write_r+0x20>)
 8008c7c:	602a      	str	r2, [r5, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f7fe fd87 	bl	8007792 <_write>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d102      	bne.n	8008c8e <_write_r+0x1e>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	b103      	cbz	r3, 8008c8e <_write_r+0x1e>
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	20000bb4 	.word	0x20000bb4

08008c94 <__errno>:
 8008c94:	4b01      	ldr	r3, [pc, #4]	@ (8008c9c <__errno+0x8>)
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	20000018 	.word	0x20000018

08008ca0 <__libc_init_array>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	4d0c      	ldr	r5, [pc, #48]	@ (8008cd8 <__libc_init_array+0x38>)
 8008ca6:	4c0d      	ldr	r4, [pc, #52]	@ (8008cdc <__libc_init_array+0x3c>)
 8008ca8:	1b64      	subs	r4, r4, r5
 8008caa:	10a4      	asrs	r4, r4, #2
 8008cac:	42a6      	cmp	r6, r4
 8008cae:	d109      	bne.n	8008cc4 <__libc_init_array+0x24>
 8008cb0:	f003 faa6 	bl	800c200 <_init>
 8008cb4:	2600      	movs	r6, #0
 8008cb6:	4d0a      	ldr	r5, [pc, #40]	@ (8008ce0 <__libc_init_array+0x40>)
 8008cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8008ce4 <__libc_init_array+0x44>)
 8008cba:	1b64      	subs	r4, r4, r5
 8008cbc:	10a4      	asrs	r4, r4, #2
 8008cbe:	42a6      	cmp	r6, r4
 8008cc0:	d105      	bne.n	8008cce <__libc_init_array+0x2e>
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc8:	4798      	blx	r3
 8008cca:	3601      	adds	r6, #1
 8008ccc:	e7ee      	b.n	8008cac <__libc_init_array+0xc>
 8008cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd2:	4798      	blx	r3
 8008cd4:	3601      	adds	r6, #1
 8008cd6:	e7f2      	b.n	8008cbe <__libc_init_array+0x1e>
 8008cd8:	0800e9bc 	.word	0x0800e9bc
 8008cdc:	0800e9bc 	.word	0x0800e9bc
 8008ce0:	0800e9bc 	.word	0x0800e9bc
 8008ce4:	0800e9c0 	.word	0x0800e9c0

08008ce8 <__retarget_lock_init_recursive>:
 8008ce8:	4770      	bx	lr

08008cea <__retarget_lock_acquire_recursive>:
 8008cea:	4770      	bx	lr

08008cec <__retarget_lock_release_recursive>:
 8008cec:	4770      	bx	lr

08008cee <memchr>:
 8008cee:	4603      	mov	r3, r0
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	b2c9      	uxtb	r1, r1
 8008cf4:	4402      	add	r2, r0
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	d101      	bne.n	8008d00 <memchr+0x12>
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	e003      	b.n	8008d08 <memchr+0x1a>
 8008d00:	7804      	ldrb	r4, [r0, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	428c      	cmp	r4, r1
 8008d06:	d1f6      	bne.n	8008cf6 <memchr+0x8>
 8008d08:	bd10      	pop	{r4, pc}

08008d0a <memcpy>:
 8008d0a:	440a      	add	r2, r1
 8008d0c:	4291      	cmp	r1, r2
 8008d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d12:	d100      	bne.n	8008d16 <memcpy+0xc>
 8008d14:	4770      	bx	lr
 8008d16:	b510      	push	{r4, lr}
 8008d18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d1c:	4291      	cmp	r1, r2
 8008d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d22:	d1f9      	bne.n	8008d18 <memcpy+0xe>
 8008d24:	bd10      	pop	{r4, pc}
	...

08008d28 <nanf>:
 8008d28:	4800      	ldr	r0, [pc, #0]	@ (8008d2c <nanf+0x4>)
 8008d2a:	4770      	bx	lr
 8008d2c:	7fc00000 	.word	0x7fc00000

08008d30 <quorem>:
 8008d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	6903      	ldr	r3, [r0, #16]
 8008d36:	690c      	ldr	r4, [r1, #16]
 8008d38:	4607      	mov	r7, r0
 8008d3a:	42a3      	cmp	r3, r4
 8008d3c:	db7e      	blt.n	8008e3c <quorem+0x10c>
 8008d3e:	3c01      	subs	r4, #1
 8008d40:	00a3      	lsls	r3, r4, #2
 8008d42:	f100 0514 	add.w	r5, r0, #20
 8008d46:	f101 0814 	add.w	r8, r1, #20
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d66:	d32e      	bcc.n	8008dc6 <quorem+0x96>
 8008d68:	f04f 0a00 	mov.w	sl, #0
 8008d6c:	46c4      	mov	ip, r8
 8008d6e:	46ae      	mov	lr, r5
 8008d70:	46d3      	mov	fp, sl
 8008d72:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d76:	b298      	uxth	r0, r3
 8008d78:	fb06 a000 	mla	r0, r6, r0, sl
 8008d7c:	0c1b      	lsrs	r3, r3, #16
 8008d7e:	0c02      	lsrs	r2, r0, #16
 8008d80:	fb06 2303 	mla	r3, r6, r3, r2
 8008d84:	f8de 2000 	ldr.w	r2, [lr]
 8008d88:	b280      	uxth	r0, r0
 8008d8a:	b292      	uxth	r2, r2
 8008d8c:	1a12      	subs	r2, r2, r0
 8008d8e:	445a      	add	r2, fp
 8008d90:	f8de 0000 	ldr.w	r0, [lr]
 8008d94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008da2:	b292      	uxth	r2, r2
 8008da4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008da8:	45e1      	cmp	r9, ip
 8008daa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008dae:	f84e 2b04 	str.w	r2, [lr], #4
 8008db2:	d2de      	bcs.n	8008d72 <quorem+0x42>
 8008db4:	9b00      	ldr	r3, [sp, #0]
 8008db6:	58eb      	ldr	r3, [r5, r3]
 8008db8:	b92b      	cbnz	r3, 8008dc6 <quorem+0x96>
 8008dba:	9b01      	ldr	r3, [sp, #4]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	d32f      	bcc.n	8008e24 <quorem+0xf4>
 8008dc4:	613c      	str	r4, [r7, #16]
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f001 f912 	bl	8009ff0 <__mcmp>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	db25      	blt.n	8008e1c <quorem+0xec>
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008dd8:	f8d1 c000 	ldr.w	ip, [r1]
 8008ddc:	fa1f fe82 	uxth.w	lr, r2
 8008de0:	fa1f f38c 	uxth.w	r3, ip
 8008de4:	eba3 030e 	sub.w	r3, r3, lr
 8008de8:	4403      	add	r3, r0
 8008dea:	0c12      	lsrs	r2, r2, #16
 8008dec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008df0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dfa:	45c1      	cmp	r9, r8
 8008dfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e00:	f841 3b04 	str.w	r3, [r1], #4
 8008e04:	d2e6      	bcs.n	8008dd4 <quorem+0xa4>
 8008e06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e0e:	b922      	cbnz	r2, 8008e1a <quorem+0xea>
 8008e10:	3b04      	subs	r3, #4
 8008e12:	429d      	cmp	r5, r3
 8008e14:	461a      	mov	r2, r3
 8008e16:	d30b      	bcc.n	8008e30 <quorem+0x100>
 8008e18:	613c      	str	r4, [r7, #16]
 8008e1a:	3601      	adds	r6, #1
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	b003      	add	sp, #12
 8008e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e24:	6812      	ldr	r2, [r2, #0]
 8008e26:	3b04      	subs	r3, #4
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	d1cb      	bne.n	8008dc4 <quorem+0x94>
 8008e2c:	3c01      	subs	r4, #1
 8008e2e:	e7c6      	b.n	8008dbe <quorem+0x8e>
 8008e30:	6812      	ldr	r2, [r2, #0]
 8008e32:	3b04      	subs	r3, #4
 8008e34:	2a00      	cmp	r2, #0
 8008e36:	d1ef      	bne.n	8008e18 <quorem+0xe8>
 8008e38:	3c01      	subs	r4, #1
 8008e3a:	e7ea      	b.n	8008e12 <quorem+0xe2>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e7ee      	b.n	8008e1e <quorem+0xee>

08008e40 <_dtoa_r>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	4614      	mov	r4, r2
 8008e46:	461d      	mov	r5, r3
 8008e48:	69c7      	ldr	r7, [r0, #28]
 8008e4a:	b097      	sub	sp, #92	@ 0x5c
 8008e4c:	4681      	mov	r9, r0
 8008e4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008e52:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008e54:	b97f      	cbnz	r7, 8008e76 <_dtoa_r+0x36>
 8008e56:	2010      	movs	r0, #16
 8008e58:	f7fe fe3a 	bl	8007ad0 <malloc>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	f8c9 001c 	str.w	r0, [r9, #28]
 8008e62:	b920      	cbnz	r0, 8008e6e <_dtoa_r+0x2e>
 8008e64:	21ef      	movs	r1, #239	@ 0xef
 8008e66:	4bac      	ldr	r3, [pc, #688]	@ (8009118 <_dtoa_r+0x2d8>)
 8008e68:	48ac      	ldr	r0, [pc, #688]	@ (800911c <_dtoa_r+0x2dc>)
 8008e6a:	f002 fb55 	bl	800b518 <__assert_func>
 8008e6e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e72:	6007      	str	r7, [r0, #0]
 8008e74:	60c7      	str	r7, [r0, #12]
 8008e76:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e7a:	6819      	ldr	r1, [r3, #0]
 8008e7c:	b159      	cbz	r1, 8008e96 <_dtoa_r+0x56>
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	2301      	movs	r3, #1
 8008e82:	4093      	lsls	r3, r2
 8008e84:	604a      	str	r2, [r1, #4]
 8008e86:	608b      	str	r3, [r1, #8]
 8008e88:	4648      	mov	r0, r9
 8008e8a:	f000 fe35 	bl	8009af8 <_Bfree>
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	1e2b      	subs	r3, r5, #0
 8008e98:	bfaf      	iteee	ge
 8008e9a:	2300      	movge	r3, #0
 8008e9c:	2201      	movlt	r2, #1
 8008e9e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ea2:	9307      	strlt	r3, [sp, #28]
 8008ea4:	bfa8      	it	ge
 8008ea6:	6033      	strge	r3, [r6, #0]
 8008ea8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008eac:	4b9c      	ldr	r3, [pc, #624]	@ (8009120 <_dtoa_r+0x2e0>)
 8008eae:	bfb8      	it	lt
 8008eb0:	6032      	strlt	r2, [r6, #0]
 8008eb2:	ea33 0308 	bics.w	r3, r3, r8
 8008eb6:	d112      	bne.n	8008ede <_dtoa_r+0x9e>
 8008eb8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008ebc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008ec4:	4323      	orrs	r3, r4
 8008ec6:	f000 855e 	beq.w	8009986 <_dtoa_r+0xb46>
 8008eca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008ecc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009124 <_dtoa_r+0x2e4>
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 8560 	beq.w	8009996 <_dtoa_r+0xb56>
 8008ed6:	f10a 0303 	add.w	r3, sl, #3
 8008eda:	f000 bd5a 	b.w	8009992 <_dtoa_r+0xb52>
 8008ede:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ee2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eea:	2200      	movs	r2, #0
 8008eec:	2300      	movs	r3, #0
 8008eee:	f7f7 fd5b 	bl	80009a8 <__aeabi_dcmpeq>
 8008ef2:	4607      	mov	r7, r0
 8008ef4:	b158      	cbz	r0, 8008f0e <_dtoa_r+0xce>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008efe:	b113      	cbz	r3, 8008f06 <_dtoa_r+0xc6>
 8008f00:	4b89      	ldr	r3, [pc, #548]	@ (8009128 <_dtoa_r+0x2e8>)
 8008f02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800912c <_dtoa_r+0x2ec>
 8008f0a:	f000 bd44 	b.w	8009996 <_dtoa_r+0xb56>
 8008f0e:	ab14      	add	r3, sp, #80	@ 0x50
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	ab15      	add	r3, sp, #84	@ 0x54
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	4648      	mov	r0, r9
 8008f18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f1c:	f001 f980 	bl	800a220 <__d2b>
 8008f20:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008f24:	9003      	str	r0, [sp, #12]
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	d078      	beq.n	800901c <_dtoa_r+0x1dc>
 8008f2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f30:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f38:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008f3c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008f40:	9712      	str	r7, [sp, #72]	@ 0x48
 8008f42:	4619      	mov	r1, r3
 8008f44:	2200      	movs	r2, #0
 8008f46:	4b7a      	ldr	r3, [pc, #488]	@ (8009130 <_dtoa_r+0x2f0>)
 8008f48:	f7f7 f90e 	bl	8000168 <__aeabi_dsub>
 8008f4c:	a36c      	add	r3, pc, #432	@ (adr r3, 8009100 <_dtoa_r+0x2c0>)
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f7f7 fac1 	bl	80004d8 <__aeabi_dmul>
 8008f56:	a36c      	add	r3, pc, #432	@ (adr r3, 8009108 <_dtoa_r+0x2c8>)
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	f7f7 f906 	bl	800016c <__adddf3>
 8008f60:	4604      	mov	r4, r0
 8008f62:	4630      	mov	r0, r6
 8008f64:	460d      	mov	r5, r1
 8008f66:	f7f7 fa4d 	bl	8000404 <__aeabi_i2d>
 8008f6a:	a369      	add	r3, pc, #420	@ (adr r3, 8009110 <_dtoa_r+0x2d0>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f7f7 fab2 	bl	80004d8 <__aeabi_dmul>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 f8f6 	bl	800016c <__adddf3>
 8008f80:	4604      	mov	r4, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	f7f7 fd58 	bl	8000a38 <__aeabi_d2iz>
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4607      	mov	r7, r0
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 fd13 	bl	80009bc <__aeabi_dcmplt>
 8008f96:	b140      	cbz	r0, 8008faa <_dtoa_r+0x16a>
 8008f98:	4638      	mov	r0, r7
 8008f9a:	f7f7 fa33 	bl	8000404 <__aeabi_i2d>
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	462b      	mov	r3, r5
 8008fa2:	f7f7 fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8008fa6:	b900      	cbnz	r0, 8008faa <_dtoa_r+0x16a>
 8008fa8:	3f01      	subs	r7, #1
 8008faa:	2f16      	cmp	r7, #22
 8008fac:	d854      	bhi.n	8009058 <_dtoa_r+0x218>
 8008fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fb2:	4b60      	ldr	r3, [pc, #384]	@ (8009134 <_dtoa_r+0x2f4>)
 8008fb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	f7f7 fcfe 	bl	80009bc <__aeabi_dcmplt>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d04b      	beq.n	800905c <_dtoa_r+0x21c>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	3f01      	subs	r7, #1
 8008fc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008fcc:	1b9b      	subs	r3, r3, r6
 8008fce:	1e5a      	subs	r2, r3, #1
 8008fd0:	bf49      	itett	mi
 8008fd2:	f1c3 0301 	rsbmi	r3, r3, #1
 8008fd6:	2300      	movpl	r3, #0
 8008fd8:	9304      	strmi	r3, [sp, #16]
 8008fda:	2300      	movmi	r3, #0
 8008fdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fde:	bf54      	ite	pl
 8008fe0:	9304      	strpl	r3, [sp, #16]
 8008fe2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008fe4:	2f00      	cmp	r7, #0
 8008fe6:	db3b      	blt.n	8009060 <_dtoa_r+0x220>
 8008fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fea:	970e      	str	r7, [sp, #56]	@ 0x38
 8008fec:	443b      	add	r3, r7
 8008fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ff4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ff6:	2b09      	cmp	r3, #9
 8008ff8:	d865      	bhi.n	80090c6 <_dtoa_r+0x286>
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	bfc4      	itt	gt
 8008ffe:	3b04      	subgt	r3, #4
 8009000:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009002:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009004:	bfc8      	it	gt
 8009006:	2400      	movgt	r4, #0
 8009008:	f1a3 0302 	sub.w	r3, r3, #2
 800900c:	bfd8      	it	le
 800900e:	2401      	movle	r4, #1
 8009010:	2b03      	cmp	r3, #3
 8009012:	d864      	bhi.n	80090de <_dtoa_r+0x29e>
 8009014:	e8df f003 	tbb	[pc, r3]
 8009018:	2c385553 	.word	0x2c385553
 800901c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009020:	441e      	add	r6, r3
 8009022:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009026:	2b20      	cmp	r3, #32
 8009028:	bfc1      	itttt	gt
 800902a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800902e:	fa08 f803 	lslgt.w	r8, r8, r3
 8009032:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009036:	fa24 f303 	lsrgt.w	r3, r4, r3
 800903a:	bfd6      	itet	le
 800903c:	f1c3 0320 	rsble	r3, r3, #32
 8009040:	ea48 0003 	orrgt.w	r0, r8, r3
 8009044:	fa04 f003 	lslle.w	r0, r4, r3
 8009048:	f7f7 f9cc 	bl	80003e4 <__aeabi_ui2d>
 800904c:	2201      	movs	r2, #1
 800904e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009052:	3e01      	subs	r6, #1
 8009054:	9212      	str	r2, [sp, #72]	@ 0x48
 8009056:	e774      	b.n	8008f42 <_dtoa_r+0x102>
 8009058:	2301      	movs	r3, #1
 800905a:	e7b5      	b.n	8008fc8 <_dtoa_r+0x188>
 800905c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800905e:	e7b4      	b.n	8008fca <_dtoa_r+0x18a>
 8009060:	9b04      	ldr	r3, [sp, #16]
 8009062:	1bdb      	subs	r3, r3, r7
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	427b      	negs	r3, r7
 8009068:	930a      	str	r3, [sp, #40]	@ 0x28
 800906a:	2300      	movs	r3, #0
 800906c:	930e      	str	r3, [sp, #56]	@ 0x38
 800906e:	e7c1      	b.n	8008ff4 <_dtoa_r+0x1b4>
 8009070:	2301      	movs	r3, #1
 8009072:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009074:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009076:	eb07 0b03 	add.w	fp, r7, r3
 800907a:	f10b 0301 	add.w	r3, fp, #1
 800907e:	2b01      	cmp	r3, #1
 8009080:	9308      	str	r3, [sp, #32]
 8009082:	bfb8      	it	lt
 8009084:	2301      	movlt	r3, #1
 8009086:	e006      	b.n	8009096 <_dtoa_r+0x256>
 8009088:	2301      	movs	r3, #1
 800908a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800908c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800908e:	2b00      	cmp	r3, #0
 8009090:	dd28      	ble.n	80090e4 <_dtoa_r+0x2a4>
 8009092:	469b      	mov	fp, r3
 8009094:	9308      	str	r3, [sp, #32]
 8009096:	2100      	movs	r1, #0
 8009098:	2204      	movs	r2, #4
 800909a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800909e:	f102 0514 	add.w	r5, r2, #20
 80090a2:	429d      	cmp	r5, r3
 80090a4:	d926      	bls.n	80090f4 <_dtoa_r+0x2b4>
 80090a6:	6041      	str	r1, [r0, #4]
 80090a8:	4648      	mov	r0, r9
 80090aa:	f000 fce5 	bl	8009a78 <_Balloc>
 80090ae:	4682      	mov	sl, r0
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d143      	bne.n	800913c <_dtoa_r+0x2fc>
 80090b4:	4602      	mov	r2, r0
 80090b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80090ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009138 <_dtoa_r+0x2f8>)
 80090bc:	e6d4      	b.n	8008e68 <_dtoa_r+0x28>
 80090be:	2300      	movs	r3, #0
 80090c0:	e7e3      	b.n	800908a <_dtoa_r+0x24a>
 80090c2:	2300      	movs	r3, #0
 80090c4:	e7d5      	b.n	8009072 <_dtoa_r+0x232>
 80090c6:	2401      	movs	r4, #1
 80090c8:	2300      	movs	r3, #0
 80090ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80090cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80090ce:	f04f 3bff 	mov.w	fp, #4294967295
 80090d2:	2200      	movs	r2, #0
 80090d4:	2312      	movs	r3, #18
 80090d6:	f8cd b020 	str.w	fp, [sp, #32]
 80090da:	9221      	str	r2, [sp, #132]	@ 0x84
 80090dc:	e7db      	b.n	8009096 <_dtoa_r+0x256>
 80090de:	2301      	movs	r3, #1
 80090e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090e2:	e7f4      	b.n	80090ce <_dtoa_r+0x28e>
 80090e4:	f04f 0b01 	mov.w	fp, #1
 80090e8:	465b      	mov	r3, fp
 80090ea:	f8cd b020 	str.w	fp, [sp, #32]
 80090ee:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80090f2:	e7d0      	b.n	8009096 <_dtoa_r+0x256>
 80090f4:	3101      	adds	r1, #1
 80090f6:	0052      	lsls	r2, r2, #1
 80090f8:	e7d1      	b.n	800909e <_dtoa_r+0x25e>
 80090fa:	bf00      	nop
 80090fc:	f3af 8000 	nop.w
 8009100:	636f4361 	.word	0x636f4361
 8009104:	3fd287a7 	.word	0x3fd287a7
 8009108:	8b60c8b3 	.word	0x8b60c8b3
 800910c:	3fc68a28 	.word	0x3fc68a28
 8009110:	509f79fb 	.word	0x509f79fb
 8009114:	3fd34413 	.word	0x3fd34413
 8009118:	0800e5d2 	.word	0x0800e5d2
 800911c:	0800e5e9 	.word	0x0800e5e9
 8009120:	7ff00000 	.word	0x7ff00000
 8009124:	0800e5ce 	.word	0x0800e5ce
 8009128:	0800e59d 	.word	0x0800e59d
 800912c:	0800e59c 	.word	0x0800e59c
 8009130:	3ff80000 	.word	0x3ff80000
 8009134:	0800e798 	.word	0x0800e798
 8009138:	0800e641 	.word	0x0800e641
 800913c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009140:	6018      	str	r0, [r3, #0]
 8009142:	9b08      	ldr	r3, [sp, #32]
 8009144:	2b0e      	cmp	r3, #14
 8009146:	f200 80a1 	bhi.w	800928c <_dtoa_r+0x44c>
 800914a:	2c00      	cmp	r4, #0
 800914c:	f000 809e 	beq.w	800928c <_dtoa_r+0x44c>
 8009150:	2f00      	cmp	r7, #0
 8009152:	dd33      	ble.n	80091bc <_dtoa_r+0x37c>
 8009154:	4b9c      	ldr	r3, [pc, #624]	@ (80093c8 <_dtoa_r+0x588>)
 8009156:	f007 020f 	and.w	r2, r7, #15
 800915a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800915e:	05f8      	lsls	r0, r7, #23
 8009160:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009164:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009168:	ea4f 1427 	mov.w	r4, r7, asr #4
 800916c:	d516      	bpl.n	800919c <_dtoa_r+0x35c>
 800916e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009172:	4b96      	ldr	r3, [pc, #600]	@ (80093cc <_dtoa_r+0x58c>)
 8009174:	2603      	movs	r6, #3
 8009176:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800917a:	f7f7 fad7 	bl	800072c <__aeabi_ddiv>
 800917e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009182:	f004 040f 	and.w	r4, r4, #15
 8009186:	4d91      	ldr	r5, [pc, #580]	@ (80093cc <_dtoa_r+0x58c>)
 8009188:	b954      	cbnz	r4, 80091a0 <_dtoa_r+0x360>
 800918a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800918e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009192:	f7f7 facb 	bl	800072c <__aeabi_ddiv>
 8009196:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800919a:	e028      	b.n	80091ee <_dtoa_r+0x3ae>
 800919c:	2602      	movs	r6, #2
 800919e:	e7f2      	b.n	8009186 <_dtoa_r+0x346>
 80091a0:	07e1      	lsls	r1, r4, #31
 80091a2:	d508      	bpl.n	80091b6 <_dtoa_r+0x376>
 80091a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80091a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091ac:	f7f7 f994 	bl	80004d8 <__aeabi_dmul>
 80091b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091b4:	3601      	adds	r6, #1
 80091b6:	1064      	asrs	r4, r4, #1
 80091b8:	3508      	adds	r5, #8
 80091ba:	e7e5      	b.n	8009188 <_dtoa_r+0x348>
 80091bc:	f000 80af 	beq.w	800931e <_dtoa_r+0x4de>
 80091c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091c4:	427c      	negs	r4, r7
 80091c6:	4b80      	ldr	r3, [pc, #512]	@ (80093c8 <_dtoa_r+0x588>)
 80091c8:	f004 020f 	and.w	r2, r4, #15
 80091cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	f7f7 f980 	bl	80004d8 <__aeabi_dmul>
 80091d8:	2602      	movs	r6, #2
 80091da:	2300      	movs	r3, #0
 80091dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091e0:	4d7a      	ldr	r5, [pc, #488]	@ (80093cc <_dtoa_r+0x58c>)
 80091e2:	1124      	asrs	r4, r4, #4
 80091e4:	2c00      	cmp	r4, #0
 80091e6:	f040 808f 	bne.w	8009308 <_dtoa_r+0x4c8>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1d3      	bne.n	8009196 <_dtoa_r+0x356>
 80091ee:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80091f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 8094 	beq.w	8009322 <_dtoa_r+0x4e2>
 80091fa:	2200      	movs	r2, #0
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	4b73      	ldr	r3, [pc, #460]	@ (80093d0 <_dtoa_r+0x590>)
 8009202:	f7f7 fbdb 	bl	80009bc <__aeabi_dcmplt>
 8009206:	2800      	cmp	r0, #0
 8009208:	f000 808b 	beq.w	8009322 <_dtoa_r+0x4e2>
 800920c:	9b08      	ldr	r3, [sp, #32]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 8087 	beq.w	8009322 <_dtoa_r+0x4e2>
 8009214:	f1bb 0f00 	cmp.w	fp, #0
 8009218:	dd34      	ble.n	8009284 <_dtoa_r+0x444>
 800921a:	4620      	mov	r0, r4
 800921c:	2200      	movs	r2, #0
 800921e:	4629      	mov	r1, r5
 8009220:	4b6c      	ldr	r3, [pc, #432]	@ (80093d4 <_dtoa_r+0x594>)
 8009222:	f7f7 f959 	bl	80004d8 <__aeabi_dmul>
 8009226:	465c      	mov	r4, fp
 8009228:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800922c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009230:	3601      	adds	r6, #1
 8009232:	4630      	mov	r0, r6
 8009234:	f7f7 f8e6 	bl	8000404 <__aeabi_i2d>
 8009238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800923c:	f7f7 f94c 	bl	80004d8 <__aeabi_dmul>
 8009240:	2200      	movs	r2, #0
 8009242:	4b65      	ldr	r3, [pc, #404]	@ (80093d8 <_dtoa_r+0x598>)
 8009244:	f7f6 ff92 	bl	800016c <__adddf3>
 8009248:	4605      	mov	r5, r0
 800924a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800924e:	2c00      	cmp	r4, #0
 8009250:	d16a      	bne.n	8009328 <_dtoa_r+0x4e8>
 8009252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009256:	2200      	movs	r2, #0
 8009258:	4b60      	ldr	r3, [pc, #384]	@ (80093dc <_dtoa_r+0x59c>)
 800925a:	f7f6 ff85 	bl	8000168 <__aeabi_dsub>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009266:	462a      	mov	r2, r5
 8009268:	4633      	mov	r3, r6
 800926a:	f7f7 fbc5 	bl	80009f8 <__aeabi_dcmpgt>
 800926e:	2800      	cmp	r0, #0
 8009270:	f040 8298 	bne.w	80097a4 <_dtoa_r+0x964>
 8009274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009278:	462a      	mov	r2, r5
 800927a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800927e:	f7f7 fb9d 	bl	80009bc <__aeabi_dcmplt>
 8009282:	bb38      	cbnz	r0, 80092d4 <_dtoa_r+0x494>
 8009284:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009288:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800928c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800928e:	2b00      	cmp	r3, #0
 8009290:	f2c0 8157 	blt.w	8009542 <_dtoa_r+0x702>
 8009294:	2f0e      	cmp	r7, #14
 8009296:	f300 8154 	bgt.w	8009542 <_dtoa_r+0x702>
 800929a:	4b4b      	ldr	r3, [pc, #300]	@ (80093c8 <_dtoa_r+0x588>)
 800929c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80092a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80092a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f280 80e5 	bge.w	800947a <_dtoa_r+0x63a>
 80092b0:	9b08      	ldr	r3, [sp, #32]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f300 80e1 	bgt.w	800947a <_dtoa_r+0x63a>
 80092b8:	d10c      	bne.n	80092d4 <_dtoa_r+0x494>
 80092ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092be:	2200      	movs	r2, #0
 80092c0:	4b46      	ldr	r3, [pc, #280]	@ (80093dc <_dtoa_r+0x59c>)
 80092c2:	f7f7 f909 	bl	80004d8 <__aeabi_dmul>
 80092c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092ca:	f7f7 fb8b 	bl	80009e4 <__aeabi_dcmpge>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f000 8266 	beq.w	80097a0 <_dtoa_r+0x960>
 80092d4:	2400      	movs	r4, #0
 80092d6:	4625      	mov	r5, r4
 80092d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80092da:	4656      	mov	r6, sl
 80092dc:	ea6f 0803 	mvn.w	r8, r3
 80092e0:	2700      	movs	r7, #0
 80092e2:	4621      	mov	r1, r4
 80092e4:	4648      	mov	r0, r9
 80092e6:	f000 fc07 	bl	8009af8 <_Bfree>
 80092ea:	2d00      	cmp	r5, #0
 80092ec:	f000 80bd 	beq.w	800946a <_dtoa_r+0x62a>
 80092f0:	b12f      	cbz	r7, 80092fe <_dtoa_r+0x4be>
 80092f2:	42af      	cmp	r7, r5
 80092f4:	d003      	beq.n	80092fe <_dtoa_r+0x4be>
 80092f6:	4639      	mov	r1, r7
 80092f8:	4648      	mov	r0, r9
 80092fa:	f000 fbfd 	bl	8009af8 <_Bfree>
 80092fe:	4629      	mov	r1, r5
 8009300:	4648      	mov	r0, r9
 8009302:	f000 fbf9 	bl	8009af8 <_Bfree>
 8009306:	e0b0      	b.n	800946a <_dtoa_r+0x62a>
 8009308:	07e2      	lsls	r2, r4, #31
 800930a:	d505      	bpl.n	8009318 <_dtoa_r+0x4d8>
 800930c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009310:	f7f7 f8e2 	bl	80004d8 <__aeabi_dmul>
 8009314:	2301      	movs	r3, #1
 8009316:	3601      	adds	r6, #1
 8009318:	1064      	asrs	r4, r4, #1
 800931a:	3508      	adds	r5, #8
 800931c:	e762      	b.n	80091e4 <_dtoa_r+0x3a4>
 800931e:	2602      	movs	r6, #2
 8009320:	e765      	b.n	80091ee <_dtoa_r+0x3ae>
 8009322:	46b8      	mov	r8, r7
 8009324:	9c08      	ldr	r4, [sp, #32]
 8009326:	e784      	b.n	8009232 <_dtoa_r+0x3f2>
 8009328:	4b27      	ldr	r3, [pc, #156]	@ (80093c8 <_dtoa_r+0x588>)
 800932a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800932c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009330:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009334:	4454      	add	r4, sl
 8009336:	2900      	cmp	r1, #0
 8009338:	d054      	beq.n	80093e4 <_dtoa_r+0x5a4>
 800933a:	2000      	movs	r0, #0
 800933c:	4928      	ldr	r1, [pc, #160]	@ (80093e0 <_dtoa_r+0x5a0>)
 800933e:	f7f7 f9f5 	bl	800072c <__aeabi_ddiv>
 8009342:	4633      	mov	r3, r6
 8009344:	462a      	mov	r2, r5
 8009346:	f7f6 ff0f 	bl	8000168 <__aeabi_dsub>
 800934a:	4656      	mov	r6, sl
 800934c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009354:	f7f7 fb70 	bl	8000a38 <__aeabi_d2iz>
 8009358:	4605      	mov	r5, r0
 800935a:	f7f7 f853 	bl	8000404 <__aeabi_i2d>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009366:	f7f6 feff 	bl	8000168 <__aeabi_dsub>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	3530      	adds	r5, #48	@ 0x30
 8009370:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009374:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009378:	f806 5b01 	strb.w	r5, [r6], #1
 800937c:	f7f7 fb1e 	bl	80009bc <__aeabi_dcmplt>
 8009380:	2800      	cmp	r0, #0
 8009382:	d172      	bne.n	800946a <_dtoa_r+0x62a>
 8009384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009388:	2000      	movs	r0, #0
 800938a:	4911      	ldr	r1, [pc, #68]	@ (80093d0 <_dtoa_r+0x590>)
 800938c:	f7f6 feec 	bl	8000168 <__aeabi_dsub>
 8009390:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009394:	f7f7 fb12 	bl	80009bc <__aeabi_dcmplt>
 8009398:	2800      	cmp	r0, #0
 800939a:	f040 80b4 	bne.w	8009506 <_dtoa_r+0x6c6>
 800939e:	42a6      	cmp	r6, r4
 80093a0:	f43f af70 	beq.w	8009284 <_dtoa_r+0x444>
 80093a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80093a8:	2200      	movs	r2, #0
 80093aa:	4b0a      	ldr	r3, [pc, #40]	@ (80093d4 <_dtoa_r+0x594>)
 80093ac:	f7f7 f894 	bl	80004d8 <__aeabi_dmul>
 80093b0:	2200      	movs	r2, #0
 80093b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093ba:	4b06      	ldr	r3, [pc, #24]	@ (80093d4 <_dtoa_r+0x594>)
 80093bc:	f7f7 f88c 	bl	80004d8 <__aeabi_dmul>
 80093c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80093c4:	e7c4      	b.n	8009350 <_dtoa_r+0x510>
 80093c6:	bf00      	nop
 80093c8:	0800e798 	.word	0x0800e798
 80093cc:	0800e770 	.word	0x0800e770
 80093d0:	3ff00000 	.word	0x3ff00000
 80093d4:	40240000 	.word	0x40240000
 80093d8:	401c0000 	.word	0x401c0000
 80093dc:	40140000 	.word	0x40140000
 80093e0:	3fe00000 	.word	0x3fe00000
 80093e4:	4631      	mov	r1, r6
 80093e6:	4628      	mov	r0, r5
 80093e8:	f7f7 f876 	bl	80004d8 <__aeabi_dmul>
 80093ec:	4656      	mov	r6, sl
 80093ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093f2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80093f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093f8:	f7f7 fb1e 	bl	8000a38 <__aeabi_d2iz>
 80093fc:	4605      	mov	r5, r0
 80093fe:	f7f7 f801 	bl	8000404 <__aeabi_i2d>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800940a:	f7f6 fead 	bl	8000168 <__aeabi_dsub>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	3530      	adds	r5, #48	@ 0x30
 8009414:	f806 5b01 	strb.w	r5, [r6], #1
 8009418:	42a6      	cmp	r6, r4
 800941a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800941e:	f04f 0200 	mov.w	r2, #0
 8009422:	d124      	bne.n	800946e <_dtoa_r+0x62e>
 8009424:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009428:	4bae      	ldr	r3, [pc, #696]	@ (80096e4 <_dtoa_r+0x8a4>)
 800942a:	f7f6 fe9f 	bl	800016c <__adddf3>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009436:	f7f7 fadf 	bl	80009f8 <__aeabi_dcmpgt>
 800943a:	2800      	cmp	r0, #0
 800943c:	d163      	bne.n	8009506 <_dtoa_r+0x6c6>
 800943e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009442:	2000      	movs	r0, #0
 8009444:	49a7      	ldr	r1, [pc, #668]	@ (80096e4 <_dtoa_r+0x8a4>)
 8009446:	f7f6 fe8f 	bl	8000168 <__aeabi_dsub>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009452:	f7f7 fab3 	bl	80009bc <__aeabi_dcmplt>
 8009456:	2800      	cmp	r0, #0
 8009458:	f43f af14 	beq.w	8009284 <_dtoa_r+0x444>
 800945c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800945e:	1e73      	subs	r3, r6, #1
 8009460:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009462:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009466:	2b30      	cmp	r3, #48	@ 0x30
 8009468:	d0f8      	beq.n	800945c <_dtoa_r+0x61c>
 800946a:	4647      	mov	r7, r8
 800946c:	e03b      	b.n	80094e6 <_dtoa_r+0x6a6>
 800946e:	4b9e      	ldr	r3, [pc, #632]	@ (80096e8 <_dtoa_r+0x8a8>)
 8009470:	f7f7 f832 	bl	80004d8 <__aeabi_dmul>
 8009474:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009478:	e7bc      	b.n	80093f4 <_dtoa_r+0x5b4>
 800947a:	4656      	mov	r6, sl
 800947c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009484:	4620      	mov	r0, r4
 8009486:	4629      	mov	r1, r5
 8009488:	f7f7 f950 	bl	800072c <__aeabi_ddiv>
 800948c:	f7f7 fad4 	bl	8000a38 <__aeabi_d2iz>
 8009490:	4680      	mov	r8, r0
 8009492:	f7f6 ffb7 	bl	8000404 <__aeabi_i2d>
 8009496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800949a:	f7f7 f81d 	bl	80004d8 <__aeabi_dmul>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4620      	mov	r0, r4
 80094a4:	4629      	mov	r1, r5
 80094a6:	f7f6 fe5f 	bl	8000168 <__aeabi_dsub>
 80094aa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80094ae:	9d08      	ldr	r5, [sp, #32]
 80094b0:	f806 4b01 	strb.w	r4, [r6], #1
 80094b4:	eba6 040a 	sub.w	r4, r6, sl
 80094b8:	42a5      	cmp	r5, r4
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	d133      	bne.n	8009528 <_dtoa_r+0x6e8>
 80094c0:	f7f6 fe54 	bl	800016c <__adddf3>
 80094c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094c8:	4604      	mov	r4, r0
 80094ca:	460d      	mov	r5, r1
 80094cc:	f7f7 fa94 	bl	80009f8 <__aeabi_dcmpgt>
 80094d0:	b9c0      	cbnz	r0, 8009504 <_dtoa_r+0x6c4>
 80094d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094d6:	4620      	mov	r0, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	f7f7 fa65 	bl	80009a8 <__aeabi_dcmpeq>
 80094de:	b110      	cbz	r0, 80094e6 <_dtoa_r+0x6a6>
 80094e0:	f018 0f01 	tst.w	r8, #1
 80094e4:	d10e      	bne.n	8009504 <_dtoa_r+0x6c4>
 80094e6:	4648      	mov	r0, r9
 80094e8:	9903      	ldr	r1, [sp, #12]
 80094ea:	f000 fb05 	bl	8009af8 <_Bfree>
 80094ee:	2300      	movs	r3, #0
 80094f0:	7033      	strb	r3, [r6, #0]
 80094f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80094f4:	3701      	adds	r7, #1
 80094f6:	601f      	str	r7, [r3, #0]
 80094f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 824b 	beq.w	8009996 <_dtoa_r+0xb56>
 8009500:	601e      	str	r6, [r3, #0]
 8009502:	e248      	b.n	8009996 <_dtoa_r+0xb56>
 8009504:	46b8      	mov	r8, r7
 8009506:	4633      	mov	r3, r6
 8009508:	461e      	mov	r6, r3
 800950a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800950e:	2a39      	cmp	r2, #57	@ 0x39
 8009510:	d106      	bne.n	8009520 <_dtoa_r+0x6e0>
 8009512:	459a      	cmp	sl, r3
 8009514:	d1f8      	bne.n	8009508 <_dtoa_r+0x6c8>
 8009516:	2230      	movs	r2, #48	@ 0x30
 8009518:	f108 0801 	add.w	r8, r8, #1
 800951c:	f88a 2000 	strb.w	r2, [sl]
 8009520:	781a      	ldrb	r2, [r3, #0]
 8009522:	3201      	adds	r2, #1
 8009524:	701a      	strb	r2, [r3, #0]
 8009526:	e7a0      	b.n	800946a <_dtoa_r+0x62a>
 8009528:	2200      	movs	r2, #0
 800952a:	4b6f      	ldr	r3, [pc, #444]	@ (80096e8 <_dtoa_r+0x8a8>)
 800952c:	f7f6 ffd4 	bl	80004d8 <__aeabi_dmul>
 8009530:	2200      	movs	r2, #0
 8009532:	2300      	movs	r3, #0
 8009534:	4604      	mov	r4, r0
 8009536:	460d      	mov	r5, r1
 8009538:	f7f7 fa36 	bl	80009a8 <__aeabi_dcmpeq>
 800953c:	2800      	cmp	r0, #0
 800953e:	d09f      	beq.n	8009480 <_dtoa_r+0x640>
 8009540:	e7d1      	b.n	80094e6 <_dtoa_r+0x6a6>
 8009542:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009544:	2a00      	cmp	r2, #0
 8009546:	f000 80ea 	beq.w	800971e <_dtoa_r+0x8de>
 800954a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800954c:	2a01      	cmp	r2, #1
 800954e:	f300 80cd 	bgt.w	80096ec <_dtoa_r+0x8ac>
 8009552:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009554:	2a00      	cmp	r2, #0
 8009556:	f000 80c1 	beq.w	80096dc <_dtoa_r+0x89c>
 800955a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800955e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009560:	9e04      	ldr	r6, [sp, #16]
 8009562:	9a04      	ldr	r2, [sp, #16]
 8009564:	2101      	movs	r1, #1
 8009566:	441a      	add	r2, r3
 8009568:	9204      	str	r2, [sp, #16]
 800956a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800956c:	4648      	mov	r0, r9
 800956e:	441a      	add	r2, r3
 8009570:	9209      	str	r2, [sp, #36]	@ 0x24
 8009572:	f000 fbbf 	bl	8009cf4 <__i2b>
 8009576:	4605      	mov	r5, r0
 8009578:	b166      	cbz	r6, 8009594 <_dtoa_r+0x754>
 800957a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957c:	2b00      	cmp	r3, #0
 800957e:	dd09      	ble.n	8009594 <_dtoa_r+0x754>
 8009580:	42b3      	cmp	r3, r6
 8009582:	bfa8      	it	ge
 8009584:	4633      	movge	r3, r6
 8009586:	9a04      	ldr	r2, [sp, #16]
 8009588:	1af6      	subs	r6, r6, r3
 800958a:	1ad2      	subs	r2, r2, r3
 800958c:	9204      	str	r2, [sp, #16]
 800958e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	9309      	str	r3, [sp, #36]	@ 0x24
 8009594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009596:	b30b      	cbz	r3, 80095dc <_dtoa_r+0x79c>
 8009598:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 80c6 	beq.w	800972c <_dtoa_r+0x8ec>
 80095a0:	2c00      	cmp	r4, #0
 80095a2:	f000 80c0 	beq.w	8009726 <_dtoa_r+0x8e6>
 80095a6:	4629      	mov	r1, r5
 80095a8:	4622      	mov	r2, r4
 80095aa:	4648      	mov	r0, r9
 80095ac:	f000 fc5a 	bl	8009e64 <__pow5mult>
 80095b0:	9a03      	ldr	r2, [sp, #12]
 80095b2:	4601      	mov	r1, r0
 80095b4:	4605      	mov	r5, r0
 80095b6:	4648      	mov	r0, r9
 80095b8:	f000 fbb2 	bl	8009d20 <__multiply>
 80095bc:	9903      	ldr	r1, [sp, #12]
 80095be:	4680      	mov	r8, r0
 80095c0:	4648      	mov	r0, r9
 80095c2:	f000 fa99 	bl	8009af8 <_Bfree>
 80095c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095c8:	1b1b      	subs	r3, r3, r4
 80095ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80095cc:	f000 80b1 	beq.w	8009732 <_dtoa_r+0x8f2>
 80095d0:	4641      	mov	r1, r8
 80095d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095d4:	4648      	mov	r0, r9
 80095d6:	f000 fc45 	bl	8009e64 <__pow5mult>
 80095da:	9003      	str	r0, [sp, #12]
 80095dc:	2101      	movs	r1, #1
 80095de:	4648      	mov	r0, r9
 80095e0:	f000 fb88 	bl	8009cf4 <__i2b>
 80095e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095e6:	4604      	mov	r4, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 81d8 	beq.w	800999e <_dtoa_r+0xb5e>
 80095ee:	461a      	mov	r2, r3
 80095f0:	4601      	mov	r1, r0
 80095f2:	4648      	mov	r0, r9
 80095f4:	f000 fc36 	bl	8009e64 <__pow5mult>
 80095f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095fa:	4604      	mov	r4, r0
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	f300 809f 	bgt.w	8009740 <_dtoa_r+0x900>
 8009602:	9b06      	ldr	r3, [sp, #24]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f040 8097 	bne.w	8009738 <_dtoa_r+0x8f8>
 800960a:	9b07      	ldr	r3, [sp, #28]
 800960c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009610:	2b00      	cmp	r3, #0
 8009612:	f040 8093 	bne.w	800973c <_dtoa_r+0x8fc>
 8009616:	9b07      	ldr	r3, [sp, #28]
 8009618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800961c:	0d1b      	lsrs	r3, r3, #20
 800961e:	051b      	lsls	r3, r3, #20
 8009620:	b133      	cbz	r3, 8009630 <_dtoa_r+0x7f0>
 8009622:	9b04      	ldr	r3, [sp, #16]
 8009624:	3301      	adds	r3, #1
 8009626:	9304      	str	r3, [sp, #16]
 8009628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800962a:	3301      	adds	r3, #1
 800962c:	9309      	str	r3, [sp, #36]	@ 0x24
 800962e:	2301      	movs	r3, #1
 8009630:	930a      	str	r3, [sp, #40]	@ 0x28
 8009632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 81b8 	beq.w	80099aa <_dtoa_r+0xb6a>
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009640:	6918      	ldr	r0, [r3, #16]
 8009642:	f000 fb0b 	bl	8009c5c <__hi0bits>
 8009646:	f1c0 0020 	rsb	r0, r0, #32
 800964a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800964c:	4418      	add	r0, r3
 800964e:	f010 001f 	ands.w	r0, r0, #31
 8009652:	f000 8082 	beq.w	800975a <_dtoa_r+0x91a>
 8009656:	f1c0 0320 	rsb	r3, r0, #32
 800965a:	2b04      	cmp	r3, #4
 800965c:	dd73      	ble.n	8009746 <_dtoa_r+0x906>
 800965e:	9b04      	ldr	r3, [sp, #16]
 8009660:	f1c0 001c 	rsb	r0, r0, #28
 8009664:	4403      	add	r3, r0
 8009666:	9304      	str	r3, [sp, #16]
 8009668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966a:	4406      	add	r6, r0
 800966c:	4403      	add	r3, r0
 800966e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009670:	9b04      	ldr	r3, [sp, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	dd05      	ble.n	8009682 <_dtoa_r+0x842>
 8009676:	461a      	mov	r2, r3
 8009678:	4648      	mov	r0, r9
 800967a:	9903      	ldr	r1, [sp, #12]
 800967c:	f000 fc4c 	bl	8009f18 <__lshift>
 8009680:	9003      	str	r0, [sp, #12]
 8009682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009684:	2b00      	cmp	r3, #0
 8009686:	dd05      	ble.n	8009694 <_dtoa_r+0x854>
 8009688:	4621      	mov	r1, r4
 800968a:	461a      	mov	r2, r3
 800968c:	4648      	mov	r0, r9
 800968e:	f000 fc43 	bl	8009f18 <__lshift>
 8009692:	4604      	mov	r4, r0
 8009694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d061      	beq.n	800975e <_dtoa_r+0x91e>
 800969a:	4621      	mov	r1, r4
 800969c:	9803      	ldr	r0, [sp, #12]
 800969e:	f000 fca7 	bl	8009ff0 <__mcmp>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	da5b      	bge.n	800975e <_dtoa_r+0x91e>
 80096a6:	2300      	movs	r3, #0
 80096a8:	220a      	movs	r2, #10
 80096aa:	4648      	mov	r0, r9
 80096ac:	9903      	ldr	r1, [sp, #12]
 80096ae:	f000 fa45 	bl	8009b3c <__multadd>
 80096b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096b4:	f107 38ff 	add.w	r8, r7, #4294967295
 80096b8:	9003      	str	r0, [sp, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 8177 	beq.w	80099ae <_dtoa_r+0xb6e>
 80096c0:	4629      	mov	r1, r5
 80096c2:	2300      	movs	r3, #0
 80096c4:	220a      	movs	r2, #10
 80096c6:	4648      	mov	r0, r9
 80096c8:	f000 fa38 	bl	8009b3c <__multadd>
 80096cc:	f1bb 0f00 	cmp.w	fp, #0
 80096d0:	4605      	mov	r5, r0
 80096d2:	dc6f      	bgt.n	80097b4 <_dtoa_r+0x974>
 80096d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	dc49      	bgt.n	800976e <_dtoa_r+0x92e>
 80096da:	e06b      	b.n	80097b4 <_dtoa_r+0x974>
 80096dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80096de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80096e2:	e73c      	b.n	800955e <_dtoa_r+0x71e>
 80096e4:	3fe00000 	.word	0x3fe00000
 80096e8:	40240000 	.word	0x40240000
 80096ec:	9b08      	ldr	r3, [sp, #32]
 80096ee:	1e5c      	subs	r4, r3, #1
 80096f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	db09      	blt.n	800970a <_dtoa_r+0x8ca>
 80096f6:	1b1c      	subs	r4, r3, r4
 80096f8:	9b08      	ldr	r3, [sp, #32]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f6bf af30 	bge.w	8009560 <_dtoa_r+0x720>
 8009700:	9b04      	ldr	r3, [sp, #16]
 8009702:	9a08      	ldr	r2, [sp, #32]
 8009704:	1a9e      	subs	r6, r3, r2
 8009706:	2300      	movs	r3, #0
 8009708:	e72b      	b.n	8009562 <_dtoa_r+0x722>
 800970a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800970c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800970e:	1ae3      	subs	r3, r4, r3
 8009710:	441a      	add	r2, r3
 8009712:	940a      	str	r4, [sp, #40]	@ 0x28
 8009714:	9e04      	ldr	r6, [sp, #16]
 8009716:	2400      	movs	r4, #0
 8009718:	9b08      	ldr	r3, [sp, #32]
 800971a:	920e      	str	r2, [sp, #56]	@ 0x38
 800971c:	e721      	b.n	8009562 <_dtoa_r+0x722>
 800971e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009720:	9e04      	ldr	r6, [sp, #16]
 8009722:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009724:	e728      	b.n	8009578 <_dtoa_r+0x738>
 8009726:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800972a:	e751      	b.n	80095d0 <_dtoa_r+0x790>
 800972c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800972e:	9903      	ldr	r1, [sp, #12]
 8009730:	e750      	b.n	80095d4 <_dtoa_r+0x794>
 8009732:	f8cd 800c 	str.w	r8, [sp, #12]
 8009736:	e751      	b.n	80095dc <_dtoa_r+0x79c>
 8009738:	2300      	movs	r3, #0
 800973a:	e779      	b.n	8009630 <_dtoa_r+0x7f0>
 800973c:	9b06      	ldr	r3, [sp, #24]
 800973e:	e777      	b.n	8009630 <_dtoa_r+0x7f0>
 8009740:	2300      	movs	r3, #0
 8009742:	930a      	str	r3, [sp, #40]	@ 0x28
 8009744:	e779      	b.n	800963a <_dtoa_r+0x7fa>
 8009746:	d093      	beq.n	8009670 <_dtoa_r+0x830>
 8009748:	9a04      	ldr	r2, [sp, #16]
 800974a:	331c      	adds	r3, #28
 800974c:	441a      	add	r2, r3
 800974e:	9204      	str	r2, [sp, #16]
 8009750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009752:	441e      	add	r6, r3
 8009754:	441a      	add	r2, r3
 8009756:	9209      	str	r2, [sp, #36]	@ 0x24
 8009758:	e78a      	b.n	8009670 <_dtoa_r+0x830>
 800975a:	4603      	mov	r3, r0
 800975c:	e7f4      	b.n	8009748 <_dtoa_r+0x908>
 800975e:	9b08      	ldr	r3, [sp, #32]
 8009760:	46b8      	mov	r8, r7
 8009762:	2b00      	cmp	r3, #0
 8009764:	dc20      	bgt.n	80097a8 <_dtoa_r+0x968>
 8009766:	469b      	mov	fp, r3
 8009768:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800976a:	2b02      	cmp	r3, #2
 800976c:	dd1e      	ble.n	80097ac <_dtoa_r+0x96c>
 800976e:	f1bb 0f00 	cmp.w	fp, #0
 8009772:	f47f adb1 	bne.w	80092d8 <_dtoa_r+0x498>
 8009776:	4621      	mov	r1, r4
 8009778:	465b      	mov	r3, fp
 800977a:	2205      	movs	r2, #5
 800977c:	4648      	mov	r0, r9
 800977e:	f000 f9dd 	bl	8009b3c <__multadd>
 8009782:	4601      	mov	r1, r0
 8009784:	4604      	mov	r4, r0
 8009786:	9803      	ldr	r0, [sp, #12]
 8009788:	f000 fc32 	bl	8009ff0 <__mcmp>
 800978c:	2800      	cmp	r0, #0
 800978e:	f77f ada3 	ble.w	80092d8 <_dtoa_r+0x498>
 8009792:	4656      	mov	r6, sl
 8009794:	2331      	movs	r3, #49	@ 0x31
 8009796:	f108 0801 	add.w	r8, r8, #1
 800979a:	f806 3b01 	strb.w	r3, [r6], #1
 800979e:	e59f      	b.n	80092e0 <_dtoa_r+0x4a0>
 80097a0:	46b8      	mov	r8, r7
 80097a2:	9c08      	ldr	r4, [sp, #32]
 80097a4:	4625      	mov	r5, r4
 80097a6:	e7f4      	b.n	8009792 <_dtoa_r+0x952>
 80097a8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80097ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 8101 	beq.w	80099b6 <_dtoa_r+0xb76>
 80097b4:	2e00      	cmp	r6, #0
 80097b6:	dd05      	ble.n	80097c4 <_dtoa_r+0x984>
 80097b8:	4629      	mov	r1, r5
 80097ba:	4632      	mov	r2, r6
 80097bc:	4648      	mov	r0, r9
 80097be:	f000 fbab 	bl	8009f18 <__lshift>
 80097c2:	4605      	mov	r5, r0
 80097c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d05c      	beq.n	8009884 <_dtoa_r+0xa44>
 80097ca:	4648      	mov	r0, r9
 80097cc:	6869      	ldr	r1, [r5, #4]
 80097ce:	f000 f953 	bl	8009a78 <_Balloc>
 80097d2:	4606      	mov	r6, r0
 80097d4:	b928      	cbnz	r0, 80097e2 <_dtoa_r+0x9a2>
 80097d6:	4602      	mov	r2, r0
 80097d8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80097dc:	4b80      	ldr	r3, [pc, #512]	@ (80099e0 <_dtoa_r+0xba0>)
 80097de:	f7ff bb43 	b.w	8008e68 <_dtoa_r+0x28>
 80097e2:	692a      	ldr	r2, [r5, #16]
 80097e4:	f105 010c 	add.w	r1, r5, #12
 80097e8:	3202      	adds	r2, #2
 80097ea:	0092      	lsls	r2, r2, #2
 80097ec:	300c      	adds	r0, #12
 80097ee:	f7ff fa8c 	bl	8008d0a <memcpy>
 80097f2:	2201      	movs	r2, #1
 80097f4:	4631      	mov	r1, r6
 80097f6:	4648      	mov	r0, r9
 80097f8:	f000 fb8e 	bl	8009f18 <__lshift>
 80097fc:	462f      	mov	r7, r5
 80097fe:	4605      	mov	r5, r0
 8009800:	f10a 0301 	add.w	r3, sl, #1
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	eb0a 030b 	add.w	r3, sl, fp
 800980a:	930a      	str	r3, [sp, #40]	@ 0x28
 800980c:	9b06      	ldr	r3, [sp, #24]
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	9309      	str	r3, [sp, #36]	@ 0x24
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	4621      	mov	r1, r4
 8009818:	9803      	ldr	r0, [sp, #12]
 800981a:	f103 3bff 	add.w	fp, r3, #4294967295
 800981e:	f7ff fa87 	bl	8008d30 <quorem>
 8009822:	4603      	mov	r3, r0
 8009824:	4639      	mov	r1, r7
 8009826:	3330      	adds	r3, #48	@ 0x30
 8009828:	9006      	str	r0, [sp, #24]
 800982a:	9803      	ldr	r0, [sp, #12]
 800982c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800982e:	f000 fbdf 	bl	8009ff0 <__mcmp>
 8009832:	462a      	mov	r2, r5
 8009834:	9008      	str	r0, [sp, #32]
 8009836:	4621      	mov	r1, r4
 8009838:	4648      	mov	r0, r9
 800983a:	f000 fbf5 	bl	800a028 <__mdiff>
 800983e:	68c2      	ldr	r2, [r0, #12]
 8009840:	4606      	mov	r6, r0
 8009842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009844:	bb02      	cbnz	r2, 8009888 <_dtoa_r+0xa48>
 8009846:	4601      	mov	r1, r0
 8009848:	9803      	ldr	r0, [sp, #12]
 800984a:	f000 fbd1 	bl	8009ff0 <__mcmp>
 800984e:	4602      	mov	r2, r0
 8009850:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009852:	4631      	mov	r1, r6
 8009854:	4648      	mov	r0, r9
 8009856:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800985a:	f000 f94d 	bl	8009af8 <_Bfree>
 800985e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009860:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009862:	9e04      	ldr	r6, [sp, #16]
 8009864:	ea42 0103 	orr.w	r1, r2, r3
 8009868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986a:	4319      	orrs	r1, r3
 800986c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800986e:	d10d      	bne.n	800988c <_dtoa_r+0xa4c>
 8009870:	2b39      	cmp	r3, #57	@ 0x39
 8009872:	d027      	beq.n	80098c4 <_dtoa_r+0xa84>
 8009874:	9a08      	ldr	r2, [sp, #32]
 8009876:	2a00      	cmp	r2, #0
 8009878:	dd01      	ble.n	800987e <_dtoa_r+0xa3e>
 800987a:	9b06      	ldr	r3, [sp, #24]
 800987c:	3331      	adds	r3, #49	@ 0x31
 800987e:	f88b 3000 	strb.w	r3, [fp]
 8009882:	e52e      	b.n	80092e2 <_dtoa_r+0x4a2>
 8009884:	4628      	mov	r0, r5
 8009886:	e7b9      	b.n	80097fc <_dtoa_r+0x9bc>
 8009888:	2201      	movs	r2, #1
 800988a:	e7e2      	b.n	8009852 <_dtoa_r+0xa12>
 800988c:	9908      	ldr	r1, [sp, #32]
 800988e:	2900      	cmp	r1, #0
 8009890:	db04      	blt.n	800989c <_dtoa_r+0xa5c>
 8009892:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8009894:	4301      	orrs	r1, r0
 8009896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009898:	4301      	orrs	r1, r0
 800989a:	d120      	bne.n	80098de <_dtoa_r+0xa9e>
 800989c:	2a00      	cmp	r2, #0
 800989e:	ddee      	ble.n	800987e <_dtoa_r+0xa3e>
 80098a0:	2201      	movs	r2, #1
 80098a2:	9903      	ldr	r1, [sp, #12]
 80098a4:	4648      	mov	r0, r9
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	f000 fb36 	bl	8009f18 <__lshift>
 80098ac:	4621      	mov	r1, r4
 80098ae:	9003      	str	r0, [sp, #12]
 80098b0:	f000 fb9e 	bl	8009ff0 <__mcmp>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	dc02      	bgt.n	80098c0 <_dtoa_r+0xa80>
 80098ba:	d1e0      	bne.n	800987e <_dtoa_r+0xa3e>
 80098bc:	07da      	lsls	r2, r3, #31
 80098be:	d5de      	bpl.n	800987e <_dtoa_r+0xa3e>
 80098c0:	2b39      	cmp	r3, #57	@ 0x39
 80098c2:	d1da      	bne.n	800987a <_dtoa_r+0xa3a>
 80098c4:	2339      	movs	r3, #57	@ 0x39
 80098c6:	f88b 3000 	strb.w	r3, [fp]
 80098ca:	4633      	mov	r3, r6
 80098cc:	461e      	mov	r6, r3
 80098ce:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	2a39      	cmp	r2, #57	@ 0x39
 80098d6:	d04e      	beq.n	8009976 <_dtoa_r+0xb36>
 80098d8:	3201      	adds	r2, #1
 80098da:	701a      	strb	r2, [r3, #0]
 80098dc:	e501      	b.n	80092e2 <_dtoa_r+0x4a2>
 80098de:	2a00      	cmp	r2, #0
 80098e0:	dd03      	ble.n	80098ea <_dtoa_r+0xaaa>
 80098e2:	2b39      	cmp	r3, #57	@ 0x39
 80098e4:	d0ee      	beq.n	80098c4 <_dtoa_r+0xa84>
 80098e6:	3301      	adds	r3, #1
 80098e8:	e7c9      	b.n	800987e <_dtoa_r+0xa3e>
 80098ea:	9a04      	ldr	r2, [sp, #16]
 80098ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80098f2:	428a      	cmp	r2, r1
 80098f4:	d028      	beq.n	8009948 <_dtoa_r+0xb08>
 80098f6:	2300      	movs	r3, #0
 80098f8:	220a      	movs	r2, #10
 80098fa:	9903      	ldr	r1, [sp, #12]
 80098fc:	4648      	mov	r0, r9
 80098fe:	f000 f91d 	bl	8009b3c <__multadd>
 8009902:	42af      	cmp	r7, r5
 8009904:	9003      	str	r0, [sp, #12]
 8009906:	f04f 0300 	mov.w	r3, #0
 800990a:	f04f 020a 	mov.w	r2, #10
 800990e:	4639      	mov	r1, r7
 8009910:	4648      	mov	r0, r9
 8009912:	d107      	bne.n	8009924 <_dtoa_r+0xae4>
 8009914:	f000 f912 	bl	8009b3c <__multadd>
 8009918:	4607      	mov	r7, r0
 800991a:	4605      	mov	r5, r0
 800991c:	9b04      	ldr	r3, [sp, #16]
 800991e:	3301      	adds	r3, #1
 8009920:	9304      	str	r3, [sp, #16]
 8009922:	e777      	b.n	8009814 <_dtoa_r+0x9d4>
 8009924:	f000 f90a 	bl	8009b3c <__multadd>
 8009928:	4629      	mov	r1, r5
 800992a:	4607      	mov	r7, r0
 800992c:	2300      	movs	r3, #0
 800992e:	220a      	movs	r2, #10
 8009930:	4648      	mov	r0, r9
 8009932:	f000 f903 	bl	8009b3c <__multadd>
 8009936:	4605      	mov	r5, r0
 8009938:	e7f0      	b.n	800991c <_dtoa_r+0xadc>
 800993a:	f1bb 0f00 	cmp.w	fp, #0
 800993e:	bfcc      	ite	gt
 8009940:	465e      	movgt	r6, fp
 8009942:	2601      	movle	r6, #1
 8009944:	2700      	movs	r7, #0
 8009946:	4456      	add	r6, sl
 8009948:	2201      	movs	r2, #1
 800994a:	9903      	ldr	r1, [sp, #12]
 800994c:	4648      	mov	r0, r9
 800994e:	9304      	str	r3, [sp, #16]
 8009950:	f000 fae2 	bl	8009f18 <__lshift>
 8009954:	4621      	mov	r1, r4
 8009956:	9003      	str	r0, [sp, #12]
 8009958:	f000 fb4a 	bl	8009ff0 <__mcmp>
 800995c:	2800      	cmp	r0, #0
 800995e:	dcb4      	bgt.n	80098ca <_dtoa_r+0xa8a>
 8009960:	d102      	bne.n	8009968 <_dtoa_r+0xb28>
 8009962:	9b04      	ldr	r3, [sp, #16]
 8009964:	07db      	lsls	r3, r3, #31
 8009966:	d4b0      	bmi.n	80098ca <_dtoa_r+0xa8a>
 8009968:	4633      	mov	r3, r6
 800996a:	461e      	mov	r6, r3
 800996c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009970:	2a30      	cmp	r2, #48	@ 0x30
 8009972:	d0fa      	beq.n	800996a <_dtoa_r+0xb2a>
 8009974:	e4b5      	b.n	80092e2 <_dtoa_r+0x4a2>
 8009976:	459a      	cmp	sl, r3
 8009978:	d1a8      	bne.n	80098cc <_dtoa_r+0xa8c>
 800997a:	2331      	movs	r3, #49	@ 0x31
 800997c:	f108 0801 	add.w	r8, r8, #1
 8009980:	f88a 3000 	strb.w	r3, [sl]
 8009984:	e4ad      	b.n	80092e2 <_dtoa_r+0x4a2>
 8009986:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009988:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80099e4 <_dtoa_r+0xba4>
 800998c:	b11b      	cbz	r3, 8009996 <_dtoa_r+0xb56>
 800998e:	f10a 0308 	add.w	r3, sl, #8
 8009992:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	4650      	mov	r0, sl
 8009998:	b017      	add	sp, #92	@ 0x5c
 800999a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	f77f ae2e 	ble.w	8009602 <_dtoa_r+0x7c2>
 80099a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80099aa:	2001      	movs	r0, #1
 80099ac:	e64d      	b.n	800964a <_dtoa_r+0x80a>
 80099ae:	f1bb 0f00 	cmp.w	fp, #0
 80099b2:	f77f aed9 	ble.w	8009768 <_dtoa_r+0x928>
 80099b6:	4656      	mov	r6, sl
 80099b8:	4621      	mov	r1, r4
 80099ba:	9803      	ldr	r0, [sp, #12]
 80099bc:	f7ff f9b8 	bl	8008d30 <quorem>
 80099c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80099c4:	f806 3b01 	strb.w	r3, [r6], #1
 80099c8:	eba6 020a 	sub.w	r2, r6, sl
 80099cc:	4593      	cmp	fp, r2
 80099ce:	ddb4      	ble.n	800993a <_dtoa_r+0xafa>
 80099d0:	2300      	movs	r3, #0
 80099d2:	220a      	movs	r2, #10
 80099d4:	4648      	mov	r0, r9
 80099d6:	9903      	ldr	r1, [sp, #12]
 80099d8:	f000 f8b0 	bl	8009b3c <__multadd>
 80099dc:	9003      	str	r0, [sp, #12]
 80099de:	e7eb      	b.n	80099b8 <_dtoa_r+0xb78>
 80099e0:	0800e641 	.word	0x0800e641
 80099e4:	0800e5c5 	.word	0x0800e5c5

080099e8 <_free_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4605      	mov	r5, r0
 80099ec:	2900      	cmp	r1, #0
 80099ee:	d040      	beq.n	8009a72 <_free_r+0x8a>
 80099f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f4:	1f0c      	subs	r4, r1, #4
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfb8      	it	lt
 80099fa:	18e4      	addlt	r4, r4, r3
 80099fc:	f7fe f91a 	bl	8007c34 <__malloc_lock>
 8009a00:	4a1c      	ldr	r2, [pc, #112]	@ (8009a74 <_free_r+0x8c>)
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	b933      	cbnz	r3, 8009a14 <_free_r+0x2c>
 8009a06:	6063      	str	r3, [r4, #4]
 8009a08:	6014      	str	r4, [r2, #0]
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a10:	f7fe b916 	b.w	8007c40 <__malloc_unlock>
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d908      	bls.n	8009a2a <_free_r+0x42>
 8009a18:	6820      	ldr	r0, [r4, #0]
 8009a1a:	1821      	adds	r1, r4, r0
 8009a1c:	428b      	cmp	r3, r1
 8009a1e:	bf01      	itttt	eq
 8009a20:	6819      	ldreq	r1, [r3, #0]
 8009a22:	685b      	ldreq	r3, [r3, #4]
 8009a24:	1809      	addeq	r1, r1, r0
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	e7ed      	b.n	8009a06 <_free_r+0x1e>
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	b10b      	cbz	r3, 8009a34 <_free_r+0x4c>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d9fa      	bls.n	8009a2a <_free_r+0x42>
 8009a34:	6811      	ldr	r1, [r2, #0]
 8009a36:	1850      	adds	r0, r2, r1
 8009a38:	42a0      	cmp	r0, r4
 8009a3a:	d10b      	bne.n	8009a54 <_free_r+0x6c>
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	4401      	add	r1, r0
 8009a40:	1850      	adds	r0, r2, r1
 8009a42:	4283      	cmp	r3, r0
 8009a44:	6011      	str	r1, [r2, #0]
 8009a46:	d1e0      	bne.n	8009a0a <_free_r+0x22>
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	4408      	add	r0, r1
 8009a4e:	6010      	str	r0, [r2, #0]
 8009a50:	6053      	str	r3, [r2, #4]
 8009a52:	e7da      	b.n	8009a0a <_free_r+0x22>
 8009a54:	d902      	bls.n	8009a5c <_free_r+0x74>
 8009a56:	230c      	movs	r3, #12
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	e7d6      	b.n	8009a0a <_free_r+0x22>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	1821      	adds	r1, r4, r0
 8009a60:	428b      	cmp	r3, r1
 8009a62:	bf01      	itttt	eq
 8009a64:	6819      	ldreq	r1, [r3, #0]
 8009a66:	685b      	ldreq	r3, [r3, #4]
 8009a68:	1809      	addeq	r1, r1, r0
 8009a6a:	6021      	streq	r1, [r4, #0]
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	6054      	str	r4, [r2, #4]
 8009a70:	e7cb      	b.n	8009a0a <_free_r+0x22>
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20000a74 	.word	0x20000a74

08009a78 <_Balloc>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	69c6      	ldr	r6, [r0, #28]
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	460d      	mov	r5, r1
 8009a80:	b976      	cbnz	r6, 8009aa0 <_Balloc+0x28>
 8009a82:	2010      	movs	r0, #16
 8009a84:	f7fe f824 	bl	8007ad0 <malloc>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	61e0      	str	r0, [r4, #28]
 8009a8c:	b920      	cbnz	r0, 8009a98 <_Balloc+0x20>
 8009a8e:	216b      	movs	r1, #107	@ 0x6b
 8009a90:	4b17      	ldr	r3, [pc, #92]	@ (8009af0 <_Balloc+0x78>)
 8009a92:	4818      	ldr	r0, [pc, #96]	@ (8009af4 <_Balloc+0x7c>)
 8009a94:	f001 fd40 	bl	800b518 <__assert_func>
 8009a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a9c:	6006      	str	r6, [r0, #0]
 8009a9e:	60c6      	str	r6, [r0, #12]
 8009aa0:	69e6      	ldr	r6, [r4, #28]
 8009aa2:	68f3      	ldr	r3, [r6, #12]
 8009aa4:	b183      	cbz	r3, 8009ac8 <_Balloc+0x50>
 8009aa6:	69e3      	ldr	r3, [r4, #28]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009aae:	b9b8      	cbnz	r0, 8009ae0 <_Balloc+0x68>
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ab6:	1d72      	adds	r2, r6, #5
 8009ab8:	4620      	mov	r0, r4
 8009aba:	0092      	lsls	r2, r2, #2
 8009abc:	f001 fd4a 	bl	800b554 <_calloc_r>
 8009ac0:	b160      	cbz	r0, 8009adc <_Balloc+0x64>
 8009ac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ac6:	e00e      	b.n	8009ae6 <_Balloc+0x6e>
 8009ac8:	2221      	movs	r2, #33	@ 0x21
 8009aca:	2104      	movs	r1, #4
 8009acc:	4620      	mov	r0, r4
 8009ace:	f001 fd41 	bl	800b554 <_calloc_r>
 8009ad2:	69e3      	ldr	r3, [r4, #28]
 8009ad4:	60f0      	str	r0, [r6, #12]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e4      	bne.n	8009aa6 <_Balloc+0x2e>
 8009adc:	2000      	movs	r0, #0
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	6802      	ldr	r2, [r0, #0]
 8009ae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009aec:	e7f7      	b.n	8009ade <_Balloc+0x66>
 8009aee:	bf00      	nop
 8009af0:	0800e5d2 	.word	0x0800e5d2
 8009af4:	0800e652 	.word	0x0800e652

08009af8 <_Bfree>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	69c6      	ldr	r6, [r0, #28]
 8009afc:	4605      	mov	r5, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	b976      	cbnz	r6, 8009b20 <_Bfree+0x28>
 8009b02:	2010      	movs	r0, #16
 8009b04:	f7fd ffe4 	bl	8007ad0 <malloc>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	61e8      	str	r0, [r5, #28]
 8009b0c:	b920      	cbnz	r0, 8009b18 <_Bfree+0x20>
 8009b0e:	218f      	movs	r1, #143	@ 0x8f
 8009b10:	4b08      	ldr	r3, [pc, #32]	@ (8009b34 <_Bfree+0x3c>)
 8009b12:	4809      	ldr	r0, [pc, #36]	@ (8009b38 <_Bfree+0x40>)
 8009b14:	f001 fd00 	bl	800b518 <__assert_func>
 8009b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b1c:	6006      	str	r6, [r0, #0]
 8009b1e:	60c6      	str	r6, [r0, #12]
 8009b20:	b13c      	cbz	r4, 8009b32 <_Bfree+0x3a>
 8009b22:	69eb      	ldr	r3, [r5, #28]
 8009b24:	6862      	ldr	r2, [r4, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b2c:	6021      	str	r1, [r4, #0]
 8009b2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	0800e5d2 	.word	0x0800e5d2
 8009b38:	0800e652 	.word	0x0800e652

08009b3c <__multadd>:
 8009b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b40:	4607      	mov	r7, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	461e      	mov	r6, r3
 8009b46:	2000      	movs	r0, #0
 8009b48:	690d      	ldr	r5, [r1, #16]
 8009b4a:	f101 0c14 	add.w	ip, r1, #20
 8009b4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009b52:	3001      	adds	r0, #1
 8009b54:	b299      	uxth	r1, r3
 8009b56:	fb02 6101 	mla	r1, r2, r1, r6
 8009b5a:	0c1e      	lsrs	r6, r3, #16
 8009b5c:	0c0b      	lsrs	r3, r1, #16
 8009b5e:	fb02 3306 	mla	r3, r2, r6, r3
 8009b62:	b289      	uxth	r1, r1
 8009b64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b68:	4285      	cmp	r5, r0
 8009b6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8009b72:	dcec      	bgt.n	8009b4e <__multadd+0x12>
 8009b74:	b30e      	cbz	r6, 8009bba <__multadd+0x7e>
 8009b76:	68a3      	ldr	r3, [r4, #8]
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	dc19      	bgt.n	8009bb0 <__multadd+0x74>
 8009b7c:	6861      	ldr	r1, [r4, #4]
 8009b7e:	4638      	mov	r0, r7
 8009b80:	3101      	adds	r1, #1
 8009b82:	f7ff ff79 	bl	8009a78 <_Balloc>
 8009b86:	4680      	mov	r8, r0
 8009b88:	b928      	cbnz	r0, 8009b96 <__multadd+0x5a>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	21ba      	movs	r1, #186	@ 0xba
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc0 <__multadd+0x84>)
 8009b90:	480c      	ldr	r0, [pc, #48]	@ (8009bc4 <__multadd+0x88>)
 8009b92:	f001 fcc1 	bl	800b518 <__assert_func>
 8009b96:	6922      	ldr	r2, [r4, #16]
 8009b98:	f104 010c 	add.w	r1, r4, #12
 8009b9c:	3202      	adds	r2, #2
 8009b9e:	0092      	lsls	r2, r2, #2
 8009ba0:	300c      	adds	r0, #12
 8009ba2:	f7ff f8b2 	bl	8008d0a <memcpy>
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f7ff ffa5 	bl	8009af8 <_Bfree>
 8009bae:	4644      	mov	r4, r8
 8009bb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bb4:	3501      	adds	r5, #1
 8009bb6:	615e      	str	r6, [r3, #20]
 8009bb8:	6125      	str	r5, [r4, #16]
 8009bba:	4620      	mov	r0, r4
 8009bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc0:	0800e641 	.word	0x0800e641
 8009bc4:	0800e652 	.word	0x0800e652

08009bc8 <__s2b>:
 8009bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bcc:	4615      	mov	r5, r2
 8009bce:	2209      	movs	r2, #9
 8009bd0:	461f      	mov	r7, r3
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bda:	4606      	mov	r6, r0
 8009bdc:	2201      	movs	r2, #1
 8009bde:	2100      	movs	r1, #0
 8009be0:	429a      	cmp	r2, r3
 8009be2:	db09      	blt.n	8009bf8 <__s2b+0x30>
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff ff47 	bl	8009a78 <_Balloc>
 8009bea:	b940      	cbnz	r0, 8009bfe <__s2b+0x36>
 8009bec:	4602      	mov	r2, r0
 8009bee:	21d3      	movs	r1, #211	@ 0xd3
 8009bf0:	4b18      	ldr	r3, [pc, #96]	@ (8009c54 <__s2b+0x8c>)
 8009bf2:	4819      	ldr	r0, [pc, #100]	@ (8009c58 <__s2b+0x90>)
 8009bf4:	f001 fc90 	bl	800b518 <__assert_func>
 8009bf8:	0052      	lsls	r2, r2, #1
 8009bfa:	3101      	adds	r1, #1
 8009bfc:	e7f0      	b.n	8009be0 <__s2b+0x18>
 8009bfe:	9b08      	ldr	r3, [sp, #32]
 8009c00:	2d09      	cmp	r5, #9
 8009c02:	6143      	str	r3, [r0, #20]
 8009c04:	f04f 0301 	mov.w	r3, #1
 8009c08:	6103      	str	r3, [r0, #16]
 8009c0a:	dd16      	ble.n	8009c3a <__s2b+0x72>
 8009c0c:	f104 0909 	add.w	r9, r4, #9
 8009c10:	46c8      	mov	r8, r9
 8009c12:	442c      	add	r4, r5
 8009c14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c18:	4601      	mov	r1, r0
 8009c1a:	220a      	movs	r2, #10
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	3b30      	subs	r3, #48	@ 0x30
 8009c20:	f7ff ff8c 	bl	8009b3c <__multadd>
 8009c24:	45a0      	cmp	r8, r4
 8009c26:	d1f5      	bne.n	8009c14 <__s2b+0x4c>
 8009c28:	f1a5 0408 	sub.w	r4, r5, #8
 8009c2c:	444c      	add	r4, r9
 8009c2e:	1b2d      	subs	r5, r5, r4
 8009c30:	1963      	adds	r3, r4, r5
 8009c32:	42bb      	cmp	r3, r7
 8009c34:	db04      	blt.n	8009c40 <__s2b+0x78>
 8009c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c3a:	2509      	movs	r5, #9
 8009c3c:	340a      	adds	r4, #10
 8009c3e:	e7f6      	b.n	8009c2e <__s2b+0x66>
 8009c40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c44:	4601      	mov	r1, r0
 8009c46:	220a      	movs	r2, #10
 8009c48:	4630      	mov	r0, r6
 8009c4a:	3b30      	subs	r3, #48	@ 0x30
 8009c4c:	f7ff ff76 	bl	8009b3c <__multadd>
 8009c50:	e7ee      	b.n	8009c30 <__s2b+0x68>
 8009c52:	bf00      	nop
 8009c54:	0800e641 	.word	0x0800e641
 8009c58:	0800e652 	.word	0x0800e652

08009c5c <__hi0bits>:
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c62:	bf3a      	itte	cc
 8009c64:	0403      	lslcc	r3, r0, #16
 8009c66:	2010      	movcc	r0, #16
 8009c68:	2000      	movcs	r0, #0
 8009c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c6e:	bf3c      	itt	cc
 8009c70:	021b      	lslcc	r3, r3, #8
 8009c72:	3008      	addcc	r0, #8
 8009c74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c78:	bf3c      	itt	cc
 8009c7a:	011b      	lslcc	r3, r3, #4
 8009c7c:	3004      	addcc	r0, #4
 8009c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c82:	bf3c      	itt	cc
 8009c84:	009b      	lslcc	r3, r3, #2
 8009c86:	3002      	addcc	r0, #2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	db05      	blt.n	8009c98 <__hi0bits+0x3c>
 8009c8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c90:	f100 0001 	add.w	r0, r0, #1
 8009c94:	bf08      	it	eq
 8009c96:	2020      	moveq	r0, #32
 8009c98:	4770      	bx	lr

08009c9a <__lo0bits>:
 8009c9a:	6803      	ldr	r3, [r0, #0]
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	f013 0007 	ands.w	r0, r3, #7
 8009ca2:	d00b      	beq.n	8009cbc <__lo0bits+0x22>
 8009ca4:	07d9      	lsls	r1, r3, #31
 8009ca6:	d421      	bmi.n	8009cec <__lo0bits+0x52>
 8009ca8:	0798      	lsls	r0, r3, #30
 8009caa:	bf49      	itett	mi
 8009cac:	085b      	lsrmi	r3, r3, #1
 8009cae:	089b      	lsrpl	r3, r3, #2
 8009cb0:	2001      	movmi	r0, #1
 8009cb2:	6013      	strmi	r3, [r2, #0]
 8009cb4:	bf5c      	itt	pl
 8009cb6:	2002      	movpl	r0, #2
 8009cb8:	6013      	strpl	r3, [r2, #0]
 8009cba:	4770      	bx	lr
 8009cbc:	b299      	uxth	r1, r3
 8009cbe:	b909      	cbnz	r1, 8009cc4 <__lo0bits+0x2a>
 8009cc0:	2010      	movs	r0, #16
 8009cc2:	0c1b      	lsrs	r3, r3, #16
 8009cc4:	b2d9      	uxtb	r1, r3
 8009cc6:	b909      	cbnz	r1, 8009ccc <__lo0bits+0x32>
 8009cc8:	3008      	adds	r0, #8
 8009cca:	0a1b      	lsrs	r3, r3, #8
 8009ccc:	0719      	lsls	r1, r3, #28
 8009cce:	bf04      	itt	eq
 8009cd0:	091b      	lsreq	r3, r3, #4
 8009cd2:	3004      	addeq	r0, #4
 8009cd4:	0799      	lsls	r1, r3, #30
 8009cd6:	bf04      	itt	eq
 8009cd8:	089b      	lsreq	r3, r3, #2
 8009cda:	3002      	addeq	r0, #2
 8009cdc:	07d9      	lsls	r1, r3, #31
 8009cde:	d403      	bmi.n	8009ce8 <__lo0bits+0x4e>
 8009ce0:	085b      	lsrs	r3, r3, #1
 8009ce2:	f100 0001 	add.w	r0, r0, #1
 8009ce6:	d003      	beq.n	8009cf0 <__lo0bits+0x56>
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	4770      	bx	lr
 8009cec:	2000      	movs	r0, #0
 8009cee:	4770      	bx	lr
 8009cf0:	2020      	movs	r0, #32
 8009cf2:	4770      	bx	lr

08009cf4 <__i2b>:
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	f7ff febd 	bl	8009a78 <_Balloc>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	b928      	cbnz	r0, 8009d0e <__i2b+0x1a>
 8009d02:	f240 1145 	movw	r1, #325	@ 0x145
 8009d06:	4b04      	ldr	r3, [pc, #16]	@ (8009d18 <__i2b+0x24>)
 8009d08:	4804      	ldr	r0, [pc, #16]	@ (8009d1c <__i2b+0x28>)
 8009d0a:	f001 fc05 	bl	800b518 <__assert_func>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	6144      	str	r4, [r0, #20]
 8009d12:	6103      	str	r3, [r0, #16]
 8009d14:	bd10      	pop	{r4, pc}
 8009d16:	bf00      	nop
 8009d18:	0800e641 	.word	0x0800e641
 8009d1c:	0800e652 	.word	0x0800e652

08009d20 <__multiply>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	4617      	mov	r7, r2
 8009d26:	690a      	ldr	r2, [r1, #16]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	4689      	mov	r9, r1
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	bfa2      	ittt	ge
 8009d30:	463b      	movge	r3, r7
 8009d32:	460f      	movge	r7, r1
 8009d34:	4699      	movge	r9, r3
 8009d36:	693d      	ldr	r5, [r7, #16]
 8009d38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	eb05 060a 	add.w	r6, r5, sl
 8009d44:	42b3      	cmp	r3, r6
 8009d46:	b085      	sub	sp, #20
 8009d48:	bfb8      	it	lt
 8009d4a:	3101      	addlt	r1, #1
 8009d4c:	f7ff fe94 	bl	8009a78 <_Balloc>
 8009d50:	b930      	cbnz	r0, 8009d60 <__multiply+0x40>
 8009d52:	4602      	mov	r2, r0
 8009d54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d58:	4b40      	ldr	r3, [pc, #256]	@ (8009e5c <__multiply+0x13c>)
 8009d5a:	4841      	ldr	r0, [pc, #260]	@ (8009e60 <__multiply+0x140>)
 8009d5c:	f001 fbdc 	bl	800b518 <__assert_func>
 8009d60:	f100 0414 	add.w	r4, r0, #20
 8009d64:	4623      	mov	r3, r4
 8009d66:	2200      	movs	r2, #0
 8009d68:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009d6c:	4573      	cmp	r3, lr
 8009d6e:	d320      	bcc.n	8009db2 <__multiply+0x92>
 8009d70:	f107 0814 	add.w	r8, r7, #20
 8009d74:	f109 0114 	add.w	r1, r9, #20
 8009d78:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009d7c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009d80:	9302      	str	r3, [sp, #8]
 8009d82:	1beb      	subs	r3, r5, r7
 8009d84:	3b15      	subs	r3, #21
 8009d86:	f023 0303 	bic.w	r3, r3, #3
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	3715      	adds	r7, #21
 8009d8e:	42bd      	cmp	r5, r7
 8009d90:	bf38      	it	cc
 8009d92:	2304      	movcc	r3, #4
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	9b02      	ldr	r3, [sp, #8]
 8009d98:	9103      	str	r1, [sp, #12]
 8009d9a:	428b      	cmp	r3, r1
 8009d9c:	d80c      	bhi.n	8009db8 <__multiply+0x98>
 8009d9e:	2e00      	cmp	r6, #0
 8009da0:	dd03      	ble.n	8009daa <__multiply+0x8a>
 8009da2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d055      	beq.n	8009e56 <__multiply+0x136>
 8009daa:	6106      	str	r6, [r0, #16]
 8009dac:	b005      	add	sp, #20
 8009dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db2:	f843 2b04 	str.w	r2, [r3], #4
 8009db6:	e7d9      	b.n	8009d6c <__multiply+0x4c>
 8009db8:	f8b1 a000 	ldrh.w	sl, [r1]
 8009dbc:	f1ba 0f00 	cmp.w	sl, #0
 8009dc0:	d01f      	beq.n	8009e02 <__multiply+0xe2>
 8009dc2:	46c4      	mov	ip, r8
 8009dc4:	46a1      	mov	r9, r4
 8009dc6:	2700      	movs	r7, #0
 8009dc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009dcc:	f8d9 3000 	ldr.w	r3, [r9]
 8009dd0:	fa1f fb82 	uxth.w	fp, r2
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	fb0a 330b 	mla	r3, sl, fp, r3
 8009dda:	443b      	add	r3, r7
 8009ddc:	f8d9 7000 	ldr.w	r7, [r9]
 8009de0:	0c12      	lsrs	r2, r2, #16
 8009de2:	0c3f      	lsrs	r7, r7, #16
 8009de4:	fb0a 7202 	mla	r2, sl, r2, r7
 8009de8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df2:	4565      	cmp	r5, ip
 8009df4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009df8:	f849 3b04 	str.w	r3, [r9], #4
 8009dfc:	d8e4      	bhi.n	8009dc8 <__multiply+0xa8>
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	50e7      	str	r7, [r4, r3]
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	3104      	adds	r1, #4
 8009e06:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e0a:	f1b9 0f00 	cmp.w	r9, #0
 8009e0e:	d020      	beq.n	8009e52 <__multiply+0x132>
 8009e10:	4647      	mov	r7, r8
 8009e12:	46a4      	mov	ip, r4
 8009e14:	f04f 0a00 	mov.w	sl, #0
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	f8b7 b000 	ldrh.w	fp, [r7]
 8009e1e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	fb09 220b 	mla	r2, r9, fp, r2
 8009e28:	4452      	add	r2, sl
 8009e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e2e:	f84c 3b04 	str.w	r3, [ip], #4
 8009e32:	f857 3b04 	ldr.w	r3, [r7], #4
 8009e36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e3a:	f8bc 3000 	ldrh.w	r3, [ip]
 8009e3e:	42bd      	cmp	r5, r7
 8009e40:	fb09 330a 	mla	r3, r9, sl, r3
 8009e44:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009e48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e4c:	d8e5      	bhi.n	8009e1a <__multiply+0xfa>
 8009e4e:	9a01      	ldr	r2, [sp, #4]
 8009e50:	50a3      	str	r3, [r4, r2]
 8009e52:	3404      	adds	r4, #4
 8009e54:	e79f      	b.n	8009d96 <__multiply+0x76>
 8009e56:	3e01      	subs	r6, #1
 8009e58:	e7a1      	b.n	8009d9e <__multiply+0x7e>
 8009e5a:	bf00      	nop
 8009e5c:	0800e641 	.word	0x0800e641
 8009e60:	0800e652 	.word	0x0800e652

08009e64 <__pow5mult>:
 8009e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e68:	4615      	mov	r5, r2
 8009e6a:	f012 0203 	ands.w	r2, r2, #3
 8009e6e:	4607      	mov	r7, r0
 8009e70:	460e      	mov	r6, r1
 8009e72:	d007      	beq.n	8009e84 <__pow5mult+0x20>
 8009e74:	4c25      	ldr	r4, [pc, #148]	@ (8009f0c <__pow5mult+0xa8>)
 8009e76:	3a01      	subs	r2, #1
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e7e:	f7ff fe5d 	bl	8009b3c <__multadd>
 8009e82:	4606      	mov	r6, r0
 8009e84:	10ad      	asrs	r5, r5, #2
 8009e86:	d03d      	beq.n	8009f04 <__pow5mult+0xa0>
 8009e88:	69fc      	ldr	r4, [r7, #28]
 8009e8a:	b97c      	cbnz	r4, 8009eac <__pow5mult+0x48>
 8009e8c:	2010      	movs	r0, #16
 8009e8e:	f7fd fe1f 	bl	8007ad0 <malloc>
 8009e92:	4602      	mov	r2, r0
 8009e94:	61f8      	str	r0, [r7, #28]
 8009e96:	b928      	cbnz	r0, 8009ea4 <__pow5mult+0x40>
 8009e98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009f10 <__pow5mult+0xac>)
 8009e9e:	481d      	ldr	r0, [pc, #116]	@ (8009f14 <__pow5mult+0xb0>)
 8009ea0:	f001 fb3a 	bl	800b518 <__assert_func>
 8009ea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ea8:	6004      	str	r4, [r0, #0]
 8009eaa:	60c4      	str	r4, [r0, #12]
 8009eac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009eb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009eb4:	b94c      	cbnz	r4, 8009eca <__pow5mult+0x66>
 8009eb6:	f240 2171 	movw	r1, #625	@ 0x271
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f7ff ff1a 	bl	8009cf4 <__i2b>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ec8:	6003      	str	r3, [r0, #0]
 8009eca:	f04f 0900 	mov.w	r9, #0
 8009ece:	07eb      	lsls	r3, r5, #31
 8009ed0:	d50a      	bpl.n	8009ee8 <__pow5mult+0x84>
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f7ff ff22 	bl	8009d20 <__multiply>
 8009edc:	4680      	mov	r8, r0
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f7ff fe09 	bl	8009af8 <_Bfree>
 8009ee6:	4646      	mov	r6, r8
 8009ee8:	106d      	asrs	r5, r5, #1
 8009eea:	d00b      	beq.n	8009f04 <__pow5mult+0xa0>
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	b938      	cbnz	r0, 8009f00 <__pow5mult+0x9c>
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	f7ff ff13 	bl	8009d20 <__multiply>
 8009efa:	6020      	str	r0, [r4, #0]
 8009efc:	f8c0 9000 	str.w	r9, [r0]
 8009f00:	4604      	mov	r4, r0
 8009f02:	e7e4      	b.n	8009ece <__pow5mult+0x6a>
 8009f04:	4630      	mov	r0, r6
 8009f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f0a:	bf00      	nop
 8009f0c:	0800e764 	.word	0x0800e764
 8009f10:	0800e5d2 	.word	0x0800e5d2
 8009f14:	0800e652 	.word	0x0800e652

08009f18 <__lshift>:
 8009f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	4607      	mov	r7, r0
 8009f20:	4691      	mov	r9, r2
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	6849      	ldr	r1, [r1, #4]
 8009f26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f2a:	68a3      	ldr	r3, [r4, #8]
 8009f2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f30:	f108 0601 	add.w	r6, r8, #1
 8009f34:	42b3      	cmp	r3, r6
 8009f36:	db0b      	blt.n	8009f50 <__lshift+0x38>
 8009f38:	4638      	mov	r0, r7
 8009f3a:	f7ff fd9d 	bl	8009a78 <_Balloc>
 8009f3e:	4605      	mov	r5, r0
 8009f40:	b948      	cbnz	r0, 8009f56 <__lshift+0x3e>
 8009f42:	4602      	mov	r2, r0
 8009f44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f48:	4b27      	ldr	r3, [pc, #156]	@ (8009fe8 <__lshift+0xd0>)
 8009f4a:	4828      	ldr	r0, [pc, #160]	@ (8009fec <__lshift+0xd4>)
 8009f4c:	f001 fae4 	bl	800b518 <__assert_func>
 8009f50:	3101      	adds	r1, #1
 8009f52:	005b      	lsls	r3, r3, #1
 8009f54:	e7ee      	b.n	8009f34 <__lshift+0x1c>
 8009f56:	2300      	movs	r3, #0
 8009f58:	f100 0114 	add.w	r1, r0, #20
 8009f5c:	f100 0210 	add.w	r2, r0, #16
 8009f60:	4618      	mov	r0, r3
 8009f62:	4553      	cmp	r3, sl
 8009f64:	db33      	blt.n	8009fce <__lshift+0xb6>
 8009f66:	6920      	ldr	r0, [r4, #16]
 8009f68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f6c:	f104 0314 	add.w	r3, r4, #20
 8009f70:	f019 091f 	ands.w	r9, r9, #31
 8009f74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f7c:	d02b      	beq.n	8009fd6 <__lshift+0xbe>
 8009f7e:	468a      	mov	sl, r1
 8009f80:	2200      	movs	r2, #0
 8009f82:	f1c9 0e20 	rsb	lr, r9, #32
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	fa00 f009 	lsl.w	r0, r0, r9
 8009f8c:	4310      	orrs	r0, r2
 8009f8e:	f84a 0b04 	str.w	r0, [sl], #4
 8009f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f96:	459c      	cmp	ip, r3
 8009f98:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f9c:	d8f3      	bhi.n	8009f86 <__lshift+0x6e>
 8009f9e:	ebac 0304 	sub.w	r3, ip, r4
 8009fa2:	3b15      	subs	r3, #21
 8009fa4:	f023 0303 	bic.w	r3, r3, #3
 8009fa8:	3304      	adds	r3, #4
 8009faa:	f104 0015 	add.w	r0, r4, #21
 8009fae:	4560      	cmp	r0, ip
 8009fb0:	bf88      	it	hi
 8009fb2:	2304      	movhi	r3, #4
 8009fb4:	50ca      	str	r2, [r1, r3]
 8009fb6:	b10a      	cbz	r2, 8009fbc <__lshift+0xa4>
 8009fb8:	f108 0602 	add.w	r6, r8, #2
 8009fbc:	3e01      	subs	r6, #1
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	612e      	str	r6, [r5, #16]
 8009fc4:	f7ff fd98 	bl	8009af8 <_Bfree>
 8009fc8:	4628      	mov	r0, r5
 8009fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fce:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	e7c5      	b.n	8009f62 <__lshift+0x4a>
 8009fd6:	3904      	subs	r1, #4
 8009fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fdc:	459c      	cmp	ip, r3
 8009fde:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fe2:	d8f9      	bhi.n	8009fd8 <__lshift+0xc0>
 8009fe4:	e7ea      	b.n	8009fbc <__lshift+0xa4>
 8009fe6:	bf00      	nop
 8009fe8:	0800e641 	.word	0x0800e641
 8009fec:	0800e652 	.word	0x0800e652

08009ff0 <__mcmp>:
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	690a      	ldr	r2, [r1, #16]
 8009ff4:	6900      	ldr	r0, [r0, #16]
 8009ff6:	b530      	push	{r4, r5, lr}
 8009ff8:	1a80      	subs	r0, r0, r2
 8009ffa:	d10e      	bne.n	800a01a <__mcmp+0x2a>
 8009ffc:	3314      	adds	r3, #20
 8009ffe:	3114      	adds	r1, #20
 800a000:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a004:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a008:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a00c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a010:	4295      	cmp	r5, r2
 800a012:	d003      	beq.n	800a01c <__mcmp+0x2c>
 800a014:	d205      	bcs.n	800a022 <__mcmp+0x32>
 800a016:	f04f 30ff 	mov.w	r0, #4294967295
 800a01a:	bd30      	pop	{r4, r5, pc}
 800a01c:	42a3      	cmp	r3, r4
 800a01e:	d3f3      	bcc.n	800a008 <__mcmp+0x18>
 800a020:	e7fb      	b.n	800a01a <__mcmp+0x2a>
 800a022:	2001      	movs	r0, #1
 800a024:	e7f9      	b.n	800a01a <__mcmp+0x2a>
	...

0800a028 <__mdiff>:
 800a028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	4689      	mov	r9, r1
 800a02e:	4606      	mov	r6, r0
 800a030:	4611      	mov	r1, r2
 800a032:	4648      	mov	r0, r9
 800a034:	4614      	mov	r4, r2
 800a036:	f7ff ffdb 	bl	8009ff0 <__mcmp>
 800a03a:	1e05      	subs	r5, r0, #0
 800a03c:	d112      	bne.n	800a064 <__mdiff+0x3c>
 800a03e:	4629      	mov	r1, r5
 800a040:	4630      	mov	r0, r6
 800a042:	f7ff fd19 	bl	8009a78 <_Balloc>
 800a046:	4602      	mov	r2, r0
 800a048:	b928      	cbnz	r0, 800a056 <__mdiff+0x2e>
 800a04a:	f240 2137 	movw	r1, #567	@ 0x237
 800a04e:	4b3e      	ldr	r3, [pc, #248]	@ (800a148 <__mdiff+0x120>)
 800a050:	483e      	ldr	r0, [pc, #248]	@ (800a14c <__mdiff+0x124>)
 800a052:	f001 fa61 	bl	800b518 <__assert_func>
 800a056:	2301      	movs	r3, #1
 800a058:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a05c:	4610      	mov	r0, r2
 800a05e:	b003      	add	sp, #12
 800a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a064:	bfbc      	itt	lt
 800a066:	464b      	movlt	r3, r9
 800a068:	46a1      	movlt	r9, r4
 800a06a:	4630      	mov	r0, r6
 800a06c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a070:	bfba      	itte	lt
 800a072:	461c      	movlt	r4, r3
 800a074:	2501      	movlt	r5, #1
 800a076:	2500      	movge	r5, #0
 800a078:	f7ff fcfe 	bl	8009a78 <_Balloc>
 800a07c:	4602      	mov	r2, r0
 800a07e:	b918      	cbnz	r0, 800a088 <__mdiff+0x60>
 800a080:	f240 2145 	movw	r1, #581	@ 0x245
 800a084:	4b30      	ldr	r3, [pc, #192]	@ (800a148 <__mdiff+0x120>)
 800a086:	e7e3      	b.n	800a050 <__mdiff+0x28>
 800a088:	f100 0b14 	add.w	fp, r0, #20
 800a08c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a090:	f109 0310 	add.w	r3, r9, #16
 800a094:	60c5      	str	r5, [r0, #12]
 800a096:	f04f 0c00 	mov.w	ip, #0
 800a09a:	f109 0514 	add.w	r5, r9, #20
 800a09e:	46d9      	mov	r9, fp
 800a0a0:	6926      	ldr	r6, [r4, #16]
 800a0a2:	f104 0e14 	add.w	lr, r4, #20
 800a0a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a0aa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	9b01      	ldr	r3, [sp, #4]
 800a0b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a0b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a0ba:	b281      	uxth	r1, r0
 800a0bc:	9301      	str	r3, [sp, #4]
 800a0be:	fa1f f38a 	uxth.w	r3, sl
 800a0c2:	1a5b      	subs	r3, r3, r1
 800a0c4:	0c00      	lsrs	r0, r0, #16
 800a0c6:	4463      	add	r3, ip
 800a0c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a0cc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0d6:	4576      	cmp	r6, lr
 800a0d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0dc:	f849 3b04 	str.w	r3, [r9], #4
 800a0e0:	d8e6      	bhi.n	800a0b0 <__mdiff+0x88>
 800a0e2:	1b33      	subs	r3, r6, r4
 800a0e4:	3b15      	subs	r3, #21
 800a0e6:	f023 0303 	bic.w	r3, r3, #3
 800a0ea:	3415      	adds	r4, #21
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	42a6      	cmp	r6, r4
 800a0f0:	bf38      	it	cc
 800a0f2:	2304      	movcc	r3, #4
 800a0f4:	441d      	add	r5, r3
 800a0f6:	445b      	add	r3, fp
 800a0f8:	461e      	mov	r6, r3
 800a0fa:	462c      	mov	r4, r5
 800a0fc:	4544      	cmp	r4, r8
 800a0fe:	d30e      	bcc.n	800a11e <__mdiff+0xf6>
 800a100:	f108 0103 	add.w	r1, r8, #3
 800a104:	1b49      	subs	r1, r1, r5
 800a106:	f021 0103 	bic.w	r1, r1, #3
 800a10a:	3d03      	subs	r5, #3
 800a10c:	45a8      	cmp	r8, r5
 800a10e:	bf38      	it	cc
 800a110:	2100      	movcc	r1, #0
 800a112:	440b      	add	r3, r1
 800a114:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a118:	b199      	cbz	r1, 800a142 <__mdiff+0x11a>
 800a11a:	6117      	str	r7, [r2, #16]
 800a11c:	e79e      	b.n	800a05c <__mdiff+0x34>
 800a11e:	46e6      	mov	lr, ip
 800a120:	f854 1b04 	ldr.w	r1, [r4], #4
 800a124:	fa1f fc81 	uxth.w	ip, r1
 800a128:	44f4      	add	ip, lr
 800a12a:	0c08      	lsrs	r0, r1, #16
 800a12c:	4471      	add	r1, lr
 800a12e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a132:	b289      	uxth	r1, r1
 800a134:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a138:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a13c:	f846 1b04 	str.w	r1, [r6], #4
 800a140:	e7dc      	b.n	800a0fc <__mdiff+0xd4>
 800a142:	3f01      	subs	r7, #1
 800a144:	e7e6      	b.n	800a114 <__mdiff+0xec>
 800a146:	bf00      	nop
 800a148:	0800e641 	.word	0x0800e641
 800a14c:	0800e652 	.word	0x0800e652

0800a150 <__ulp>:
 800a150:	4b0e      	ldr	r3, [pc, #56]	@ (800a18c <__ulp+0x3c>)
 800a152:	400b      	ands	r3, r1
 800a154:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dc08      	bgt.n	800a16e <__ulp+0x1e>
 800a15c:	425b      	negs	r3, r3
 800a15e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a162:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a166:	da04      	bge.n	800a172 <__ulp+0x22>
 800a168:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a16c:	4113      	asrs	r3, r2
 800a16e:	2200      	movs	r2, #0
 800a170:	e008      	b.n	800a184 <__ulp+0x34>
 800a172:	f1a2 0314 	sub.w	r3, r2, #20
 800a176:	2b1e      	cmp	r3, #30
 800a178:	bfd6      	itet	le
 800a17a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a17e:	2201      	movgt	r2, #1
 800a180:	40da      	lsrle	r2, r3
 800a182:	2300      	movs	r3, #0
 800a184:	4619      	mov	r1, r3
 800a186:	4610      	mov	r0, r2
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	7ff00000 	.word	0x7ff00000

0800a190 <__b2d>:
 800a190:	6902      	ldr	r2, [r0, #16]
 800a192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a194:	f100 0614 	add.w	r6, r0, #20
 800a198:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a19c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a1a0:	4f1e      	ldr	r7, [pc, #120]	@ (800a21c <__b2d+0x8c>)
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f7ff fd5a 	bl	8009c5c <__hi0bits>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f1c0 0020 	rsb	r0, r0, #32
 800a1ae:	2b0a      	cmp	r3, #10
 800a1b0:	f1a2 0504 	sub.w	r5, r2, #4
 800a1b4:	6008      	str	r0, [r1, #0]
 800a1b6:	dc12      	bgt.n	800a1de <__b2d+0x4e>
 800a1b8:	42ae      	cmp	r6, r5
 800a1ba:	bf2c      	ite	cs
 800a1bc:	2200      	movcs	r2, #0
 800a1be:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a1c2:	f1c3 0c0b 	rsb	ip, r3, #11
 800a1c6:	3315      	adds	r3, #21
 800a1c8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a1cc:	fa04 f303 	lsl.w	r3, r4, r3
 800a1d0:	fa22 f20c 	lsr.w	r2, r2, ip
 800a1d4:	ea4e 0107 	orr.w	r1, lr, r7
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	4610      	mov	r0, r2
 800a1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1de:	42ae      	cmp	r6, r5
 800a1e0:	bf36      	itet	cc
 800a1e2:	f1a2 0508 	subcc.w	r5, r2, #8
 800a1e6:	2200      	movcs	r2, #0
 800a1e8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a1ec:	3b0b      	subs	r3, #11
 800a1ee:	d012      	beq.n	800a216 <__b2d+0x86>
 800a1f0:	f1c3 0720 	rsb	r7, r3, #32
 800a1f4:	fa22 f107 	lsr.w	r1, r2, r7
 800a1f8:	409c      	lsls	r4, r3
 800a1fa:	430c      	orrs	r4, r1
 800a1fc:	42b5      	cmp	r5, r6
 800a1fe:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a202:	bf94      	ite	ls
 800a204:	2400      	movls	r4, #0
 800a206:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a20a:	409a      	lsls	r2, r3
 800a20c:	40fc      	lsrs	r4, r7
 800a20e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a212:	4322      	orrs	r2, r4
 800a214:	e7e1      	b.n	800a1da <__b2d+0x4a>
 800a216:	ea44 0107 	orr.w	r1, r4, r7
 800a21a:	e7de      	b.n	800a1da <__b2d+0x4a>
 800a21c:	3ff00000 	.word	0x3ff00000

0800a220 <__d2b>:
 800a220:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a224:	2101      	movs	r1, #1
 800a226:	4690      	mov	r8, r2
 800a228:	4699      	mov	r9, r3
 800a22a:	9e08      	ldr	r6, [sp, #32]
 800a22c:	f7ff fc24 	bl	8009a78 <_Balloc>
 800a230:	4604      	mov	r4, r0
 800a232:	b930      	cbnz	r0, 800a242 <__d2b+0x22>
 800a234:	4602      	mov	r2, r0
 800a236:	f240 310f 	movw	r1, #783	@ 0x30f
 800a23a:	4b23      	ldr	r3, [pc, #140]	@ (800a2c8 <__d2b+0xa8>)
 800a23c:	4823      	ldr	r0, [pc, #140]	@ (800a2cc <__d2b+0xac>)
 800a23e:	f001 f96b 	bl	800b518 <__assert_func>
 800a242:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a246:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a24a:	b10d      	cbz	r5, 800a250 <__d2b+0x30>
 800a24c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	f1b8 0300 	subs.w	r3, r8, #0
 800a256:	d024      	beq.n	800a2a2 <__d2b+0x82>
 800a258:	4668      	mov	r0, sp
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	f7ff fd1d 	bl	8009c9a <__lo0bits>
 800a260:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a264:	b1d8      	cbz	r0, 800a29e <__d2b+0x7e>
 800a266:	f1c0 0320 	rsb	r3, r0, #32
 800a26a:	fa02 f303 	lsl.w	r3, r2, r3
 800a26e:	430b      	orrs	r3, r1
 800a270:	40c2      	lsrs	r2, r0
 800a272:	6163      	str	r3, [r4, #20]
 800a274:	9201      	str	r2, [sp, #4]
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	bf0c      	ite	eq
 800a27c:	2201      	moveq	r2, #1
 800a27e:	2202      	movne	r2, #2
 800a280:	61a3      	str	r3, [r4, #24]
 800a282:	6122      	str	r2, [r4, #16]
 800a284:	b1ad      	cbz	r5, 800a2b2 <__d2b+0x92>
 800a286:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a28a:	4405      	add	r5, r0
 800a28c:	6035      	str	r5, [r6, #0]
 800a28e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a294:	6018      	str	r0, [r3, #0]
 800a296:	4620      	mov	r0, r4
 800a298:	b002      	add	sp, #8
 800a29a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a29e:	6161      	str	r1, [r4, #20]
 800a2a0:	e7e9      	b.n	800a276 <__d2b+0x56>
 800a2a2:	a801      	add	r0, sp, #4
 800a2a4:	f7ff fcf9 	bl	8009c9a <__lo0bits>
 800a2a8:	9b01      	ldr	r3, [sp, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	6163      	str	r3, [r4, #20]
 800a2ae:	3020      	adds	r0, #32
 800a2b0:	e7e7      	b.n	800a282 <__d2b+0x62>
 800a2b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a2b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2ba:	6030      	str	r0, [r6, #0]
 800a2bc:	6918      	ldr	r0, [r3, #16]
 800a2be:	f7ff fccd 	bl	8009c5c <__hi0bits>
 800a2c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2c6:	e7e4      	b.n	800a292 <__d2b+0x72>
 800a2c8:	0800e641 	.word	0x0800e641
 800a2cc:	0800e652 	.word	0x0800e652

0800a2d0 <__ratio>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	e9cd 1000 	strd	r1, r0, [sp]
 800a2da:	a902      	add	r1, sp, #8
 800a2dc:	f7ff ff58 	bl	800a190 <__b2d>
 800a2e0:	468b      	mov	fp, r1
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	460f      	mov	r7, r1
 800a2e6:	9800      	ldr	r0, [sp, #0]
 800a2e8:	a903      	add	r1, sp, #12
 800a2ea:	f7ff ff51 	bl	800a190 <__b2d>
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	9b01      	ldr	r3, [sp, #4]
 800a2f2:	4689      	mov	r9, r1
 800a2f4:	6919      	ldr	r1, [r3, #16]
 800a2f6:	9b00      	ldr	r3, [sp, #0]
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	1ac9      	subs	r1, r1, r3
 800a300:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a304:	1a9b      	subs	r3, r3, r2
 800a306:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	bfcd      	iteet	gt
 800a30e:	463a      	movgt	r2, r7
 800a310:	462a      	movle	r2, r5
 800a312:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a316:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a31a:	bfd8      	it	le
 800a31c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a320:	464b      	mov	r3, r9
 800a322:	4622      	mov	r2, r4
 800a324:	4659      	mov	r1, fp
 800a326:	f7f6 fa01 	bl	800072c <__aeabi_ddiv>
 800a32a:	b005      	add	sp, #20
 800a32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a330 <__copybits>:
 800a330:	3901      	subs	r1, #1
 800a332:	b570      	push	{r4, r5, r6, lr}
 800a334:	1149      	asrs	r1, r1, #5
 800a336:	6914      	ldr	r4, [r2, #16]
 800a338:	3101      	adds	r1, #1
 800a33a:	f102 0314 	add.w	r3, r2, #20
 800a33e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a342:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a346:	1f05      	subs	r5, r0, #4
 800a348:	42a3      	cmp	r3, r4
 800a34a:	d30c      	bcc.n	800a366 <__copybits+0x36>
 800a34c:	1aa3      	subs	r3, r4, r2
 800a34e:	3b11      	subs	r3, #17
 800a350:	f023 0303 	bic.w	r3, r3, #3
 800a354:	3211      	adds	r2, #17
 800a356:	42a2      	cmp	r2, r4
 800a358:	bf88      	it	hi
 800a35a:	2300      	movhi	r3, #0
 800a35c:	4418      	add	r0, r3
 800a35e:	2300      	movs	r3, #0
 800a360:	4288      	cmp	r0, r1
 800a362:	d305      	bcc.n	800a370 <__copybits+0x40>
 800a364:	bd70      	pop	{r4, r5, r6, pc}
 800a366:	f853 6b04 	ldr.w	r6, [r3], #4
 800a36a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a36e:	e7eb      	b.n	800a348 <__copybits+0x18>
 800a370:	f840 3b04 	str.w	r3, [r0], #4
 800a374:	e7f4      	b.n	800a360 <__copybits+0x30>

0800a376 <__any_on>:
 800a376:	f100 0214 	add.w	r2, r0, #20
 800a37a:	6900      	ldr	r0, [r0, #16]
 800a37c:	114b      	asrs	r3, r1, #5
 800a37e:	4298      	cmp	r0, r3
 800a380:	b510      	push	{r4, lr}
 800a382:	db11      	blt.n	800a3a8 <__any_on+0x32>
 800a384:	dd0a      	ble.n	800a39c <__any_on+0x26>
 800a386:	f011 011f 	ands.w	r1, r1, #31
 800a38a:	d007      	beq.n	800a39c <__any_on+0x26>
 800a38c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a390:	fa24 f001 	lsr.w	r0, r4, r1
 800a394:	fa00 f101 	lsl.w	r1, r0, r1
 800a398:	428c      	cmp	r4, r1
 800a39a:	d10b      	bne.n	800a3b4 <__any_on+0x3e>
 800a39c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d803      	bhi.n	800a3ac <__any_on+0x36>
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	bd10      	pop	{r4, pc}
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	e7f7      	b.n	800a39c <__any_on+0x26>
 800a3ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	d0f5      	beq.n	800a3a0 <__any_on+0x2a>
 800a3b4:	2001      	movs	r0, #1
 800a3b6:	e7f6      	b.n	800a3a6 <__any_on+0x30>

0800a3b8 <sulp>:
 800a3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3bc:	460f      	mov	r7, r1
 800a3be:	4690      	mov	r8, r2
 800a3c0:	f7ff fec6 	bl	800a150 <__ulp>
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	f1b8 0f00 	cmp.w	r8, #0
 800a3cc:	d011      	beq.n	800a3f2 <sulp+0x3a>
 800a3ce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a3d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	dd0b      	ble.n	800a3f2 <sulp+0x3a>
 800a3da:	2400      	movs	r4, #0
 800a3dc:	051b      	lsls	r3, r3, #20
 800a3de:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a3e2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	f7f6 f875 	bl	80004d8 <__aeabi_dmul>
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	460d      	mov	r5, r1
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3fa:	0000      	movs	r0, r0
 800a3fc:	0000      	movs	r0, r0
	...

0800a400 <_strtod_l>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	b09f      	sub	sp, #124	@ 0x7c
 800a406:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a408:	2200      	movs	r2, #0
 800a40a:	460c      	mov	r4, r1
 800a40c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a40e:	f04f 0a00 	mov.w	sl, #0
 800a412:	f04f 0b00 	mov.w	fp, #0
 800a416:	460a      	mov	r2, r1
 800a418:	9005      	str	r0, [sp, #20]
 800a41a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a41c:	7811      	ldrb	r1, [r2, #0]
 800a41e:	292b      	cmp	r1, #43	@ 0x2b
 800a420:	d048      	beq.n	800a4b4 <_strtod_l+0xb4>
 800a422:	d836      	bhi.n	800a492 <_strtod_l+0x92>
 800a424:	290d      	cmp	r1, #13
 800a426:	d830      	bhi.n	800a48a <_strtod_l+0x8a>
 800a428:	2908      	cmp	r1, #8
 800a42a:	d830      	bhi.n	800a48e <_strtod_l+0x8e>
 800a42c:	2900      	cmp	r1, #0
 800a42e:	d039      	beq.n	800a4a4 <_strtod_l+0xa4>
 800a430:	2200      	movs	r2, #0
 800a432:	920e      	str	r2, [sp, #56]	@ 0x38
 800a434:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a436:	782a      	ldrb	r2, [r5, #0]
 800a438:	2a30      	cmp	r2, #48	@ 0x30
 800a43a:	f040 80b0 	bne.w	800a59e <_strtod_l+0x19e>
 800a43e:	786a      	ldrb	r2, [r5, #1]
 800a440:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a444:	2a58      	cmp	r2, #88	@ 0x58
 800a446:	d16c      	bne.n	800a522 <_strtod_l+0x122>
 800a448:	9302      	str	r3, [sp, #8]
 800a44a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a44c:	4a8f      	ldr	r2, [pc, #572]	@ (800a68c <_strtod_l+0x28c>)
 800a44e:	9301      	str	r3, [sp, #4]
 800a450:	ab1a      	add	r3, sp, #104	@ 0x68
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	9805      	ldr	r0, [sp, #20]
 800a456:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a458:	a919      	add	r1, sp, #100	@ 0x64
 800a45a:	f001 f8f7 	bl	800b64c <__gethex>
 800a45e:	f010 060f 	ands.w	r6, r0, #15
 800a462:	4604      	mov	r4, r0
 800a464:	d005      	beq.n	800a472 <_strtod_l+0x72>
 800a466:	2e06      	cmp	r6, #6
 800a468:	d126      	bne.n	800a4b8 <_strtod_l+0xb8>
 800a46a:	2300      	movs	r3, #0
 800a46c:	3501      	adds	r5, #1
 800a46e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a470:	930e      	str	r3, [sp, #56]	@ 0x38
 800a472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a474:	2b00      	cmp	r3, #0
 800a476:	f040 8582 	bne.w	800af7e <_strtod_l+0xb7e>
 800a47a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a47c:	b1bb      	cbz	r3, 800a4ae <_strtod_l+0xae>
 800a47e:	4650      	mov	r0, sl
 800a480:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a484:	b01f      	add	sp, #124	@ 0x7c
 800a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48a:	2920      	cmp	r1, #32
 800a48c:	d1d0      	bne.n	800a430 <_strtod_l+0x30>
 800a48e:	3201      	adds	r2, #1
 800a490:	e7c3      	b.n	800a41a <_strtod_l+0x1a>
 800a492:	292d      	cmp	r1, #45	@ 0x2d
 800a494:	d1cc      	bne.n	800a430 <_strtod_l+0x30>
 800a496:	2101      	movs	r1, #1
 800a498:	910e      	str	r1, [sp, #56]	@ 0x38
 800a49a:	1c51      	adds	r1, r2, #1
 800a49c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a49e:	7852      	ldrb	r2, [r2, #1]
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	d1c7      	bne.n	800a434 <_strtod_l+0x34>
 800a4a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a4a6:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f040 8566 	bne.w	800af7a <_strtod_l+0xb7a>
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	4659      	mov	r1, fp
 800a4b2:	e7e7      	b.n	800a484 <_strtod_l+0x84>
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	e7ef      	b.n	800a498 <_strtod_l+0x98>
 800a4b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4ba:	b13a      	cbz	r2, 800a4cc <_strtod_l+0xcc>
 800a4bc:	2135      	movs	r1, #53	@ 0x35
 800a4be:	a81c      	add	r0, sp, #112	@ 0x70
 800a4c0:	f7ff ff36 	bl	800a330 <__copybits>
 800a4c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4c6:	9805      	ldr	r0, [sp, #20]
 800a4c8:	f7ff fb16 	bl	8009af8 <_Bfree>
 800a4cc:	3e01      	subs	r6, #1
 800a4ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a4d0:	2e04      	cmp	r6, #4
 800a4d2:	d806      	bhi.n	800a4e2 <_strtod_l+0xe2>
 800a4d4:	e8df f006 	tbb	[pc, r6]
 800a4d8:	201d0314 	.word	0x201d0314
 800a4dc:	14          	.byte	0x14
 800a4dd:	00          	.byte	0x00
 800a4de:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a4e2:	05e1      	lsls	r1, r4, #23
 800a4e4:	bf48      	it	mi
 800a4e6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a4ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4ee:	0d1b      	lsrs	r3, r3, #20
 800a4f0:	051b      	lsls	r3, r3, #20
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1bd      	bne.n	800a472 <_strtod_l+0x72>
 800a4f6:	f7fe fbcd 	bl	8008c94 <__errno>
 800a4fa:	2322      	movs	r3, #34	@ 0x22
 800a4fc:	6003      	str	r3, [r0, #0]
 800a4fe:	e7b8      	b.n	800a472 <_strtod_l+0x72>
 800a500:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a504:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a508:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a50c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a510:	e7e7      	b.n	800a4e2 <_strtod_l+0xe2>
 800a512:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a690 <_strtod_l+0x290>
 800a516:	e7e4      	b.n	800a4e2 <_strtod_l+0xe2>
 800a518:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a51c:	f04f 3aff 	mov.w	sl, #4294967295
 800a520:	e7df      	b.n	800a4e2 <_strtod_l+0xe2>
 800a522:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a524:	1c5a      	adds	r2, r3, #1
 800a526:	9219      	str	r2, [sp, #100]	@ 0x64
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	2b30      	cmp	r3, #48	@ 0x30
 800a52c:	d0f9      	beq.n	800a522 <_strtod_l+0x122>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d09f      	beq.n	800a472 <_strtod_l+0x72>
 800a532:	2301      	movs	r3, #1
 800a534:	2700      	movs	r7, #0
 800a536:	220a      	movs	r2, #10
 800a538:	46b9      	mov	r9, r7
 800a53a:	9308      	str	r3, [sp, #32]
 800a53c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a53e:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a540:	930c      	str	r3, [sp, #48]	@ 0x30
 800a542:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a544:	7805      	ldrb	r5, [r0, #0]
 800a546:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a54a:	b2d9      	uxtb	r1, r3
 800a54c:	2909      	cmp	r1, #9
 800a54e:	d928      	bls.n	800a5a2 <_strtod_l+0x1a2>
 800a550:	2201      	movs	r2, #1
 800a552:	4950      	ldr	r1, [pc, #320]	@ (800a694 <_strtod_l+0x294>)
 800a554:	f000 ffc8 	bl	800b4e8 <strncmp>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d032      	beq.n	800a5c2 <_strtod_l+0x1c2>
 800a55c:	2000      	movs	r0, #0
 800a55e:	462a      	mov	r2, r5
 800a560:	4603      	mov	r3, r0
 800a562:	464d      	mov	r5, r9
 800a564:	900a      	str	r0, [sp, #40]	@ 0x28
 800a566:	2a65      	cmp	r2, #101	@ 0x65
 800a568:	d001      	beq.n	800a56e <_strtod_l+0x16e>
 800a56a:	2a45      	cmp	r2, #69	@ 0x45
 800a56c:	d114      	bne.n	800a598 <_strtod_l+0x198>
 800a56e:	b91d      	cbnz	r5, 800a578 <_strtod_l+0x178>
 800a570:	9a08      	ldr	r2, [sp, #32]
 800a572:	4302      	orrs	r2, r0
 800a574:	d096      	beq.n	800a4a4 <_strtod_l+0xa4>
 800a576:	2500      	movs	r5, #0
 800a578:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a57a:	1c62      	adds	r2, r4, #1
 800a57c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a57e:	7862      	ldrb	r2, [r4, #1]
 800a580:	2a2b      	cmp	r2, #43	@ 0x2b
 800a582:	d07a      	beq.n	800a67a <_strtod_l+0x27a>
 800a584:	2a2d      	cmp	r2, #45	@ 0x2d
 800a586:	d07e      	beq.n	800a686 <_strtod_l+0x286>
 800a588:	f04f 0c00 	mov.w	ip, #0
 800a58c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a590:	2909      	cmp	r1, #9
 800a592:	f240 8085 	bls.w	800a6a0 <_strtod_l+0x2a0>
 800a596:	9419      	str	r4, [sp, #100]	@ 0x64
 800a598:	f04f 0800 	mov.w	r8, #0
 800a59c:	e0a5      	b.n	800a6ea <_strtod_l+0x2ea>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e7c8      	b.n	800a534 <_strtod_l+0x134>
 800a5a2:	f1b9 0f08 	cmp.w	r9, #8
 800a5a6:	bfd8      	it	le
 800a5a8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a5aa:	f100 0001 	add.w	r0, r0, #1
 800a5ae:	bfd6      	itet	le
 800a5b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5b4:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a5b8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a5ba:	f109 0901 	add.w	r9, r9, #1
 800a5be:	9019      	str	r0, [sp, #100]	@ 0x64
 800a5c0:	e7bf      	b.n	800a542 <_strtod_l+0x142>
 800a5c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5c4:	1c5a      	adds	r2, r3, #1
 800a5c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5c8:	785a      	ldrb	r2, [r3, #1]
 800a5ca:	f1b9 0f00 	cmp.w	r9, #0
 800a5ce:	d03b      	beq.n	800a648 <_strtod_l+0x248>
 800a5d0:	464d      	mov	r5, r9
 800a5d2:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5d4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a5d8:	2b09      	cmp	r3, #9
 800a5da:	d912      	bls.n	800a602 <_strtod_l+0x202>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e7c2      	b.n	800a566 <_strtod_l+0x166>
 800a5e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	1c5a      	adds	r2, r3, #1
 800a5e6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5e8:	785a      	ldrb	r2, [r3, #1]
 800a5ea:	2a30      	cmp	r2, #48	@ 0x30
 800a5ec:	d0f8      	beq.n	800a5e0 <_strtod_l+0x1e0>
 800a5ee:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a5f2:	2b08      	cmp	r3, #8
 800a5f4:	f200 84c8 	bhi.w	800af88 <_strtod_l+0xb88>
 800a5f8:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a600:	930c      	str	r3, [sp, #48]	@ 0x30
 800a602:	3a30      	subs	r2, #48	@ 0x30
 800a604:	f100 0301 	add.w	r3, r0, #1
 800a608:	d018      	beq.n	800a63c <_strtod_l+0x23c>
 800a60a:	462e      	mov	r6, r5
 800a60c:	f04f 0e0a 	mov.w	lr, #10
 800a610:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a612:	4419      	add	r1, r3
 800a614:	910a      	str	r1, [sp, #40]	@ 0x28
 800a616:	1c71      	adds	r1, r6, #1
 800a618:	eba1 0c05 	sub.w	ip, r1, r5
 800a61c:	4563      	cmp	r3, ip
 800a61e:	dc15      	bgt.n	800a64c <_strtod_l+0x24c>
 800a620:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a624:	182b      	adds	r3, r5, r0
 800a626:	2b08      	cmp	r3, #8
 800a628:	f105 0501 	add.w	r5, r5, #1
 800a62c:	4405      	add	r5, r0
 800a62e:	dc1a      	bgt.n	800a666 <_strtod_l+0x266>
 800a630:	230a      	movs	r3, #10
 800a632:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a634:	fb03 2301 	mla	r3, r3, r1, r2
 800a638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a63a:	2300      	movs	r3, #0
 800a63c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a63e:	4618      	mov	r0, r3
 800a640:	1c51      	adds	r1, r2, #1
 800a642:	9119      	str	r1, [sp, #100]	@ 0x64
 800a644:	7852      	ldrb	r2, [r2, #1]
 800a646:	e7c5      	b.n	800a5d4 <_strtod_l+0x1d4>
 800a648:	4648      	mov	r0, r9
 800a64a:	e7ce      	b.n	800a5ea <_strtod_l+0x1ea>
 800a64c:	2e08      	cmp	r6, #8
 800a64e:	dc05      	bgt.n	800a65c <_strtod_l+0x25c>
 800a650:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a652:	fb0e f606 	mul.w	r6, lr, r6
 800a656:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a658:	460e      	mov	r6, r1
 800a65a:	e7dc      	b.n	800a616 <_strtod_l+0x216>
 800a65c:	2910      	cmp	r1, #16
 800a65e:	bfd8      	it	le
 800a660:	fb0e f707 	mulle.w	r7, lr, r7
 800a664:	e7f8      	b.n	800a658 <_strtod_l+0x258>
 800a666:	2b0f      	cmp	r3, #15
 800a668:	bfdc      	itt	le
 800a66a:	230a      	movle	r3, #10
 800a66c:	fb03 2707 	mlale	r7, r3, r7, r2
 800a670:	e7e3      	b.n	800a63a <_strtod_l+0x23a>
 800a672:	2300      	movs	r3, #0
 800a674:	930a      	str	r3, [sp, #40]	@ 0x28
 800a676:	2301      	movs	r3, #1
 800a678:	e77a      	b.n	800a570 <_strtod_l+0x170>
 800a67a:	f04f 0c00 	mov.w	ip, #0
 800a67e:	1ca2      	adds	r2, r4, #2
 800a680:	9219      	str	r2, [sp, #100]	@ 0x64
 800a682:	78a2      	ldrb	r2, [r4, #2]
 800a684:	e782      	b.n	800a58c <_strtod_l+0x18c>
 800a686:	f04f 0c01 	mov.w	ip, #1
 800a68a:	e7f8      	b.n	800a67e <_strtod_l+0x27e>
 800a68c:	0800e874 	.word	0x0800e874
 800a690:	7ff00000 	.word	0x7ff00000
 800a694:	0800e6ab 	.word	0x0800e6ab
 800a698:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a69a:	1c51      	adds	r1, r2, #1
 800a69c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a69e:	7852      	ldrb	r2, [r2, #1]
 800a6a0:	2a30      	cmp	r2, #48	@ 0x30
 800a6a2:	d0f9      	beq.n	800a698 <_strtod_l+0x298>
 800a6a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a6a8:	2908      	cmp	r1, #8
 800a6aa:	f63f af75 	bhi.w	800a598 <_strtod_l+0x198>
 800a6ae:	f04f 080a 	mov.w	r8, #10
 800a6b2:	3a30      	subs	r2, #48	@ 0x30
 800a6b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6b8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a6ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6bc:	1c56      	adds	r6, r2, #1
 800a6be:	9619      	str	r6, [sp, #100]	@ 0x64
 800a6c0:	7852      	ldrb	r2, [r2, #1]
 800a6c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a6c6:	f1be 0f09 	cmp.w	lr, #9
 800a6ca:	d939      	bls.n	800a740 <_strtod_l+0x340>
 800a6cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a6ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a6d2:	1a76      	subs	r6, r6, r1
 800a6d4:	2e08      	cmp	r6, #8
 800a6d6:	dc03      	bgt.n	800a6e0 <_strtod_l+0x2e0>
 800a6d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6da:	4588      	cmp	r8, r1
 800a6dc:	bfa8      	it	ge
 800a6de:	4688      	movge	r8, r1
 800a6e0:	f1bc 0f00 	cmp.w	ip, #0
 800a6e4:	d001      	beq.n	800a6ea <_strtod_l+0x2ea>
 800a6e6:	f1c8 0800 	rsb	r8, r8, #0
 800a6ea:	2d00      	cmp	r5, #0
 800a6ec:	d14e      	bne.n	800a78c <_strtod_l+0x38c>
 800a6ee:	9908      	ldr	r1, [sp, #32]
 800a6f0:	4308      	orrs	r0, r1
 800a6f2:	f47f aebe 	bne.w	800a472 <_strtod_l+0x72>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f47f aed4 	bne.w	800a4a4 <_strtod_l+0xa4>
 800a6fc:	2a69      	cmp	r2, #105	@ 0x69
 800a6fe:	d028      	beq.n	800a752 <_strtod_l+0x352>
 800a700:	dc25      	bgt.n	800a74e <_strtod_l+0x34e>
 800a702:	2a49      	cmp	r2, #73	@ 0x49
 800a704:	d025      	beq.n	800a752 <_strtod_l+0x352>
 800a706:	2a4e      	cmp	r2, #78	@ 0x4e
 800a708:	f47f aecc 	bne.w	800a4a4 <_strtod_l+0xa4>
 800a70c:	4999      	ldr	r1, [pc, #612]	@ (800a974 <_strtod_l+0x574>)
 800a70e:	a819      	add	r0, sp, #100	@ 0x64
 800a710:	f001 f9be 	bl	800ba90 <__match>
 800a714:	2800      	cmp	r0, #0
 800a716:	f43f aec5 	beq.w	800a4a4 <_strtod_l+0xa4>
 800a71a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	2b28      	cmp	r3, #40	@ 0x28
 800a720:	d12e      	bne.n	800a780 <_strtod_l+0x380>
 800a722:	4995      	ldr	r1, [pc, #596]	@ (800a978 <_strtod_l+0x578>)
 800a724:	aa1c      	add	r2, sp, #112	@ 0x70
 800a726:	a819      	add	r0, sp, #100	@ 0x64
 800a728:	f001 f9c6 	bl	800bab8 <__hexnan>
 800a72c:	2805      	cmp	r0, #5
 800a72e:	d127      	bne.n	800a780 <_strtod_l+0x380>
 800a730:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a732:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a736:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a73a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a73e:	e698      	b.n	800a472 <_strtod_l+0x72>
 800a740:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a742:	fb08 2101 	mla	r1, r8, r1, r2
 800a746:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a74a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a74c:	e7b5      	b.n	800a6ba <_strtod_l+0x2ba>
 800a74e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a750:	e7da      	b.n	800a708 <_strtod_l+0x308>
 800a752:	498a      	ldr	r1, [pc, #552]	@ (800a97c <_strtod_l+0x57c>)
 800a754:	a819      	add	r0, sp, #100	@ 0x64
 800a756:	f001 f99b 	bl	800ba90 <__match>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f43f aea2 	beq.w	800a4a4 <_strtod_l+0xa4>
 800a760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a762:	4987      	ldr	r1, [pc, #540]	@ (800a980 <_strtod_l+0x580>)
 800a764:	3b01      	subs	r3, #1
 800a766:	a819      	add	r0, sp, #100	@ 0x64
 800a768:	9319      	str	r3, [sp, #100]	@ 0x64
 800a76a:	f001 f991 	bl	800ba90 <__match>
 800a76e:	b910      	cbnz	r0, 800a776 <_strtod_l+0x376>
 800a770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a772:	3301      	adds	r3, #1
 800a774:	9319      	str	r3, [sp, #100]	@ 0x64
 800a776:	f04f 0a00 	mov.w	sl, #0
 800a77a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800a984 <_strtod_l+0x584>
 800a77e:	e678      	b.n	800a472 <_strtod_l+0x72>
 800a780:	4881      	ldr	r0, [pc, #516]	@ (800a988 <_strtod_l+0x588>)
 800a782:	f000 fec3 	bl	800b50c <nan>
 800a786:	4682      	mov	sl, r0
 800a788:	468b      	mov	fp, r1
 800a78a:	e672      	b.n	800a472 <_strtod_l+0x72>
 800a78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a78e:	f1b9 0f00 	cmp.w	r9, #0
 800a792:	bf08      	it	eq
 800a794:	46a9      	moveq	r9, r5
 800a796:	eba8 0303 	sub.w	r3, r8, r3
 800a79a:	2d10      	cmp	r5, #16
 800a79c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a79e:	462c      	mov	r4, r5
 800a7a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a2:	bfa8      	it	ge
 800a7a4:	2410      	movge	r4, #16
 800a7a6:	f7f5 fe1d 	bl	80003e4 <__aeabi_ui2d>
 800a7aa:	2d09      	cmp	r5, #9
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	468b      	mov	fp, r1
 800a7b0:	dc11      	bgt.n	800a7d6 <_strtod_l+0x3d6>
 800a7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f43f ae5c 	beq.w	800a472 <_strtod_l+0x72>
 800a7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7bc:	dd76      	ble.n	800a8ac <_strtod_l+0x4ac>
 800a7be:	2b16      	cmp	r3, #22
 800a7c0:	dc5d      	bgt.n	800a87e <_strtod_l+0x47e>
 800a7c2:	4972      	ldr	r1, [pc, #456]	@ (800a98c <_strtod_l+0x58c>)
 800a7c4:	4652      	mov	r2, sl
 800a7c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a7ca:	465b      	mov	r3, fp
 800a7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7d0:	f7f5 fe82 	bl	80004d8 <__aeabi_dmul>
 800a7d4:	e7d7      	b.n	800a786 <_strtod_l+0x386>
 800a7d6:	4b6d      	ldr	r3, [pc, #436]	@ (800a98c <_strtod_l+0x58c>)
 800a7d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a7e0:	f7f5 fe7a 	bl	80004d8 <__aeabi_dmul>
 800a7e4:	4682      	mov	sl, r0
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	468b      	mov	fp, r1
 800a7ea:	f7f5 fdfb 	bl	80003e4 <__aeabi_ui2d>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	4659      	mov	r1, fp
 800a7f6:	f7f5 fcb9 	bl	800016c <__adddf3>
 800a7fa:	2d0f      	cmp	r5, #15
 800a7fc:	4682      	mov	sl, r0
 800a7fe:	468b      	mov	fp, r1
 800a800:	ddd7      	ble.n	800a7b2 <_strtod_l+0x3b2>
 800a802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a804:	1b2c      	subs	r4, r5, r4
 800a806:	441c      	add	r4, r3
 800a808:	2c00      	cmp	r4, #0
 800a80a:	f340 8093 	ble.w	800a934 <_strtod_l+0x534>
 800a80e:	f014 030f 	ands.w	r3, r4, #15
 800a812:	d00a      	beq.n	800a82a <_strtod_l+0x42a>
 800a814:	495d      	ldr	r1, [pc, #372]	@ (800a98c <_strtod_l+0x58c>)
 800a816:	4652      	mov	r2, sl
 800a818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a81c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a820:	465b      	mov	r3, fp
 800a822:	f7f5 fe59 	bl	80004d8 <__aeabi_dmul>
 800a826:	4682      	mov	sl, r0
 800a828:	468b      	mov	fp, r1
 800a82a:	f034 040f 	bics.w	r4, r4, #15
 800a82e:	d073      	beq.n	800a918 <_strtod_l+0x518>
 800a830:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a834:	dd49      	ble.n	800a8ca <_strtod_l+0x4ca>
 800a836:	2400      	movs	r4, #0
 800a838:	46a0      	mov	r8, r4
 800a83a:	46a1      	mov	r9, r4
 800a83c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a83e:	2322      	movs	r3, #34	@ 0x22
 800a840:	f04f 0a00 	mov.w	sl, #0
 800a844:	9a05      	ldr	r2, [sp, #20]
 800a846:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800a984 <_strtod_l+0x584>
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f43f ae0f 	beq.w	800a472 <_strtod_l+0x72>
 800a854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a856:	9805      	ldr	r0, [sp, #20]
 800a858:	f7ff f94e 	bl	8009af8 <_Bfree>
 800a85c:	4649      	mov	r1, r9
 800a85e:	9805      	ldr	r0, [sp, #20]
 800a860:	f7ff f94a 	bl	8009af8 <_Bfree>
 800a864:	4641      	mov	r1, r8
 800a866:	9805      	ldr	r0, [sp, #20]
 800a868:	f7ff f946 	bl	8009af8 <_Bfree>
 800a86c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a86e:	9805      	ldr	r0, [sp, #20]
 800a870:	f7ff f942 	bl	8009af8 <_Bfree>
 800a874:	4621      	mov	r1, r4
 800a876:	9805      	ldr	r0, [sp, #20]
 800a878:	f7ff f93e 	bl	8009af8 <_Bfree>
 800a87c:	e5f9      	b.n	800a472 <_strtod_l+0x72>
 800a87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a880:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a884:	4293      	cmp	r3, r2
 800a886:	dbbc      	blt.n	800a802 <_strtod_l+0x402>
 800a888:	4c40      	ldr	r4, [pc, #256]	@ (800a98c <_strtod_l+0x58c>)
 800a88a:	f1c5 050f 	rsb	r5, r5, #15
 800a88e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a892:	4652      	mov	r2, sl
 800a894:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a898:	465b      	mov	r3, fp
 800a89a:	f7f5 fe1d 	bl	80004d8 <__aeabi_dmul>
 800a89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a0:	1b5d      	subs	r5, r3, r5
 800a8a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a8a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8aa:	e791      	b.n	800a7d0 <_strtod_l+0x3d0>
 800a8ac:	3316      	adds	r3, #22
 800a8ae:	dba8      	blt.n	800a802 <_strtod_l+0x402>
 800a8b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	eba3 0808 	sub.w	r8, r3, r8
 800a8b8:	4b34      	ldr	r3, [pc, #208]	@ (800a98c <_strtod_l+0x58c>)
 800a8ba:	4659      	mov	r1, fp
 800a8bc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a8c0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a8c4:	f7f5 ff32 	bl	800072c <__aeabi_ddiv>
 800a8c8:	e75d      	b.n	800a786 <_strtod_l+0x386>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	4659      	mov	r1, fp
 800a8d0:	461e      	mov	r6, r3
 800a8d2:	4f2f      	ldr	r7, [pc, #188]	@ (800a990 <_strtod_l+0x590>)
 800a8d4:	1124      	asrs	r4, r4, #4
 800a8d6:	2c01      	cmp	r4, #1
 800a8d8:	dc21      	bgt.n	800a91e <_strtod_l+0x51e>
 800a8da:	b10b      	cbz	r3, 800a8e0 <_strtod_l+0x4e0>
 800a8dc:	4682      	mov	sl, r0
 800a8de:	468b      	mov	fp, r1
 800a8e0:	492b      	ldr	r1, [pc, #172]	@ (800a990 <_strtod_l+0x590>)
 800a8e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a8e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f0:	465b      	mov	r3, fp
 800a8f2:	f7f5 fdf1 	bl	80004d8 <__aeabi_dmul>
 800a8f6:	4b23      	ldr	r3, [pc, #140]	@ (800a984 <_strtod_l+0x584>)
 800a8f8:	460a      	mov	r2, r1
 800a8fa:	400b      	ands	r3, r1
 800a8fc:	4925      	ldr	r1, [pc, #148]	@ (800a994 <_strtod_l+0x594>)
 800a8fe:	4682      	mov	sl, r0
 800a900:	428b      	cmp	r3, r1
 800a902:	d898      	bhi.n	800a836 <_strtod_l+0x436>
 800a904:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a908:	428b      	cmp	r3, r1
 800a90a:	bf86      	itte	hi
 800a90c:	f04f 3aff 	movhi.w	sl, #4294967295
 800a910:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800a998 <_strtod_l+0x598>
 800a914:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a918:	2300      	movs	r3, #0
 800a91a:	9308      	str	r3, [sp, #32]
 800a91c:	e076      	b.n	800aa0c <_strtod_l+0x60c>
 800a91e:	07e2      	lsls	r2, r4, #31
 800a920:	d504      	bpl.n	800a92c <_strtod_l+0x52c>
 800a922:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a926:	f7f5 fdd7 	bl	80004d8 <__aeabi_dmul>
 800a92a:	2301      	movs	r3, #1
 800a92c:	3601      	adds	r6, #1
 800a92e:	1064      	asrs	r4, r4, #1
 800a930:	3708      	adds	r7, #8
 800a932:	e7d0      	b.n	800a8d6 <_strtod_l+0x4d6>
 800a934:	d0f0      	beq.n	800a918 <_strtod_l+0x518>
 800a936:	4264      	negs	r4, r4
 800a938:	f014 020f 	ands.w	r2, r4, #15
 800a93c:	d00a      	beq.n	800a954 <_strtod_l+0x554>
 800a93e:	4b13      	ldr	r3, [pc, #76]	@ (800a98c <_strtod_l+0x58c>)
 800a940:	4650      	mov	r0, sl
 800a942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a946:	4659      	mov	r1, fp
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	f7f5 feee 	bl	800072c <__aeabi_ddiv>
 800a950:	4682      	mov	sl, r0
 800a952:	468b      	mov	fp, r1
 800a954:	1124      	asrs	r4, r4, #4
 800a956:	d0df      	beq.n	800a918 <_strtod_l+0x518>
 800a958:	2c1f      	cmp	r4, #31
 800a95a:	dd1f      	ble.n	800a99c <_strtod_l+0x59c>
 800a95c:	2400      	movs	r4, #0
 800a95e:	46a0      	mov	r8, r4
 800a960:	46a1      	mov	r9, r4
 800a962:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a964:	2322      	movs	r3, #34	@ 0x22
 800a966:	9a05      	ldr	r2, [sp, #20]
 800a968:	f04f 0a00 	mov.w	sl, #0
 800a96c:	f04f 0b00 	mov.w	fp, #0
 800a970:	6013      	str	r3, [r2, #0]
 800a972:	e76b      	b.n	800a84c <_strtod_l+0x44c>
 800a974:	0800e599 	.word	0x0800e599
 800a978:	0800e860 	.word	0x0800e860
 800a97c:	0800e591 	.word	0x0800e591
 800a980:	0800e5c8 	.word	0x0800e5c8
 800a984:	7ff00000 	.word	0x7ff00000
 800a988:	0800e701 	.word	0x0800e701
 800a98c:	0800e798 	.word	0x0800e798
 800a990:	0800e770 	.word	0x0800e770
 800a994:	7ca00000 	.word	0x7ca00000
 800a998:	7fefffff 	.word	0x7fefffff
 800a99c:	f014 0310 	ands.w	r3, r4, #16
 800a9a0:	bf18      	it	ne
 800a9a2:	236a      	movne	r3, #106	@ 0x6a
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	9308      	str	r3, [sp, #32]
 800a9a8:	4659      	mov	r1, fp
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4e77      	ldr	r6, [pc, #476]	@ (800ab8c <_strtod_l+0x78c>)
 800a9ae:	07e7      	lsls	r7, r4, #31
 800a9b0:	d504      	bpl.n	800a9bc <_strtod_l+0x5bc>
 800a9b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9b6:	f7f5 fd8f 	bl	80004d8 <__aeabi_dmul>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	1064      	asrs	r4, r4, #1
 800a9be:	f106 0608 	add.w	r6, r6, #8
 800a9c2:	d1f4      	bne.n	800a9ae <_strtod_l+0x5ae>
 800a9c4:	b10b      	cbz	r3, 800a9ca <_strtod_l+0x5ca>
 800a9c6:	4682      	mov	sl, r0
 800a9c8:	468b      	mov	fp, r1
 800a9ca:	9b08      	ldr	r3, [sp, #32]
 800a9cc:	b1b3      	cbz	r3, 800a9fc <_strtod_l+0x5fc>
 800a9ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a9d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	4659      	mov	r1, fp
 800a9da:	dd0f      	ble.n	800a9fc <_strtod_l+0x5fc>
 800a9dc:	2b1f      	cmp	r3, #31
 800a9de:	dd58      	ble.n	800aa92 <_strtod_l+0x692>
 800a9e0:	2b34      	cmp	r3, #52	@ 0x34
 800a9e2:	bfd8      	it	le
 800a9e4:	f04f 33ff 	movle.w	r3, #4294967295
 800a9e8:	f04f 0a00 	mov.w	sl, #0
 800a9ec:	bfcf      	iteee	gt
 800a9ee:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a9f2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a9f6:	4093      	lslle	r3, r2
 800a9f8:	ea03 0b01 	andle.w	fp, r3, r1
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4650      	mov	r0, sl
 800aa02:	4659      	mov	r1, fp
 800aa04:	f7f5 ffd0 	bl	80009a8 <__aeabi_dcmpeq>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d1a7      	bne.n	800a95c <_strtod_l+0x55c>
 800aa0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa0e:	464a      	mov	r2, r9
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aa14:	462b      	mov	r3, r5
 800aa16:	9805      	ldr	r0, [sp, #20]
 800aa18:	f7ff f8d6 	bl	8009bc8 <__s2b>
 800aa1c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	f43f af09 	beq.w	800a836 <_strtod_l+0x436>
 800aa24:	2400      	movs	r4, #0
 800aa26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	eba3 0308 	sub.w	r3, r3, r8
 800aa30:	bfa8      	it	ge
 800aa32:	2300      	movge	r3, #0
 800aa34:	46a0      	mov	r8, r4
 800aa36:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa38:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa3c:	9316      	str	r3, [sp, #88]	@ 0x58
 800aa3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa40:	9805      	ldr	r0, [sp, #20]
 800aa42:	6859      	ldr	r1, [r3, #4]
 800aa44:	f7ff f818 	bl	8009a78 <_Balloc>
 800aa48:	4681      	mov	r9, r0
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	f43f aef7 	beq.w	800a83e <_strtod_l+0x43e>
 800aa50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa52:	300c      	adds	r0, #12
 800aa54:	691a      	ldr	r2, [r3, #16]
 800aa56:	f103 010c 	add.w	r1, r3, #12
 800aa5a:	3202      	adds	r2, #2
 800aa5c:	0092      	lsls	r2, r2, #2
 800aa5e:	f7fe f954 	bl	8008d0a <memcpy>
 800aa62:	ab1c      	add	r3, sp, #112	@ 0x70
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	4652      	mov	r2, sl
 800aa6c:	465b      	mov	r3, fp
 800aa6e:	9805      	ldr	r0, [sp, #20]
 800aa70:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aa74:	f7ff fbd4 	bl	800a220 <__d2b>
 800aa78:	901a      	str	r0, [sp, #104]	@ 0x68
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	f43f aedf 	beq.w	800a83e <_strtod_l+0x43e>
 800aa80:	2101      	movs	r1, #1
 800aa82:	9805      	ldr	r0, [sp, #20]
 800aa84:	f7ff f936 	bl	8009cf4 <__i2b>
 800aa88:	4680      	mov	r8, r0
 800aa8a:	b948      	cbnz	r0, 800aaa0 <_strtod_l+0x6a0>
 800aa8c:	f04f 0800 	mov.w	r8, #0
 800aa90:	e6d5      	b.n	800a83e <_strtod_l+0x43e>
 800aa92:	f04f 32ff 	mov.w	r2, #4294967295
 800aa96:	fa02 f303 	lsl.w	r3, r2, r3
 800aa9a:	ea03 0a0a 	and.w	sl, r3, sl
 800aa9e:	e7ad      	b.n	800a9fc <_strtod_l+0x5fc>
 800aaa0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aaa2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aaa4:	2d00      	cmp	r5, #0
 800aaa6:	bfab      	itete	ge
 800aaa8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aaaa:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aaac:	18ef      	addge	r7, r5, r3
 800aaae:	1b5e      	sublt	r6, r3, r5
 800aab0:	9b08      	ldr	r3, [sp, #32]
 800aab2:	bfa8      	it	ge
 800aab4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aab6:	eba5 0503 	sub.w	r5, r5, r3
 800aaba:	4415      	add	r5, r2
 800aabc:	4b34      	ldr	r3, [pc, #208]	@ (800ab90 <_strtod_l+0x790>)
 800aabe:	f105 35ff 	add.w	r5, r5, #4294967295
 800aac2:	bfb8      	it	lt
 800aac4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aac6:	429d      	cmp	r5, r3
 800aac8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aacc:	da50      	bge.n	800ab70 <_strtod_l+0x770>
 800aace:	1b5b      	subs	r3, r3, r5
 800aad0:	2b1f      	cmp	r3, #31
 800aad2:	f04f 0101 	mov.w	r1, #1
 800aad6:	eba2 0203 	sub.w	r2, r2, r3
 800aada:	dc3d      	bgt.n	800ab58 <_strtod_l+0x758>
 800aadc:	fa01 f303 	lsl.w	r3, r1, r3
 800aae0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aae2:	2300      	movs	r3, #0
 800aae4:	9310      	str	r3, [sp, #64]	@ 0x40
 800aae6:	18bd      	adds	r5, r7, r2
 800aae8:	9b08      	ldr	r3, [sp, #32]
 800aaea:	42af      	cmp	r7, r5
 800aaec:	4416      	add	r6, r2
 800aaee:	441e      	add	r6, r3
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	bfa8      	it	ge
 800aaf4:	462b      	movge	r3, r5
 800aaf6:	42b3      	cmp	r3, r6
 800aaf8:	bfa8      	it	ge
 800aafa:	4633      	movge	r3, r6
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bfc2      	ittt	gt
 800ab00:	1aed      	subgt	r5, r5, r3
 800ab02:	1af6      	subgt	r6, r6, r3
 800ab04:	1aff      	subgt	r7, r7, r3
 800ab06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	dd16      	ble.n	800ab3a <_strtod_l+0x73a>
 800ab0c:	4641      	mov	r1, r8
 800ab0e:	461a      	mov	r2, r3
 800ab10:	9805      	ldr	r0, [sp, #20]
 800ab12:	f7ff f9a7 	bl	8009e64 <__pow5mult>
 800ab16:	4680      	mov	r8, r0
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d0b7      	beq.n	800aa8c <_strtod_l+0x68c>
 800ab1c:	4601      	mov	r1, r0
 800ab1e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab20:	9805      	ldr	r0, [sp, #20]
 800ab22:	f7ff f8fd 	bl	8009d20 <__multiply>
 800ab26:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	f43f ae88 	beq.w	800a83e <_strtod_l+0x43e>
 800ab2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab30:	9805      	ldr	r0, [sp, #20]
 800ab32:	f7fe ffe1 	bl	8009af8 <_Bfree>
 800ab36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab38:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab3a:	2d00      	cmp	r5, #0
 800ab3c:	dc1d      	bgt.n	800ab7a <_strtod_l+0x77a>
 800ab3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dd27      	ble.n	800ab94 <_strtod_l+0x794>
 800ab44:	4649      	mov	r1, r9
 800ab46:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ab48:	9805      	ldr	r0, [sp, #20]
 800ab4a:	f7ff f98b 	bl	8009e64 <__pow5mult>
 800ab4e:	4681      	mov	r9, r0
 800ab50:	bb00      	cbnz	r0, 800ab94 <_strtod_l+0x794>
 800ab52:	f04f 0900 	mov.w	r9, #0
 800ab56:	e672      	b.n	800a83e <_strtod_l+0x43e>
 800ab58:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ab5c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ab60:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ab64:	35e2      	adds	r5, #226	@ 0xe2
 800ab66:	fa01 f305 	lsl.w	r3, r1, r5
 800ab6a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab6c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ab6e:	e7ba      	b.n	800aae6 <_strtod_l+0x6e6>
 800ab70:	2300      	movs	r3, #0
 800ab72:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab74:	2301      	movs	r3, #1
 800ab76:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab78:	e7b5      	b.n	800aae6 <_strtod_l+0x6e6>
 800ab7a:	462a      	mov	r2, r5
 800ab7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab7e:	9805      	ldr	r0, [sp, #20]
 800ab80:	f7ff f9ca 	bl	8009f18 <__lshift>
 800ab84:	901a      	str	r0, [sp, #104]	@ 0x68
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d1d9      	bne.n	800ab3e <_strtod_l+0x73e>
 800ab8a:	e658      	b.n	800a83e <_strtod_l+0x43e>
 800ab8c:	0800e888 	.word	0x0800e888
 800ab90:	fffffc02 	.word	0xfffffc02
 800ab94:	2e00      	cmp	r6, #0
 800ab96:	dd07      	ble.n	800aba8 <_strtod_l+0x7a8>
 800ab98:	4649      	mov	r1, r9
 800ab9a:	4632      	mov	r2, r6
 800ab9c:	9805      	ldr	r0, [sp, #20]
 800ab9e:	f7ff f9bb 	bl	8009f18 <__lshift>
 800aba2:	4681      	mov	r9, r0
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d0d4      	beq.n	800ab52 <_strtod_l+0x752>
 800aba8:	2f00      	cmp	r7, #0
 800abaa:	dd08      	ble.n	800abbe <_strtod_l+0x7be>
 800abac:	4641      	mov	r1, r8
 800abae:	463a      	mov	r2, r7
 800abb0:	9805      	ldr	r0, [sp, #20]
 800abb2:	f7ff f9b1 	bl	8009f18 <__lshift>
 800abb6:	4680      	mov	r8, r0
 800abb8:	2800      	cmp	r0, #0
 800abba:	f43f ae40 	beq.w	800a83e <_strtod_l+0x43e>
 800abbe:	464a      	mov	r2, r9
 800abc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abc2:	9805      	ldr	r0, [sp, #20]
 800abc4:	f7ff fa30 	bl	800a028 <__mdiff>
 800abc8:	4604      	mov	r4, r0
 800abca:	2800      	cmp	r0, #0
 800abcc:	f43f ae37 	beq.w	800a83e <_strtod_l+0x43e>
 800abd0:	68c3      	ldr	r3, [r0, #12]
 800abd2:	4641      	mov	r1, r8
 800abd4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abd6:	2300      	movs	r3, #0
 800abd8:	60c3      	str	r3, [r0, #12]
 800abda:	f7ff fa09 	bl	8009ff0 <__mcmp>
 800abde:	2800      	cmp	r0, #0
 800abe0:	da3d      	bge.n	800ac5e <_strtod_l+0x85e>
 800abe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abe4:	ea53 030a 	orrs.w	r3, r3, sl
 800abe8:	d163      	bne.n	800acb2 <_strtod_l+0x8b2>
 800abea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d15f      	bne.n	800acb2 <_strtod_l+0x8b2>
 800abf2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abf6:	0d1b      	lsrs	r3, r3, #20
 800abf8:	051b      	lsls	r3, r3, #20
 800abfa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800abfe:	d958      	bls.n	800acb2 <_strtod_l+0x8b2>
 800ac00:	6963      	ldr	r3, [r4, #20]
 800ac02:	b913      	cbnz	r3, 800ac0a <_strtod_l+0x80a>
 800ac04:	6923      	ldr	r3, [r4, #16]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	dd53      	ble.n	800acb2 <_strtod_l+0x8b2>
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	9805      	ldr	r0, [sp, #20]
 800ac10:	f7ff f982 	bl	8009f18 <__lshift>
 800ac14:	4641      	mov	r1, r8
 800ac16:	4604      	mov	r4, r0
 800ac18:	f7ff f9ea 	bl	8009ff0 <__mcmp>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	dd48      	ble.n	800acb2 <_strtod_l+0x8b2>
 800ac20:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac24:	9a08      	ldr	r2, [sp, #32]
 800ac26:	0d1b      	lsrs	r3, r3, #20
 800ac28:	051b      	lsls	r3, r3, #20
 800ac2a:	2a00      	cmp	r2, #0
 800ac2c:	d062      	beq.n	800acf4 <_strtod_l+0x8f4>
 800ac2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac32:	d85f      	bhi.n	800acf4 <_strtod_l+0x8f4>
 800ac34:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ac38:	f67f ae94 	bls.w	800a964 <_strtod_l+0x564>
 800ac3c:	4650      	mov	r0, sl
 800ac3e:	4659      	mov	r1, fp
 800ac40:	4ba3      	ldr	r3, [pc, #652]	@ (800aed0 <_strtod_l+0xad0>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	f7f5 fc48 	bl	80004d8 <__aeabi_dmul>
 800ac48:	4ba2      	ldr	r3, [pc, #648]	@ (800aed4 <_strtod_l+0xad4>)
 800ac4a:	4682      	mov	sl, r0
 800ac4c:	400b      	ands	r3, r1
 800ac4e:	468b      	mov	fp, r1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f47f adff 	bne.w	800a854 <_strtod_l+0x454>
 800ac56:	2322      	movs	r3, #34	@ 0x22
 800ac58:	9a05      	ldr	r2, [sp, #20]
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	e5fa      	b.n	800a854 <_strtod_l+0x454>
 800ac5e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ac62:	d165      	bne.n	800ad30 <_strtod_l+0x930>
 800ac64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ac66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac6a:	b35a      	cbz	r2, 800acc4 <_strtod_l+0x8c4>
 800ac6c:	4a9a      	ldr	r2, [pc, #616]	@ (800aed8 <_strtod_l+0xad8>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d12b      	bne.n	800acca <_strtod_l+0x8ca>
 800ac72:	9b08      	ldr	r3, [sp, #32]
 800ac74:	4651      	mov	r1, sl
 800ac76:	b303      	cbz	r3, 800acba <_strtod_l+0x8ba>
 800ac78:	465a      	mov	r2, fp
 800ac7a:	4b96      	ldr	r3, [pc, #600]	@ (800aed4 <_strtod_l+0xad4>)
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ac82:	f04f 32ff 	mov.w	r2, #4294967295
 800ac86:	d81b      	bhi.n	800acc0 <_strtod_l+0x8c0>
 800ac88:	0d1b      	lsrs	r3, r3, #20
 800ac8a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac92:	4299      	cmp	r1, r3
 800ac94:	d119      	bne.n	800acca <_strtod_l+0x8ca>
 800ac96:	4b91      	ldr	r3, [pc, #580]	@ (800aedc <_strtod_l+0xadc>)
 800ac98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d102      	bne.n	800aca4 <_strtod_l+0x8a4>
 800ac9e:	3101      	adds	r1, #1
 800aca0:	f43f adcd 	beq.w	800a83e <_strtod_l+0x43e>
 800aca4:	f04f 0a00 	mov.w	sl, #0
 800aca8:	4b8a      	ldr	r3, [pc, #552]	@ (800aed4 <_strtod_l+0xad4>)
 800acaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acac:	401a      	ands	r2, r3
 800acae:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800acb2:	9b08      	ldr	r3, [sp, #32]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1c1      	bne.n	800ac3c <_strtod_l+0x83c>
 800acb8:	e5cc      	b.n	800a854 <_strtod_l+0x454>
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	e7e8      	b.n	800ac92 <_strtod_l+0x892>
 800acc0:	4613      	mov	r3, r2
 800acc2:	e7e6      	b.n	800ac92 <_strtod_l+0x892>
 800acc4:	ea53 030a 	orrs.w	r3, r3, sl
 800acc8:	d0aa      	beq.n	800ac20 <_strtod_l+0x820>
 800acca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800accc:	b1db      	cbz	r3, 800ad06 <_strtod_l+0x906>
 800acce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acd0:	4213      	tst	r3, r2
 800acd2:	d0ee      	beq.n	800acb2 <_strtod_l+0x8b2>
 800acd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acd6:	4650      	mov	r0, sl
 800acd8:	4659      	mov	r1, fp
 800acda:	9a08      	ldr	r2, [sp, #32]
 800acdc:	b1bb      	cbz	r3, 800ad0e <_strtod_l+0x90e>
 800acde:	f7ff fb6b 	bl	800a3b8 <sulp>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acea:	f7f5 fa3f 	bl	800016c <__adddf3>
 800acee:	4682      	mov	sl, r0
 800acf0:	468b      	mov	fp, r1
 800acf2:	e7de      	b.n	800acb2 <_strtod_l+0x8b2>
 800acf4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800acf8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800acfc:	f04f 3aff 	mov.w	sl, #4294967295
 800ad00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad04:	e7d5      	b.n	800acb2 <_strtod_l+0x8b2>
 800ad06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad08:	ea13 0f0a 	tst.w	r3, sl
 800ad0c:	e7e1      	b.n	800acd2 <_strtod_l+0x8d2>
 800ad0e:	f7ff fb53 	bl	800a3b8 <sulp>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad1a:	f7f5 fa25 	bl	8000168 <__aeabi_dsub>
 800ad1e:	2200      	movs	r2, #0
 800ad20:	2300      	movs	r3, #0
 800ad22:	4682      	mov	sl, r0
 800ad24:	468b      	mov	fp, r1
 800ad26:	f7f5 fe3f 	bl	80009a8 <__aeabi_dcmpeq>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d0c1      	beq.n	800acb2 <_strtod_l+0x8b2>
 800ad2e:	e619      	b.n	800a964 <_strtod_l+0x564>
 800ad30:	4641      	mov	r1, r8
 800ad32:	4620      	mov	r0, r4
 800ad34:	f7ff facc 	bl	800a2d0 <__ratio>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ad3e:	4606      	mov	r6, r0
 800ad40:	460f      	mov	r7, r1
 800ad42:	f7f5 fe45 	bl	80009d0 <__aeabi_dcmple>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d06d      	beq.n	800ae26 <_strtod_l+0xa26>
 800ad4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d178      	bne.n	800ae42 <_strtod_l+0xa42>
 800ad50:	f1ba 0f00 	cmp.w	sl, #0
 800ad54:	d156      	bne.n	800ae04 <_strtod_l+0xa04>
 800ad56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d158      	bne.n	800ae12 <_strtod_l+0xa12>
 800ad60:	2200      	movs	r2, #0
 800ad62:	4630      	mov	r0, r6
 800ad64:	4639      	mov	r1, r7
 800ad66:	4b5e      	ldr	r3, [pc, #376]	@ (800aee0 <_strtod_l+0xae0>)
 800ad68:	f7f5 fe28 	bl	80009bc <__aeabi_dcmplt>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d157      	bne.n	800ae20 <_strtod_l+0xa20>
 800ad70:	4630      	mov	r0, r6
 800ad72:	4639      	mov	r1, r7
 800ad74:	2200      	movs	r2, #0
 800ad76:	4b5b      	ldr	r3, [pc, #364]	@ (800aee4 <_strtod_l+0xae4>)
 800ad78:	f7f5 fbae 	bl	80004d8 <__aeabi_dmul>
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ad84:	9606      	str	r6, [sp, #24]
 800ad86:	9307      	str	r3, [sp, #28]
 800ad88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad8c:	4d51      	ldr	r5, [pc, #324]	@ (800aed4 <_strtod_l+0xad4>)
 800ad8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ad92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad94:	401d      	ands	r5, r3
 800ad96:	4b54      	ldr	r3, [pc, #336]	@ (800aee8 <_strtod_l+0xae8>)
 800ad98:	429d      	cmp	r5, r3
 800ad9a:	f040 80ab 	bne.w	800aef4 <_strtod_l+0xaf4>
 800ad9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ada0:	4650      	mov	r0, sl
 800ada2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ada6:	4659      	mov	r1, fp
 800ada8:	f7ff f9d2 	bl	800a150 <__ulp>
 800adac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adb0:	f7f5 fb92 	bl	80004d8 <__aeabi_dmul>
 800adb4:	4652      	mov	r2, sl
 800adb6:	465b      	mov	r3, fp
 800adb8:	f7f5 f9d8 	bl	800016c <__adddf3>
 800adbc:	460b      	mov	r3, r1
 800adbe:	4945      	ldr	r1, [pc, #276]	@ (800aed4 <_strtod_l+0xad4>)
 800adc0:	4a4a      	ldr	r2, [pc, #296]	@ (800aeec <_strtod_l+0xaec>)
 800adc2:	4019      	ands	r1, r3
 800adc4:	4291      	cmp	r1, r2
 800adc6:	4682      	mov	sl, r0
 800adc8:	d942      	bls.n	800ae50 <_strtod_l+0xa50>
 800adca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adcc:	4b43      	ldr	r3, [pc, #268]	@ (800aedc <_strtod_l+0xadc>)
 800adce:	429a      	cmp	r2, r3
 800add0:	d103      	bne.n	800adda <_strtod_l+0x9da>
 800add2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800add4:	3301      	adds	r3, #1
 800add6:	f43f ad32 	beq.w	800a83e <_strtod_l+0x43e>
 800adda:	f04f 3aff 	mov.w	sl, #4294967295
 800adde:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800aedc <_strtod_l+0xadc>
 800ade2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ade4:	9805      	ldr	r0, [sp, #20]
 800ade6:	f7fe fe87 	bl	8009af8 <_Bfree>
 800adea:	4649      	mov	r1, r9
 800adec:	9805      	ldr	r0, [sp, #20]
 800adee:	f7fe fe83 	bl	8009af8 <_Bfree>
 800adf2:	4641      	mov	r1, r8
 800adf4:	9805      	ldr	r0, [sp, #20]
 800adf6:	f7fe fe7f 	bl	8009af8 <_Bfree>
 800adfa:	4621      	mov	r1, r4
 800adfc:	9805      	ldr	r0, [sp, #20]
 800adfe:	f7fe fe7b 	bl	8009af8 <_Bfree>
 800ae02:	e61c      	b.n	800aa3e <_strtod_l+0x63e>
 800ae04:	f1ba 0f01 	cmp.w	sl, #1
 800ae08:	d103      	bne.n	800ae12 <_strtod_l+0xa12>
 800ae0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f43f ada9 	beq.w	800a964 <_strtod_l+0x564>
 800ae12:	2200      	movs	r2, #0
 800ae14:	4b36      	ldr	r3, [pc, #216]	@ (800aef0 <_strtod_l+0xaf0>)
 800ae16:	2600      	movs	r6, #0
 800ae18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae1c:	4f30      	ldr	r7, [pc, #192]	@ (800aee0 <_strtod_l+0xae0>)
 800ae1e:	e7b3      	b.n	800ad88 <_strtod_l+0x988>
 800ae20:	2600      	movs	r6, #0
 800ae22:	4f30      	ldr	r7, [pc, #192]	@ (800aee4 <_strtod_l+0xae4>)
 800ae24:	e7ac      	b.n	800ad80 <_strtod_l+0x980>
 800ae26:	4630      	mov	r0, r6
 800ae28:	4639      	mov	r1, r7
 800ae2a:	4b2e      	ldr	r3, [pc, #184]	@ (800aee4 <_strtod_l+0xae4>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f7f5 fb53 	bl	80004d8 <__aeabi_dmul>
 800ae32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae34:	4606      	mov	r6, r0
 800ae36:	460f      	mov	r7, r1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0a1      	beq.n	800ad80 <_strtod_l+0x980>
 800ae3c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ae40:	e7a2      	b.n	800ad88 <_strtod_l+0x988>
 800ae42:	2200      	movs	r2, #0
 800ae44:	4b26      	ldr	r3, [pc, #152]	@ (800aee0 <_strtod_l+0xae0>)
 800ae46:	4616      	mov	r6, r2
 800ae48:	461f      	mov	r7, r3
 800ae4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae4e:	e79b      	b.n	800ad88 <_strtod_l+0x988>
 800ae50:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ae54:	9b08      	ldr	r3, [sp, #32]
 800ae56:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1c1      	bne.n	800ade2 <_strtod_l+0x9e2>
 800ae5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae62:	0d1b      	lsrs	r3, r3, #20
 800ae64:	051b      	lsls	r3, r3, #20
 800ae66:	429d      	cmp	r5, r3
 800ae68:	d1bb      	bne.n	800ade2 <_strtod_l+0x9e2>
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	f7f6 f967 	bl	8001140 <__aeabi_d2lz>
 800ae72:	f7f5 fb03 	bl	800047c <__aeabi_l2d>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	f7f5 f973 	bl	8000168 <__aeabi_dsub>
 800ae82:	460b      	mov	r3, r1
 800ae84:	4602      	mov	r2, r0
 800ae86:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ae8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ae8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae90:	ea46 060a 	orr.w	r6, r6, sl
 800ae94:	431e      	orrs	r6, r3
 800ae96:	d06a      	beq.n	800af6e <_strtod_l+0xb6e>
 800ae98:	a309      	add	r3, pc, #36	@ (adr r3, 800aec0 <_strtod_l+0xac0>)
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	f7f5 fd8d 	bl	80009bc <__aeabi_dcmplt>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	f47f acd6 	bne.w	800a854 <_strtod_l+0x454>
 800aea8:	a307      	add	r3, pc, #28	@ (adr r3, 800aec8 <_strtod_l+0xac8>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aeb2:	f7f5 fda1 	bl	80009f8 <__aeabi_dcmpgt>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d093      	beq.n	800ade2 <_strtod_l+0x9e2>
 800aeba:	e4cb      	b.n	800a854 <_strtod_l+0x454>
 800aebc:	f3af 8000 	nop.w
 800aec0:	94a03595 	.word	0x94a03595
 800aec4:	3fdfffff 	.word	0x3fdfffff
 800aec8:	35afe535 	.word	0x35afe535
 800aecc:	3fe00000 	.word	0x3fe00000
 800aed0:	39500000 	.word	0x39500000
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	000fffff 	.word	0x000fffff
 800aedc:	7fefffff 	.word	0x7fefffff
 800aee0:	3ff00000 	.word	0x3ff00000
 800aee4:	3fe00000 	.word	0x3fe00000
 800aee8:	7fe00000 	.word	0x7fe00000
 800aeec:	7c9fffff 	.word	0x7c9fffff
 800aef0:	bff00000 	.word	0xbff00000
 800aef4:	9b08      	ldr	r3, [sp, #32]
 800aef6:	b323      	cbz	r3, 800af42 <_strtod_l+0xb42>
 800aef8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aefc:	d821      	bhi.n	800af42 <_strtod_l+0xb42>
 800aefe:	a328      	add	r3, pc, #160	@ (adr r3, 800afa0 <_strtod_l+0xba0>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	4630      	mov	r0, r6
 800af06:	4639      	mov	r1, r7
 800af08:	f7f5 fd62 	bl	80009d0 <__aeabi_dcmple>
 800af0c:	b1a0      	cbz	r0, 800af38 <_strtod_l+0xb38>
 800af0e:	4639      	mov	r1, r7
 800af10:	4630      	mov	r0, r6
 800af12:	f7f5 fdb9 	bl	8000a88 <__aeabi_d2uiz>
 800af16:	2801      	cmp	r0, #1
 800af18:	bf38      	it	cc
 800af1a:	2001      	movcc	r0, #1
 800af1c:	f7f5 fa62 	bl	80003e4 <__aeabi_ui2d>
 800af20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af22:	4606      	mov	r6, r0
 800af24:	460f      	mov	r7, r1
 800af26:	b9fb      	cbnz	r3, 800af68 <_strtod_l+0xb68>
 800af28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af2c:	9014      	str	r0, [sp, #80]	@ 0x50
 800af2e:	9315      	str	r3, [sp, #84]	@ 0x54
 800af30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800af34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800af38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800af3e:	1b5b      	subs	r3, r3, r5
 800af40:	9311      	str	r3, [sp, #68]	@ 0x44
 800af42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af46:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800af4a:	f7ff f901 	bl	800a150 <__ulp>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4650      	mov	r0, sl
 800af54:	4659      	mov	r1, fp
 800af56:	f7f5 fabf 	bl	80004d8 <__aeabi_dmul>
 800af5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800af5e:	f7f5 f905 	bl	800016c <__adddf3>
 800af62:	4682      	mov	sl, r0
 800af64:	468b      	mov	fp, r1
 800af66:	e775      	b.n	800ae54 <_strtod_l+0xa54>
 800af68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800af6c:	e7e0      	b.n	800af30 <_strtod_l+0xb30>
 800af6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800afa8 <_strtod_l+0xba8>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 fd22 	bl	80009bc <__aeabi_dcmplt>
 800af78:	e79d      	b.n	800aeb6 <_strtod_l+0xab6>
 800af7a:	2300      	movs	r3, #0
 800af7c:	930e      	str	r3, [sp, #56]	@ 0x38
 800af7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af80:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800af82:	6013      	str	r3, [r2, #0]
 800af84:	f7ff ba79 	b.w	800a47a <_strtod_l+0x7a>
 800af88:	2a65      	cmp	r2, #101	@ 0x65
 800af8a:	f43f ab72 	beq.w	800a672 <_strtod_l+0x272>
 800af8e:	2a45      	cmp	r2, #69	@ 0x45
 800af90:	f43f ab6f 	beq.w	800a672 <_strtod_l+0x272>
 800af94:	2301      	movs	r3, #1
 800af96:	f7ff bbaa 	b.w	800a6ee <_strtod_l+0x2ee>
 800af9a:	bf00      	nop
 800af9c:	f3af 8000 	nop.w
 800afa0:	ffc00000 	.word	0xffc00000
 800afa4:	41dfffff 	.word	0x41dfffff
 800afa8:	94a03595 	.word	0x94a03595
 800afac:	3fcfffff 	.word	0x3fcfffff

0800afb0 <_strtod_r>:
 800afb0:	4b01      	ldr	r3, [pc, #4]	@ (800afb8 <_strtod_r+0x8>)
 800afb2:	f7ff ba25 	b.w	800a400 <_strtod_l>
 800afb6:	bf00      	nop
 800afb8:	20000068 	.word	0x20000068

0800afbc <_strtol_l.isra.0>:
 800afbc:	2b24      	cmp	r3, #36	@ 0x24
 800afbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc2:	4686      	mov	lr, r0
 800afc4:	4690      	mov	r8, r2
 800afc6:	d801      	bhi.n	800afcc <_strtol_l.isra.0+0x10>
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d106      	bne.n	800afda <_strtol_l.isra.0+0x1e>
 800afcc:	f7fd fe62 	bl	8008c94 <__errno>
 800afd0:	2316      	movs	r3, #22
 800afd2:	6003      	str	r3, [r0, #0]
 800afd4:	2000      	movs	r0, #0
 800afd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afda:	460d      	mov	r5, r1
 800afdc:	4833      	ldr	r0, [pc, #204]	@ (800b0ac <_strtol_l.isra.0+0xf0>)
 800afde:	462a      	mov	r2, r5
 800afe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afe4:	5d06      	ldrb	r6, [r0, r4]
 800afe6:	f016 0608 	ands.w	r6, r6, #8
 800afea:	d1f8      	bne.n	800afde <_strtol_l.isra.0+0x22>
 800afec:	2c2d      	cmp	r4, #45	@ 0x2d
 800afee:	d110      	bne.n	800b012 <_strtol_l.isra.0+0x56>
 800aff0:	2601      	movs	r6, #1
 800aff2:	782c      	ldrb	r4, [r5, #0]
 800aff4:	1c95      	adds	r5, r2, #2
 800aff6:	f033 0210 	bics.w	r2, r3, #16
 800affa:	d115      	bne.n	800b028 <_strtol_l.isra.0+0x6c>
 800affc:	2c30      	cmp	r4, #48	@ 0x30
 800affe:	d10d      	bne.n	800b01c <_strtol_l.isra.0+0x60>
 800b000:	782a      	ldrb	r2, [r5, #0]
 800b002:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b006:	2a58      	cmp	r2, #88	@ 0x58
 800b008:	d108      	bne.n	800b01c <_strtol_l.isra.0+0x60>
 800b00a:	786c      	ldrb	r4, [r5, #1]
 800b00c:	3502      	adds	r5, #2
 800b00e:	2310      	movs	r3, #16
 800b010:	e00a      	b.n	800b028 <_strtol_l.isra.0+0x6c>
 800b012:	2c2b      	cmp	r4, #43	@ 0x2b
 800b014:	bf04      	itt	eq
 800b016:	782c      	ldrbeq	r4, [r5, #0]
 800b018:	1c95      	addeq	r5, r2, #2
 800b01a:	e7ec      	b.n	800aff6 <_strtol_l.isra.0+0x3a>
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1f6      	bne.n	800b00e <_strtol_l.isra.0+0x52>
 800b020:	2c30      	cmp	r4, #48	@ 0x30
 800b022:	bf14      	ite	ne
 800b024:	230a      	movne	r3, #10
 800b026:	2308      	moveq	r3, #8
 800b028:	2200      	movs	r2, #0
 800b02a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b02e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b032:	fbbc f9f3 	udiv	r9, ip, r3
 800b036:	4610      	mov	r0, r2
 800b038:	fb03 ca19 	mls	sl, r3, r9, ip
 800b03c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b040:	2f09      	cmp	r7, #9
 800b042:	d80f      	bhi.n	800b064 <_strtol_l.isra.0+0xa8>
 800b044:	463c      	mov	r4, r7
 800b046:	42a3      	cmp	r3, r4
 800b048:	dd1b      	ble.n	800b082 <_strtol_l.isra.0+0xc6>
 800b04a:	1c57      	adds	r7, r2, #1
 800b04c:	d007      	beq.n	800b05e <_strtol_l.isra.0+0xa2>
 800b04e:	4581      	cmp	r9, r0
 800b050:	d314      	bcc.n	800b07c <_strtol_l.isra.0+0xc0>
 800b052:	d101      	bne.n	800b058 <_strtol_l.isra.0+0x9c>
 800b054:	45a2      	cmp	sl, r4
 800b056:	db11      	blt.n	800b07c <_strtol_l.isra.0+0xc0>
 800b058:	2201      	movs	r2, #1
 800b05a:	fb00 4003 	mla	r0, r0, r3, r4
 800b05e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b062:	e7eb      	b.n	800b03c <_strtol_l.isra.0+0x80>
 800b064:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b068:	2f19      	cmp	r7, #25
 800b06a:	d801      	bhi.n	800b070 <_strtol_l.isra.0+0xb4>
 800b06c:	3c37      	subs	r4, #55	@ 0x37
 800b06e:	e7ea      	b.n	800b046 <_strtol_l.isra.0+0x8a>
 800b070:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b074:	2f19      	cmp	r7, #25
 800b076:	d804      	bhi.n	800b082 <_strtol_l.isra.0+0xc6>
 800b078:	3c57      	subs	r4, #87	@ 0x57
 800b07a:	e7e4      	b.n	800b046 <_strtol_l.isra.0+0x8a>
 800b07c:	f04f 32ff 	mov.w	r2, #4294967295
 800b080:	e7ed      	b.n	800b05e <_strtol_l.isra.0+0xa2>
 800b082:	1c53      	adds	r3, r2, #1
 800b084:	d108      	bne.n	800b098 <_strtol_l.isra.0+0xdc>
 800b086:	2322      	movs	r3, #34	@ 0x22
 800b088:	4660      	mov	r0, ip
 800b08a:	f8ce 3000 	str.w	r3, [lr]
 800b08e:	f1b8 0f00 	cmp.w	r8, #0
 800b092:	d0a0      	beq.n	800afd6 <_strtol_l.isra.0+0x1a>
 800b094:	1e69      	subs	r1, r5, #1
 800b096:	e006      	b.n	800b0a6 <_strtol_l.isra.0+0xea>
 800b098:	b106      	cbz	r6, 800b09c <_strtol_l.isra.0+0xe0>
 800b09a:	4240      	negs	r0, r0
 800b09c:	f1b8 0f00 	cmp.w	r8, #0
 800b0a0:	d099      	beq.n	800afd6 <_strtol_l.isra.0+0x1a>
 800b0a2:	2a00      	cmp	r2, #0
 800b0a4:	d1f6      	bne.n	800b094 <_strtol_l.isra.0+0xd8>
 800b0a6:	f8c8 1000 	str.w	r1, [r8]
 800b0aa:	e794      	b.n	800afd6 <_strtol_l.isra.0+0x1a>
 800b0ac:	0800e8b1 	.word	0x0800e8b1

0800b0b0 <_strtol_r>:
 800b0b0:	f7ff bf84 	b.w	800afbc <_strtol_l.isra.0>

0800b0b4 <__ssputs_r>:
 800b0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b8:	461f      	mov	r7, r3
 800b0ba:	688e      	ldr	r6, [r1, #8]
 800b0bc:	4682      	mov	sl, r0
 800b0be:	42be      	cmp	r6, r7
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	4690      	mov	r8, r2
 800b0c4:	680b      	ldr	r3, [r1, #0]
 800b0c6:	d82d      	bhi.n	800b124 <__ssputs_r+0x70>
 800b0c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0d0:	d026      	beq.n	800b120 <__ssputs_r+0x6c>
 800b0d2:	6965      	ldr	r5, [r4, #20]
 800b0d4:	6909      	ldr	r1, [r1, #16]
 800b0d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0da:	eba3 0901 	sub.w	r9, r3, r1
 800b0de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0e2:	1c7b      	adds	r3, r7, #1
 800b0e4:	444b      	add	r3, r9
 800b0e6:	106d      	asrs	r5, r5, #1
 800b0e8:	429d      	cmp	r5, r3
 800b0ea:	bf38      	it	cc
 800b0ec:	461d      	movcc	r5, r3
 800b0ee:	0553      	lsls	r3, r2, #21
 800b0f0:	d527      	bpl.n	800b142 <__ssputs_r+0x8e>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	f7fc fd1e 	bl	8007b34 <_malloc_r>
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	b360      	cbz	r0, 800b156 <__ssputs_r+0xa2>
 800b0fc:	464a      	mov	r2, r9
 800b0fe:	6921      	ldr	r1, [r4, #16]
 800b100:	f7fd fe03 	bl	8008d0a <memcpy>
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b10e:	81a3      	strh	r3, [r4, #12]
 800b110:	6126      	str	r6, [r4, #16]
 800b112:	444e      	add	r6, r9
 800b114:	6026      	str	r6, [r4, #0]
 800b116:	463e      	mov	r6, r7
 800b118:	6165      	str	r5, [r4, #20]
 800b11a:	eba5 0509 	sub.w	r5, r5, r9
 800b11e:	60a5      	str	r5, [r4, #8]
 800b120:	42be      	cmp	r6, r7
 800b122:	d900      	bls.n	800b126 <__ssputs_r+0x72>
 800b124:	463e      	mov	r6, r7
 800b126:	4632      	mov	r2, r6
 800b128:	4641      	mov	r1, r8
 800b12a:	6820      	ldr	r0, [r4, #0]
 800b12c:	f000 f9c2 	bl	800b4b4 <memmove>
 800b130:	2000      	movs	r0, #0
 800b132:	68a3      	ldr	r3, [r4, #8]
 800b134:	1b9b      	subs	r3, r3, r6
 800b136:	60a3      	str	r3, [r4, #8]
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	4433      	add	r3, r6
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b142:	462a      	mov	r2, r5
 800b144:	f000 fd65 	bl	800bc12 <_realloc_r>
 800b148:	4606      	mov	r6, r0
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d1e0      	bne.n	800b110 <__ssputs_r+0x5c>
 800b14e:	4650      	mov	r0, sl
 800b150:	6921      	ldr	r1, [r4, #16]
 800b152:	f7fe fc49 	bl	80099e8 <_free_r>
 800b156:	230c      	movs	r3, #12
 800b158:	f8ca 3000 	str.w	r3, [sl]
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	f04f 30ff 	mov.w	r0, #4294967295
 800b162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	e7e9      	b.n	800b13e <__ssputs_r+0x8a>
	...

0800b16c <_svfiprintf_r>:
 800b16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b170:	4698      	mov	r8, r3
 800b172:	898b      	ldrh	r3, [r1, #12]
 800b174:	4607      	mov	r7, r0
 800b176:	061b      	lsls	r3, r3, #24
 800b178:	460d      	mov	r5, r1
 800b17a:	4614      	mov	r4, r2
 800b17c:	b09d      	sub	sp, #116	@ 0x74
 800b17e:	d510      	bpl.n	800b1a2 <_svfiprintf_r+0x36>
 800b180:	690b      	ldr	r3, [r1, #16]
 800b182:	b973      	cbnz	r3, 800b1a2 <_svfiprintf_r+0x36>
 800b184:	2140      	movs	r1, #64	@ 0x40
 800b186:	f7fc fcd5 	bl	8007b34 <_malloc_r>
 800b18a:	6028      	str	r0, [r5, #0]
 800b18c:	6128      	str	r0, [r5, #16]
 800b18e:	b930      	cbnz	r0, 800b19e <_svfiprintf_r+0x32>
 800b190:	230c      	movs	r3, #12
 800b192:	603b      	str	r3, [r7, #0]
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	b01d      	add	sp, #116	@ 0x74
 800b19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19e:	2340      	movs	r3, #64	@ 0x40
 800b1a0:	616b      	str	r3, [r5, #20]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a6:	2320      	movs	r3, #32
 800b1a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ac:	2330      	movs	r3, #48	@ 0x30
 800b1ae:	f04f 0901 	mov.w	r9, #1
 800b1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b350 <_svfiprintf_r+0x1e4>
 800b1ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1be:	4623      	mov	r3, r4
 800b1c0:	469a      	mov	sl, r3
 800b1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c6:	b10a      	cbz	r2, 800b1cc <_svfiprintf_r+0x60>
 800b1c8:	2a25      	cmp	r2, #37	@ 0x25
 800b1ca:	d1f9      	bne.n	800b1c0 <_svfiprintf_r+0x54>
 800b1cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d0:	d00b      	beq.n	800b1ea <_svfiprintf_r+0x7e>
 800b1d2:	465b      	mov	r3, fp
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4638      	mov	r0, r7
 800b1da:	f7ff ff6b 	bl	800b0b4 <__ssputs_r>
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f000 80a7 	beq.w	800b332 <_svfiprintf_r+0x1c6>
 800b1e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e6:	445a      	add	r2, fp
 800b1e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 809f 	beq.w	800b332 <_svfiprintf_r+0x1c6>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1fe:	f10a 0a01 	add.w	sl, sl, #1
 800b202:	9304      	str	r3, [sp, #16]
 800b204:	9307      	str	r3, [sp, #28]
 800b206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b20a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b20c:	4654      	mov	r4, sl
 800b20e:	2205      	movs	r2, #5
 800b210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b214:	484e      	ldr	r0, [pc, #312]	@ (800b350 <_svfiprintf_r+0x1e4>)
 800b216:	f7fd fd6a 	bl	8008cee <memchr>
 800b21a:	9a04      	ldr	r2, [sp, #16]
 800b21c:	b9d8      	cbnz	r0, 800b256 <_svfiprintf_r+0xea>
 800b21e:	06d0      	lsls	r0, r2, #27
 800b220:	bf44      	itt	mi
 800b222:	2320      	movmi	r3, #32
 800b224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b228:	0711      	lsls	r1, r2, #28
 800b22a:	bf44      	itt	mi
 800b22c:	232b      	movmi	r3, #43	@ 0x2b
 800b22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b232:	f89a 3000 	ldrb.w	r3, [sl]
 800b236:	2b2a      	cmp	r3, #42	@ 0x2a
 800b238:	d015      	beq.n	800b266 <_svfiprintf_r+0xfa>
 800b23a:	4654      	mov	r4, sl
 800b23c:	2000      	movs	r0, #0
 800b23e:	f04f 0c0a 	mov.w	ip, #10
 800b242:	9a07      	ldr	r2, [sp, #28]
 800b244:	4621      	mov	r1, r4
 800b246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b24a:	3b30      	subs	r3, #48	@ 0x30
 800b24c:	2b09      	cmp	r3, #9
 800b24e:	d94b      	bls.n	800b2e8 <_svfiprintf_r+0x17c>
 800b250:	b1b0      	cbz	r0, 800b280 <_svfiprintf_r+0x114>
 800b252:	9207      	str	r2, [sp, #28]
 800b254:	e014      	b.n	800b280 <_svfiprintf_r+0x114>
 800b256:	eba0 0308 	sub.w	r3, r0, r8
 800b25a:	fa09 f303 	lsl.w	r3, r9, r3
 800b25e:	4313      	orrs	r3, r2
 800b260:	46a2      	mov	sl, r4
 800b262:	9304      	str	r3, [sp, #16]
 800b264:	e7d2      	b.n	800b20c <_svfiprintf_r+0xa0>
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	1d19      	adds	r1, r3, #4
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	9103      	str	r1, [sp, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	bfbb      	ittet	lt
 800b272:	425b      	neglt	r3, r3
 800b274:	f042 0202 	orrlt.w	r2, r2, #2
 800b278:	9307      	strge	r3, [sp, #28]
 800b27a:	9307      	strlt	r3, [sp, #28]
 800b27c:	bfb8      	it	lt
 800b27e:	9204      	strlt	r2, [sp, #16]
 800b280:	7823      	ldrb	r3, [r4, #0]
 800b282:	2b2e      	cmp	r3, #46	@ 0x2e
 800b284:	d10a      	bne.n	800b29c <_svfiprintf_r+0x130>
 800b286:	7863      	ldrb	r3, [r4, #1]
 800b288:	2b2a      	cmp	r3, #42	@ 0x2a
 800b28a:	d132      	bne.n	800b2f2 <_svfiprintf_r+0x186>
 800b28c:	9b03      	ldr	r3, [sp, #12]
 800b28e:	3402      	adds	r4, #2
 800b290:	1d1a      	adds	r2, r3, #4
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	9203      	str	r2, [sp, #12]
 800b296:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b29a:	9305      	str	r3, [sp, #20]
 800b29c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b354 <_svfiprintf_r+0x1e8>
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	4650      	mov	r0, sl
 800b2a4:	7821      	ldrb	r1, [r4, #0]
 800b2a6:	f7fd fd22 	bl	8008cee <memchr>
 800b2aa:	b138      	cbz	r0, 800b2bc <_svfiprintf_r+0x150>
 800b2ac:	2240      	movs	r2, #64	@ 0x40
 800b2ae:	9b04      	ldr	r3, [sp, #16]
 800b2b0:	eba0 000a 	sub.w	r0, r0, sl
 800b2b4:	4082      	lsls	r2, r0
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	3401      	adds	r4, #1
 800b2ba:	9304      	str	r3, [sp, #16]
 800b2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c0:	2206      	movs	r2, #6
 800b2c2:	4825      	ldr	r0, [pc, #148]	@ (800b358 <_svfiprintf_r+0x1ec>)
 800b2c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2c8:	f7fd fd11 	bl	8008cee <memchr>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d036      	beq.n	800b33e <_svfiprintf_r+0x1d2>
 800b2d0:	4b22      	ldr	r3, [pc, #136]	@ (800b35c <_svfiprintf_r+0x1f0>)
 800b2d2:	bb1b      	cbnz	r3, 800b31c <_svfiprintf_r+0x1b0>
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	3307      	adds	r3, #7
 800b2d8:	f023 0307 	bic.w	r3, r3, #7
 800b2dc:	3308      	adds	r3, #8
 800b2de:	9303      	str	r3, [sp, #12]
 800b2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e2:	4433      	add	r3, r6
 800b2e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2e6:	e76a      	b.n	800b1be <_svfiprintf_r+0x52>
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	2001      	movs	r0, #1
 800b2ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f0:	e7a8      	b.n	800b244 <_svfiprintf_r+0xd8>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f04f 0c0a 	mov.w	ip, #10
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	3401      	adds	r4, #1
 800b2fc:	9305      	str	r3, [sp, #20]
 800b2fe:	4620      	mov	r0, r4
 800b300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b304:	3a30      	subs	r2, #48	@ 0x30
 800b306:	2a09      	cmp	r2, #9
 800b308:	d903      	bls.n	800b312 <_svfiprintf_r+0x1a6>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0c6      	beq.n	800b29c <_svfiprintf_r+0x130>
 800b30e:	9105      	str	r1, [sp, #20]
 800b310:	e7c4      	b.n	800b29c <_svfiprintf_r+0x130>
 800b312:	4604      	mov	r4, r0
 800b314:	2301      	movs	r3, #1
 800b316:	fb0c 2101 	mla	r1, ip, r1, r2
 800b31a:	e7f0      	b.n	800b2fe <_svfiprintf_r+0x192>
 800b31c:	ab03      	add	r3, sp, #12
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	462a      	mov	r2, r5
 800b322:	4638      	mov	r0, r7
 800b324:	4b0e      	ldr	r3, [pc, #56]	@ (800b360 <_svfiprintf_r+0x1f4>)
 800b326:	a904      	add	r1, sp, #16
 800b328:	f7fc fd2e 	bl	8007d88 <_printf_float>
 800b32c:	1c42      	adds	r2, r0, #1
 800b32e:	4606      	mov	r6, r0
 800b330:	d1d6      	bne.n	800b2e0 <_svfiprintf_r+0x174>
 800b332:	89ab      	ldrh	r3, [r5, #12]
 800b334:	065b      	lsls	r3, r3, #25
 800b336:	f53f af2d 	bmi.w	800b194 <_svfiprintf_r+0x28>
 800b33a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b33c:	e72c      	b.n	800b198 <_svfiprintf_r+0x2c>
 800b33e:	ab03      	add	r3, sp, #12
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	462a      	mov	r2, r5
 800b344:	4638      	mov	r0, r7
 800b346:	4b06      	ldr	r3, [pc, #24]	@ (800b360 <_svfiprintf_r+0x1f4>)
 800b348:	a904      	add	r1, sp, #16
 800b34a:	f7fc ffbb 	bl	80082c4 <_printf_i>
 800b34e:	e7ed      	b.n	800b32c <_svfiprintf_r+0x1c0>
 800b350:	0800e6ad 	.word	0x0800e6ad
 800b354:	0800e6b3 	.word	0x0800e6b3
 800b358:	0800e6b7 	.word	0x0800e6b7
 800b35c:	08007d89 	.word	0x08007d89
 800b360:	0800b0b5 	.word	0x0800b0b5

0800b364 <__sflush_r>:
 800b364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	0716      	lsls	r6, r2, #28
 800b36c:	4605      	mov	r5, r0
 800b36e:	460c      	mov	r4, r1
 800b370:	d454      	bmi.n	800b41c <__sflush_r+0xb8>
 800b372:	684b      	ldr	r3, [r1, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	dc02      	bgt.n	800b37e <__sflush_r+0x1a>
 800b378:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dd48      	ble.n	800b410 <__sflush_r+0xac>
 800b37e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b380:	2e00      	cmp	r6, #0
 800b382:	d045      	beq.n	800b410 <__sflush_r+0xac>
 800b384:	2300      	movs	r3, #0
 800b386:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b38a:	682f      	ldr	r7, [r5, #0]
 800b38c:	6a21      	ldr	r1, [r4, #32]
 800b38e:	602b      	str	r3, [r5, #0]
 800b390:	d030      	beq.n	800b3f4 <__sflush_r+0x90>
 800b392:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	0759      	lsls	r1, r3, #29
 800b398:	d505      	bpl.n	800b3a6 <__sflush_r+0x42>
 800b39a:	6863      	ldr	r3, [r4, #4]
 800b39c:	1ad2      	subs	r2, r2, r3
 800b39e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3a0:	b10b      	cbz	r3, 800b3a6 <__sflush_r+0x42>
 800b3a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b3a4:	1ad2      	subs	r2, r2, r3
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3ac:	6a21      	ldr	r1, [r4, #32]
 800b3ae:	47b0      	blx	r6
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	d106      	bne.n	800b3c4 <__sflush_r+0x60>
 800b3b6:	6829      	ldr	r1, [r5, #0]
 800b3b8:	291d      	cmp	r1, #29
 800b3ba:	d82b      	bhi.n	800b414 <__sflush_r+0xb0>
 800b3bc:	4a28      	ldr	r2, [pc, #160]	@ (800b460 <__sflush_r+0xfc>)
 800b3be:	40ca      	lsrs	r2, r1
 800b3c0:	07d6      	lsls	r6, r2, #31
 800b3c2:	d527      	bpl.n	800b414 <__sflush_r+0xb0>
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	6062      	str	r2, [r4, #4]
 800b3c8:	6922      	ldr	r2, [r4, #16]
 800b3ca:	04d9      	lsls	r1, r3, #19
 800b3cc:	6022      	str	r2, [r4, #0]
 800b3ce:	d504      	bpl.n	800b3da <__sflush_r+0x76>
 800b3d0:	1c42      	adds	r2, r0, #1
 800b3d2:	d101      	bne.n	800b3d8 <__sflush_r+0x74>
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	b903      	cbnz	r3, 800b3da <__sflush_r+0x76>
 800b3d8:	6560      	str	r0, [r4, #84]	@ 0x54
 800b3da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3dc:	602f      	str	r7, [r5, #0]
 800b3de:	b1b9      	cbz	r1, 800b410 <__sflush_r+0xac>
 800b3e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3e4:	4299      	cmp	r1, r3
 800b3e6:	d002      	beq.n	800b3ee <__sflush_r+0x8a>
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	f7fe fafd 	bl	80099e8 <_free_r>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3f2:	e00d      	b.n	800b410 <__sflush_r+0xac>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	47b0      	blx	r6
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	1c50      	adds	r0, r2, #1
 800b3fe:	d1c9      	bne.n	800b394 <__sflush_r+0x30>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0c6      	beq.n	800b394 <__sflush_r+0x30>
 800b406:	2b1d      	cmp	r3, #29
 800b408:	d001      	beq.n	800b40e <__sflush_r+0xaa>
 800b40a:	2b16      	cmp	r3, #22
 800b40c:	d11d      	bne.n	800b44a <__sflush_r+0xe6>
 800b40e:	602f      	str	r7, [r5, #0]
 800b410:	2000      	movs	r0, #0
 800b412:	e021      	b.n	800b458 <__sflush_r+0xf4>
 800b414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b418:	b21b      	sxth	r3, r3
 800b41a:	e01a      	b.n	800b452 <__sflush_r+0xee>
 800b41c:	690f      	ldr	r7, [r1, #16]
 800b41e:	2f00      	cmp	r7, #0
 800b420:	d0f6      	beq.n	800b410 <__sflush_r+0xac>
 800b422:	0793      	lsls	r3, r2, #30
 800b424:	bf18      	it	ne
 800b426:	2300      	movne	r3, #0
 800b428:	680e      	ldr	r6, [r1, #0]
 800b42a:	bf08      	it	eq
 800b42c:	694b      	ldreq	r3, [r1, #20]
 800b42e:	1bf6      	subs	r6, r6, r7
 800b430:	600f      	str	r7, [r1, #0]
 800b432:	608b      	str	r3, [r1, #8]
 800b434:	2e00      	cmp	r6, #0
 800b436:	ddeb      	ble.n	800b410 <__sflush_r+0xac>
 800b438:	4633      	mov	r3, r6
 800b43a:	463a      	mov	r2, r7
 800b43c:	4628      	mov	r0, r5
 800b43e:	6a21      	ldr	r1, [r4, #32]
 800b440:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b444:	47e0      	blx	ip
 800b446:	2800      	cmp	r0, #0
 800b448:	dc07      	bgt.n	800b45a <__sflush_r+0xf6>
 800b44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	81a3      	strh	r3, [r4, #12]
 800b458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b45a:	4407      	add	r7, r0
 800b45c:	1a36      	subs	r6, r6, r0
 800b45e:	e7e9      	b.n	800b434 <__sflush_r+0xd0>
 800b460:	20400001 	.word	0x20400001

0800b464 <_fflush_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	690b      	ldr	r3, [r1, #16]
 800b468:	4605      	mov	r5, r0
 800b46a:	460c      	mov	r4, r1
 800b46c:	b913      	cbnz	r3, 800b474 <_fflush_r+0x10>
 800b46e:	2500      	movs	r5, #0
 800b470:	4628      	mov	r0, r5
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	b118      	cbz	r0, 800b47e <_fflush_r+0x1a>
 800b476:	6a03      	ldr	r3, [r0, #32]
 800b478:	b90b      	cbnz	r3, 800b47e <_fflush_r+0x1a>
 800b47a:	f7fd fad7 	bl	8008a2c <__sinit>
 800b47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0f3      	beq.n	800b46e <_fflush_r+0xa>
 800b486:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b488:	07d0      	lsls	r0, r2, #31
 800b48a:	d404      	bmi.n	800b496 <_fflush_r+0x32>
 800b48c:	0599      	lsls	r1, r3, #22
 800b48e:	d402      	bmi.n	800b496 <_fflush_r+0x32>
 800b490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b492:	f7fd fc2a 	bl	8008cea <__retarget_lock_acquire_recursive>
 800b496:	4628      	mov	r0, r5
 800b498:	4621      	mov	r1, r4
 800b49a:	f7ff ff63 	bl	800b364 <__sflush_r>
 800b49e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	07da      	lsls	r2, r3, #31
 800b4a4:	d4e4      	bmi.n	800b470 <_fflush_r+0xc>
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	059b      	lsls	r3, r3, #22
 800b4aa:	d4e1      	bmi.n	800b470 <_fflush_r+0xc>
 800b4ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4ae:	f7fd fc1d 	bl	8008cec <__retarget_lock_release_recursive>
 800b4b2:	e7dd      	b.n	800b470 <_fflush_r+0xc>

0800b4b4 <memmove>:
 800b4b4:	4288      	cmp	r0, r1
 800b4b6:	b510      	push	{r4, lr}
 800b4b8:	eb01 0402 	add.w	r4, r1, r2
 800b4bc:	d902      	bls.n	800b4c4 <memmove+0x10>
 800b4be:	4284      	cmp	r4, r0
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	d807      	bhi.n	800b4d4 <memmove+0x20>
 800b4c4:	1e43      	subs	r3, r0, #1
 800b4c6:	42a1      	cmp	r1, r4
 800b4c8:	d008      	beq.n	800b4dc <memmove+0x28>
 800b4ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4d2:	e7f8      	b.n	800b4c6 <memmove+0x12>
 800b4d4:	4601      	mov	r1, r0
 800b4d6:	4402      	add	r2, r0
 800b4d8:	428a      	cmp	r2, r1
 800b4da:	d100      	bne.n	800b4de <memmove+0x2a>
 800b4dc:	bd10      	pop	{r4, pc}
 800b4de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4e6:	e7f7      	b.n	800b4d8 <memmove+0x24>

0800b4e8 <strncmp>:
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	b16a      	cbz	r2, 800b508 <strncmp+0x20>
 800b4ec:	3901      	subs	r1, #1
 800b4ee:	1884      	adds	r4, r0, r2
 800b4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d103      	bne.n	800b504 <strncmp+0x1c>
 800b4fc:	42a0      	cmp	r0, r4
 800b4fe:	d001      	beq.n	800b504 <strncmp+0x1c>
 800b500:	2a00      	cmp	r2, #0
 800b502:	d1f5      	bne.n	800b4f0 <strncmp+0x8>
 800b504:	1ad0      	subs	r0, r2, r3
 800b506:	bd10      	pop	{r4, pc}
 800b508:	4610      	mov	r0, r2
 800b50a:	e7fc      	b.n	800b506 <strncmp+0x1e>

0800b50c <nan>:
 800b50c:	2000      	movs	r0, #0
 800b50e:	4901      	ldr	r1, [pc, #4]	@ (800b514 <nan+0x8>)
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	7ff80000 	.word	0x7ff80000

0800b518 <__assert_func>:
 800b518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b51a:	4614      	mov	r4, r2
 800b51c:	461a      	mov	r2, r3
 800b51e:	4b09      	ldr	r3, [pc, #36]	@ (800b544 <__assert_func+0x2c>)
 800b520:	4605      	mov	r5, r0
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68d8      	ldr	r0, [r3, #12]
 800b526:	b14c      	cbz	r4, 800b53c <__assert_func+0x24>
 800b528:	4b07      	ldr	r3, [pc, #28]	@ (800b548 <__assert_func+0x30>)
 800b52a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b52e:	9100      	str	r1, [sp, #0]
 800b530:	462b      	mov	r3, r5
 800b532:	4906      	ldr	r1, [pc, #24]	@ (800b54c <__assert_func+0x34>)
 800b534:	f000 fba8 	bl	800bc88 <fiprintf>
 800b538:	f000 fbb8 	bl	800bcac <abort>
 800b53c:	4b04      	ldr	r3, [pc, #16]	@ (800b550 <__assert_func+0x38>)
 800b53e:	461c      	mov	r4, r3
 800b540:	e7f3      	b.n	800b52a <__assert_func+0x12>
 800b542:	bf00      	nop
 800b544:	20000018 	.word	0x20000018
 800b548:	0800e6c6 	.word	0x0800e6c6
 800b54c:	0800e6d3 	.word	0x0800e6d3
 800b550:	0800e701 	.word	0x0800e701

0800b554 <_calloc_r>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	fba1 5402 	umull	r5, r4, r1, r2
 800b55a:	b934      	cbnz	r4, 800b56a <_calloc_r+0x16>
 800b55c:	4629      	mov	r1, r5
 800b55e:	f7fc fae9 	bl	8007b34 <_malloc_r>
 800b562:	4606      	mov	r6, r0
 800b564:	b928      	cbnz	r0, 800b572 <_calloc_r+0x1e>
 800b566:	4630      	mov	r0, r6
 800b568:	bd70      	pop	{r4, r5, r6, pc}
 800b56a:	220c      	movs	r2, #12
 800b56c:	2600      	movs	r6, #0
 800b56e:	6002      	str	r2, [r0, #0]
 800b570:	e7f9      	b.n	800b566 <_calloc_r+0x12>
 800b572:	462a      	mov	r2, r5
 800b574:	4621      	mov	r1, r4
 800b576:	f7fd fb2a 	bl	8008bce <memset>
 800b57a:	e7f4      	b.n	800b566 <_calloc_r+0x12>

0800b57c <rshift>:
 800b57c:	6903      	ldr	r3, [r0, #16]
 800b57e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b582:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b586:	f100 0414 	add.w	r4, r0, #20
 800b58a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b58e:	dd46      	ble.n	800b61e <rshift+0xa2>
 800b590:	f011 011f 	ands.w	r1, r1, #31
 800b594:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b598:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b59c:	d10c      	bne.n	800b5b8 <rshift+0x3c>
 800b59e:	4629      	mov	r1, r5
 800b5a0:	f100 0710 	add.w	r7, r0, #16
 800b5a4:	42b1      	cmp	r1, r6
 800b5a6:	d335      	bcc.n	800b614 <rshift+0x98>
 800b5a8:	1a9b      	subs	r3, r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	1eea      	subs	r2, r5, #3
 800b5ae:	4296      	cmp	r6, r2
 800b5b0:	bf38      	it	cc
 800b5b2:	2300      	movcc	r3, #0
 800b5b4:	4423      	add	r3, r4
 800b5b6:	e015      	b.n	800b5e4 <rshift+0x68>
 800b5b8:	46a1      	mov	r9, r4
 800b5ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b5be:	f1c1 0820 	rsb	r8, r1, #32
 800b5c2:	40cf      	lsrs	r7, r1
 800b5c4:	f105 0e04 	add.w	lr, r5, #4
 800b5c8:	4576      	cmp	r6, lr
 800b5ca:	46f4      	mov	ip, lr
 800b5cc:	d816      	bhi.n	800b5fc <rshift+0x80>
 800b5ce:	1a9a      	subs	r2, r3, r2
 800b5d0:	0092      	lsls	r2, r2, #2
 800b5d2:	3a04      	subs	r2, #4
 800b5d4:	3501      	adds	r5, #1
 800b5d6:	42ae      	cmp	r6, r5
 800b5d8:	bf38      	it	cc
 800b5da:	2200      	movcc	r2, #0
 800b5dc:	18a3      	adds	r3, r4, r2
 800b5de:	50a7      	str	r7, [r4, r2]
 800b5e0:	b107      	cbz	r7, 800b5e4 <rshift+0x68>
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	42a3      	cmp	r3, r4
 800b5e6:	eba3 0204 	sub.w	r2, r3, r4
 800b5ea:	bf08      	it	eq
 800b5ec:	2300      	moveq	r3, #0
 800b5ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b5f2:	6102      	str	r2, [r0, #16]
 800b5f4:	bf08      	it	eq
 800b5f6:	6143      	streq	r3, [r0, #20]
 800b5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5fc:	f8dc c000 	ldr.w	ip, [ip]
 800b600:	fa0c fc08 	lsl.w	ip, ip, r8
 800b604:	ea4c 0707 	orr.w	r7, ip, r7
 800b608:	f849 7b04 	str.w	r7, [r9], #4
 800b60c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b610:	40cf      	lsrs	r7, r1
 800b612:	e7d9      	b.n	800b5c8 <rshift+0x4c>
 800b614:	f851 cb04 	ldr.w	ip, [r1], #4
 800b618:	f847 cf04 	str.w	ip, [r7, #4]!
 800b61c:	e7c2      	b.n	800b5a4 <rshift+0x28>
 800b61e:	4623      	mov	r3, r4
 800b620:	e7e0      	b.n	800b5e4 <rshift+0x68>

0800b622 <__hexdig_fun>:
 800b622:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b626:	2b09      	cmp	r3, #9
 800b628:	d802      	bhi.n	800b630 <__hexdig_fun+0xe>
 800b62a:	3820      	subs	r0, #32
 800b62c:	b2c0      	uxtb	r0, r0
 800b62e:	4770      	bx	lr
 800b630:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b634:	2b05      	cmp	r3, #5
 800b636:	d801      	bhi.n	800b63c <__hexdig_fun+0x1a>
 800b638:	3847      	subs	r0, #71	@ 0x47
 800b63a:	e7f7      	b.n	800b62c <__hexdig_fun+0xa>
 800b63c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b640:	2b05      	cmp	r3, #5
 800b642:	d801      	bhi.n	800b648 <__hexdig_fun+0x26>
 800b644:	3827      	subs	r0, #39	@ 0x27
 800b646:	e7f1      	b.n	800b62c <__hexdig_fun+0xa>
 800b648:	2000      	movs	r0, #0
 800b64a:	4770      	bx	lr

0800b64c <__gethex>:
 800b64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	468a      	mov	sl, r1
 800b652:	4690      	mov	r8, r2
 800b654:	b085      	sub	sp, #20
 800b656:	9302      	str	r3, [sp, #8]
 800b658:	680b      	ldr	r3, [r1, #0]
 800b65a:	9001      	str	r0, [sp, #4]
 800b65c:	1c9c      	adds	r4, r3, #2
 800b65e:	46a1      	mov	r9, r4
 800b660:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b664:	2830      	cmp	r0, #48	@ 0x30
 800b666:	d0fa      	beq.n	800b65e <__gethex+0x12>
 800b668:	eba9 0303 	sub.w	r3, r9, r3
 800b66c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b670:	f7ff ffd7 	bl	800b622 <__hexdig_fun>
 800b674:	4605      	mov	r5, r0
 800b676:	2800      	cmp	r0, #0
 800b678:	d168      	bne.n	800b74c <__gethex+0x100>
 800b67a:	2201      	movs	r2, #1
 800b67c:	4648      	mov	r0, r9
 800b67e:	499f      	ldr	r1, [pc, #636]	@ (800b8fc <__gethex+0x2b0>)
 800b680:	f7ff ff32 	bl	800b4e8 <strncmp>
 800b684:	4607      	mov	r7, r0
 800b686:	2800      	cmp	r0, #0
 800b688:	d167      	bne.n	800b75a <__gethex+0x10e>
 800b68a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b68e:	4626      	mov	r6, r4
 800b690:	f7ff ffc7 	bl	800b622 <__hexdig_fun>
 800b694:	2800      	cmp	r0, #0
 800b696:	d062      	beq.n	800b75e <__gethex+0x112>
 800b698:	4623      	mov	r3, r4
 800b69a:	7818      	ldrb	r0, [r3, #0]
 800b69c:	4699      	mov	r9, r3
 800b69e:	2830      	cmp	r0, #48	@ 0x30
 800b6a0:	f103 0301 	add.w	r3, r3, #1
 800b6a4:	d0f9      	beq.n	800b69a <__gethex+0x4e>
 800b6a6:	f7ff ffbc 	bl	800b622 <__hexdig_fun>
 800b6aa:	fab0 f580 	clz	r5, r0
 800b6ae:	f04f 0b01 	mov.w	fp, #1
 800b6b2:	096d      	lsrs	r5, r5, #5
 800b6b4:	464a      	mov	r2, r9
 800b6b6:	4616      	mov	r6, r2
 800b6b8:	7830      	ldrb	r0, [r6, #0]
 800b6ba:	3201      	adds	r2, #1
 800b6bc:	f7ff ffb1 	bl	800b622 <__hexdig_fun>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d1f8      	bne.n	800b6b6 <__gethex+0x6a>
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	498c      	ldr	r1, [pc, #560]	@ (800b8fc <__gethex+0x2b0>)
 800b6ca:	f7ff ff0d 	bl	800b4e8 <strncmp>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d13f      	bne.n	800b752 <__gethex+0x106>
 800b6d2:	b944      	cbnz	r4, 800b6e6 <__gethex+0x9a>
 800b6d4:	1c74      	adds	r4, r6, #1
 800b6d6:	4622      	mov	r2, r4
 800b6d8:	4616      	mov	r6, r2
 800b6da:	7830      	ldrb	r0, [r6, #0]
 800b6dc:	3201      	adds	r2, #1
 800b6de:	f7ff ffa0 	bl	800b622 <__hexdig_fun>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d1f8      	bne.n	800b6d8 <__gethex+0x8c>
 800b6e6:	1ba4      	subs	r4, r4, r6
 800b6e8:	00a7      	lsls	r7, r4, #2
 800b6ea:	7833      	ldrb	r3, [r6, #0]
 800b6ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b6f0:	2b50      	cmp	r3, #80	@ 0x50
 800b6f2:	d13e      	bne.n	800b772 <__gethex+0x126>
 800b6f4:	7873      	ldrb	r3, [r6, #1]
 800b6f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b6f8:	d033      	beq.n	800b762 <__gethex+0x116>
 800b6fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800b6fc:	d034      	beq.n	800b768 <__gethex+0x11c>
 800b6fe:	2400      	movs	r4, #0
 800b700:	1c71      	adds	r1, r6, #1
 800b702:	7808      	ldrb	r0, [r1, #0]
 800b704:	f7ff ff8d 	bl	800b622 <__hexdig_fun>
 800b708:	1e43      	subs	r3, r0, #1
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	2b18      	cmp	r3, #24
 800b70e:	d830      	bhi.n	800b772 <__gethex+0x126>
 800b710:	f1a0 0210 	sub.w	r2, r0, #16
 800b714:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b718:	f7ff ff83 	bl	800b622 <__hexdig_fun>
 800b71c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b720:	fa5f fc8c 	uxtb.w	ip, ip
 800b724:	f1bc 0f18 	cmp.w	ip, #24
 800b728:	f04f 030a 	mov.w	r3, #10
 800b72c:	d91e      	bls.n	800b76c <__gethex+0x120>
 800b72e:	b104      	cbz	r4, 800b732 <__gethex+0xe6>
 800b730:	4252      	negs	r2, r2
 800b732:	4417      	add	r7, r2
 800b734:	f8ca 1000 	str.w	r1, [sl]
 800b738:	b1ed      	cbz	r5, 800b776 <__gethex+0x12a>
 800b73a:	f1bb 0f00 	cmp.w	fp, #0
 800b73e:	bf0c      	ite	eq
 800b740:	2506      	moveq	r5, #6
 800b742:	2500      	movne	r5, #0
 800b744:	4628      	mov	r0, r5
 800b746:	b005      	add	sp, #20
 800b748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74c:	2500      	movs	r5, #0
 800b74e:	462c      	mov	r4, r5
 800b750:	e7b0      	b.n	800b6b4 <__gethex+0x68>
 800b752:	2c00      	cmp	r4, #0
 800b754:	d1c7      	bne.n	800b6e6 <__gethex+0x9a>
 800b756:	4627      	mov	r7, r4
 800b758:	e7c7      	b.n	800b6ea <__gethex+0x9e>
 800b75a:	464e      	mov	r6, r9
 800b75c:	462f      	mov	r7, r5
 800b75e:	2501      	movs	r5, #1
 800b760:	e7c3      	b.n	800b6ea <__gethex+0x9e>
 800b762:	2400      	movs	r4, #0
 800b764:	1cb1      	adds	r1, r6, #2
 800b766:	e7cc      	b.n	800b702 <__gethex+0xb6>
 800b768:	2401      	movs	r4, #1
 800b76a:	e7fb      	b.n	800b764 <__gethex+0x118>
 800b76c:	fb03 0002 	mla	r0, r3, r2, r0
 800b770:	e7ce      	b.n	800b710 <__gethex+0xc4>
 800b772:	4631      	mov	r1, r6
 800b774:	e7de      	b.n	800b734 <__gethex+0xe8>
 800b776:	4629      	mov	r1, r5
 800b778:	eba6 0309 	sub.w	r3, r6, r9
 800b77c:	3b01      	subs	r3, #1
 800b77e:	2b07      	cmp	r3, #7
 800b780:	dc0a      	bgt.n	800b798 <__gethex+0x14c>
 800b782:	9801      	ldr	r0, [sp, #4]
 800b784:	f7fe f978 	bl	8009a78 <_Balloc>
 800b788:	4604      	mov	r4, r0
 800b78a:	b940      	cbnz	r0, 800b79e <__gethex+0x152>
 800b78c:	4602      	mov	r2, r0
 800b78e:	21e4      	movs	r1, #228	@ 0xe4
 800b790:	4b5b      	ldr	r3, [pc, #364]	@ (800b900 <__gethex+0x2b4>)
 800b792:	485c      	ldr	r0, [pc, #368]	@ (800b904 <__gethex+0x2b8>)
 800b794:	f7ff fec0 	bl	800b518 <__assert_func>
 800b798:	3101      	adds	r1, #1
 800b79a:	105b      	asrs	r3, r3, #1
 800b79c:	e7ef      	b.n	800b77e <__gethex+0x132>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	f100 0a14 	add.w	sl, r0, #20
 800b7a4:	4655      	mov	r5, sl
 800b7a6:	469b      	mov	fp, r3
 800b7a8:	45b1      	cmp	r9, r6
 800b7aa:	d337      	bcc.n	800b81c <__gethex+0x1d0>
 800b7ac:	f845 bb04 	str.w	fp, [r5], #4
 800b7b0:	eba5 050a 	sub.w	r5, r5, sl
 800b7b4:	10ad      	asrs	r5, r5, #2
 800b7b6:	6125      	str	r5, [r4, #16]
 800b7b8:	4658      	mov	r0, fp
 800b7ba:	f7fe fa4f 	bl	8009c5c <__hi0bits>
 800b7be:	016d      	lsls	r5, r5, #5
 800b7c0:	f8d8 6000 	ldr.w	r6, [r8]
 800b7c4:	1a2d      	subs	r5, r5, r0
 800b7c6:	42b5      	cmp	r5, r6
 800b7c8:	dd54      	ble.n	800b874 <__gethex+0x228>
 800b7ca:	1bad      	subs	r5, r5, r6
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f7fe fdd1 	bl	800a376 <__any_on>
 800b7d4:	4681      	mov	r9, r0
 800b7d6:	b178      	cbz	r0, 800b7f8 <__gethex+0x1ac>
 800b7d8:	f04f 0901 	mov.w	r9, #1
 800b7dc:	1e6b      	subs	r3, r5, #1
 800b7de:	1159      	asrs	r1, r3, #5
 800b7e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b7e4:	f003 021f 	and.w	r2, r3, #31
 800b7e8:	fa09 f202 	lsl.w	r2, r9, r2
 800b7ec:	420a      	tst	r2, r1
 800b7ee:	d003      	beq.n	800b7f8 <__gethex+0x1ac>
 800b7f0:	454b      	cmp	r3, r9
 800b7f2:	dc36      	bgt.n	800b862 <__gethex+0x216>
 800b7f4:	f04f 0902 	mov.w	r9, #2
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f7ff febe 	bl	800b57c <rshift>
 800b800:	442f      	add	r7, r5
 800b802:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b806:	42bb      	cmp	r3, r7
 800b808:	da42      	bge.n	800b890 <__gethex+0x244>
 800b80a:	4621      	mov	r1, r4
 800b80c:	9801      	ldr	r0, [sp, #4]
 800b80e:	f7fe f973 	bl	8009af8 <_Bfree>
 800b812:	2300      	movs	r3, #0
 800b814:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b816:	25a3      	movs	r5, #163	@ 0xa3
 800b818:	6013      	str	r3, [r2, #0]
 800b81a:	e793      	b.n	800b744 <__gethex+0xf8>
 800b81c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b820:	2a2e      	cmp	r2, #46	@ 0x2e
 800b822:	d012      	beq.n	800b84a <__gethex+0x1fe>
 800b824:	2b20      	cmp	r3, #32
 800b826:	d104      	bne.n	800b832 <__gethex+0x1e6>
 800b828:	f845 bb04 	str.w	fp, [r5], #4
 800b82c:	f04f 0b00 	mov.w	fp, #0
 800b830:	465b      	mov	r3, fp
 800b832:	7830      	ldrb	r0, [r6, #0]
 800b834:	9303      	str	r3, [sp, #12]
 800b836:	f7ff fef4 	bl	800b622 <__hexdig_fun>
 800b83a:	9b03      	ldr	r3, [sp, #12]
 800b83c:	f000 000f 	and.w	r0, r0, #15
 800b840:	4098      	lsls	r0, r3
 800b842:	ea4b 0b00 	orr.w	fp, fp, r0
 800b846:	3304      	adds	r3, #4
 800b848:	e7ae      	b.n	800b7a8 <__gethex+0x15c>
 800b84a:	45b1      	cmp	r9, r6
 800b84c:	d8ea      	bhi.n	800b824 <__gethex+0x1d8>
 800b84e:	2201      	movs	r2, #1
 800b850:	4630      	mov	r0, r6
 800b852:	492a      	ldr	r1, [pc, #168]	@ (800b8fc <__gethex+0x2b0>)
 800b854:	9303      	str	r3, [sp, #12]
 800b856:	f7ff fe47 	bl	800b4e8 <strncmp>
 800b85a:	9b03      	ldr	r3, [sp, #12]
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d1e1      	bne.n	800b824 <__gethex+0x1d8>
 800b860:	e7a2      	b.n	800b7a8 <__gethex+0x15c>
 800b862:	4620      	mov	r0, r4
 800b864:	1ea9      	subs	r1, r5, #2
 800b866:	f7fe fd86 	bl	800a376 <__any_on>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d0c2      	beq.n	800b7f4 <__gethex+0x1a8>
 800b86e:	f04f 0903 	mov.w	r9, #3
 800b872:	e7c1      	b.n	800b7f8 <__gethex+0x1ac>
 800b874:	da09      	bge.n	800b88a <__gethex+0x23e>
 800b876:	1b75      	subs	r5, r6, r5
 800b878:	4621      	mov	r1, r4
 800b87a:	462a      	mov	r2, r5
 800b87c:	9801      	ldr	r0, [sp, #4]
 800b87e:	f7fe fb4b 	bl	8009f18 <__lshift>
 800b882:	4604      	mov	r4, r0
 800b884:	1b7f      	subs	r7, r7, r5
 800b886:	f100 0a14 	add.w	sl, r0, #20
 800b88a:	f04f 0900 	mov.w	r9, #0
 800b88e:	e7b8      	b.n	800b802 <__gethex+0x1b6>
 800b890:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b894:	42bd      	cmp	r5, r7
 800b896:	dd6f      	ble.n	800b978 <__gethex+0x32c>
 800b898:	1bed      	subs	r5, r5, r7
 800b89a:	42ae      	cmp	r6, r5
 800b89c:	dc34      	bgt.n	800b908 <__gethex+0x2bc>
 800b89e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d022      	beq.n	800b8ec <__gethex+0x2a0>
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	d024      	beq.n	800b8f4 <__gethex+0x2a8>
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d115      	bne.n	800b8da <__gethex+0x28e>
 800b8ae:	42ae      	cmp	r6, r5
 800b8b0:	d113      	bne.n	800b8da <__gethex+0x28e>
 800b8b2:	2e01      	cmp	r6, #1
 800b8b4:	d10b      	bne.n	800b8ce <__gethex+0x282>
 800b8b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b8ba:	9a02      	ldr	r2, [sp, #8]
 800b8bc:	2562      	movs	r5, #98	@ 0x62
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	6123      	str	r3, [r4, #16]
 800b8c4:	f8ca 3000 	str.w	r3, [sl]
 800b8c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8ca:	601c      	str	r4, [r3, #0]
 800b8cc:	e73a      	b.n	800b744 <__gethex+0xf8>
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	1e71      	subs	r1, r6, #1
 800b8d2:	f7fe fd50 	bl	800a376 <__any_on>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d1ed      	bne.n	800b8b6 <__gethex+0x26a>
 800b8da:	4621      	mov	r1, r4
 800b8dc:	9801      	ldr	r0, [sp, #4]
 800b8de:	f7fe f90b 	bl	8009af8 <_Bfree>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8e6:	2550      	movs	r5, #80	@ 0x50
 800b8e8:	6013      	str	r3, [r2, #0]
 800b8ea:	e72b      	b.n	800b744 <__gethex+0xf8>
 800b8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1f3      	bne.n	800b8da <__gethex+0x28e>
 800b8f2:	e7e0      	b.n	800b8b6 <__gethex+0x26a>
 800b8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1dd      	bne.n	800b8b6 <__gethex+0x26a>
 800b8fa:	e7ee      	b.n	800b8da <__gethex+0x28e>
 800b8fc:	0800e6ab 	.word	0x0800e6ab
 800b900:	0800e641 	.word	0x0800e641
 800b904:	0800e702 	.word	0x0800e702
 800b908:	1e6f      	subs	r7, r5, #1
 800b90a:	f1b9 0f00 	cmp.w	r9, #0
 800b90e:	d130      	bne.n	800b972 <__gethex+0x326>
 800b910:	b127      	cbz	r7, 800b91c <__gethex+0x2d0>
 800b912:	4639      	mov	r1, r7
 800b914:	4620      	mov	r0, r4
 800b916:	f7fe fd2e 	bl	800a376 <__any_on>
 800b91a:	4681      	mov	r9, r0
 800b91c:	2301      	movs	r3, #1
 800b91e:	4629      	mov	r1, r5
 800b920:	1b76      	subs	r6, r6, r5
 800b922:	2502      	movs	r5, #2
 800b924:	117a      	asrs	r2, r7, #5
 800b926:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b92a:	f007 071f 	and.w	r7, r7, #31
 800b92e:	40bb      	lsls	r3, r7
 800b930:	4213      	tst	r3, r2
 800b932:	4620      	mov	r0, r4
 800b934:	bf18      	it	ne
 800b936:	f049 0902 	orrne.w	r9, r9, #2
 800b93a:	f7ff fe1f 	bl	800b57c <rshift>
 800b93e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b942:	f1b9 0f00 	cmp.w	r9, #0
 800b946:	d047      	beq.n	800b9d8 <__gethex+0x38c>
 800b948:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d015      	beq.n	800b97c <__gethex+0x330>
 800b950:	2b03      	cmp	r3, #3
 800b952:	d017      	beq.n	800b984 <__gethex+0x338>
 800b954:	2b01      	cmp	r3, #1
 800b956:	d109      	bne.n	800b96c <__gethex+0x320>
 800b958:	f019 0f02 	tst.w	r9, #2
 800b95c:	d006      	beq.n	800b96c <__gethex+0x320>
 800b95e:	f8da 3000 	ldr.w	r3, [sl]
 800b962:	ea49 0903 	orr.w	r9, r9, r3
 800b966:	f019 0f01 	tst.w	r9, #1
 800b96a:	d10e      	bne.n	800b98a <__gethex+0x33e>
 800b96c:	f045 0510 	orr.w	r5, r5, #16
 800b970:	e032      	b.n	800b9d8 <__gethex+0x38c>
 800b972:	f04f 0901 	mov.w	r9, #1
 800b976:	e7d1      	b.n	800b91c <__gethex+0x2d0>
 800b978:	2501      	movs	r5, #1
 800b97a:	e7e2      	b.n	800b942 <__gethex+0x2f6>
 800b97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b97e:	f1c3 0301 	rsb	r3, r3, #1
 800b982:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0f0      	beq.n	800b96c <__gethex+0x320>
 800b98a:	f04f 0c00 	mov.w	ip, #0
 800b98e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b992:	f104 0314 	add.w	r3, r4, #20
 800b996:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b99a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b9a8:	d01b      	beq.n	800b9e2 <__gethex+0x396>
 800b9aa:	3201      	adds	r2, #1
 800b9ac:	6002      	str	r2, [r0, #0]
 800b9ae:	2d02      	cmp	r5, #2
 800b9b0:	f104 0314 	add.w	r3, r4, #20
 800b9b4:	d13c      	bne.n	800ba30 <__gethex+0x3e4>
 800b9b6:	f8d8 2000 	ldr.w	r2, [r8]
 800b9ba:	3a01      	subs	r2, #1
 800b9bc:	42b2      	cmp	r2, r6
 800b9be:	d109      	bne.n	800b9d4 <__gethex+0x388>
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	1171      	asrs	r1, r6, #5
 800b9c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b9c8:	f006 061f 	and.w	r6, r6, #31
 800b9cc:	fa02 f606 	lsl.w	r6, r2, r6
 800b9d0:	421e      	tst	r6, r3
 800b9d2:	d13a      	bne.n	800ba4a <__gethex+0x3fe>
 800b9d4:	f045 0520 	orr.w	r5, r5, #32
 800b9d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9da:	601c      	str	r4, [r3, #0]
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	601f      	str	r7, [r3, #0]
 800b9e0:	e6b0      	b.n	800b744 <__gethex+0xf8>
 800b9e2:	4299      	cmp	r1, r3
 800b9e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b9e8:	d8d9      	bhi.n	800b99e <__gethex+0x352>
 800b9ea:	68a3      	ldr	r3, [r4, #8]
 800b9ec:	459b      	cmp	fp, r3
 800b9ee:	db17      	blt.n	800ba20 <__gethex+0x3d4>
 800b9f0:	6861      	ldr	r1, [r4, #4]
 800b9f2:	9801      	ldr	r0, [sp, #4]
 800b9f4:	3101      	adds	r1, #1
 800b9f6:	f7fe f83f 	bl	8009a78 <_Balloc>
 800b9fa:	4681      	mov	r9, r0
 800b9fc:	b918      	cbnz	r0, 800ba06 <__gethex+0x3ba>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	2184      	movs	r1, #132	@ 0x84
 800ba02:	4b19      	ldr	r3, [pc, #100]	@ (800ba68 <__gethex+0x41c>)
 800ba04:	e6c5      	b.n	800b792 <__gethex+0x146>
 800ba06:	6922      	ldr	r2, [r4, #16]
 800ba08:	f104 010c 	add.w	r1, r4, #12
 800ba0c:	3202      	adds	r2, #2
 800ba0e:	0092      	lsls	r2, r2, #2
 800ba10:	300c      	adds	r0, #12
 800ba12:	f7fd f97a 	bl	8008d0a <memcpy>
 800ba16:	4621      	mov	r1, r4
 800ba18:	9801      	ldr	r0, [sp, #4]
 800ba1a:	f7fe f86d 	bl	8009af8 <_Bfree>
 800ba1e:	464c      	mov	r4, r9
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	1c5a      	adds	r2, r3, #1
 800ba24:	6122      	str	r2, [r4, #16]
 800ba26:	2201      	movs	r2, #1
 800ba28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba2c:	615a      	str	r2, [r3, #20]
 800ba2e:	e7be      	b.n	800b9ae <__gethex+0x362>
 800ba30:	6922      	ldr	r2, [r4, #16]
 800ba32:	455a      	cmp	r2, fp
 800ba34:	dd0b      	ble.n	800ba4e <__gethex+0x402>
 800ba36:	2101      	movs	r1, #1
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f7ff fd9f 	bl	800b57c <rshift>
 800ba3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba42:	3701      	adds	r7, #1
 800ba44:	42bb      	cmp	r3, r7
 800ba46:	f6ff aee0 	blt.w	800b80a <__gethex+0x1be>
 800ba4a:	2501      	movs	r5, #1
 800ba4c:	e7c2      	b.n	800b9d4 <__gethex+0x388>
 800ba4e:	f016 061f 	ands.w	r6, r6, #31
 800ba52:	d0fa      	beq.n	800ba4a <__gethex+0x3fe>
 800ba54:	4453      	add	r3, sl
 800ba56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ba5a:	f7fe f8ff 	bl	8009c5c <__hi0bits>
 800ba5e:	f1c6 0620 	rsb	r6, r6, #32
 800ba62:	42b0      	cmp	r0, r6
 800ba64:	dbe7      	blt.n	800ba36 <__gethex+0x3ea>
 800ba66:	e7f0      	b.n	800ba4a <__gethex+0x3fe>
 800ba68:	0800e641 	.word	0x0800e641

0800ba6c <L_shift>:
 800ba6c:	f1c2 0208 	rsb	r2, r2, #8
 800ba70:	0092      	lsls	r2, r2, #2
 800ba72:	b570      	push	{r4, r5, r6, lr}
 800ba74:	f1c2 0620 	rsb	r6, r2, #32
 800ba78:	6843      	ldr	r3, [r0, #4]
 800ba7a:	6804      	ldr	r4, [r0, #0]
 800ba7c:	fa03 f506 	lsl.w	r5, r3, r6
 800ba80:	432c      	orrs	r4, r5
 800ba82:	40d3      	lsrs	r3, r2
 800ba84:	6004      	str	r4, [r0, #0]
 800ba86:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba8a:	4288      	cmp	r0, r1
 800ba8c:	d3f4      	bcc.n	800ba78 <L_shift+0xc>
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}

0800ba90 <__match>:
 800ba90:	b530      	push	{r4, r5, lr}
 800ba92:	6803      	ldr	r3, [r0, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba9a:	b914      	cbnz	r4, 800baa2 <__match+0x12>
 800ba9c:	6003      	str	r3, [r0, #0]
 800ba9e:	2001      	movs	r0, #1
 800baa0:	bd30      	pop	{r4, r5, pc}
 800baa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800baaa:	2d19      	cmp	r5, #25
 800baac:	bf98      	it	ls
 800baae:	3220      	addls	r2, #32
 800bab0:	42a2      	cmp	r2, r4
 800bab2:	d0f0      	beq.n	800ba96 <__match+0x6>
 800bab4:	2000      	movs	r0, #0
 800bab6:	e7f3      	b.n	800baa0 <__match+0x10>

0800bab8 <__hexnan>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	2500      	movs	r5, #0
 800babe:	680b      	ldr	r3, [r1, #0]
 800bac0:	4682      	mov	sl, r0
 800bac2:	115e      	asrs	r6, r3, #5
 800bac4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bac8:	f013 031f 	ands.w	r3, r3, #31
 800bacc:	bf18      	it	ne
 800bace:	3604      	addne	r6, #4
 800bad0:	1f37      	subs	r7, r6, #4
 800bad2:	4690      	mov	r8, r2
 800bad4:	46b9      	mov	r9, r7
 800bad6:	463c      	mov	r4, r7
 800bad8:	46ab      	mov	fp, r5
 800bada:	b087      	sub	sp, #28
 800badc:	6801      	ldr	r1, [r0, #0]
 800bade:	9301      	str	r3, [sp, #4]
 800bae0:	f846 5c04 	str.w	r5, [r6, #-4]
 800bae4:	9502      	str	r5, [sp, #8]
 800bae6:	784a      	ldrb	r2, [r1, #1]
 800bae8:	1c4b      	adds	r3, r1, #1
 800baea:	9303      	str	r3, [sp, #12]
 800baec:	b342      	cbz	r2, 800bb40 <__hexnan+0x88>
 800baee:	4610      	mov	r0, r2
 800baf0:	9105      	str	r1, [sp, #20]
 800baf2:	9204      	str	r2, [sp, #16]
 800baf4:	f7ff fd95 	bl	800b622 <__hexdig_fun>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d151      	bne.n	800bba0 <__hexnan+0xe8>
 800bafc:	9a04      	ldr	r2, [sp, #16]
 800bafe:	9905      	ldr	r1, [sp, #20]
 800bb00:	2a20      	cmp	r2, #32
 800bb02:	d818      	bhi.n	800bb36 <__hexnan+0x7e>
 800bb04:	9b02      	ldr	r3, [sp, #8]
 800bb06:	459b      	cmp	fp, r3
 800bb08:	dd13      	ble.n	800bb32 <__hexnan+0x7a>
 800bb0a:	454c      	cmp	r4, r9
 800bb0c:	d206      	bcs.n	800bb1c <__hexnan+0x64>
 800bb0e:	2d07      	cmp	r5, #7
 800bb10:	dc04      	bgt.n	800bb1c <__hexnan+0x64>
 800bb12:	462a      	mov	r2, r5
 800bb14:	4649      	mov	r1, r9
 800bb16:	4620      	mov	r0, r4
 800bb18:	f7ff ffa8 	bl	800ba6c <L_shift>
 800bb1c:	4544      	cmp	r4, r8
 800bb1e:	d952      	bls.n	800bbc6 <__hexnan+0x10e>
 800bb20:	2300      	movs	r3, #0
 800bb22:	f1a4 0904 	sub.w	r9, r4, #4
 800bb26:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb2a:	461d      	mov	r5, r3
 800bb2c:	464c      	mov	r4, r9
 800bb2e:	f8cd b008 	str.w	fp, [sp, #8]
 800bb32:	9903      	ldr	r1, [sp, #12]
 800bb34:	e7d7      	b.n	800bae6 <__hexnan+0x2e>
 800bb36:	2a29      	cmp	r2, #41	@ 0x29
 800bb38:	d157      	bne.n	800bbea <__hexnan+0x132>
 800bb3a:	3102      	adds	r1, #2
 800bb3c:	f8ca 1000 	str.w	r1, [sl]
 800bb40:	f1bb 0f00 	cmp.w	fp, #0
 800bb44:	d051      	beq.n	800bbea <__hexnan+0x132>
 800bb46:	454c      	cmp	r4, r9
 800bb48:	d206      	bcs.n	800bb58 <__hexnan+0xa0>
 800bb4a:	2d07      	cmp	r5, #7
 800bb4c:	dc04      	bgt.n	800bb58 <__hexnan+0xa0>
 800bb4e:	462a      	mov	r2, r5
 800bb50:	4649      	mov	r1, r9
 800bb52:	4620      	mov	r0, r4
 800bb54:	f7ff ff8a 	bl	800ba6c <L_shift>
 800bb58:	4544      	cmp	r4, r8
 800bb5a:	d936      	bls.n	800bbca <__hexnan+0x112>
 800bb5c:	4623      	mov	r3, r4
 800bb5e:	f1a8 0204 	sub.w	r2, r8, #4
 800bb62:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb66:	429f      	cmp	r7, r3
 800bb68:	f842 1f04 	str.w	r1, [r2, #4]!
 800bb6c:	d2f9      	bcs.n	800bb62 <__hexnan+0xaa>
 800bb6e:	1b3b      	subs	r3, r7, r4
 800bb70:	f023 0303 	bic.w	r3, r3, #3
 800bb74:	3304      	adds	r3, #4
 800bb76:	3401      	adds	r4, #1
 800bb78:	3e03      	subs	r6, #3
 800bb7a:	42b4      	cmp	r4, r6
 800bb7c:	bf88      	it	hi
 800bb7e:	2304      	movhi	r3, #4
 800bb80:	2200      	movs	r2, #0
 800bb82:	4443      	add	r3, r8
 800bb84:	f843 2b04 	str.w	r2, [r3], #4
 800bb88:	429f      	cmp	r7, r3
 800bb8a:	d2fb      	bcs.n	800bb84 <__hexnan+0xcc>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	b91b      	cbnz	r3, 800bb98 <__hexnan+0xe0>
 800bb90:	4547      	cmp	r7, r8
 800bb92:	d128      	bne.n	800bbe6 <__hexnan+0x12e>
 800bb94:	2301      	movs	r3, #1
 800bb96:	603b      	str	r3, [r7, #0]
 800bb98:	2005      	movs	r0, #5
 800bb9a:	b007      	add	sp, #28
 800bb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba0:	3501      	adds	r5, #1
 800bba2:	2d08      	cmp	r5, #8
 800bba4:	f10b 0b01 	add.w	fp, fp, #1
 800bba8:	dd06      	ble.n	800bbb8 <__hexnan+0x100>
 800bbaa:	4544      	cmp	r4, r8
 800bbac:	d9c1      	bls.n	800bb32 <__hexnan+0x7a>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2501      	movs	r5, #1
 800bbb2:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbb6:	3c04      	subs	r4, #4
 800bbb8:	6822      	ldr	r2, [r4, #0]
 800bbba:	f000 000f 	and.w	r0, r0, #15
 800bbbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bbc2:	6020      	str	r0, [r4, #0]
 800bbc4:	e7b5      	b.n	800bb32 <__hexnan+0x7a>
 800bbc6:	2508      	movs	r5, #8
 800bbc8:	e7b3      	b.n	800bb32 <__hexnan+0x7a>
 800bbca:	9b01      	ldr	r3, [sp, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0dd      	beq.n	800bb8c <__hexnan+0xd4>
 800bbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd4:	f1c3 0320 	rsb	r3, r3, #32
 800bbd8:	40da      	lsrs	r2, r3
 800bbda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bbde:	4013      	ands	r3, r2
 800bbe0:	f846 3c04 	str.w	r3, [r6, #-4]
 800bbe4:	e7d2      	b.n	800bb8c <__hexnan+0xd4>
 800bbe6:	3f04      	subs	r7, #4
 800bbe8:	e7d0      	b.n	800bb8c <__hexnan+0xd4>
 800bbea:	2004      	movs	r0, #4
 800bbec:	e7d5      	b.n	800bb9a <__hexnan+0xe2>

0800bbee <__ascii_mbtowc>:
 800bbee:	b082      	sub	sp, #8
 800bbf0:	b901      	cbnz	r1, 800bbf4 <__ascii_mbtowc+0x6>
 800bbf2:	a901      	add	r1, sp, #4
 800bbf4:	b142      	cbz	r2, 800bc08 <__ascii_mbtowc+0x1a>
 800bbf6:	b14b      	cbz	r3, 800bc0c <__ascii_mbtowc+0x1e>
 800bbf8:	7813      	ldrb	r3, [r2, #0]
 800bbfa:	600b      	str	r3, [r1, #0]
 800bbfc:	7812      	ldrb	r2, [r2, #0]
 800bbfe:	1e10      	subs	r0, r2, #0
 800bc00:	bf18      	it	ne
 800bc02:	2001      	movne	r0, #1
 800bc04:	b002      	add	sp, #8
 800bc06:	4770      	bx	lr
 800bc08:	4610      	mov	r0, r2
 800bc0a:	e7fb      	b.n	800bc04 <__ascii_mbtowc+0x16>
 800bc0c:	f06f 0001 	mvn.w	r0, #1
 800bc10:	e7f8      	b.n	800bc04 <__ascii_mbtowc+0x16>

0800bc12 <_realloc_r>:
 800bc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc16:	4607      	mov	r7, r0
 800bc18:	4614      	mov	r4, r2
 800bc1a:	460d      	mov	r5, r1
 800bc1c:	b921      	cbnz	r1, 800bc28 <_realloc_r+0x16>
 800bc1e:	4611      	mov	r1, r2
 800bc20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc24:	f7fb bf86 	b.w	8007b34 <_malloc_r>
 800bc28:	b92a      	cbnz	r2, 800bc36 <_realloc_r+0x24>
 800bc2a:	f7fd fedd 	bl	80099e8 <_free_r>
 800bc2e:	4625      	mov	r5, r4
 800bc30:	4628      	mov	r0, r5
 800bc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc36:	f000 f840 	bl	800bcba <_malloc_usable_size_r>
 800bc3a:	4284      	cmp	r4, r0
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	d802      	bhi.n	800bc46 <_realloc_r+0x34>
 800bc40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc44:	d8f4      	bhi.n	800bc30 <_realloc_r+0x1e>
 800bc46:	4621      	mov	r1, r4
 800bc48:	4638      	mov	r0, r7
 800bc4a:	f7fb ff73 	bl	8007b34 <_malloc_r>
 800bc4e:	4680      	mov	r8, r0
 800bc50:	b908      	cbnz	r0, 800bc56 <_realloc_r+0x44>
 800bc52:	4645      	mov	r5, r8
 800bc54:	e7ec      	b.n	800bc30 <_realloc_r+0x1e>
 800bc56:	42b4      	cmp	r4, r6
 800bc58:	4622      	mov	r2, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	bf28      	it	cs
 800bc5e:	4632      	movcs	r2, r6
 800bc60:	f7fd f853 	bl	8008d0a <memcpy>
 800bc64:	4629      	mov	r1, r5
 800bc66:	4638      	mov	r0, r7
 800bc68:	f7fd febe 	bl	80099e8 <_free_r>
 800bc6c:	e7f1      	b.n	800bc52 <_realloc_r+0x40>

0800bc6e <__ascii_wctomb>:
 800bc6e:	4603      	mov	r3, r0
 800bc70:	4608      	mov	r0, r1
 800bc72:	b141      	cbz	r1, 800bc86 <__ascii_wctomb+0x18>
 800bc74:	2aff      	cmp	r2, #255	@ 0xff
 800bc76:	d904      	bls.n	800bc82 <__ascii_wctomb+0x14>
 800bc78:	228a      	movs	r2, #138	@ 0x8a
 800bc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	4770      	bx	lr
 800bc82:	2001      	movs	r0, #1
 800bc84:	700a      	strb	r2, [r1, #0]
 800bc86:	4770      	bx	lr

0800bc88 <fiprintf>:
 800bc88:	b40e      	push	{r1, r2, r3}
 800bc8a:	b503      	push	{r0, r1, lr}
 800bc8c:	4601      	mov	r1, r0
 800bc8e:	ab03      	add	r3, sp, #12
 800bc90:	4805      	ldr	r0, [pc, #20]	@ (800bca8 <fiprintf+0x20>)
 800bc92:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc96:	6800      	ldr	r0, [r0, #0]
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	f000 f83d 	bl	800bd18 <_vfiprintf_r>
 800bc9e:	b002      	add	sp, #8
 800bca0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bca4:	b003      	add	sp, #12
 800bca6:	4770      	bx	lr
 800bca8:	20000018 	.word	0x20000018

0800bcac <abort>:
 800bcac:	2006      	movs	r0, #6
 800bcae:	b508      	push	{r3, lr}
 800bcb0:	f000 fa06 	bl	800c0c0 <raise>
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	f7fb fd44 	bl	8007742 <_exit>

0800bcba <_malloc_usable_size_r>:
 800bcba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcbe:	1f18      	subs	r0, r3, #4
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	bfbc      	itt	lt
 800bcc4:	580b      	ldrlt	r3, [r1, r0]
 800bcc6:	18c0      	addlt	r0, r0, r3
 800bcc8:	4770      	bx	lr

0800bcca <__sfputc_r>:
 800bcca:	6893      	ldr	r3, [r2, #8]
 800bccc:	b410      	push	{r4}
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	6093      	str	r3, [r2, #8]
 800bcd4:	da07      	bge.n	800bce6 <__sfputc_r+0x1c>
 800bcd6:	6994      	ldr	r4, [r2, #24]
 800bcd8:	42a3      	cmp	r3, r4
 800bcda:	db01      	blt.n	800bce0 <__sfputc_r+0x16>
 800bcdc:	290a      	cmp	r1, #10
 800bcde:	d102      	bne.n	800bce6 <__sfputc_r+0x1c>
 800bce0:	bc10      	pop	{r4}
 800bce2:	f000 b931 	b.w	800bf48 <__swbuf_r>
 800bce6:	6813      	ldr	r3, [r2, #0]
 800bce8:	1c58      	adds	r0, r3, #1
 800bcea:	6010      	str	r0, [r2, #0]
 800bcec:	7019      	strb	r1, [r3, #0]
 800bcee:	4608      	mov	r0, r1
 800bcf0:	bc10      	pop	{r4}
 800bcf2:	4770      	bx	lr

0800bcf4 <__sfputs_r>:
 800bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	460f      	mov	r7, r1
 800bcfa:	4614      	mov	r4, r2
 800bcfc:	18d5      	adds	r5, r2, r3
 800bcfe:	42ac      	cmp	r4, r5
 800bd00:	d101      	bne.n	800bd06 <__sfputs_r+0x12>
 800bd02:	2000      	movs	r0, #0
 800bd04:	e007      	b.n	800bd16 <__sfputs_r+0x22>
 800bd06:	463a      	mov	r2, r7
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd0e:	f7ff ffdc 	bl	800bcca <__sfputc_r>
 800bd12:	1c43      	adds	r3, r0, #1
 800bd14:	d1f3      	bne.n	800bcfe <__sfputs_r+0xa>
 800bd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd18 <_vfiprintf_r>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	4614      	mov	r4, r2
 800bd20:	4698      	mov	r8, r3
 800bd22:	4606      	mov	r6, r0
 800bd24:	b09d      	sub	sp, #116	@ 0x74
 800bd26:	b118      	cbz	r0, 800bd30 <_vfiprintf_r+0x18>
 800bd28:	6a03      	ldr	r3, [r0, #32]
 800bd2a:	b90b      	cbnz	r3, 800bd30 <_vfiprintf_r+0x18>
 800bd2c:	f7fc fe7e 	bl	8008a2c <__sinit>
 800bd30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd32:	07d9      	lsls	r1, r3, #31
 800bd34:	d405      	bmi.n	800bd42 <_vfiprintf_r+0x2a>
 800bd36:	89ab      	ldrh	r3, [r5, #12]
 800bd38:	059a      	lsls	r2, r3, #22
 800bd3a:	d402      	bmi.n	800bd42 <_vfiprintf_r+0x2a>
 800bd3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd3e:	f7fc ffd4 	bl	8008cea <__retarget_lock_acquire_recursive>
 800bd42:	89ab      	ldrh	r3, [r5, #12]
 800bd44:	071b      	lsls	r3, r3, #28
 800bd46:	d501      	bpl.n	800bd4c <_vfiprintf_r+0x34>
 800bd48:	692b      	ldr	r3, [r5, #16]
 800bd4a:	b99b      	cbnz	r3, 800bd74 <_vfiprintf_r+0x5c>
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f000 f938 	bl	800bfc4 <__swsetup_r>
 800bd54:	b170      	cbz	r0, 800bd74 <_vfiprintf_r+0x5c>
 800bd56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd58:	07dc      	lsls	r4, r3, #31
 800bd5a:	d504      	bpl.n	800bd66 <_vfiprintf_r+0x4e>
 800bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd60:	b01d      	add	sp, #116	@ 0x74
 800bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	0598      	lsls	r0, r3, #22
 800bd6a:	d4f7      	bmi.n	800bd5c <_vfiprintf_r+0x44>
 800bd6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd6e:	f7fc ffbd 	bl	8008cec <__retarget_lock_release_recursive>
 800bd72:	e7f3      	b.n	800bd5c <_vfiprintf_r+0x44>
 800bd74:	2300      	movs	r3, #0
 800bd76:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd78:	2320      	movs	r3, #32
 800bd7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd7e:	2330      	movs	r3, #48	@ 0x30
 800bd80:	f04f 0901 	mov.w	r9, #1
 800bd84:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd88:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bf34 <_vfiprintf_r+0x21c>
 800bd8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd90:	4623      	mov	r3, r4
 800bd92:	469a      	mov	sl, r3
 800bd94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd98:	b10a      	cbz	r2, 800bd9e <_vfiprintf_r+0x86>
 800bd9a:	2a25      	cmp	r2, #37	@ 0x25
 800bd9c:	d1f9      	bne.n	800bd92 <_vfiprintf_r+0x7a>
 800bd9e:	ebba 0b04 	subs.w	fp, sl, r4
 800bda2:	d00b      	beq.n	800bdbc <_vfiprintf_r+0xa4>
 800bda4:	465b      	mov	r3, fp
 800bda6:	4622      	mov	r2, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7ff ffa2 	bl	800bcf4 <__sfputs_r>
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	f000 80a7 	beq.w	800bf04 <_vfiprintf_r+0x1ec>
 800bdb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdb8:	445a      	add	r2, fp
 800bdba:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 809f 	beq.w	800bf04 <_vfiprintf_r+0x1ec>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdd0:	f10a 0a01 	add.w	sl, sl, #1
 800bdd4:	9304      	str	r3, [sp, #16]
 800bdd6:	9307      	str	r3, [sp, #28]
 800bdd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bddc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdde:	4654      	mov	r4, sl
 800bde0:	2205      	movs	r2, #5
 800bde2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde6:	4853      	ldr	r0, [pc, #332]	@ (800bf34 <_vfiprintf_r+0x21c>)
 800bde8:	f7fc ff81 	bl	8008cee <memchr>
 800bdec:	9a04      	ldr	r2, [sp, #16]
 800bdee:	b9d8      	cbnz	r0, 800be28 <_vfiprintf_r+0x110>
 800bdf0:	06d1      	lsls	r1, r2, #27
 800bdf2:	bf44      	itt	mi
 800bdf4:	2320      	movmi	r3, #32
 800bdf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdfa:	0713      	lsls	r3, r2, #28
 800bdfc:	bf44      	itt	mi
 800bdfe:	232b      	movmi	r3, #43	@ 0x2b
 800be00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be04:	f89a 3000 	ldrb.w	r3, [sl]
 800be08:	2b2a      	cmp	r3, #42	@ 0x2a
 800be0a:	d015      	beq.n	800be38 <_vfiprintf_r+0x120>
 800be0c:	4654      	mov	r4, sl
 800be0e:	2000      	movs	r0, #0
 800be10:	f04f 0c0a 	mov.w	ip, #10
 800be14:	9a07      	ldr	r2, [sp, #28]
 800be16:	4621      	mov	r1, r4
 800be18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be1c:	3b30      	subs	r3, #48	@ 0x30
 800be1e:	2b09      	cmp	r3, #9
 800be20:	d94b      	bls.n	800beba <_vfiprintf_r+0x1a2>
 800be22:	b1b0      	cbz	r0, 800be52 <_vfiprintf_r+0x13a>
 800be24:	9207      	str	r2, [sp, #28]
 800be26:	e014      	b.n	800be52 <_vfiprintf_r+0x13a>
 800be28:	eba0 0308 	sub.w	r3, r0, r8
 800be2c:	fa09 f303 	lsl.w	r3, r9, r3
 800be30:	4313      	orrs	r3, r2
 800be32:	46a2      	mov	sl, r4
 800be34:	9304      	str	r3, [sp, #16]
 800be36:	e7d2      	b.n	800bdde <_vfiprintf_r+0xc6>
 800be38:	9b03      	ldr	r3, [sp, #12]
 800be3a:	1d19      	adds	r1, r3, #4
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	9103      	str	r1, [sp, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	bfbb      	ittet	lt
 800be44:	425b      	neglt	r3, r3
 800be46:	f042 0202 	orrlt.w	r2, r2, #2
 800be4a:	9307      	strge	r3, [sp, #28]
 800be4c:	9307      	strlt	r3, [sp, #28]
 800be4e:	bfb8      	it	lt
 800be50:	9204      	strlt	r2, [sp, #16]
 800be52:	7823      	ldrb	r3, [r4, #0]
 800be54:	2b2e      	cmp	r3, #46	@ 0x2e
 800be56:	d10a      	bne.n	800be6e <_vfiprintf_r+0x156>
 800be58:	7863      	ldrb	r3, [r4, #1]
 800be5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be5c:	d132      	bne.n	800bec4 <_vfiprintf_r+0x1ac>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	3402      	adds	r4, #2
 800be62:	1d1a      	adds	r2, r3, #4
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	9203      	str	r2, [sp, #12]
 800be68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be6c:	9305      	str	r3, [sp, #20]
 800be6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bf38 <_vfiprintf_r+0x220>
 800be72:	2203      	movs	r2, #3
 800be74:	4650      	mov	r0, sl
 800be76:	7821      	ldrb	r1, [r4, #0]
 800be78:	f7fc ff39 	bl	8008cee <memchr>
 800be7c:	b138      	cbz	r0, 800be8e <_vfiprintf_r+0x176>
 800be7e:	2240      	movs	r2, #64	@ 0x40
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	eba0 000a 	sub.w	r0, r0, sl
 800be86:	4082      	lsls	r2, r0
 800be88:	4313      	orrs	r3, r2
 800be8a:	3401      	adds	r4, #1
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be92:	2206      	movs	r2, #6
 800be94:	4829      	ldr	r0, [pc, #164]	@ (800bf3c <_vfiprintf_r+0x224>)
 800be96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be9a:	f7fc ff28 	bl	8008cee <memchr>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d03f      	beq.n	800bf22 <_vfiprintf_r+0x20a>
 800bea2:	4b27      	ldr	r3, [pc, #156]	@ (800bf40 <_vfiprintf_r+0x228>)
 800bea4:	bb1b      	cbnz	r3, 800beee <_vfiprintf_r+0x1d6>
 800bea6:	9b03      	ldr	r3, [sp, #12]
 800bea8:	3307      	adds	r3, #7
 800beaa:	f023 0307 	bic.w	r3, r3, #7
 800beae:	3308      	adds	r3, #8
 800beb0:	9303      	str	r3, [sp, #12]
 800beb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beb4:	443b      	add	r3, r7
 800beb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800beb8:	e76a      	b.n	800bd90 <_vfiprintf_r+0x78>
 800beba:	460c      	mov	r4, r1
 800bebc:	2001      	movs	r0, #1
 800bebe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bec2:	e7a8      	b.n	800be16 <_vfiprintf_r+0xfe>
 800bec4:	2300      	movs	r3, #0
 800bec6:	f04f 0c0a 	mov.w	ip, #10
 800beca:	4619      	mov	r1, r3
 800becc:	3401      	adds	r4, #1
 800bece:	9305      	str	r3, [sp, #20]
 800bed0:	4620      	mov	r0, r4
 800bed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bed6:	3a30      	subs	r2, #48	@ 0x30
 800bed8:	2a09      	cmp	r2, #9
 800beda:	d903      	bls.n	800bee4 <_vfiprintf_r+0x1cc>
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d0c6      	beq.n	800be6e <_vfiprintf_r+0x156>
 800bee0:	9105      	str	r1, [sp, #20]
 800bee2:	e7c4      	b.n	800be6e <_vfiprintf_r+0x156>
 800bee4:	4604      	mov	r4, r0
 800bee6:	2301      	movs	r3, #1
 800bee8:	fb0c 2101 	mla	r1, ip, r1, r2
 800beec:	e7f0      	b.n	800bed0 <_vfiprintf_r+0x1b8>
 800beee:	ab03      	add	r3, sp, #12
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	462a      	mov	r2, r5
 800bef4:	4630      	mov	r0, r6
 800bef6:	4b13      	ldr	r3, [pc, #76]	@ (800bf44 <_vfiprintf_r+0x22c>)
 800bef8:	a904      	add	r1, sp, #16
 800befa:	f7fb ff45 	bl	8007d88 <_printf_float>
 800befe:	4607      	mov	r7, r0
 800bf00:	1c78      	adds	r0, r7, #1
 800bf02:	d1d6      	bne.n	800beb2 <_vfiprintf_r+0x19a>
 800bf04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf06:	07d9      	lsls	r1, r3, #31
 800bf08:	d405      	bmi.n	800bf16 <_vfiprintf_r+0x1fe>
 800bf0a:	89ab      	ldrh	r3, [r5, #12]
 800bf0c:	059a      	lsls	r2, r3, #22
 800bf0e:	d402      	bmi.n	800bf16 <_vfiprintf_r+0x1fe>
 800bf10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf12:	f7fc feeb 	bl	8008cec <__retarget_lock_release_recursive>
 800bf16:	89ab      	ldrh	r3, [r5, #12]
 800bf18:	065b      	lsls	r3, r3, #25
 800bf1a:	f53f af1f 	bmi.w	800bd5c <_vfiprintf_r+0x44>
 800bf1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf20:	e71e      	b.n	800bd60 <_vfiprintf_r+0x48>
 800bf22:	ab03      	add	r3, sp, #12
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	462a      	mov	r2, r5
 800bf28:	4630      	mov	r0, r6
 800bf2a:	4b06      	ldr	r3, [pc, #24]	@ (800bf44 <_vfiprintf_r+0x22c>)
 800bf2c:	a904      	add	r1, sp, #16
 800bf2e:	f7fc f9c9 	bl	80082c4 <_printf_i>
 800bf32:	e7e4      	b.n	800befe <_vfiprintf_r+0x1e6>
 800bf34:	0800e6ad 	.word	0x0800e6ad
 800bf38:	0800e6b3 	.word	0x0800e6b3
 800bf3c:	0800e6b7 	.word	0x0800e6b7
 800bf40:	08007d89 	.word	0x08007d89
 800bf44:	0800bcf5 	.word	0x0800bcf5

0800bf48 <__swbuf_r>:
 800bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4a:	460e      	mov	r6, r1
 800bf4c:	4614      	mov	r4, r2
 800bf4e:	4605      	mov	r5, r0
 800bf50:	b118      	cbz	r0, 800bf5a <__swbuf_r+0x12>
 800bf52:	6a03      	ldr	r3, [r0, #32]
 800bf54:	b90b      	cbnz	r3, 800bf5a <__swbuf_r+0x12>
 800bf56:	f7fc fd69 	bl	8008a2c <__sinit>
 800bf5a:	69a3      	ldr	r3, [r4, #24]
 800bf5c:	60a3      	str	r3, [r4, #8]
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	071a      	lsls	r2, r3, #28
 800bf62:	d501      	bpl.n	800bf68 <__swbuf_r+0x20>
 800bf64:	6923      	ldr	r3, [r4, #16]
 800bf66:	b943      	cbnz	r3, 800bf7a <__swbuf_r+0x32>
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f000 f82a 	bl	800bfc4 <__swsetup_r>
 800bf70:	b118      	cbz	r0, 800bf7a <__swbuf_r+0x32>
 800bf72:	f04f 37ff 	mov.w	r7, #4294967295
 800bf76:	4638      	mov	r0, r7
 800bf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	6922      	ldr	r2, [r4, #16]
 800bf7e:	b2f6      	uxtb	r6, r6
 800bf80:	1a98      	subs	r0, r3, r2
 800bf82:	6963      	ldr	r3, [r4, #20]
 800bf84:	4637      	mov	r7, r6
 800bf86:	4283      	cmp	r3, r0
 800bf88:	dc05      	bgt.n	800bf96 <__swbuf_r+0x4e>
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	f7ff fa69 	bl	800b464 <_fflush_r>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d1ed      	bne.n	800bf72 <__swbuf_r+0x2a>
 800bf96:	68a3      	ldr	r3, [r4, #8]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	60a3      	str	r3, [r4, #8]
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	6022      	str	r2, [r4, #0]
 800bfa2:	701e      	strb	r6, [r3, #0]
 800bfa4:	6962      	ldr	r2, [r4, #20]
 800bfa6:	1c43      	adds	r3, r0, #1
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d004      	beq.n	800bfb6 <__swbuf_r+0x6e>
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	07db      	lsls	r3, r3, #31
 800bfb0:	d5e1      	bpl.n	800bf76 <__swbuf_r+0x2e>
 800bfb2:	2e0a      	cmp	r6, #10
 800bfb4:	d1df      	bne.n	800bf76 <__swbuf_r+0x2e>
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f7ff fa53 	bl	800b464 <_fflush_r>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d0d9      	beq.n	800bf76 <__swbuf_r+0x2e>
 800bfc2:	e7d6      	b.n	800bf72 <__swbuf_r+0x2a>

0800bfc4 <__swsetup_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4b29      	ldr	r3, [pc, #164]	@ (800c06c <__swsetup_r+0xa8>)
 800bfc8:	4605      	mov	r5, r0
 800bfca:	6818      	ldr	r0, [r3, #0]
 800bfcc:	460c      	mov	r4, r1
 800bfce:	b118      	cbz	r0, 800bfd8 <__swsetup_r+0x14>
 800bfd0:	6a03      	ldr	r3, [r0, #32]
 800bfd2:	b90b      	cbnz	r3, 800bfd8 <__swsetup_r+0x14>
 800bfd4:	f7fc fd2a 	bl	8008a2c <__sinit>
 800bfd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfdc:	0719      	lsls	r1, r3, #28
 800bfde:	d422      	bmi.n	800c026 <__swsetup_r+0x62>
 800bfe0:	06da      	lsls	r2, r3, #27
 800bfe2:	d407      	bmi.n	800bff4 <__swsetup_r+0x30>
 800bfe4:	2209      	movs	r2, #9
 800bfe6:	602a      	str	r2, [r5, #0]
 800bfe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfec:	f04f 30ff 	mov.w	r0, #4294967295
 800bff0:	81a3      	strh	r3, [r4, #12]
 800bff2:	e033      	b.n	800c05c <__swsetup_r+0x98>
 800bff4:	0758      	lsls	r0, r3, #29
 800bff6:	d512      	bpl.n	800c01e <__swsetup_r+0x5a>
 800bff8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bffa:	b141      	cbz	r1, 800c00e <__swsetup_r+0x4a>
 800bffc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c000:	4299      	cmp	r1, r3
 800c002:	d002      	beq.n	800c00a <__swsetup_r+0x46>
 800c004:	4628      	mov	r0, r5
 800c006:	f7fd fcef 	bl	80099e8 <_free_r>
 800c00a:	2300      	movs	r3, #0
 800c00c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c00e:	89a3      	ldrh	r3, [r4, #12]
 800c010:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c014:	81a3      	strh	r3, [r4, #12]
 800c016:	2300      	movs	r3, #0
 800c018:	6063      	str	r3, [r4, #4]
 800c01a:	6923      	ldr	r3, [r4, #16]
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	89a3      	ldrh	r3, [r4, #12]
 800c020:	f043 0308 	orr.w	r3, r3, #8
 800c024:	81a3      	strh	r3, [r4, #12]
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	b94b      	cbnz	r3, 800c03e <__swsetup_r+0x7a>
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c034:	d003      	beq.n	800c03e <__swsetup_r+0x7a>
 800c036:	4621      	mov	r1, r4
 800c038:	4628      	mov	r0, r5
 800c03a:	f000 f882 	bl	800c142 <__smakebuf_r>
 800c03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c042:	f013 0201 	ands.w	r2, r3, #1
 800c046:	d00a      	beq.n	800c05e <__swsetup_r+0x9a>
 800c048:	2200      	movs	r2, #0
 800c04a:	60a2      	str	r2, [r4, #8]
 800c04c:	6962      	ldr	r2, [r4, #20]
 800c04e:	4252      	negs	r2, r2
 800c050:	61a2      	str	r2, [r4, #24]
 800c052:	6922      	ldr	r2, [r4, #16]
 800c054:	b942      	cbnz	r2, 800c068 <__swsetup_r+0xa4>
 800c056:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c05a:	d1c5      	bne.n	800bfe8 <__swsetup_r+0x24>
 800c05c:	bd38      	pop	{r3, r4, r5, pc}
 800c05e:	0799      	lsls	r1, r3, #30
 800c060:	bf58      	it	pl
 800c062:	6962      	ldrpl	r2, [r4, #20]
 800c064:	60a2      	str	r2, [r4, #8]
 800c066:	e7f4      	b.n	800c052 <__swsetup_r+0x8e>
 800c068:	2000      	movs	r0, #0
 800c06a:	e7f7      	b.n	800c05c <__swsetup_r+0x98>
 800c06c:	20000018 	.word	0x20000018

0800c070 <_raise_r>:
 800c070:	291f      	cmp	r1, #31
 800c072:	b538      	push	{r3, r4, r5, lr}
 800c074:	4605      	mov	r5, r0
 800c076:	460c      	mov	r4, r1
 800c078:	d904      	bls.n	800c084 <_raise_r+0x14>
 800c07a:	2316      	movs	r3, #22
 800c07c:	6003      	str	r3, [r0, #0]
 800c07e:	f04f 30ff 	mov.w	r0, #4294967295
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c086:	b112      	cbz	r2, 800c08e <_raise_r+0x1e>
 800c088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c08c:	b94b      	cbnz	r3, 800c0a2 <_raise_r+0x32>
 800c08e:	4628      	mov	r0, r5
 800c090:	f000 f830 	bl	800c0f4 <_getpid_r>
 800c094:	4622      	mov	r2, r4
 800c096:	4601      	mov	r1, r0
 800c098:	4628      	mov	r0, r5
 800c09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c09e:	f000 b817 	b.w	800c0d0 <_kill_r>
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d00a      	beq.n	800c0bc <_raise_r+0x4c>
 800c0a6:	1c59      	adds	r1, r3, #1
 800c0a8:	d103      	bne.n	800c0b2 <_raise_r+0x42>
 800c0aa:	2316      	movs	r3, #22
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	2001      	movs	r0, #1
 800c0b0:	e7e7      	b.n	800c082 <_raise_r+0x12>
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0ba:	4798      	blx	r3
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7e0      	b.n	800c082 <_raise_r+0x12>

0800c0c0 <raise>:
 800c0c0:	4b02      	ldr	r3, [pc, #8]	@ (800c0cc <raise+0xc>)
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	6818      	ldr	r0, [r3, #0]
 800c0c6:	f7ff bfd3 	b.w	800c070 <_raise_r>
 800c0ca:	bf00      	nop
 800c0cc:	20000018 	.word	0x20000018

0800c0d0 <_kill_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4d06      	ldr	r5, [pc, #24]	@ (800c0f0 <_kill_r+0x20>)
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	4608      	mov	r0, r1
 800c0da:	4611      	mov	r1, r2
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	f7fb fb20 	bl	8007722 <_kill>
 800c0e2:	1c43      	adds	r3, r0, #1
 800c0e4:	d102      	bne.n	800c0ec <_kill_r+0x1c>
 800c0e6:	682b      	ldr	r3, [r5, #0]
 800c0e8:	b103      	cbz	r3, 800c0ec <_kill_r+0x1c>
 800c0ea:	6023      	str	r3, [r4, #0]
 800c0ec:	bd38      	pop	{r3, r4, r5, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20000bb4 	.word	0x20000bb4

0800c0f4 <_getpid_r>:
 800c0f4:	f7fb bb0e 	b.w	8007714 <_getpid>

0800c0f8 <__swhatbuf_r>:
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c100:	4615      	mov	r5, r2
 800c102:	2900      	cmp	r1, #0
 800c104:	461e      	mov	r6, r3
 800c106:	b096      	sub	sp, #88	@ 0x58
 800c108:	da0c      	bge.n	800c124 <__swhatbuf_r+0x2c>
 800c10a:	89a3      	ldrh	r3, [r4, #12]
 800c10c:	2100      	movs	r1, #0
 800c10e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c112:	bf14      	ite	ne
 800c114:	2340      	movne	r3, #64	@ 0x40
 800c116:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c11a:	2000      	movs	r0, #0
 800c11c:	6031      	str	r1, [r6, #0]
 800c11e:	602b      	str	r3, [r5, #0]
 800c120:	b016      	add	sp, #88	@ 0x58
 800c122:	bd70      	pop	{r4, r5, r6, pc}
 800c124:	466a      	mov	r2, sp
 800c126:	f000 f849 	bl	800c1bc <_fstat_r>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	dbed      	blt.n	800c10a <__swhatbuf_r+0x12>
 800c12e:	9901      	ldr	r1, [sp, #4]
 800c130:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c134:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c138:	4259      	negs	r1, r3
 800c13a:	4159      	adcs	r1, r3
 800c13c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c140:	e7eb      	b.n	800c11a <__swhatbuf_r+0x22>

0800c142 <__smakebuf_r>:
 800c142:	898b      	ldrh	r3, [r1, #12]
 800c144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c146:	079d      	lsls	r5, r3, #30
 800c148:	4606      	mov	r6, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	d507      	bpl.n	800c15e <__smakebuf_r+0x1c>
 800c14e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	6123      	str	r3, [r4, #16]
 800c156:	2301      	movs	r3, #1
 800c158:	6163      	str	r3, [r4, #20]
 800c15a:	b003      	add	sp, #12
 800c15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c15e:	466a      	mov	r2, sp
 800c160:	ab01      	add	r3, sp, #4
 800c162:	f7ff ffc9 	bl	800c0f8 <__swhatbuf_r>
 800c166:	9f00      	ldr	r7, [sp, #0]
 800c168:	4605      	mov	r5, r0
 800c16a:	4639      	mov	r1, r7
 800c16c:	4630      	mov	r0, r6
 800c16e:	f7fb fce1 	bl	8007b34 <_malloc_r>
 800c172:	b948      	cbnz	r0, 800c188 <__smakebuf_r+0x46>
 800c174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c178:	059a      	lsls	r2, r3, #22
 800c17a:	d4ee      	bmi.n	800c15a <__smakebuf_r+0x18>
 800c17c:	f023 0303 	bic.w	r3, r3, #3
 800c180:	f043 0302 	orr.w	r3, r3, #2
 800c184:	81a3      	strh	r3, [r4, #12]
 800c186:	e7e2      	b.n	800c14e <__smakebuf_r+0xc>
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c18e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c192:	81a3      	strh	r3, [r4, #12]
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	6020      	str	r0, [r4, #0]
 800c198:	b15b      	cbz	r3, 800c1b2 <__smakebuf_r+0x70>
 800c19a:	4630      	mov	r0, r6
 800c19c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1a0:	f000 f81e 	bl	800c1e0 <_isatty_r>
 800c1a4:	b128      	cbz	r0, 800c1b2 <__smakebuf_r+0x70>
 800c1a6:	89a3      	ldrh	r3, [r4, #12]
 800c1a8:	f023 0303 	bic.w	r3, r3, #3
 800c1ac:	f043 0301 	orr.w	r3, r3, #1
 800c1b0:	81a3      	strh	r3, [r4, #12]
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	431d      	orrs	r5, r3
 800c1b6:	81a5      	strh	r5, [r4, #12]
 800c1b8:	e7cf      	b.n	800c15a <__smakebuf_r+0x18>
	...

0800c1bc <_fstat_r>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	2300      	movs	r3, #0
 800c1c0:	4d06      	ldr	r5, [pc, #24]	@ (800c1dc <_fstat_r+0x20>)
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	602b      	str	r3, [r5, #0]
 800c1ca:	f7fb fb09 	bl	80077e0 <_fstat>
 800c1ce:	1c43      	adds	r3, r0, #1
 800c1d0:	d102      	bne.n	800c1d8 <_fstat_r+0x1c>
 800c1d2:	682b      	ldr	r3, [r5, #0]
 800c1d4:	b103      	cbz	r3, 800c1d8 <_fstat_r+0x1c>
 800c1d6:	6023      	str	r3, [r4, #0]
 800c1d8:	bd38      	pop	{r3, r4, r5, pc}
 800c1da:	bf00      	nop
 800c1dc:	20000bb4 	.word	0x20000bb4

0800c1e0 <_isatty_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4d05      	ldr	r5, [pc, #20]	@ (800c1fc <_isatty_r+0x1c>)
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	4608      	mov	r0, r1
 800c1ea:	602b      	str	r3, [r5, #0]
 800c1ec:	f7fb fb07 	bl	80077fe <_isatty>
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	d102      	bne.n	800c1fa <_isatty_r+0x1a>
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	b103      	cbz	r3, 800c1fa <_isatty_r+0x1a>
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	20000bb4 	.word	0x20000bb4

0800c200 <_init>:
 800c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c202:	bf00      	nop
 800c204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c206:	bc08      	pop	{r3}
 800c208:	469e      	mov	lr, r3
 800c20a:	4770      	bx	lr

0800c20c <_fini>:
 800c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20e:	bf00      	nop
 800c210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c212:	bc08      	pop	{r3}
 800c214:	469e      	mov	lr, r3
 800c216:	4770      	bx	lr
